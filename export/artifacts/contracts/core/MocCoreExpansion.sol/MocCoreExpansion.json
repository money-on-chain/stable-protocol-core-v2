{
  "contractName": "MocCoreExpansion",
  "sourceName": "contracts/core/MocCoreExpansion.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQacSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQtpSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tcAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTCtoRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToMint_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoRedeem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFluxCapacitorOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Liquidated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cglb_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "covThrld_",
          "type": "uint256"
        }
      ],
      "name": "LowCoverage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_",
          "type": "uint256"
        }
      ],
      "name": "MaxFluxCapacitorOperationReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dataProviderAddress_",
          "type": "address"
        }
      ],
      "name": "MissingProviderData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceProviderAddress_",
          "type": "address"
        }
      ],
      "name": "MissingProviderPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedChanger",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhenPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhenLiquidated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhilePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeggedTokenAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACtoRedeem_",
          "type": "uint256"
        }
      ],
      "name": "QacBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QacNeededMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        }
      ],
      "name": "QtcBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "QtpBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unstoppable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        }
      ],
      "name": "LiqTPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "PeggedTokenChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTPema_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTPema_",
          "type": "uint256"
        }
      ],
      "name": "TPemaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "absoluteAccumulator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "addPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appreciationFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcCtargemaCA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ctargemaCA",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGovernor",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "differentialAccumulator",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "editPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emaCalculationBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "evalLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRetainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPriceProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        }
      ],
      "name": "getPACtp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidationReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastOperationBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mocACBalance",
          "type": "uint256"
        }
      ],
      "name": "liqRedeemTPTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeStoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeUnstoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAbsoluteOpProvider",
      "outputs": [
        {
          "internalType": "contract IDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOpDiffProvider",
      "outputs": [
        {
          "internalType": "contract IDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxQACToMintTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxQAC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxQACToRedeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxQAC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.MintTCandTPParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "mintTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeTokenTotalNeeded",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qACFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACVendorMarkup",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeTokenVendorMarkup",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCommons.FeeCalcs",
          "name": "feeCalcs",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocAppreciationBeneficiaryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocFeeFlowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocVendors",
      "outputs": [
        {
          "internalType": "contract MocVendors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nACcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nTCcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEmaCalculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTCInterestPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pegContainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nTP",
          "type": "uint256"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "peggedTokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "qACLockedInPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.RedeemTCandTPParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "redeemTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtoRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPtoRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeTokenTotalNeeded",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qACFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACVendorMarkup",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeTokenVendorMarkup",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCommons.FeeCalcs",
          "name": "feeCalcs",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "appreciationFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAppreciationFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bes_",
          "type": "uint256"
        }
      ],
      "name": "setBes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "decayBlockSpan_",
          "type": "uint256"
        }
      ],
      "name": "setDecayBlockSpan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockSpan_",
          "type": "uint256"
        }
      ],
      "name": "setEmaCalculationBlockSpan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRetainer_",
          "type": "uint256"
        }
      ],
      "name": "setFeeRetainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeTokenAddress_",
          "type": "address"
        }
      ],
      "name": "setFeeTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeTokenPct_",
          "type": "uint256"
        }
      ],
      "name": "setFeeTokenPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeTokenPriceProviderAddress_",
          "type": "address"
        }
      ],
      "name": "setFeeTokenPriceProviderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "liqEnabled_",
          "type": "bool"
        }
      ],
      "name": "setLiqEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liqThrld_",
          "type": "uint256"
        }
      ],
      "name": "setLiqThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maxAbsoluteOpProviderAddress_",
          "type": "address"
        }
      ],
      "name": "setMaxAbsoluteOpProviderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maxOpDiffProviderAddress_",
          "type": "address"
        }
      ],
      "name": "setMaxOpDiffProviderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setMintTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocAppreciationBeneficiaryAddress_",
          "type": "address"
        }
      ],
      "name": "setMocAppreciationBeneficiaryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeFlowAddress_",
          "type": "address"
        }
      ],
      "name": "setMocFeeFlowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocQueueAddress_",
          "type": "address"
        }
      ],
      "name": "setMocQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser_",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protThrld_",
          "type": "uint256"
        }
      ],
      "name": "setProtThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setRedeemTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "successFee_",
          "type": "uint256"
        }
      ],
      "name": "setSuccessFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTCforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTCforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTCFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTCFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tcInterestCollectorAddress_",
          "type": "address"
        }
      ],
      "name": "setTCInterestCollectorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcInterestPaymentBlockSpan_",
          "type": "uint256"
        }
      ],
      "name": "setTCInterestPaymentBlockSpan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcInterestRate_",
          "type": "uint256"
        }
      ],
      "name": "setTCInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcMintFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcRedeemFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldCalculateEma",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stoppable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTCforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTPmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTCforTPParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "swapTCforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACSurcharges",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeTokenTotalNeeded",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qACFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACVendorMarkup",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeTokenVendorMarkup",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCommons.FeeCalcs",
          "name": "feeCalcs",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTCFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTCmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTPforTCParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "swapTPforTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACSurcharges",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeTokenTotalNeeded",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qACFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACVendorMarkup",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeTokenVendorMarkup",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCommons.FeeCalcs",
          "name": "feeCalcs",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tpTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTPmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTPforTPParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "swapTPforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACSurcharges",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeTokenTotalNeeded",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qACFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACVendorMarkup",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qFeeTokenVendorMarkup",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCommons.FeeCalcs",
          "name": "feeCalcs",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcInterestCollectorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcInterestPaymentBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcToken",
      "outputs": [
        {
          "internalType": "contract MocTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpCtarg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpEma",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ema",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpLiqPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tpMintFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tpRedeemFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpTokens",
      "outputs": [
        {
          "internalType": "contract IMocRC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateEmas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "0x60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082160362000053575b604051613f209081620000e78239608051818181611edc0152818161204d01526122d30152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b600060e08135811c90816301dde6ef146127d857816301f1b68414612790578163073763b91461276c5781630c340a24146127435781630c36d897146127245781630d6ac463146126de5781630db49656146126bf5781630e0a8fd21461269b5781630f1e5e2b1461265557816313ed7ba51461262b5781631867e2f51461260c5781631fe6a7ad146125d25781632069f753146125ae57816323b98cde1461258757816324ffaba31461254957816327eab2a1146125035781632a20d57d146124e45781632c43bd3b146124c05781632d88af4a146124695781632ded50f01461244a578163333431fd1461242b57816333421c381461233a5781633659cfe6146122a15781633915edcb146122725781633bc4ac0a1461224e5781633cfb09ef146122085781633f4ba83a1461218d578163407f0e341461216e5781634b746001146121215781634d977e78146121025781634e1f907a146120d85781634f0f27ee146120b95781634f1ef28614611fc55781635210570c14611f9f57816352d1902d14611ec9578163543aeb4814611ea55781635860ee6314611e865781635c975abb14611e605781635cfbe57814611e4157816360009e0b14611e17578163647846a514611ded57816364ec230a14611dc9578163662013f414611da55781636827435714611d7c5781636845c44514611b7d5781636b5488df14611b5e5781636f30471f14611b3f5781637071346814611b1b578163735d396014611ad557816373e28af914611ab15781637554fffd14611a925781637622805514611a735781637750ba0c14611a4f57816379f9a91c14611a305781637a193c3114611a115781637a4ff1d9146119ed5781637a727fe8146119ce5781637af5758c146119aa5781637b5a17ae146117df5781637cba2383146117bb5781637d8e03141461177e5781637f01c715146117545781637f13b998146117205781637f4a4fe0146117015781638456cb591461166a57816385bf9593146116245781638cfa4241146116055781638e2bdb86146115db5781639853c35a146115b15781639ad6659d146115775781639cabfc001461152a5781639fd0506d146114fd578163a8e9ac30146114db578163aea038dc146114bc578163b5e9ea8c14611492578163b9fa641314611473578163bb4872de14611450578163becaca6b1461142c578163c00f538d14611408578163c84353c9146113e4578163cf351c1d1461139e578163d1a0faa014611382578163d6af11da14611340578163d87aab6f14611321578163d8db6f5a146112db578163d9b6c2e514611153578163db79607214610edb578163ddb6d19014610e9d578163e1e121da14610c41578163e44bb51214610a3f578163e4c0aaf4146109fa578163e6b1627c146109b7578163e7c2597814610993578163ee1f438f14610969578163f13f40541461093f578163f26114aa14610750578163f28087781461072c578163f30b56141461070d578163f375cfba146106ee578163f5571e011461054657508063fa6e83bd14610527578063fadda424146104ae5763fda70f8b1461048d57600080fd5b346104ab57806003193601126104ab57602061013c54604051908152f35b80fd5b50346104ab5760203660031901126104ab576001600160a01b036004358181168103610522576104ea6104e2600192613106565b61013761283e565b500154166104f781613185565b9190911561050a57602082604051908152f35b60249060405190637f6e4db960e01b82526004820152fd5b600080fd5b50346104ab57806003193601126104ab57602061013a54604051908152f35b36600319011290506104ab5761055d3660046128ae565b9061056661342d565b5061056f6131e7565b906105f060018060a01b039161058783865116613106565b926105aa6105958587612dc7565b51956105a187876135d8565b61014954613595565b6105ea60208996939601976105e56105c3828b51613ec6565b976105e06105d68c516101345490612eff565b9561013154612fc4565b612fc4565b612eff565b90613ec6565b95604081015180881080156106e6575b6106c8575061062182608083015116858460c08501511661013f5492613658565b96919790956060840151808a116106a957509261065886610662969460a09461065160016106a59d9c9b996138f0565b51906139aa565b015116908761351e565b604051948594859293606091959460c09360e086019786526020860152604085015280518285015260208101516080850152604081015160a08501520151910152565b0390f35b604490895160405191630b63f1a760e01b835260048301526024820152fd5b604490886040519163f577bef560e01b835260048301526024820152fd5b508715610600565b82346104ab57806003193601126104ab57602061014154604051908152f35b82346104ab57806003193601126104ab57602061013154604051908152f35b82346104ab5760203660031901126104ab57610746613e17565b60043561013c5580f35b90503461093b573660031901126104ab576004356001600160a01b0381811691829003610522578183526101366020526040832060ff60016040519261079760408561285a565b8054845201541615801560208301526108ed57519060243590808216809203610522576101379060016107ca858461283e565b500154168203610873575b847f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e36004858761082661080a836101486127fc565b6044929192359083549060031b91821b91600019901b19161790565b90558085526101446020526064356040862055845261014560205260843560408520556108558161018e61283e565b50600160c43591015561086d604051928392836133c5565b0390a180f35b9190926040516359e02dd760e01b8152604081600481885afa9081156109305786916108ff575b50156108ed577f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e39360016108d08460049661283e565b5001906001600160601b0360a01b825416179055928192506107d5565b60405163e6c4247b60e01b8152600490fd5b610921915060403d604011610929575b610919818361285a565b81019061316b565b90503861089a565b503d61090f565b6040513d88823e3d90fd5b5080fd5b82346104ab57806003193601126104ab57610130546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610152546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602060ff61014b54166040519015158152f35b82346104ab5760203660031901126104ab576004359061018e9081548310156104ab5760406109e6848461283e565b506001815491015482519182526020820152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57610a29613e17565b6001600160601b0360a01b609754161760975580f35b8260c03660031901126104ab5760405190610a5b60c08361285a565b6001600160a01b039060043582811681036105225783526020830160243581526040840192604435845260643590808216820361052257606086019182526084358181168103610522576080870190815260a4359482861686036105225760a08801958652610ac861342d565b50610add83610ad56131e7565b995116613106565b91610b00610aeb848b612dc7565b5199610af78b866135d8565b61014a54613595565b99610b1788519b610b118388613c22565b93613629565b91670de0b6b3a763ffff198101908111610c2d5781610b39610b3e928e612eff565b612f12565b98670de0b6b3a764000092838b02908b820485148c151715610c1757610b6391612f12565b9b838102938185041490151715610c1757610bae9787610b91610b8a610ba3958397612f12565b809d612ddb565b98899251169251166101425492613658565b989187989198612ddb565b9951808b11610bf957508915610be757610bdd61066296610bd2866106a59c6138f0565b83855116908d61351e565b5191511692613454565b60405163f3e39b5d60e01b8152600490fd5b6044908b60405191630b63f1a760e01b835260048301526024820152fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b85526011600452602485fd5b905061010080600319360112610e9957610c5e604051918261285a565b6004356001600160a01b03811681036105225781526024356001600160a01b038116810361052257602082019081526044356040830152606082019360643585526080830191608435835260a4359460018060a01b03861686036105225760a0850195865260c4356001600160a01b03811681036105225760c086015260e435906001600160a01b0382168203610522578501908152610cfc61342d565b50845182516001600160a01b03908116911614610e87578451610d3b90610d2b906001600160a01b0316613106565b92516001600160a01b0316613106565b95610d458361312f565b90610d4f8861312f565b610d5983866135d8565b610d63818a6135d8565b610d718360408a0151613ec6565b92610d8481610b398460408d0151612eff565b9a51808c108015610e7f575b610e615750908a8a610dd796959493610db3610dac8584613c22565b918a613c22565b10610e32575b50509051925161013e54936001600160a01b03918216925016613658565b959196909451808811610e1357509160408492610e0b610662956106a59998978c60018060a01b0360c08601511692613454565b0151906139aa565b604490875160405191630b63f1a760e01b835260048301526024820152fd5b610e51610e5993610e41613d83565b610e49613cc5565b819391613595565b949093613a95565b388a8a610db9565b6044908c6040519163272e3f5960e21b835260048301526024820152fd5b508b15610d90565b604051632a9ffab760e21b8152600490fd5b8280fd5b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257816040916020935261014583522054604051908152f35b90503461093b573660031901126104ab576004356001600160a01b03818116918290036105225760248035828116809103610522578385526101369360209085825260019260ff8460408a20015416611141576101359586549785604051610f4460408261285a565b8a815286810192828452868d52875260408c2090518155019051151560ff801983541691161790558654600160401b978882101561112e5790610f8b9187820181556127fc565b81549060031b908386831b921b1916179055604051610fab60408261285a565b8981528481019283526101378054908982101561111b5790610fd191888201815561283e565b91909161110857908691518155019151166001600160601b0360a01b82541617905561100160443561014861301b565b808752610144825260643560408820558652610145815260843560408720556040519061102f60408361285a565b60a4358252810160c435815261018e805490868210156110f5579061105891858201815561283e565b9290926110e25790839151835551910155610150918254938410156110d05750827f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e394926110ab926004950181556127fc565b50506110c16110b98261312f565b61015161301b565b61086d604051928392836133c5565b634e487b7160e01b8652604160045285fd5b634e487b7160e01b885260048890528488fd5b634e487b7160e01b895260416004528589fd5b634e487b7160e01b8b5260048b9052878bfd5b634e487b7160e01b8c526041600452888cfd5b634e487b7160e01b8b526041600452878bfd5b604051633458f6c560e01b8152600490fd5b36600319011290506104ab5761116a3660046128ae565b9061117361342d565b5061117c613d83565b611184613cc5565b929060018060a01b039261119a84845116613106565b906111ba6111a88388612dc7565b51966111b488856135d8565b84613595565b602086979297019687516111cf838389613bda565b8181106112bd575050906111fb918851670de0b6b3a76400009384916111f58585613629565b90612eff565b04968715610be7576112379361122e6112248d6105e58e516111f5886105e08b61013154612fc4565b6101345490612f12565b049a8b88613a95565b604085015180881061129f575061126081608087015116858360c0890151166101405492613658565b96919790956060830151808a116106a957509260a08593611296858d956112906106629a6106a59e9d9c9a6138f0565b51613a34565b01511692613454565b604490886040519163272e3f5960e21b835260048301526024820152fd5b604492506040519163a5db715d60e01b835260048301526024820152fd5b82346104ab5760203660031901126104ab576004356001600160a01b038116908190036105225761130a613e17565b61015280546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57602061015554604051908152f35b82346104ab57806003193601126104ab57602061137a6113606001613221565b61137461136d8284612f32565b9183612e76565b91613268565b604051908152f35b82346104ab57806003193601126104ab5761139b613d83565b80f35b82346104ab5760203660031901126104ab576004356001600160a01b03811690819003610522576113cd613e17565b61012f80546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576113fe613e17565b60043561014c5580f35b82346104ab5760203660031901126104ab57611422613e17565b60043561013d5580f35b82346104ab5760203660031901126104ab57611446613e17565b6004356101395580f35b82346104ab57806003193601126104ab57602060ff60ca54166040519015158152f35b82346104ab57806003193601126104ab57602061015b54604051908152f35b82346104ab57806003193601126104ab57610153546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061013d54604051908152f35b82346104ab57806003193601126104ab57602061018f54431015604051908152f35b82346104ab57806003193601126104ab5760ca5460405160109190911c6001600160a01b03168152602090f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257604082819281526101366020522060ff6001825492015416825191825215156020820152f35b82346104ab57806003193601126104ab5760206115a361159d6115986131e7565b612de8565b90612fa6565b61014a541015604051908152f35b82346104ab57806003193601126104ab57610146546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610158546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014a54604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257611653613e17565b61015380546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57611683613ea5565b60ca54601081901c6001600160a01b031633036116ef5760ff8116156116dd576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b82346104ab57806003193601126104ab57602061015a54604051908152f35b82346104ab57806003193601126104ab57602061137a6117406001613221565b61137461174d8284612e76565b9183612f32565b82346104ab57806003193601126104ab576101c3546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab57600435906101489081548310156104ab5760206117ad84846127fc565b90546040519160031b1c8152f35b82346104ab5760203660031901126104ab576117d5613e17565b6004356101495580f35b36600319011290506104ab576117f63660046128ae565b6117fe61342d565b50611807613d83565b61180f613cc5565b82519192916001600160a01b0390611828908216613106565b906118426118368385612dc7565b5193610af785856135d8565b95670de0b6b3a763ffff1990818101908111611996576118629086612eff565b61186c8686613c22565b918201918211611996576118b09493929161188691612f12565b9061189a60208801926105e5838551612eff565b670de0b6b3a76400009586916101345490612f12565b04976040880151808a1161197857506118cb90835192613629565b958589029089820487148a151715610c17576118e691612f12565b908115610be75761190a61192f9661190360609961192494612eff565b0483612ddb565b93848160808b0151169160c08b0151166101415492613658565b979185979197612fc4565b97015180881061195a5750926119558899936106a59899936112906001610662986138f0565b6139aa565b60449088604051916354cde31360e01b835260048301526024820152fd5b6044908a60405191637a031da360e11b835260048301526024820152fd5b634e487b7160e01b89526011600452602489fd5b82346104ab5760203660031901126104ab576119c4613e17565b6004356101405580f35b82346104ab57806003193601126104ab57602061019054604051908152f35b82346104ab5760203660031901126104ab57611a07613e17565b6004356101415580f35b82346104ab57806003193601126104ab57602061013454604051908152f35b82346104ab57806003193601126104ab57602061014254604051908152f35b82346104ab5760203660031901126104ab57611a69613e17565b60043561013b5580f35b82346104ab57806003193601126104ab57602061015654604051908152f35b82346104ab57806003193601126104ab57602061013954604051908152f35b82346104ab5760203660031901126104ab57611acb613e17565b6004356101545580f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257611b04613e17565b61015880546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab57611b35613e17565b60043561013e5580f35b82346104ab57806003193601126104ab57602061015454604051908152f35b82346104ab57806003193601126104ab57602061014954604051908152f35b82346104ab5760803660031901126104ab576004356001600160a01b038181169290838303610522576024358181169182820361052257604435818116809103610522576064359560ff61014b5460081c1615611d6a57611bdd90613106565b90611bea826101356127fc565b95905498604051966370a0823160e01b8852826004890152876024818860209e8f9560031b1c165afa968715611d5f578897611d30575b508615611d1257611c44611c37856101386127fc565b90549060031b1c88613ec6565b98898110611d08575b5090611c8c9392917ffaab3901cd2d6e9b5d0a0c6e34c643b8c844726f3c54de69517e571bf24bbd9260408c8c8251918c8352820152a46101356127fc565b90549060031b1c1690813b15611d0457604051632770a7eb60e21b81526001600160a01b03919091166004820152602481019290925282908290604490829084905af18015611cf957611ce4575b5050604051908152f35b611cef82809261285a565b6104ab5780611cda565b6040513d84823e3d90fd5b8380fd5b9850611c8c611c4d565b60448760405190633fe8c5eb60e01b82528060048301526024820152fd5b9096508981813d8311611d58575b611d48818361285a565b810103126105225751958a611c21565b503d611d3e565b6040513d8a823e3d90fd5b60405163031b0d3560e11b8152600490fd5b82346104ab57806003193601126104ab57611d95613e17565b600160ff1960ca54161760ca5580f35b82346104ab57806003193601126104ab576020611dc0613cc5565b50604051908152f35b82346104ab5760203660031901126104ab57611de3613e17565b6004356101595580f35b82346104ab57806003193601126104ab5761012f546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610133546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014e54604051908152f35b82346104ab57806003193601126104ab57602060ff60ca5460081c166040519015158152f35b82346104ab57806003193601126104ab57602061015754604051908152f35b82346104ab5760203660031901126104ab57611ebf613e17565b6004356101435580f35b82346104ab57806003193601126104ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611f345760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b82346104ab57806003193601126104ab57611fb8613e17565b60ff1960ca541660ca5580f35b8260403660031901126104ab576001600160a01b0360043581811681036105225782916024359167ffffffffffffffff83116120b457366023840112156120b457826004013561201481612892565b92612022604051948561285a565b81845236602483870101116120b05761139b956020836120a3946024600199018389013786010152807f0000000000000000000000000000000000000000000000000000000000000000169061207a82301415612926565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614612987565b6120ab613e17565b6129e8565b8580fd5b505050fd5b82346104ab57806003193601126104ab57602061013b54604051908152f35b82346104ab57806003193601126104ab57610147546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014c54604051908152f35b82346104ab5760203660031901126104ab57600435906101379081548310156104ab576040612150848461283e565b50805460019091015482519182526001600160a01b03166020820152f35b82346104ab57806003193601126104ab57602061013e54604051908152f35b82346104ab57806003193601126104ab5760ca5460ff8160081c16156121f657601081901c6001600160a01b031633036116ef5761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051637c7fd07960e01b8152600490fd5b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257612237613e17565b61014f80546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab57612268613e17565b6004356101905580f35b82346104ab5760203660031901126104ab57600435906101389081548310156104ab5760206117ad84846127fc565b82346104ab5760203660031901126104ab576004356001600160a01b0380821682036105225761139b916123008285937f0000000000000000000000000000000000000000000000000000000000000000169061207a82301415612926565b612308613e17565b61231182612892565b9061231f604051928361285a565b828252601f1961232e84612892565b013660208401376129e8565b82346104ab57806003193601126104ab57612353613ea5565b61014b805460ff81168061241d575b80612403575b612370578280f35b61ff0019166101001790556040517f8b77276c97a5709f0d6db52329848a254eb760ce8be80d281799f633bdb69e838280a16101335482906001600160a01b0316803b1561093b5782600481848094638456cb5960e01b83525af180156123f6576123e6575b50506123e0613058565b81808280f35b6123ef9161285a565b81816123d6565b50604051903d90823e3d90fd5b5061241261159d6115986131e7565b61014a541015612368565b5060ff8160081c1615612362565b82346104ab57806003193601126104ab57602061013f54604051908152f35b82346104ab57806003193601126104ab57602061014354604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b038116810361093b57612496613e17565b60ca805462010000600160b01b03191660109290921b62010000600160b01b031691909117905580f35b82346104ab5760203660031901126104ab576124da613e17565b60043561014a5580f35b82346104ab57806003193601126104ab57602061014054604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57612532613e17565b61014780546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57816040916020935261014483522054604051908152f35b82346104ab57806003193601126104ab57602060ff61014b5460081c166040519015158152f35b82346104ab5760203660031901126104ab576125c8613e17565b6004356101425580f35b82346104ab5760203660031901126104ab5760043580151580910361093b576125f9613e17565b61014b9060ff8019835416911617905580f35b82346104ab57806003193601126104ab57602061014d54604051908152f35b82346104ab57806003193601126104ab5761014f546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57612684613e17565b61013080546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576126b5613e17565b60043561013f5580f35b82346104ab57806003193601126104ab57602061015954604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b5761270d613e17565b61014680546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57602061018f54604051908152f35b82346104ab57806003193601126104ab576097546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab57612786613e17565b60043561015a5580f35b82346104ab5760203660031901126104ab57600435906101359081548310156104ab5760206127bf84846127fc565b905460405160039290921b1c6001600160a01b03168152f35b82346104ab5760203660031901126104ab576127f2613e17565b60043561013a5580f35b80548210156128145760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b35906001600160a01b038216820361052257565b80548210156128145760005260206000209060011b0190600090565b90601f8019910116810190811067ffffffffffffffff82111761287c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161287c57601f01601f191660200190565b91908260e0910312610522576040516128c860e08261285a565b60c06129218183956128d98161282a565b85526020810135602086015260408101356040860152606081013560608601526129056080820161282a565b608086015261291660a0820161282a565b60a08601520161282a565b910152565b1561292d57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561298e57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b909160ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612a235750612a219150612c51565b565b604080516352d1902d60e01b8152602094919392906001600160a01b038416908681600481855afa60009181612c22575b50612ab457855162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9395929492937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d44401612bcc57612ae986612c51565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511590811591612bc4575b50612b26575b50505050565b612bb093600080612b376027612892565b95612b448551978861285a565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b858801528581519101845af4913d15612bba573d612ba1612b9882612892565b9251928361285a565b8152600081943d92013e612cf3565b5038808080612b20565b5060609250612cf3565b905038612b1a565b825162461bcd60e51b815260048101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918882813d8311612c4a575b612c39818361285a565b810103126104ab5750519038612a54565b503d612c2f565b803b15612c98577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015612d555750815115612d07575090565b3b15612d105790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612d685750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510612dae575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350612d8b565b80518210156128145760209160051b010190565b91908201809211610c1757565b906000916000906101378054906000925b828410612e1f5750505050612e1b670de0b6b3a7640000916101395490612eff565b0490565b9091929395612e6c612e5b612e66600193612e60612e3d8a88612dc7565b51612e48818c612e92565b9590612e548d8c61283e565b5054612ddb565b613ec6565b90612ddb565b98612ddb565b9401929190612df9565b91909160008382019384129112908015821691151617610c1757565b9190600090612ec081600095612eb6612ead826101506127fc565b93905492612f4b565b9160031b1c612e76565b60008113612ecf575b50509190565b612ef7919450612ef192508094670de0b6b3a764000093849161013a54612eff565b04612eff565b043880612ec9565b81810292918115918404141715610c1757565b8115612f1c570490565b634e487b7160e01b600052601260045260246000fd5b81810392916000138015828513169184121617610c1757565b612f578161013761283e565b505490670de0b6b3a764000091828102928184041490151715610c1757612fa392612f97612f8a612f9d936101516127fc565b90549060031b1c84612f12565b92612f12565b90612f32565b90565b8015612fbc57612e5b612fa39261013154612fc4565b505060001990565b91908203918211610c1757565b67ffffffffffffffff811161287c5760051b60200190565b90612ff382612fd1565b613000604051918261285a565b8281528092613011601f1991612fd1565b0190602036910137565b805490600160401b82101561287c578161303d916001613054940181556127fc565b819391549060031b91821b91600019901b19161790565b9055565b610131548015613103576101379081549160009061307584612fe9565b9082905b8582106130bf57505060005b848110613093575050505050565b806130b96130b186610b39876130ab60019789612dc7565b51612eff565b61013861301b565b01613085565b90926130fb6001916130d08661312f565b6130da8787612dc7565b52612e606130e8878661283e565b50546130f48888612dc7565b5190613ec6565b930190613079565b50565b6001600160a01b0316600090815261013660205260409020600181015460ff16156108ed575490565b61313b9061013761283e565b50600101546001600160a01b031661315281613185565b9190911561050a575090565b5190811515820361052257565b919082604091031261052257612fa360208351930161315e565b604080516359e02dd760e01b81529291839060049082906001600160a01b03165afa9182156131db5760009081936131bc57509190565b90506131d791925060403d811161092957610919818361285a565b9091565b6040513d6000823e3d90fd5b61013754906131f582612fe9565b9160005b818110613204575050565b8061321060019261312f565b61321a8287612dc7565b52016131f9565b90613242670de0b6b3a7640000928361015754610154549243010302612f12565b8281101561325f5782039180836101555402049261015654020590565b50600091508190565b90916132726132ca565b9290808210156132c057839161328791612fc4565b9311156132bb57818110156132b35761329f91612fc4565b60011c808210156132ae575090565b905090565b505050600090565b505090565b5050505050600090565b61015254604080516359e02dd760e01b80825293929091906001600160a01b039081168284600481845afa80156133ba576000948591613397575b5015613380575061015354169080519485528085600481855afa8015613375576000958691613352575b501561333b5750509190565b6024925051906305e8989360e11b82526004820152fd5b90508161336c9296503d871161092957610919818361285a565b9490943861332f565b50513d6000823e3d90fd5b6024908351906305e8989360e11b82526004820152fd5b90506133b1919450833d851161092957610919818361285a565b93909338613305565b83513d6000823e3d90fd5b9081526101008101929160e09060c0906001600160a01b03806133e78361282a565b1660208601526133f96020830161282a565b1660408501526040810135606085015260608101356080850152608081013560a085015260a0810135828501520135910152565b6040519061343c60808361285a565b60006060838281528260208201528260408201520152565b6134cc9361349360009260209561346d8261013761283e565b50613479878254612ddb565b9055613489610131918254612ddb565b90556101356127fc565b90546040516340c10f1960e01b81526001600160a01b039093166004840152602483019490945290948593928492909183906044820190565b039360039190911b1c6001600160a01b03165af180156131db576134ed5750565b6020813d8211613516575b816135056020938361285a565b81010312610522576131039061315e565b3d91506134f8565b61358492602092610134613533848254612ddb565b9055613543610131918254612ddb565b9055610133546040516340c10f1960e01b81526001600160a01b03928316600482015260248101939093529193849290911690829060009082906044820190565b03925af180156131db576134ed5750565b91906135a090612de8565b9190926135ad8385612fa6565b90808211156135ba575050565b6044925060405191637912120160e01b835260048301526024820152fd5b61303d613054916135e98482612f4b565b61361f6135f8836101506127fc565b61360b8294925492838360031b1c612e76565b919060031b91821b91600019901b19161790565b90556101516127fc565b906101345490811561364957612fa3926105e0612e5b9261013154612fc4565b505050670de0b6b3a764000090565b92909391600091600091829661366c61342d565b966001600160a01b03918590831680613878575b508261012f54168360405193636eb1769f60e11b8552168060048501523060248501526020948585604481865afa94851561386d57849561383e575b508461371d575b5050505050860151156136d9575b505050929190565b909192506136f1670de0b6b3a7640000928392612eff565b048085529082156137155761370d920490816040860152612ddb565b3880806136d1565b50905061370d565b61372b906101305416613185565b929092156136c357909192939b50848b61376585670de0b6b3a764000061375f6137558d8d612eff565b6101435490612eff565b04612f12565b81830181815295908b156138345750613790916137846060928d612f12565b91829101528551612ddb565b809d5b109283156137bf575b5050506137ac575b8080806136c3565b81929950528060608801529638806137a4565b909192506024604051809481936370a0823160e01b835260048301525afa90811561382957908b9184916137f8575b501038848161379c565b809250858092503d8311613822575b613811818361285a565b81010312610e99578a9051386137ee565b503d613807565b6040513d85823e3d90fd5b915050809d613793565b9094508581813d8311613866575b613856818361285a565b81010312611d04575193386136bc565b503d61384c565b6040513d86823e3d90fd5b9095506020836101c35416916024604051809481936364a731e960e01b835260048301525afa80156109305786906138bd575b6138b6915084612eff565b9438613680565b506020813d82116138e8575b816138d66020938361285a565b810103126120b0576138b690516138ab565b3d91506138c9565b806138f96132ca565b9190936139066000613221565b940193829161399e575b019384600080821261399857505b84039181851161396057505081811161394257505061015555610156554361015755565b60449250604051916306da41e560e11b835260048301526024820152fd5b908085921161398657604491604051916306da41e560e11b835260048301526024820152fd5b604051630fb4fd3560e11b8152600490fd5b0361391e565b90508160000390613910565b6139d791926139bb8261013761283e565b506139c7858254612fc4565b9055613489610131918254612fc4565b905460039190911b1c6001600160a01b0316803b1561052257604051632770a7eb60e21b815230600482015260248101929092526000908290818381604481015b03925af180156131db57613a295750565b6000612a219161285a565b90610134613a43838254612fc4565b9055613a53610131918254612fc4565b9055610133546001600160a01b0316803b1561052257604051632770a7eb60e21b81523060048201526024810192909252600090829081838160448101613a18565b92613aa783613aad9694939795613c22565b90613ad6565b818110613ab8575050565b604492506040519163c39b739f60e01b835260048301526024820152fd5b92613ae392949193613ba3565b60009281810291600160ff1b9185821283821416613b8f578184051490151715613b7b57670de0b6b3a763ffff198301928311613b7b57670de0b6b3a764000092838102938185041490151715613b7b578215613b67578114600019831416613b535705908082126132ae575090565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b86526011600452602486fd5b9091613bb29061013154612fc4565b90670de0b6b3a764000091828102928184041490151715610c1757612fa392612f9d91612eff565b8282613be592613ba3565b9060008213156132b357612fa392613bfc91613629565b90612f12565b90604051613c1160408261285a565b602060018294805484520154910152565b613c2e816101486127fc565b90549060031b1c9161018e91613c44818461283e565b50549261018f54431015613c6a575b5050808210156132bb57610b3990612fa393612eff565b829350613c7e613c899392613c849261283e565b50613c02565b613c91565b903880613c53565b602081519101805192670de0b6b3a764000093840390848211610c1757613cbe612e6092612e1b95612eff565b9251612eff565b60008061013791825492613cd884612fe9565b9382915b818310613d05575050508115613cf95790613cf691612f12565b91565b50506101495460011b91565b90919392613d128561312f565b9081613d1e8789612dc7565b52613d37613d2c8388612e92565b50612e54888661283e565b670de0b6b3a764000090818102918183041490151715610c1757613d74613d7a92612e6085613d6b6001976105e596613ec6565b9485918c613c22565b95612ddb565b94019190613cdc565b61018f8054431015613d925750565b6101375460005b818110613dac5750506101905443019055565b80807f19156e9379c7bbbce8f646ce5ee30ba860b8f954717405f3d5859a6c1a21ae6060019361018e613de2613c7e838361283e565b90613e00613df8613df28561312f565b84613c91565b93849261283e565b50555160409182519182526020820152a201613d99565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa9081156131db57600091613e6c575b5015613e5a57565b604051631dd1b1b560e21b8152600490fd5b906020823d8211613e9d575b81613e856020938361285a565b810103126104ab5750613e979061315e565b38613e52565b3d9150613e78565b60ff60ca5460081c16613eb457565b60405163783bb6c960e11b8152600490fd5b90670de0b6b3a764000091828102928184041490151715610c1757612fa391612f1256fea2646970667358221220dcc30054564b01c6d169eb8bd2456f55ebb4d8c821d9d1a1f574158535d7dc1c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b600060e08135811c90816301dde6ef146127d857816301f1b68414612790578163073763b91461276c5781630c340a24146127435781630c36d897146127245781630d6ac463146126de5781630db49656146126bf5781630e0a8fd21461269b5781630f1e5e2b1461265557816313ed7ba51461262b5781631867e2f51461260c5781631fe6a7ad146125d25781632069f753146125ae57816323b98cde1461258757816324ffaba31461254957816327eab2a1146125035781632a20d57d146124e45781632c43bd3b146124c05781632d88af4a146124695781632ded50f01461244a578163333431fd1461242b57816333421c381461233a5781633659cfe6146122a15781633915edcb146122725781633bc4ac0a1461224e5781633cfb09ef146122085781633f4ba83a1461218d578163407f0e341461216e5781634b746001146121215781634d977e78146121025781634e1f907a146120d85781634f0f27ee146120b95781634f1ef28614611fc55781635210570c14611f9f57816352d1902d14611ec9578163543aeb4814611ea55781635860ee6314611e865781635c975abb14611e605781635cfbe57814611e4157816360009e0b14611e17578163647846a514611ded57816364ec230a14611dc9578163662013f414611da55781636827435714611d7c5781636845c44514611b7d5781636b5488df14611b5e5781636f30471f14611b3f5781637071346814611b1b578163735d396014611ad557816373e28af914611ab15781637554fffd14611a925781637622805514611a735781637750ba0c14611a4f57816379f9a91c14611a305781637a193c3114611a115781637a4ff1d9146119ed5781637a727fe8146119ce5781637af5758c146119aa5781637b5a17ae146117df5781637cba2383146117bb5781637d8e03141461177e5781637f01c715146117545781637f13b998146117205781637f4a4fe0146117015781638456cb591461166a57816385bf9593146116245781638cfa4241146116055781638e2bdb86146115db5781639853c35a146115b15781639ad6659d146115775781639cabfc001461152a5781639fd0506d146114fd578163a8e9ac30146114db578163aea038dc146114bc578163b5e9ea8c14611492578163b9fa641314611473578163bb4872de14611450578163becaca6b1461142c578163c00f538d14611408578163c84353c9146113e4578163cf351c1d1461139e578163d1a0faa014611382578163d6af11da14611340578163d87aab6f14611321578163d8db6f5a146112db578163d9b6c2e514611153578163db79607214610edb578163ddb6d19014610e9d578163e1e121da14610c41578163e44bb51214610a3f578163e4c0aaf4146109fa578163e6b1627c146109b7578163e7c2597814610993578163ee1f438f14610969578163f13f40541461093f578163f26114aa14610750578163f28087781461072c578163f30b56141461070d578163f375cfba146106ee578163f5571e011461054657508063fa6e83bd14610527578063fadda424146104ae5763fda70f8b1461048d57600080fd5b346104ab57806003193601126104ab57602061013c54604051908152f35b80fd5b50346104ab5760203660031901126104ab576001600160a01b036004358181168103610522576104ea6104e2600192613106565b61013761283e565b500154166104f781613185565b9190911561050a57602082604051908152f35b60249060405190637f6e4db960e01b82526004820152fd5b600080fd5b50346104ab57806003193601126104ab57602061013a54604051908152f35b36600319011290506104ab5761055d3660046128ae565b9061056661342d565b5061056f6131e7565b906105f060018060a01b039161058783865116613106565b926105aa6105958587612dc7565b51956105a187876135d8565b61014954613595565b6105ea60208996939601976105e56105c3828b51613ec6565b976105e06105d68c516101345490612eff565b9561013154612fc4565b612fc4565b612eff565b90613ec6565b95604081015180881080156106e6575b6106c8575061062182608083015116858460c08501511661013f5492613658565b96919790956060840151808a116106a957509261065886610662969460a09461065160016106a59d9c9b996138f0565b51906139aa565b015116908761351e565b604051948594859293606091959460c09360e086019786526020860152604085015280518285015260208101516080850152604081015160a08501520151910152565b0390f35b604490895160405191630b63f1a760e01b835260048301526024820152fd5b604490886040519163f577bef560e01b835260048301526024820152fd5b508715610600565b82346104ab57806003193601126104ab57602061014154604051908152f35b82346104ab57806003193601126104ab57602061013154604051908152f35b82346104ab5760203660031901126104ab57610746613e17565b60043561013c5580f35b90503461093b573660031901126104ab576004356001600160a01b0381811691829003610522578183526101366020526040832060ff60016040519261079760408561285a565b8054845201541615801560208301526108ed57519060243590808216809203610522576101379060016107ca858461283e565b500154168203610873575b847f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e36004858761082661080a836101486127fc565b6044929192359083549060031b91821b91600019901b19161790565b90558085526101446020526064356040862055845261014560205260843560408520556108558161018e61283e565b50600160c43591015561086d604051928392836133c5565b0390a180f35b9190926040516359e02dd760e01b8152604081600481885afa9081156109305786916108ff575b50156108ed577f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e39360016108d08460049661283e565b5001906001600160601b0360a01b825416179055928192506107d5565b60405163e6c4247b60e01b8152600490fd5b610921915060403d604011610929575b610919818361285a565b81019061316b565b90503861089a565b503d61090f565b6040513d88823e3d90fd5b5080fd5b82346104ab57806003193601126104ab57610130546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610152546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602060ff61014b54166040519015158152f35b82346104ab5760203660031901126104ab576004359061018e9081548310156104ab5760406109e6848461283e565b506001815491015482519182526020820152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57610a29613e17565b6001600160601b0360a01b609754161760975580f35b8260c03660031901126104ab5760405190610a5b60c08361285a565b6001600160a01b039060043582811681036105225783526020830160243581526040840192604435845260643590808216820361052257606086019182526084358181168103610522576080870190815260a4359482861686036105225760a08801958652610ac861342d565b50610add83610ad56131e7565b995116613106565b91610b00610aeb848b612dc7565b5199610af78b866135d8565b61014a54613595565b99610b1788519b610b118388613c22565b93613629565b91670de0b6b3a763ffff198101908111610c2d5781610b39610b3e928e612eff565b612f12565b98670de0b6b3a764000092838b02908b820485148c151715610c1757610b6391612f12565b9b838102938185041490151715610c1757610bae9787610b91610b8a610ba3958397612f12565b809d612ddb565b98899251169251166101425492613658565b989187989198612ddb565b9951808b11610bf957508915610be757610bdd61066296610bd2866106a59c6138f0565b83855116908d61351e565b5191511692613454565b60405163f3e39b5d60e01b8152600490fd5b6044908b60405191630b63f1a760e01b835260048301526024820152fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b85526011600452602485fd5b905061010080600319360112610e9957610c5e604051918261285a565b6004356001600160a01b03811681036105225781526024356001600160a01b038116810361052257602082019081526044356040830152606082019360643585526080830191608435835260a4359460018060a01b03861686036105225760a0850195865260c4356001600160a01b03811681036105225760c086015260e435906001600160a01b0382168203610522578501908152610cfc61342d565b50845182516001600160a01b03908116911614610e87578451610d3b90610d2b906001600160a01b0316613106565b92516001600160a01b0316613106565b95610d458361312f565b90610d4f8861312f565b610d5983866135d8565b610d63818a6135d8565b610d718360408a0151613ec6565b92610d8481610b398460408d0151612eff565b9a51808c108015610e7f575b610e615750908a8a610dd796959493610db3610dac8584613c22565b918a613c22565b10610e32575b50509051925161013e54936001600160a01b03918216925016613658565b959196909451808811610e1357509160408492610e0b610662956106a59998978c60018060a01b0360c08601511692613454565b0151906139aa565b604490875160405191630b63f1a760e01b835260048301526024820152fd5b610e51610e5993610e41613d83565b610e49613cc5565b819391613595565b949093613a95565b388a8a610db9565b6044908c6040519163272e3f5960e21b835260048301526024820152fd5b508b15610d90565b604051632a9ffab760e21b8152600490fd5b8280fd5b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257816040916020935261014583522054604051908152f35b90503461093b573660031901126104ab576004356001600160a01b03818116918290036105225760248035828116809103610522578385526101369360209085825260019260ff8460408a20015416611141576101359586549785604051610f4460408261285a565b8a815286810192828452868d52875260408c2090518155019051151560ff801983541691161790558654600160401b978882101561112e5790610f8b9187820181556127fc565b81549060031b908386831b921b1916179055604051610fab60408261285a565b8981528481019283526101378054908982101561111b5790610fd191888201815561283e565b91909161110857908691518155019151166001600160601b0360a01b82541617905561100160443561014861301b565b808752610144825260643560408820558652610145815260843560408720556040519061102f60408361285a565b60a4358252810160c435815261018e805490868210156110f5579061105891858201815561283e565b9290926110e25790839151835551910155610150918254938410156110d05750827f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e394926110ab926004950181556127fc565b50506110c16110b98261312f565b61015161301b565b61086d604051928392836133c5565b634e487b7160e01b8652604160045285fd5b634e487b7160e01b885260048890528488fd5b634e487b7160e01b895260416004528589fd5b634e487b7160e01b8b5260048b9052878bfd5b634e487b7160e01b8c526041600452888cfd5b634e487b7160e01b8b526041600452878bfd5b604051633458f6c560e01b8152600490fd5b36600319011290506104ab5761116a3660046128ae565b9061117361342d565b5061117c613d83565b611184613cc5565b929060018060a01b039261119a84845116613106565b906111ba6111a88388612dc7565b51966111b488856135d8565b84613595565b602086979297019687516111cf838389613bda565b8181106112bd575050906111fb918851670de0b6b3a76400009384916111f58585613629565b90612eff565b04968715610be7576112379361122e6112248d6105e58e516111f5886105e08b61013154612fc4565b6101345490612f12565b049a8b88613a95565b604085015180881061129f575061126081608087015116858360c0890151166101405492613658565b96919790956060830151808a116106a957509260a08593611296858d956112906106629a6106a59e9d9c9a6138f0565b51613a34565b01511692613454565b604490886040519163272e3f5960e21b835260048301526024820152fd5b604492506040519163a5db715d60e01b835260048301526024820152fd5b82346104ab5760203660031901126104ab576004356001600160a01b038116908190036105225761130a613e17565b61015280546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57602061015554604051908152f35b82346104ab57806003193601126104ab57602061137a6113606001613221565b61137461136d8284612f32565b9183612e76565b91613268565b604051908152f35b82346104ab57806003193601126104ab5761139b613d83565b80f35b82346104ab5760203660031901126104ab576004356001600160a01b03811690819003610522576113cd613e17565b61012f80546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576113fe613e17565b60043561014c5580f35b82346104ab5760203660031901126104ab57611422613e17565b60043561013d5580f35b82346104ab5760203660031901126104ab57611446613e17565b6004356101395580f35b82346104ab57806003193601126104ab57602060ff60ca54166040519015158152f35b82346104ab57806003193601126104ab57602061015b54604051908152f35b82346104ab57806003193601126104ab57610153546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061013d54604051908152f35b82346104ab57806003193601126104ab57602061018f54431015604051908152f35b82346104ab57806003193601126104ab5760ca5460405160109190911c6001600160a01b03168152602090f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257604082819281526101366020522060ff6001825492015416825191825215156020820152f35b82346104ab57806003193601126104ab5760206115a361159d6115986131e7565b612de8565b90612fa6565b61014a541015604051908152f35b82346104ab57806003193601126104ab57610146546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610158546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014a54604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257611653613e17565b61015380546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57611683613ea5565b60ca54601081901c6001600160a01b031633036116ef5760ff8116156116dd576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b82346104ab57806003193601126104ab57602061015a54604051908152f35b82346104ab57806003193601126104ab57602061137a6117406001613221565b61137461174d8284612e76565b9183612f32565b82346104ab57806003193601126104ab576101c3546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab57600435906101489081548310156104ab5760206117ad84846127fc565b90546040519160031b1c8152f35b82346104ab5760203660031901126104ab576117d5613e17565b6004356101495580f35b36600319011290506104ab576117f63660046128ae565b6117fe61342d565b50611807613d83565b61180f613cc5565b82519192916001600160a01b0390611828908216613106565b906118426118368385612dc7565b5193610af785856135d8565b95670de0b6b3a763ffff1990818101908111611996576118629086612eff565b61186c8686613c22565b918201918211611996576118b09493929161188691612f12565b9061189a60208801926105e5838551612eff565b670de0b6b3a76400009586916101345490612f12565b04976040880151808a1161197857506118cb90835192613629565b958589029089820487148a151715610c17576118e691612f12565b908115610be75761190a61192f9661190360609961192494612eff565b0483612ddb565b93848160808b0151169160c08b0151166101415492613658565b979185979197612fc4565b97015180881061195a5750926119558899936106a59899936112906001610662986138f0565b6139aa565b60449088604051916354cde31360e01b835260048301526024820152fd5b6044908a60405191637a031da360e11b835260048301526024820152fd5b634e487b7160e01b89526011600452602489fd5b82346104ab5760203660031901126104ab576119c4613e17565b6004356101405580f35b82346104ab57806003193601126104ab57602061019054604051908152f35b82346104ab5760203660031901126104ab57611a07613e17565b6004356101415580f35b82346104ab57806003193601126104ab57602061013454604051908152f35b82346104ab57806003193601126104ab57602061014254604051908152f35b82346104ab5760203660031901126104ab57611a69613e17565b60043561013b5580f35b82346104ab57806003193601126104ab57602061015654604051908152f35b82346104ab57806003193601126104ab57602061013954604051908152f35b82346104ab5760203660031901126104ab57611acb613e17565b6004356101545580f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257611b04613e17565b61015880546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab57611b35613e17565b60043561013e5580f35b82346104ab57806003193601126104ab57602061015454604051908152f35b82346104ab57806003193601126104ab57602061014954604051908152f35b82346104ab5760803660031901126104ab576004356001600160a01b038181169290838303610522576024358181169182820361052257604435818116809103610522576064359560ff61014b5460081c1615611d6a57611bdd90613106565b90611bea826101356127fc565b95905498604051966370a0823160e01b8852826004890152876024818860209e8f9560031b1c165afa968715611d5f578897611d30575b508615611d1257611c44611c37856101386127fc565b90549060031b1c88613ec6565b98898110611d08575b5090611c8c9392917ffaab3901cd2d6e9b5d0a0c6e34c643b8c844726f3c54de69517e571bf24bbd9260408c8c8251918c8352820152a46101356127fc565b90549060031b1c1690813b15611d0457604051632770a7eb60e21b81526001600160a01b03919091166004820152602481019290925282908290604490829084905af18015611cf957611ce4575b5050604051908152f35b611cef82809261285a565b6104ab5780611cda565b6040513d84823e3d90fd5b8380fd5b9850611c8c611c4d565b60448760405190633fe8c5eb60e01b82528060048301526024820152fd5b9096508981813d8311611d58575b611d48818361285a565b810103126105225751958a611c21565b503d611d3e565b6040513d8a823e3d90fd5b60405163031b0d3560e11b8152600490fd5b82346104ab57806003193601126104ab57611d95613e17565b600160ff1960ca54161760ca5580f35b82346104ab57806003193601126104ab576020611dc0613cc5565b50604051908152f35b82346104ab5760203660031901126104ab57611de3613e17565b6004356101595580f35b82346104ab57806003193601126104ab5761012f546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57610133546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014e54604051908152f35b82346104ab57806003193601126104ab57602060ff60ca5460081c166040519015158152f35b82346104ab57806003193601126104ab57602061015754604051908152f35b82346104ab5760203660031901126104ab57611ebf613e17565b6004356101435580f35b82346104ab57806003193601126104ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611f345760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b82346104ab57806003193601126104ab57611fb8613e17565b60ff1960ca541660ca5580f35b8260403660031901126104ab576001600160a01b0360043581811681036105225782916024359167ffffffffffffffff83116120b457366023840112156120b457826004013561201481612892565b92612022604051948561285a565b81845236602483870101116120b05761139b956020836120a3946024600199018389013786010152807f0000000000000000000000000000000000000000000000000000000000000000169061207a82301415612926565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614612987565b6120ab613e17565b6129e8565b8580fd5b505050fd5b82346104ab57806003193601126104ab57602061013b54604051908152f35b82346104ab57806003193601126104ab57610147546040516001600160a01b039091168152602090f35b82346104ab57806003193601126104ab57602061014c54604051908152f35b82346104ab5760203660031901126104ab57600435906101379081548310156104ab576040612150848461283e565b50805460019091015482519182526001600160a01b03166020820152f35b82346104ab57806003193601126104ab57602061013e54604051908152f35b82346104ab57806003193601126104ab5760ca5460ff8160081c16156121f657601081901c6001600160a01b031633036116ef5761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b604051637c7fd07960e01b8152600490fd5b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361052257612237613e17565b61014f80546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab57612268613e17565b6004356101905580f35b82346104ab5760203660031901126104ab57600435906101389081548310156104ab5760206117ad84846127fc565b82346104ab5760203660031901126104ab576004356001600160a01b0380821682036105225761139b916123008285937f0000000000000000000000000000000000000000000000000000000000000000169061207a82301415612926565b612308613e17565b61231182612892565b9061231f604051928361285a565b828252601f1961232e84612892565b013660208401376129e8565b82346104ab57806003193601126104ab57612353613ea5565b61014b805460ff81168061241d575b80612403575b612370578280f35b61ff0019166101001790556040517f8b77276c97a5709f0d6db52329848a254eb760ce8be80d281799f633bdb69e838280a16101335482906001600160a01b0316803b1561093b5782600481848094638456cb5960e01b83525af180156123f6576123e6575b50506123e0613058565b81808280f35b6123ef9161285a565b81816123d6565b50604051903d90823e3d90fd5b5061241261159d6115986131e7565b61014a541015612368565b5060ff8160081c1615612362565b82346104ab57806003193601126104ab57602061013f54604051908152f35b82346104ab57806003193601126104ab57602061014354604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b038116810361093b57612496613e17565b60ca805462010000600160b01b03191660109290921b62010000600160b01b031691909117905580f35b82346104ab5760203660031901126104ab576124da613e17565b60043561014a5580f35b82346104ab57806003193601126104ab57602061014054604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57612532613e17565b61014780546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57816040916020935261014483522054604051908152f35b82346104ab57806003193601126104ab57602060ff61014b5460081c166040519015158152f35b82346104ab5760203660031901126104ab576125c8613e17565b6004356101425580f35b82346104ab5760203660031901126104ab5760043580151580910361093b576125f9613e17565b61014b9060ff8019835416911617905580f35b82346104ab57806003193601126104ab57602061014d54604051908152f35b82346104ab57806003193601126104ab5761014f546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b57612684613e17565b61013080546001600160a01b031916909117905580f35b82346104ab5760203660031901126104ab576126b5613e17565b60043561013f5580f35b82346104ab57806003193601126104ab57602061015954604051908152f35b82346104ab5760203660031901126104ab576004356001600160a01b0381169081900361093b5761270d613e17565b61014680546001600160a01b031916909117905580f35b82346104ab57806003193601126104ab57602061018f54604051908152f35b82346104ab57806003193601126104ab576097546040516001600160a01b039091168152602090f35b82346104ab5760203660031901126104ab57612786613e17565b60043561015a5580f35b82346104ab5760203660031901126104ab57600435906101359081548310156104ab5760206127bf84846127fc565b905460405160039290921b1c6001600160a01b03168152f35b82346104ab5760203660031901126104ab576127f2613e17565b60043561013a5580f35b80548210156128145760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b35906001600160a01b038216820361052257565b80548210156128145760005260206000209060011b0190600090565b90601f8019910116810190811067ffffffffffffffff82111761287c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161287c57601f01601f191660200190565b91908260e0910312610522576040516128c860e08261285a565b60c06129218183956128d98161282a565b85526020810135602086015260408101356040860152606081013560608601526129056080820161282a565b608086015261291660a0820161282a565b60a08601520161282a565b910152565b1561292d57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561298e57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b909160ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612a235750612a219150612c51565b565b604080516352d1902d60e01b8152602094919392906001600160a01b038416908681600481855afa60009181612c22575b50612ab457855162461bcd60e51b815260048101889052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9395929492937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d44401612bcc57612ae986612c51565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511590811591612bc4575b50612b26575b50505050565b612bb093600080612b376027612892565b95612b448551978861285a565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b858801528581519101845af4913d15612bba573d612ba1612b9882612892565b9251928361285a565b8152600081943d92013e612cf3565b5038808080612b20565b5060609250612cf3565b905038612b1a565b825162461bcd60e51b815260048101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918882813d8311612c4a575b612c39818361285a565b810103126104ab5750519038612a54565b503d612c2f565b803b15612c98577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b91929015612d555750815115612d07575090565b3b15612d105790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612d685750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510612dae575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350612d8b565b80518210156128145760209160051b010190565b91908201809211610c1757565b906000916000906101378054906000925b828410612e1f5750505050612e1b670de0b6b3a7640000916101395490612eff565b0490565b9091929395612e6c612e5b612e66600193612e60612e3d8a88612dc7565b51612e48818c612e92565b9590612e548d8c61283e565b5054612ddb565b613ec6565b90612ddb565b98612ddb565b9401929190612df9565b91909160008382019384129112908015821691151617610c1757565b9190600090612ec081600095612eb6612ead826101506127fc565b93905492612f4b565b9160031b1c612e76565b60008113612ecf575b50509190565b612ef7919450612ef192508094670de0b6b3a764000093849161013a54612eff565b04612eff565b043880612ec9565b81810292918115918404141715610c1757565b8115612f1c570490565b634e487b7160e01b600052601260045260246000fd5b81810392916000138015828513169184121617610c1757565b612f578161013761283e565b505490670de0b6b3a764000091828102928184041490151715610c1757612fa392612f97612f8a612f9d936101516127fc565b90549060031b1c84612f12565b92612f12565b90612f32565b90565b8015612fbc57612e5b612fa39261013154612fc4565b505060001990565b91908203918211610c1757565b67ffffffffffffffff811161287c5760051b60200190565b90612ff382612fd1565b613000604051918261285a565b8281528092613011601f1991612fd1565b0190602036910137565b805490600160401b82101561287c578161303d916001613054940181556127fc565b819391549060031b91821b91600019901b19161790565b9055565b610131548015613103576101379081549160009061307584612fe9565b9082905b8582106130bf57505060005b848110613093575050505050565b806130b96130b186610b39876130ab60019789612dc7565b51612eff565b61013861301b565b01613085565b90926130fb6001916130d08661312f565b6130da8787612dc7565b52612e606130e8878661283e565b50546130f48888612dc7565b5190613ec6565b930190613079565b50565b6001600160a01b0316600090815261013660205260409020600181015460ff16156108ed575490565b61313b9061013761283e565b50600101546001600160a01b031661315281613185565b9190911561050a575090565b5190811515820361052257565b919082604091031261052257612fa360208351930161315e565b604080516359e02dd760e01b81529291839060049082906001600160a01b03165afa9182156131db5760009081936131bc57509190565b90506131d791925060403d811161092957610919818361285a565b9091565b6040513d6000823e3d90fd5b61013754906131f582612fe9565b9160005b818110613204575050565b8061321060019261312f565b61321a8287612dc7565b52016131f9565b90613242670de0b6b3a7640000928361015754610154549243010302612f12565b8281101561325f5782039180836101555402049261015654020590565b50600091508190565b90916132726132ca565b9290808210156132c057839161328791612fc4565b9311156132bb57818110156132b35761329f91612fc4565b60011c808210156132ae575090565b905090565b505050600090565b505090565b5050505050600090565b61015254604080516359e02dd760e01b80825293929091906001600160a01b039081168284600481845afa80156133ba576000948591613397575b5015613380575061015354169080519485528085600481855afa8015613375576000958691613352575b501561333b5750509190565b6024925051906305e8989360e11b82526004820152fd5b90508161336c9296503d871161092957610919818361285a565b9490943861332f565b50513d6000823e3d90fd5b6024908351906305e8989360e11b82526004820152fd5b90506133b1919450833d851161092957610919818361285a565b93909338613305565b83513d6000823e3d90fd5b9081526101008101929160e09060c0906001600160a01b03806133e78361282a565b1660208601526133f96020830161282a565b1660408501526040810135606085015260608101356080850152608081013560a085015260a0810135828501520135910152565b6040519061343c60808361285a565b60006060838281528260208201528260408201520152565b6134cc9361349360009260209561346d8261013761283e565b50613479878254612ddb565b9055613489610131918254612ddb565b90556101356127fc565b90546040516340c10f1960e01b81526001600160a01b039093166004840152602483019490945290948593928492909183906044820190565b039360039190911b1c6001600160a01b03165af180156131db576134ed5750565b6020813d8211613516575b816135056020938361285a565b81010312610522576131039061315e565b3d91506134f8565b61358492602092610134613533848254612ddb565b9055613543610131918254612ddb565b9055610133546040516340c10f1960e01b81526001600160a01b03928316600482015260248101939093529193849290911690829060009082906044820190565b03925af180156131db576134ed5750565b91906135a090612de8565b9190926135ad8385612fa6565b90808211156135ba575050565b6044925060405191637912120160e01b835260048301526024820152fd5b61303d613054916135e98482612f4b565b61361f6135f8836101506127fc565b61360b8294925492838360031b1c612e76565b919060031b91821b91600019901b19161790565b90556101516127fc565b906101345490811561364957612fa3926105e0612e5b9261013154612fc4565b505050670de0b6b3a764000090565b92909391600091600091829661366c61342d565b966001600160a01b03918590831680613878575b508261012f54168360405193636eb1769f60e11b8552168060048501523060248501526020948585604481865afa94851561386d57849561383e575b508461371d575b5050505050860151156136d9575b505050929190565b909192506136f1670de0b6b3a7640000928392612eff565b048085529082156137155761370d920490816040860152612ddb565b3880806136d1565b50905061370d565b61372b906101305416613185565b929092156136c357909192939b50848b61376585670de0b6b3a764000061375f6137558d8d612eff565b6101435490612eff565b04612f12565b81830181815295908b156138345750613790916137846060928d612f12565b91829101528551612ddb565b809d5b109283156137bf575b5050506137ac575b8080806136c3565b81929950528060608801529638806137a4565b909192506024604051809481936370a0823160e01b835260048301525afa90811561382957908b9184916137f8575b501038848161379c565b809250858092503d8311613822575b613811818361285a565b81010312610e99578a9051386137ee565b503d613807565b6040513d85823e3d90fd5b915050809d613793565b9094508581813d8311613866575b613856818361285a565b81010312611d04575193386136bc565b503d61384c565b6040513d86823e3d90fd5b9095506020836101c35416916024604051809481936364a731e960e01b835260048301525afa80156109305786906138bd575b6138b6915084612eff565b9438613680565b506020813d82116138e8575b816138d66020938361285a565b810103126120b0576138b690516138ab565b3d91506138c9565b806138f96132ca565b9190936139066000613221565b940193829161399e575b019384600080821261399857505b84039181851161396057505081811161394257505061015555610156554361015755565b60449250604051916306da41e560e11b835260048301526024820152fd5b908085921161398657604491604051916306da41e560e11b835260048301526024820152fd5b604051630fb4fd3560e11b8152600490fd5b0361391e565b90508160000390613910565b6139d791926139bb8261013761283e565b506139c7858254612fc4565b9055613489610131918254612fc4565b905460039190911b1c6001600160a01b0316803b1561052257604051632770a7eb60e21b815230600482015260248101929092526000908290818381604481015b03925af180156131db57613a295750565b6000612a219161285a565b90610134613a43838254612fc4565b9055613a53610131918254612fc4565b9055610133546001600160a01b0316803b1561052257604051632770a7eb60e21b81523060048201526024810192909252600090829081838160448101613a18565b92613aa783613aad9694939795613c22565b90613ad6565b818110613ab8575050565b604492506040519163c39b739f60e01b835260048301526024820152fd5b92613ae392949193613ba3565b60009281810291600160ff1b9185821283821416613b8f578184051490151715613b7b57670de0b6b3a763ffff198301928311613b7b57670de0b6b3a764000092838102938185041490151715613b7b578215613b67578114600019831416613b535705908082126132ae575090565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526012600452602484fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b86526011600452602486fd5b9091613bb29061013154612fc4565b90670de0b6b3a764000091828102928184041490151715610c1757612fa392612f9d91612eff565b8282613be592613ba3565b9060008213156132b357612fa392613bfc91613629565b90612f12565b90604051613c1160408261285a565b602060018294805484520154910152565b613c2e816101486127fc565b90549060031b1c9161018e91613c44818461283e565b50549261018f54431015613c6a575b5050808210156132bb57610b3990612fa393612eff565b829350613c7e613c899392613c849261283e565b50613c02565b613c91565b903880613c53565b602081519101805192670de0b6b3a764000093840390848211610c1757613cbe612e6092612e1b95612eff565b9251612eff565b60008061013791825492613cd884612fe9565b9382915b818310613d05575050508115613cf95790613cf691612f12565b91565b50506101495460011b91565b90919392613d128561312f565b9081613d1e8789612dc7565b52613d37613d2c8388612e92565b50612e54888661283e565b670de0b6b3a764000090818102918183041490151715610c1757613d74613d7a92612e6085613d6b6001976105e596613ec6565b9485918c613c22565b95612ddb565b94019190613cdc565b61018f8054431015613d925750565b6101375460005b818110613dac5750506101905443019055565b80807f19156e9379c7bbbce8f646ce5ee30ba860b8f954717405f3d5859a6c1a21ae6060019361018e613de2613c7e838361283e565b90613e00613df8613df28561312f565b84613c91565b93849261283e565b50555160409182519182526020820152a201613d99565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa9081156131db57600091613e6c575b5015613e5a57565b604051631dd1b1b560e21b8152600490fd5b906020823d8211613e9d575b81613e856020938361285a565b810103126104ab5750613e979061315e565b38613e52565b3d9150613e78565b60ff60ca5460081c16613eb457565b60405163783bb6c960e11b8152600490fd5b90670de0b6b3a764000091828102928184041490151715610c1757612fa391612f1256fea2646970667358221220dcc30054564b01c6d169eb8bd2456f55ebb4d8c821d9d1a1f574158535d7dc1c64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "IMPORTANT NOTES:  1. MocCore and MocCoreExpansion must have always the same storage layout to avoid collisions  2. Because MocCore is upgradeable and delegates calls to MocCoreExpansion, it cannot be upgradeable because      a proxy contract cannot delegate calls to another proxy contract. So, for any MocCoreExpansion upgrade      you must deploy a new implementation and set it to MocCore.",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`  This function is called by MocCore contract using it's context with delegate call  Checks done there:  -  onlyAuthorizedChanger: the caller must have governance authorization.tpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements:  - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "calcCtargemaCA()": {
        "details": "qAC = nTP / pACtp      ctargemaCA = ∑(ctargemaTP * qAC) / ∑(qAC)",
        "returns": {
          "ctargemaCA": "[PREC]"
        }
      },
      "changeGovernor(address)": {
        "params": {
          "newGovernor_": "New governor address"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`  This function is called by MocCore contract using it's context with delegate call  Checks done there:  -  onlyAuthorizedChanger: the caller must have governance authorization.tpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the tpTokenAddress must exists",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "getPACtp(address)": {
        "params": {
          "tp_": "Pegged Token address"
        },
        "returns": {
          "_0": "price [PREC]"
        }
      },
      "isLiquidationReached()": {
        "returns": {
          "_0": "true if liquidation state is reached, false otherwise"
        }
      },
      "liqRedeemTPTo(address,address,address,uint256)": {
        "details": "This function is called by MocCore contract using it's context with delegate call  The equivalent AC given the liquidation frozen price(qACRedeemed) is transferred  to the `recipient_` by MocCore contract  Checks done there:  -  notPaused: the contract must be unpaused",
        "params": {
          "recipient_": "address who receives the AC",
          "sender_": "address owner of the TP to be redeemed",
          "tp_": "Pegged Token address"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to `recipient_`"
        }
      },
      "makeStoppable()": {
        "details": "Should be called through governance"
      },
      "makeUnstoppable()": {
        "details": "Should be called through governance"
      },
      "maxQACToMintTP()": {
        "returns": {
          "maxQAC": "minimum regarding maxAbsoluteOperation and maxOperationalDifference"
        }
      },
      "maxQACToRedeemTP()": {
        "returns": {
          "maxQAC": "minimum regarding maxAbsoluteOperation and maxOperationalDifference"
        }
      },
      "mintTCandTPto((address,uint256,uint256,address,address,address))": {
        "details": "i_ Pegged Token index      qTP_ amount of Pegged Token to mint      qACmax_ maximum amount of Collateral Asset that can be spent      sender_ address who sends Collateral Asset      recipient_ address who receives the Collateral Token and Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is applied",
        "params": {
          "params_": "mint TC and TP function parameters"
        },
        "returns": {
          "feeCalcs": "platform fee detail breakdown",
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qFeeTokenTotalNeeded": "amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "pause()": {
        "details": "Should only be called by the pauser and when it is stoppable"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))": {
        "details": "i_ Pegged Token index      qTC_ amount of Collateral Token to redeem      qTP_ maximum amount of Pegged Token to redeem      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive      sender_ address who sends Collateral Token and Pegged Token      recipient_ address who receives the Collateral Asset      vendor_ address who receives a markup. If its address(0) no markup is applied",
        "params": {
          "params_": "redeem TC and TP function parameters"
        },
        "returns": {
          "feeCalcs": "platform fee detail breakdown",
          "qACtoRedeem": "amount of AC sent to `recipient_`",
          "qFeeTokenTotalNeeded": "amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead",
          "qTPtoRedeem": "amount of Pegged Token redeemed"
        }
      },
      "setAppreciationFactor(uint256)": {
        "details": "sets appreciation Factor value.",
        "params": {
          "appreciationFactor_": "pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]"
        }
      },
      "setBes(uint256)": {
        "details": "bns is not automatically updated, you have to wait until next settlement to be made : bns = block.number + bes*",
        "params": {
          "bes_": "number of blocks between settlements"
        }
      },
      "setDecayBlockSpan(uint256)": {
        "details": "sets flux capacitor decay block span",
        "params": {
          "decayBlockSpan_": "flux capacitor decay block span"
        }
      },
      "setEmaCalculationBlockSpan(uint256)": {
        "details": "nextEmaCalculation is not automatically updated, you have to wait until next  EMA calculation to be made : nextEmaCalculation = block.number + emaCalculationBlockSpan*",
        "params": {
          "blockSpan_": "Defines how many blocks should pass between EMA calculations"
        }
      },
      "setFeeRetainer(uint256)": {
        "details": "sets the fee pct to be retainer on AC fees payments as AC re-injection.",
        "params": {
          "feeRetainer_": "pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setFeeTokenAddress(address)": {
        "details": "sets Fee Token contract address",
        "params": {
          "mocFeeTokenAddress_": "Fee Token new contract address"
        }
      },
      "setFeeTokenPct(uint256)": {
        "details": "sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.",
        "params": {
          "feeTokenPct_": "pct applied on the top of the operation`s fee when using Fee Token  as fee payment method [PREC]  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setFeeTokenPriceProviderAddress(address)": {
        "details": "sets Fee Token price provider contract address",
        "params": {
          "mocFeeTokenPriceProviderAddress_": "Fee Token price provider new contract address"
        }
      },
      "setLiqEnabled(bool)": {
        "details": "enables and disables the liquidation mechanism.",
        "params": {
          "liqEnabled_": "is liquidation enabled"
        }
      },
      "setLiqThrld(uint256)": {
        "details": "sets the value of the liq threshold configuration param",
        "params": {
          "liqThrld_": "liquidation threshold"
        }
      },
      "setMaxAbsoluteOpProviderAddress(address)": {
        "details": "sets max absolute operation provider address",
        "params": {
          "maxAbsoluteOpProviderAddress_": "max absolute operation provider address"
        }
      },
      "setMaxOpDiffProviderAddress(address)": {
        "details": "sets max operation difference provider address",
        "params": {
          "maxOpDiffProviderAddress_": "max operation difference provider address"
        }
      },
      "setMintTCandTPFee(uint256)": {
        "details": "sets the fee charged when mint Collateral Token and Pegged Token in one operation.",
        "params": {
          "mintTCandTPFee_": "additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setMocAppreciationBeneficiaryAddress(address)": {
        "details": "sets Moc Appreciation Beneficiary Address",
        "params": {
          "mocAppreciationBeneficiaryAddress_": "moc Appreciation Beneficiary new address"
        }
      },
      "setMocFeeFlowAddress(address)": {
        "details": "sets Moc Fee Flow contract address",
        "params": {
          "mocFeeFlowAddress_": "moc Fee Flow new contract address"
        }
      },
      "setMocQueue(address)": {
        "details": "sets Moc Queue contract address",
        "params": {
          "mocQueueAddress_": "moc queue new contract address"
        }
      },
      "setPauser(address)": {
        "details": "Should be called through governance",
        "params": {
          "newPauser_": "Address of the new pauser"
        }
      },
      "setProtThrld(uint256)": {
        "details": "sets the value of the protected threshold configuration param",
        "params": {
          "protThrld_": "coverage protected state threshold [PREC]"
        }
      },
      "setRedeemTCandTPFee(uint256)": {
        "details": "sets the fee charged when redeem Collateral Token and Pegged Token in one operation.",
        "params": {
          "redeemTCandTPFee_": "additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSuccessFee(uint256)": {
        "details": "sets success Fee value.",
        "params": {
          "successFee_": "pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]"
        }
      },
      "setSwapTCforTPFee(uint256)": {
        "details": "sets the fee charged when swap Collateral Token for a Pegged Token.",
        "params": {
          "swapTCforTPFee_": "additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTCFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for Collateral Token.",
        "params": {
          "swapTPforTCFee_": "additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTPFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for another Pegged Token.",
        "params": {
          "swapTPforTPFee_": "additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTCInterestCollectorAddress(address)": {
        "details": "sets TC interest collector address",
        "params": {
          "tcInterestCollectorAddress_": "TC interest collector address"
        }
      },
      "setTCInterestPaymentBlockSpan(uint256)": {
        "details": "sets TC interest payment block spannextTCInterestPayment is not automatically updated, you have to wait until next  interest payment to be made : nextTCInterestPayment = block.number + tcInterestPaymentBlockSpan",
        "params": {
          "tcInterestPaymentBlockSpan_": "amount of blocks to wait for next TC interest payment"
        }
      },
      "setTCInterestRate(uint256)": {
        "details": "sets TC interest rate",
        "params": {
          "tcInterestRate_": "pct interest charged to TC holders on the total collateral in the protocol [PREC]"
        }
      },
      "setTcMintFee(uint256)": {
        "details": "sets the fee charged on Token Collateral mint.",
        "params": {
          "tcMintFee_": "addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTcRedeemFee(uint256)": {
        "details": "sets the fee charged on Token Collateral redeem.",
        "params": {
          "tcRedeemFee_": "addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "swapTCforTPto((address,uint256,uint256,uint256,address,address,address))": {
        "details": "This function is called by MocCore contract using it's context with delegate calli_ Pegged Token index      qTC_ amount of Collateral Token to swap      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Collateral Token      recipient_ address who receives the Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup",
        "params": {
          "params_": "swap TC for TP function parameters"
        },
        "returns": {
          "qACSurcharges": "amount of AC used to pay fees and markup",
          "qFeeTokenTotalNeeded": "amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead",
          "qTPtoMint": "amount of Pegged Token minted"
        }
      },
      "swapTPforTCto((address,uint256,uint256,uint256,address,address,address))": {
        "details": "This function is called by MocCore contract using it's context with delegate calli_ Pegged Token index      qTP_ amount Pegged Token to swap      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Pegged Token      recipient_ address who receives Collateral Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup",
        "params": {
          "params_": "swap TP for TC function parameters"
        },
        "returns": {
          "feeCalcs": "struct with:",
          "qACSurcharges": "amount of AC used to pay fees and markup",
          "qFeeTokenTotalNeeded": "amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))": {
        "details": "This function is called by MocCore contract using it's context with delegate calliFrom_ owned Pegged Token index      iTo_ target Pegged Token index      qTP_ amount of owned Pegged Token to swap      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Pegged Token      recipient_ address who receives the target Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup",
        "params": {
          "params_": "swap TP for TP function parameters"
        },
        "returns": {
          "feeCalcs": "struct with:",
          "qACSurcharges": "amount of AC used to pay fees and markup",
          "qFeeTokenTotalNeeded": "amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead",
          "qTPtoMint": "amount of Pegged Token minted"
        }
      },
      "updateEmas()": {
        "details": "All price provider prices must be available, fails if not"
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "MocCoreExpansion",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F20 SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x1EDC ADD MSTORE DUP2 DUP2 PUSH2 0x204D ADD MSTORE PUSH2 0x22D3 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP2 CALLDATALOAD DUP2 SHR SWAP1 DUP2 PUSH4 0x1DDE6EF EQ PUSH2 0x27D8 JUMPI DUP2 PUSH4 0x1F1B684 EQ PUSH2 0x2790 JUMPI DUP2 PUSH4 0x73763B9 EQ PUSH2 0x276C JUMPI DUP2 PUSH4 0xC340A24 EQ PUSH2 0x2743 JUMPI DUP2 PUSH4 0xC36D897 EQ PUSH2 0x2724 JUMPI DUP2 PUSH4 0xD6AC463 EQ PUSH2 0x26DE JUMPI DUP2 PUSH4 0xDB49656 EQ PUSH2 0x26BF JUMPI DUP2 PUSH4 0xE0A8FD2 EQ PUSH2 0x269B JUMPI DUP2 PUSH4 0xF1E5E2B EQ PUSH2 0x2655 JUMPI DUP2 PUSH4 0x13ED7BA5 EQ PUSH2 0x262B JUMPI DUP2 PUSH4 0x1867E2F5 EQ PUSH2 0x260C JUMPI DUP2 PUSH4 0x1FE6A7AD EQ PUSH2 0x25D2 JUMPI DUP2 PUSH4 0x2069F753 EQ PUSH2 0x25AE JUMPI DUP2 PUSH4 0x23B98CDE EQ PUSH2 0x2587 JUMPI DUP2 PUSH4 0x24FFABA3 EQ PUSH2 0x2549 JUMPI DUP2 PUSH4 0x27EAB2A1 EQ PUSH2 0x2503 JUMPI DUP2 PUSH4 0x2A20D57D EQ PUSH2 0x24E4 JUMPI DUP2 PUSH4 0x2C43BD3B EQ PUSH2 0x24C0 JUMPI DUP2 PUSH4 0x2D88AF4A EQ PUSH2 0x2469 JUMPI DUP2 PUSH4 0x2DED50F0 EQ PUSH2 0x244A JUMPI DUP2 PUSH4 0x333431FD EQ PUSH2 0x242B JUMPI DUP2 PUSH4 0x33421C38 EQ PUSH2 0x233A JUMPI DUP2 PUSH4 0x3659CFE6 EQ PUSH2 0x22A1 JUMPI DUP2 PUSH4 0x3915EDCB EQ PUSH2 0x2272 JUMPI DUP2 PUSH4 0x3BC4AC0A EQ PUSH2 0x224E JUMPI DUP2 PUSH4 0x3CFB09EF EQ PUSH2 0x2208 JUMPI DUP2 PUSH4 0x3F4BA83A EQ PUSH2 0x218D JUMPI DUP2 PUSH4 0x407F0E34 EQ PUSH2 0x216E JUMPI DUP2 PUSH4 0x4B746001 EQ PUSH2 0x2121 JUMPI DUP2 PUSH4 0x4D977E78 EQ PUSH2 0x2102 JUMPI DUP2 PUSH4 0x4E1F907A EQ PUSH2 0x20D8 JUMPI DUP2 PUSH4 0x4F0F27EE EQ PUSH2 0x20B9 JUMPI DUP2 PUSH4 0x4F1EF286 EQ PUSH2 0x1FC5 JUMPI DUP2 PUSH4 0x5210570C EQ PUSH2 0x1F9F JUMPI DUP2 PUSH4 0x52D1902D EQ PUSH2 0x1EC9 JUMPI DUP2 PUSH4 0x543AEB48 EQ PUSH2 0x1EA5 JUMPI DUP2 PUSH4 0x5860EE63 EQ PUSH2 0x1E86 JUMPI DUP2 PUSH4 0x5C975ABB EQ PUSH2 0x1E60 JUMPI DUP2 PUSH4 0x5CFBE578 EQ PUSH2 0x1E41 JUMPI DUP2 PUSH4 0x60009E0B EQ PUSH2 0x1E17 JUMPI DUP2 PUSH4 0x647846A5 EQ PUSH2 0x1DED JUMPI DUP2 PUSH4 0x64EC230A EQ PUSH2 0x1DC9 JUMPI DUP2 PUSH4 0x662013F4 EQ PUSH2 0x1DA5 JUMPI DUP2 PUSH4 0x68274357 EQ PUSH2 0x1D7C JUMPI DUP2 PUSH4 0x6845C445 EQ PUSH2 0x1B7D JUMPI DUP2 PUSH4 0x6B5488DF EQ PUSH2 0x1B5E JUMPI DUP2 PUSH4 0x6F30471F EQ PUSH2 0x1B3F JUMPI DUP2 PUSH4 0x70713468 EQ PUSH2 0x1B1B JUMPI DUP2 PUSH4 0x735D3960 EQ PUSH2 0x1AD5 JUMPI DUP2 PUSH4 0x73E28AF9 EQ PUSH2 0x1AB1 JUMPI DUP2 PUSH4 0x7554FFFD EQ PUSH2 0x1A92 JUMPI DUP2 PUSH4 0x76228055 EQ PUSH2 0x1A73 JUMPI DUP2 PUSH4 0x7750BA0C EQ PUSH2 0x1A4F JUMPI DUP2 PUSH4 0x79F9A91C EQ PUSH2 0x1A30 JUMPI DUP2 PUSH4 0x7A193C31 EQ PUSH2 0x1A11 JUMPI DUP2 PUSH4 0x7A4FF1D9 EQ PUSH2 0x19ED JUMPI DUP2 PUSH4 0x7A727FE8 EQ PUSH2 0x19CE JUMPI DUP2 PUSH4 0x7AF5758C EQ PUSH2 0x19AA JUMPI DUP2 PUSH4 0x7B5A17AE EQ PUSH2 0x17DF JUMPI DUP2 PUSH4 0x7CBA2383 EQ PUSH2 0x17BB JUMPI DUP2 PUSH4 0x7D8E0314 EQ PUSH2 0x177E JUMPI DUP2 PUSH4 0x7F01C715 EQ PUSH2 0x1754 JUMPI DUP2 PUSH4 0x7F13B998 EQ PUSH2 0x1720 JUMPI DUP2 PUSH4 0x7F4A4FE0 EQ PUSH2 0x1701 JUMPI DUP2 PUSH4 0x8456CB59 EQ PUSH2 0x166A JUMPI DUP2 PUSH4 0x85BF9593 EQ PUSH2 0x1624 JUMPI DUP2 PUSH4 0x8CFA4241 EQ PUSH2 0x1605 JUMPI DUP2 PUSH4 0x8E2BDB86 EQ PUSH2 0x15DB JUMPI DUP2 PUSH4 0x9853C35A EQ PUSH2 0x15B1 JUMPI DUP2 PUSH4 0x9AD6659D EQ PUSH2 0x1577 JUMPI DUP2 PUSH4 0x9CABFC00 EQ PUSH2 0x152A JUMPI DUP2 PUSH4 0x9FD0506D EQ PUSH2 0x14FD JUMPI DUP2 PUSH4 0xA8E9AC30 EQ PUSH2 0x14DB JUMPI DUP2 PUSH4 0xAEA038DC EQ PUSH2 0x14BC JUMPI DUP2 PUSH4 0xB5E9EA8C EQ PUSH2 0x1492 JUMPI DUP2 PUSH4 0xB9FA6413 EQ PUSH2 0x1473 JUMPI DUP2 PUSH4 0xBB4872DE EQ PUSH2 0x1450 JUMPI DUP2 PUSH4 0xBECACA6B EQ PUSH2 0x142C JUMPI DUP2 PUSH4 0xC00F538D EQ PUSH2 0x1408 JUMPI DUP2 PUSH4 0xC84353C9 EQ PUSH2 0x13E4 JUMPI DUP2 PUSH4 0xCF351C1D EQ PUSH2 0x139E JUMPI DUP2 PUSH4 0xD1A0FAA0 EQ PUSH2 0x1382 JUMPI DUP2 PUSH4 0xD6AF11DA EQ PUSH2 0x1340 JUMPI DUP2 PUSH4 0xD87AAB6F EQ PUSH2 0x1321 JUMPI DUP2 PUSH4 0xD8DB6F5A EQ PUSH2 0x12DB JUMPI DUP2 PUSH4 0xD9B6C2E5 EQ PUSH2 0x1153 JUMPI DUP2 PUSH4 0xDB796072 EQ PUSH2 0xEDB JUMPI DUP2 PUSH4 0xDDB6D190 EQ PUSH2 0xE9D JUMPI DUP2 PUSH4 0xE1E121DA EQ PUSH2 0xC41 JUMPI DUP2 PUSH4 0xE44BB512 EQ PUSH2 0xA3F JUMPI DUP2 PUSH4 0xE4C0AAF4 EQ PUSH2 0x9FA JUMPI DUP2 PUSH4 0xE6B1627C EQ PUSH2 0x9B7 JUMPI DUP2 PUSH4 0xE7C25978 EQ PUSH2 0x993 JUMPI DUP2 PUSH4 0xEE1F438F EQ PUSH2 0x969 JUMPI DUP2 PUSH4 0xF13F4054 EQ PUSH2 0x93F JUMPI DUP2 PUSH4 0xF26114AA EQ PUSH2 0x750 JUMPI DUP2 PUSH4 0xF2808778 EQ PUSH2 0x72C JUMPI DUP2 PUSH4 0xF30B5614 EQ PUSH2 0x70D JUMPI DUP2 PUSH4 0xF375CFBA EQ PUSH2 0x6EE JUMPI DUP2 PUSH4 0xF5571E01 EQ PUSH2 0x546 JUMPI POP DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xFADDA424 EQ PUSH2 0x4AE JUMPI PUSH4 0xFDA70F8B EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH2 0x4EA PUSH2 0x4E2 PUSH1 0x1 SWAP3 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP ADD SLOAD AND PUSH2 0x4F7 DUP2 PUSH2 0x3185 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x50A JUMPI PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x7F6E4DB9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST SWAP1 PUSH2 0x566 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x56F PUSH2 0x31E7 JUMP JUMPDEST SWAP1 PUSH2 0x5F0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x587 DUP4 DUP7 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP3 PUSH2 0x5AA PUSH2 0x595 DUP6 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP6 PUSH2 0x5A1 DUP8 DUP8 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0x149 SLOAD PUSH2 0x3595 JUMP JUMPDEST PUSH2 0x5EA PUSH1 0x20 DUP10 SWAP7 SWAP4 SWAP7 ADD SWAP8 PUSH2 0x5E5 PUSH2 0x5C3 DUP3 DUP12 MLOAD PUSH2 0x3EC6 JUMP JUMPDEST SWAP8 PUSH2 0x5E0 PUSH2 0x5D6 DUP13 MLOAD PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST SWAP6 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x2EFF JUMP JUMPDEST SWAP1 PUSH2 0x3EC6 JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP2 ADD MLOAD DUP1 DUP9 LT DUP1 ISZERO PUSH2 0x6E6 JUMPI JUMPDEST PUSH2 0x6C8 JUMPI POP PUSH2 0x621 DUP3 PUSH1 0x80 DUP4 ADD MLOAD AND DUP6 DUP5 PUSH1 0xC0 DUP6 ADD MLOAD AND PUSH2 0x13F SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP7 SWAP2 SWAP8 SWAP1 SWAP6 PUSH1 0x60 DUP5 ADD MLOAD DUP1 DUP11 GT PUSH2 0x6A9 JUMPI POP SWAP3 PUSH2 0x658 DUP7 PUSH2 0x662 SWAP7 SWAP5 PUSH1 0xA0 SWAP5 PUSH2 0x651 PUSH1 0x1 PUSH2 0x6A5 SWAP14 SWAP13 SWAP12 SWAP10 PUSH2 0x38F0 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x39AA JUMP JUMPDEST ADD MLOAD AND SWAP1 DUP8 PUSH2 0x351E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 SWAP3 SWAP4 PUSH1 0x60 SWAP2 SWAP6 SWAP5 PUSH1 0xC0 SWAP4 PUSH1 0xE0 DUP7 ADD SWAP8 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE DUP1 MLOAD DUP3 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x44 SWAP1 DUP10 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP8 ISZERO PUSH2 0x600 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x141 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x746 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13C SSTORE DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x93B JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x522 JUMPI DUP2 DUP4 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x797 PUSH1 0x40 DUP6 PUSH2 0x285A JUMP JUMPDEST DUP1 SLOAD DUP5 MSTORE ADD SLOAD AND ISZERO DUP1 ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x8ED JUMPI MLOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x522 JUMPI PUSH2 0x137 SWAP1 PUSH1 0x1 PUSH2 0x7CA DUP6 DUP5 PUSH2 0x283E JUMP JUMPDEST POP ADD SLOAD AND DUP3 SUB PUSH2 0x873 JUMPI JUMPDEST DUP5 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 PUSH1 0x4 DUP6 DUP8 PUSH2 0x826 PUSH2 0x80A DUP4 PUSH2 0x148 PUSH2 0x27FC JUMP JUMPDEST PUSH1 0x44 SWAP3 SWAP2 SWAP3 CALLDATALOAD SWAP1 DUP4 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE DUP1 DUP6 MSTORE PUSH2 0x144 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP5 MSTORE PUSH2 0x145 PUSH1 0x20 MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x40 DUP6 KECCAK256 SSTORE PUSH2 0x855 DUP2 PUSH2 0x18E PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xC4 CALLDATALOAD SWAP2 ADD SSTORE PUSH2 0x86D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x33C5 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x40 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x40 DUP2 PUSH1 0x4 DUP2 DUP9 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x8FF JUMPI JUMPDEST POP ISZERO PUSH2 0x8ED JUMPI PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP4 PUSH1 0x1 PUSH2 0x8D0 DUP5 PUSH1 0x4 SWAP7 PUSH2 0x283E JUMP JUMPDEST POP ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE SWAP3 DUP2 SWAP3 POP PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x921 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x929 JUMPI JUMPDEST PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x316B JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x89A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x90F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x130 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x152 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x14B SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x18E SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x40 PUSH2 0x9E6 DUP5 DUP5 PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0xA29 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE DUP1 RETURN JUMPDEST DUP3 PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA5B PUSH1 0xC0 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP4 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x64 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI PUSH1 0x60 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x84 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 DUP3 DUP7 AND DUP7 SUB PUSH2 0x522 JUMPI PUSH1 0xA0 DUP9 ADD SWAP6 DUP7 MSTORE PUSH2 0xAC8 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0xADD DUP4 PUSH2 0xAD5 PUSH2 0x31E7 JUMP JUMPDEST SWAP10 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP2 PUSH2 0xB00 PUSH2 0xAEB DUP5 DUP12 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP10 PUSH2 0xAF7 DUP12 DUP7 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0x14A SLOAD PUSH2 0x3595 JUMP JUMPDEST SWAP10 PUSH2 0xB17 DUP9 MLOAD SWAP12 PUSH2 0xB11 DUP4 DUP9 PUSH2 0x3C22 JUMP JUMPDEST SWAP4 PUSH2 0x3629 JUMP JUMPDEST SWAP2 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xC2D JUMPI DUP2 PUSH2 0xB39 PUSH2 0xB3E SWAP3 DUP15 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x2F12 JUMP JUMPDEST SWAP9 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP12 MUL SWAP1 DUP12 DUP3 DIV DUP6 EQ DUP13 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0xB63 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP12 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0xBAE SWAP8 DUP8 PUSH2 0xB91 PUSH2 0xB8A PUSH2 0xBA3 SWAP6 DUP4 SWAP8 PUSH2 0x2F12 JUMP JUMPDEST DUP1 SWAP14 PUSH2 0x2DDB JUMP JUMPDEST SWAP9 DUP10 SWAP3 MLOAD AND SWAP3 MLOAD AND PUSH2 0x142 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP9 SWAP2 DUP8 SWAP9 SWAP2 SWAP9 PUSH2 0x2DDB JUMP JUMPDEST SWAP10 MLOAD DUP1 DUP12 GT PUSH2 0xBF9 JUMPI POP DUP10 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0xBDD PUSH2 0x662 SWAP7 PUSH2 0xBD2 DUP7 PUSH2 0x6A5 SWAP13 PUSH2 0x38F0 JUMP JUMPDEST DUP4 DUP6 MLOAD AND SWAP1 DUP14 PUSH2 0x351E JUMP JUMPDEST MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 POP PUSH2 0x100 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE99 JUMPI PUSH2 0xC5E PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP4 PUSH1 0x64 CALLDATALOAD DUP6 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 PUSH1 0x84 CALLDATALOAD DUP4 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP7 SUB PUSH2 0x522 JUMPI PUSH1 0xA0 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0xCFC PUSH2 0x342D JUMP JUMPDEST POP DUP5 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xE87 JUMPI DUP5 MLOAD PUSH2 0xD3B SWAP1 PUSH2 0xD2B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3106 JUMP JUMPDEST SWAP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3106 JUMP JUMPDEST SWAP6 PUSH2 0xD45 DUP4 PUSH2 0x312F JUMP JUMPDEST SWAP1 PUSH2 0xD4F DUP9 PUSH2 0x312F JUMP JUMPDEST PUSH2 0xD59 DUP4 DUP7 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0xD63 DUP2 DUP11 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0xD71 DUP4 PUSH1 0x40 DUP11 ADD MLOAD PUSH2 0x3EC6 JUMP JUMPDEST SWAP3 PUSH2 0xD84 DUP2 PUSH2 0xB39 DUP5 PUSH1 0x40 DUP14 ADD MLOAD PUSH2 0x2EFF JUMP JUMPDEST SWAP11 MLOAD DUP1 DUP13 LT DUP1 ISZERO PUSH2 0xE7F JUMPI JUMPDEST PUSH2 0xE61 JUMPI POP SWAP1 DUP11 DUP11 PUSH2 0xDD7 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0xDB3 PUSH2 0xDAC DUP6 DUP5 PUSH2 0x3C22 JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x3C22 JUMP JUMPDEST LT PUSH2 0xE32 JUMPI JUMPDEST POP POP SWAP1 MLOAD SWAP3 MLOAD PUSH2 0x13E SLOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 POP AND PUSH2 0x3658 JUMP JUMPDEST SWAP6 SWAP2 SWAP7 SWAP1 SWAP5 MLOAD DUP1 DUP9 GT PUSH2 0xE13 JUMPI POP SWAP2 PUSH1 0x40 DUP5 SWAP3 PUSH2 0xE0B PUSH2 0x662 SWAP6 PUSH2 0x6A5 SWAP10 SWAP9 SWAP8 DUP13 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP7 ADD MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH2 0x39AA JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP8 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xE51 PUSH2 0xE59 SWAP4 PUSH2 0xE41 PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0xE49 PUSH2 0x3CC5 JUMP JUMPDEST DUP2 SWAP4 SWAP2 PUSH2 0x3595 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 PUSH2 0x3A95 JUMP JUMPDEST CODESIZE DUP11 DUP11 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP12 ISZERO PUSH2 0xD90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI DUP2 PUSH1 0x40 SWAP2 PUSH1 0x20 SWAP4 MSTORE PUSH2 0x145 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x93B JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x522 JUMPI PUSH1 0x24 DUP1 CALLDATALOAD DUP3 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x522 JUMPI DUP4 DUP6 MSTORE PUSH2 0x136 SWAP4 PUSH1 0x20 SWAP1 DUP6 DUP3 MSTORE PUSH1 0x1 SWAP3 PUSH1 0xFF DUP5 PUSH1 0x40 DUP11 KECCAK256 ADD SLOAD AND PUSH2 0x1141 JUMPI PUSH2 0x135 SWAP6 DUP7 SLOAD SWAP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0xF44 PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP11 DUP2 MSTORE DUP7 DUP2 ADD SWAP3 DUP3 DUP5 MSTORE DUP7 DUP14 MSTORE DUP8 MSTORE PUSH1 0x40 DUP13 KECCAK256 SWAP1 MLOAD DUP2 SSTORE ADD SWAP1 MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP7 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP8 DUP9 DUP3 LT ISZERO PUSH2 0x112E JUMPI SWAP1 PUSH2 0xF8B SWAP2 DUP8 DUP3 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 DUP4 DUP7 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0xFAB PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP10 DUP2 MSTORE DUP5 DUP2 ADD SWAP3 DUP4 MSTORE PUSH2 0x137 DUP1 SLOAD SWAP1 DUP10 DUP3 LT ISZERO PUSH2 0x111B JUMPI SWAP1 PUSH2 0xFD1 SWAP2 DUP9 DUP3 ADD DUP2 SSTORE PUSH2 0x283E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1108 JUMPI SWAP1 DUP7 SWAP2 MLOAD DUP2 SSTORE ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x1001 PUSH1 0x44 CALLDATALOAD PUSH2 0x148 PUSH2 0x301B JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0x144 DUP3 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP7 MSTORE PUSH2 0x145 DUP2 MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x40 DUP8 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x102F PUSH1 0x40 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD DUP3 MSTORE DUP2 ADD PUSH1 0xC4 CALLDATALOAD DUP2 MSTORE PUSH2 0x18E DUP1 SLOAD SWAP1 DUP7 DUP3 LT ISZERO PUSH2 0x10F5 JUMPI SWAP1 PUSH2 0x1058 SWAP2 DUP6 DUP3 ADD DUP2 SSTORE PUSH2 0x283E JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x10E2 JUMPI SWAP1 DUP4 SWAP2 MLOAD DUP4 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x150 SWAP2 DUP3 SLOAD SWAP4 DUP5 LT ISZERO PUSH2 0x10D0 JUMPI POP DUP3 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP5 SWAP3 PUSH2 0x10AB SWAP3 PUSH1 0x4 SWAP6 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST POP POP PUSH2 0x10C1 PUSH2 0x10B9 DUP3 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x151 PUSH2 0x301B JUMP JUMPDEST PUSH2 0x86D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x33C5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 SWAP1 MSTORE DUP5 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP6 DUP10 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x4 DUP12 SWAP1 MSTORE DUP8 DUP12 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP13 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP9 DUP13 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP8 DUP12 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3458F6C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x116A CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST SWAP1 PUSH2 0x1173 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x117C PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0x1184 PUSH2 0x3CC5 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0x119A DUP5 DUP5 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x11BA PUSH2 0x11A8 DUP4 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP7 PUSH2 0x11B4 DUP9 DUP6 PUSH2 0x35D8 JUMP JUMPDEST DUP5 PUSH2 0x3595 JUMP JUMPDEST PUSH1 0x20 DUP7 SWAP8 SWAP3 SWAP8 ADD SWAP7 DUP8 MLOAD PUSH2 0x11CF DUP4 DUP4 DUP10 PUSH2 0x3BDA JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x12BD JUMPI POP POP SWAP1 PUSH2 0x11FB SWAP2 DUP9 MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x11F5 DUP6 DUP6 PUSH2 0x3629 JUMP JUMPDEST SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV SWAP7 DUP8 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0x1237 SWAP4 PUSH2 0x122E PUSH2 0x1224 DUP14 PUSH2 0x5E5 DUP15 MLOAD PUSH2 0x11F5 DUP9 PUSH2 0x5E0 DUP12 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2F12 JUMP JUMPDEST DIV SWAP11 DUP12 DUP9 PUSH2 0x3A95 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP1 DUP9 LT PUSH2 0x129F JUMPI POP PUSH2 0x1260 DUP2 PUSH1 0x80 DUP8 ADD MLOAD AND DUP6 DUP4 PUSH1 0xC0 DUP10 ADD MLOAD AND PUSH2 0x140 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP7 SWAP2 SWAP8 SWAP1 SWAP6 PUSH1 0x60 DUP4 ADD MLOAD DUP1 DUP11 GT PUSH2 0x6A9 JUMPI POP SWAP3 PUSH1 0xA0 DUP6 SWAP4 PUSH2 0x1296 DUP6 DUP14 SWAP6 PUSH2 0x1290 PUSH2 0x662 SWAP11 PUSH2 0x6A5 SWAP15 SWAP14 SWAP13 SWAP11 PUSH2 0x38F0 JUMP JUMPDEST MLOAD PUSH2 0x3A34 JUMP JUMPDEST ADD MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x130A PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x152 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x155 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x137A PUSH2 0x1360 PUSH1 0x1 PUSH2 0x3221 JUMP JUMPDEST PUSH2 0x1374 PUSH2 0x136D DUP3 DUP5 PUSH2 0x2F32 JUMP JUMPDEST SWAP2 DUP4 PUSH2 0x2E76 JUMP JUMPDEST SWAP2 PUSH2 0x3268 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x139B PUSH2 0x3D83 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x13CD PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x13FE PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x14C SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1422 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13D SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1446 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x139 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x153 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x18F SLOAD NUMBER LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH1 0x40 DUP3 DUP2 SWAP3 DUP2 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF PUSH1 0x1 DUP3 SLOAD SWAP3 ADD SLOAD AND DUP3 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15A3 PUSH2 0x159D PUSH2 0x1598 PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x2DE8 JUMP JUMPDEST SWAP1 PUSH2 0x2FA6 JUMP JUMPDEST PUSH2 0x14A SLOAD LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x146 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x158 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x1653 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x153 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1683 PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x16EF JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x16DD JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x137A PUSH2 0x1740 PUSH1 0x1 PUSH2 0x3221 JUMP JUMPDEST PUSH2 0x1374 PUSH2 0x174D DUP3 DUP5 PUSH2 0x2E76 JUMP JUMPDEST SWAP2 DUP4 PUSH2 0x2F32 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1C3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x148 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x17AD DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x17D5 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x149 SSTORE DUP1 RETURN JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x17F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST PUSH2 0x17FE PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x1807 PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0x180F PUSH2 0x3CC5 JUMP JUMPDEST DUP3 MLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x1828 SWAP1 DUP3 AND PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x1842 PUSH2 0x1836 DUP4 DUP6 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0xAF7 DUP6 DUP6 PUSH2 0x35D8 JUMP JUMPDEST SWAP6 PUSH8 0xDE0B6B3A763FFFF NOT SWAP1 DUP2 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x1996 JUMPI PUSH2 0x1862 SWAP1 DUP7 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x186C DUP7 DUP7 PUSH2 0x3C22 JUMP JUMPDEST SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1996 JUMPI PUSH2 0x18B0 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x1886 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH2 0x189A PUSH1 0x20 DUP9 ADD SWAP3 PUSH2 0x5E5 DUP4 DUP6 MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP6 DUP7 SWAP2 PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2F12 JUMP JUMPDEST DIV SWAP8 PUSH1 0x40 DUP9 ADD MLOAD DUP1 DUP11 GT PUSH2 0x1978 JUMPI POP PUSH2 0x18CB SWAP1 DUP4 MLOAD SWAP3 PUSH2 0x3629 JUMP JUMPDEST SWAP6 DUP6 DUP10 MUL SWAP1 DUP10 DUP3 DIV DUP8 EQ DUP11 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x18E6 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0x190A PUSH2 0x192F SWAP7 PUSH2 0x1903 PUSH1 0x60 SWAP10 PUSH2 0x1924 SWAP5 PUSH2 0x2EFF JUMP JUMPDEST DIV DUP4 PUSH2 0x2DDB JUMP JUMPDEST SWAP4 DUP5 DUP2 PUSH1 0x80 DUP12 ADD MLOAD AND SWAP2 PUSH1 0xC0 DUP12 ADD MLOAD AND PUSH2 0x141 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP8 SWAP2 DUP6 SWAP8 SWAP2 SWAP8 PUSH2 0x2FC4 JUMP JUMPDEST SWAP8 ADD MLOAD DUP1 DUP9 LT PUSH2 0x195A JUMPI POP SWAP3 PUSH2 0x1955 DUP9 SWAP10 SWAP4 PUSH2 0x6A5 SWAP9 SWAP10 SWAP4 PUSH2 0x1290 PUSH1 0x1 PUSH2 0x662 SWAP9 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0x39AA JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x19C4 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x140 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x190 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1A07 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x141 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x134 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x142 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1A69 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13B SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x156 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x139 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1ACB PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x154 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x1B04 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x158 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1B35 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13E SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x154 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x149 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP1 DUP4 DUP4 SUB PUSH2 0x522 JUMPI PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP2 DUP3 DUP3 SUB PUSH2 0x522 JUMPI PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x522 JUMPI PUSH1 0x64 CALLDATALOAD SWAP6 PUSH1 0xFF PUSH2 0x14B SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1D6A JUMPI PUSH2 0x1BDD SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x1BEA DUP3 PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP6 SWAP1 SLOAD SWAP9 PUSH1 0x40 MLOAD SWAP7 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP9 MSTORE DUP3 PUSH1 0x4 DUP10 ADD MSTORE DUP8 PUSH1 0x24 DUP2 DUP9 PUSH1 0x20 SWAP15 DUP16 SWAP6 PUSH1 0x3 SHL SHR AND GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x1D5F JUMPI DUP9 SWAP8 PUSH2 0x1D30 JUMPI JUMPDEST POP DUP7 ISZERO PUSH2 0x1D12 JUMPI PUSH2 0x1C44 PUSH2 0x1C37 DUP6 PUSH2 0x138 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP9 PUSH2 0x3EC6 JUMP JUMPDEST SWAP9 DUP10 DUP2 LT PUSH2 0x1D08 JUMPI JUMPDEST POP SWAP1 PUSH2 0x1C8C SWAP4 SWAP3 SWAP2 PUSH32 0xFAAB3901CD2D6E9B5D0A0C6E34C643B8C844726F3C54DE69517E571BF24BBD92 PUSH1 0x40 DUP13 DUP13 DUP3 MLOAD SWAP2 DUP13 DUP4 MSTORE DUP3 ADD MSTORE LOG4 PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1D04 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1CF9 JUMPI PUSH2 0x1CE4 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x1CEF DUP3 DUP1 SWAP3 PUSH2 0x285A JUMP JUMPDEST PUSH2 0x4AB JUMPI DUP1 PUSH2 0x1CDA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST SWAP9 POP PUSH2 0x1C8C PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x44 DUP8 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x3FE8C5EB PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP7 POP DUP10 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1D58 JUMPI JUMPDEST PUSH2 0x1D48 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x522 JUMPI MLOAD SWAP6 DUP11 PUSH2 0x1C21 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31B0D35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1D95 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x1DC0 PUSH2 0x3CC5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1DE3 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x159 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x12F SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x133 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x157 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1EBF PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x143 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x1F34 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1FB8 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND PUSH1 0xCA SSTORE DUP1 RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x20B4 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x20B4 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x2014 DUP2 PUSH2 0x2892 JUMP JUMPDEST SWAP3 PUSH2 0x2022 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x285A JUMP JUMPDEST DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP8 ADD ADD GT PUSH2 0x20B0 JUMPI PUSH2 0x139B SWAP6 PUSH1 0x20 DUP4 PUSH2 0x20A3 SWAP5 PUSH1 0x24 PUSH1 0x1 SWAP10 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x207A DUP3 ADDRESS EQ ISZERO PUSH2 0x2926 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x2987 JUMP JUMPDEST PUSH2 0x20AB PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x29E8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x147 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x137 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x40 PUSH2 0x2150 DUP5 DUP5 PUSH2 0x283E JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x21F6 JUMPI PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x16EF JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x2237 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x14F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2268 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x190 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x138 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x17AD DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI PUSH2 0x139B SWAP2 PUSH2 0x2300 DUP3 DUP6 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x207A DUP3 ADDRESS EQ ISZERO PUSH2 0x2926 JUMP JUMPDEST PUSH2 0x2308 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x2311 DUP3 PUSH2 0x2892 JUMP JUMPDEST SWAP1 PUSH2 0x231F PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x232E DUP5 PUSH2 0x2892 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x29E8 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2353 PUSH2 0x3EA5 JUMP JUMPDEST PUSH2 0x14B DUP1 SLOAD PUSH1 0xFF DUP2 AND DUP1 PUSH2 0x241D JUMPI JUMPDEST DUP1 PUSH2 0x2403 JUMPI JUMPDEST PUSH2 0x2370 JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 DUP3 DUP1 LOG1 PUSH2 0x133 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x93B JUMPI DUP3 PUSH1 0x4 DUP2 DUP5 DUP1 SWAP5 PUSH4 0x8456CB59 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23F6 JUMPI PUSH2 0x23E6 JUMPI JUMPDEST POP POP PUSH2 0x23E0 PUSH2 0x3058 JUMP JUMPDEST DUP2 DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH2 0x23EF SWAP2 PUSH2 0x285A JUMP JUMPDEST DUP2 DUP2 PUSH2 0x23D6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x2412 PUSH2 0x159D PUSH2 0x1598 PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x14A SLOAD LT ISZERO PUSH2 0x2368 JUMP JUMPDEST POP PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x2362 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x143 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x93B JUMPI PUSH2 0x2496 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x24DA PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x14A SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x140 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x2532 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x147 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI DUP2 PUSH1 0x40 SWAP2 PUSH1 0x20 SWAP4 MSTORE PUSH2 0x144 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x14B SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x25C8 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x142 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x93B JUMPI PUSH2 0x25F9 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x14B SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x14F SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x2684 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x130 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x26B5 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13F SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x159 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x270D PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x146 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x18F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2786 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x15A SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x135 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x27BF DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x27F2 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13A SSTORE DUP1 RETURN JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x287C JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH2 0x28C8 PUSH1 0xE0 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0xC0 PUSH2 0x2921 DUP2 DUP4 SWAP6 PUSH2 0x28D9 DUP2 PUSH2 0x282A JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2905 PUSH1 0x80 DUP3 ADD PUSH2 0x282A JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x2916 PUSH1 0xA0 DUP3 ADD PUSH2 0x282A JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE ADD PUSH2 0x282A JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x292D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x298E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2A23 JUMPI POP PUSH2 0x2A21 SWAP2 POP PUSH2 0x2C51 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP2 SWAP4 SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP7 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x2C22 JUMPI JUMPDEST POP PUSH2 0x2AB4 JUMPI DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP6 SWAP3 SWAP5 SWAP3 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x2BCC JUMPI PUSH2 0x2AE9 DUP7 PUSH2 0x2C51 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP4 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x2BC4 JUMPI JUMPDEST POP PUSH2 0x2B26 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2BB0 SWAP4 PUSH1 0x0 DUP1 PUSH2 0x2B37 PUSH1 0x27 PUSH2 0x2892 JUMP JUMPDEST SWAP6 PUSH2 0x2B44 DUP6 MLOAD SWAP8 DUP9 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL DUP6 DUP9 ADD MSTORE DUP6 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x2BBA JUMPI RETURNDATASIZE PUSH2 0x2BA1 PUSH2 0x2B98 DUP3 PUSH2 0x2892 JUMP JUMPDEST SWAP3 MLOAD SWAP3 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x2CF3 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2B20 JUMP JUMPDEST POP PUSH1 0x60 SWAP3 POP PUSH2 0x2CF3 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x2B1A JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2C4A JUMPI JUMPDEST PUSH2 0x2C39 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4AB JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x2A54 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2C2F JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2C98 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2D55 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2D07 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2D10 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2D68 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x2DAE JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x2D8B JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC17 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x137 DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2E1F JUMPI POP POP POP POP PUSH2 0x2E1B PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x139 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0x2E6C PUSH2 0x2E5B PUSH2 0x2E66 PUSH1 0x1 SWAP4 PUSH2 0x2E60 PUSH2 0x2E3D DUP11 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD PUSH2 0x2E48 DUP2 DUP13 PUSH2 0x2E92 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x2E54 DUP14 DUP13 PUSH2 0x283E JUMP JUMPDEST POP SLOAD PUSH2 0x2DDB JUMP JUMPDEST PUSH2 0x3EC6 JUMP JUMPDEST SWAP1 PUSH2 0x2DDB JUMP JUMPDEST SWAP9 PUSH2 0x2DDB JUMP JUMPDEST SWAP5 ADD SWAP3 SWAP2 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0xC17 JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x2EC0 DUP2 PUSH1 0x0 SWAP6 PUSH2 0x2EB6 PUSH2 0x2EAD DUP3 PUSH2 0x150 PUSH2 0x27FC JUMP JUMPDEST SWAP4 SWAP1 SLOAD SWAP3 PUSH2 0x2F4B JUMP JUMPDEST SWAP2 PUSH1 0x3 SHL SHR PUSH2 0x2E76 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT PUSH2 0x2ECF JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x2EF7 SWAP2 SWAP5 POP PUSH2 0x2EF1 SWAP3 POP DUP1 SWAP5 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x13A SLOAD PUSH2 0x2EFF JUMP JUMPDEST DIV PUSH2 0x2EFF JUMP JUMPDEST DIV CODESIZE DUP1 PUSH2 0x2EC9 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0xC17 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x2F1C JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB SWAP3 SWAP2 PUSH1 0x0 SGT DUP1 ISZERO DUP3 DUP6 SGT AND SWAP2 DUP5 SLT AND OR PUSH2 0xC17 JUMPI JUMP JUMPDEST PUSH2 0x2F57 DUP2 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP SLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x2F97 PUSH2 0x2F8A PUSH2 0x2F9D SWAP4 PUSH2 0x151 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP5 PUSH2 0x2F12 JUMP JUMPDEST SWAP3 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH2 0x2F32 JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FBC JUMPI PUSH2 0x2E5B PUSH2 0x2FA3 SWAP3 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xC17 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x287C JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FF3 DUP3 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0x3000 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x3011 PUSH1 0x1F NOT SWAP2 PUSH2 0x2FD1 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x287C JUMPI DUP2 PUSH2 0x303D SWAP2 PUSH1 0x1 PUSH2 0x3054 SWAP5 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x131 SLOAD DUP1 ISZERO PUSH2 0x3103 JUMPI PUSH2 0x137 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x3075 DUP5 PUSH2 0x2FE9 JUMP JUMPDEST SWAP1 DUP3 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH2 0x30BF JUMPI POP POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3093 JUMPI POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x30B9 PUSH2 0x30B1 DUP7 PUSH2 0xB39 DUP8 PUSH2 0x30AB PUSH1 0x1 SWAP8 DUP10 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x138 PUSH2 0x301B JUMP JUMPDEST ADD PUSH2 0x3085 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x30FB PUSH1 0x1 SWAP2 PUSH2 0x30D0 DUP7 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x30DA DUP8 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE PUSH2 0x2E60 PUSH2 0x30E8 DUP8 DUP7 PUSH2 0x283E JUMP JUMPDEST POP SLOAD PUSH2 0x30F4 DUP9 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x3EC6 JUMP JUMPDEST SWAP4 ADD SWAP1 PUSH2 0x3079 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8ED JUMPI SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x313B SWAP1 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3152 DUP2 PUSH2 0x3185 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x50A JUMPI POP SWAP1 JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x522 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x522 JUMPI PUSH2 0x2FA3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x315E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP2 DUP4 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x31DB JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP4 PUSH2 0x31BC JUMPI POP SWAP2 SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x31D7 SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE DUP2 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x137 SLOAD SWAP1 PUSH2 0x31F5 DUP3 PUSH2 0x2FE9 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3204 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x3210 PUSH1 0x1 SWAP3 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x321A DUP3 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE ADD PUSH2 0x31F9 JUMP JUMPDEST SWAP1 PUSH2 0x3242 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 PUSH2 0x157 SLOAD PUSH2 0x154 SLOAD SWAP3 NUMBER ADD SUB MUL PUSH2 0x2F12 JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x325F JUMPI DUP3 SUB SWAP2 DUP1 DUP4 PUSH2 0x155 SLOAD MUL DIV SWAP3 PUSH2 0x156 SLOAD MUL SDIV SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3272 PUSH2 0x32CA JUMP JUMPDEST SWAP3 SWAP1 DUP1 DUP3 LT ISZERO PUSH2 0x32C0 JUMPI DUP4 SWAP2 PUSH2 0x3287 SWAP2 PUSH2 0x2FC4 JUMP JUMPDEST SWAP4 GT ISZERO PUSH2 0x32BB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x32B3 JUMPI PUSH2 0x329F SWAP2 PUSH2 0x2FC4 JUMP JUMPDEST PUSH1 0x1 SHR DUP1 DUP3 LT ISZERO PUSH2 0x32AE JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x152 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 DUP5 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL DUP1 ISZERO PUSH2 0x33BA JUMPI PUSH1 0x0 SWAP5 DUP6 SWAP2 PUSH2 0x3397 JUMPI JUMPDEST POP ISZERO PUSH2 0x3380 JUMPI POP PUSH2 0x153 SLOAD AND SWAP1 DUP1 MLOAD SWAP5 DUP6 MSTORE DUP1 DUP6 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL DUP1 ISZERO PUSH2 0x3375 JUMPI PUSH1 0x0 SWAP6 DUP7 SWAP2 PUSH2 0x3352 JUMPI JUMPDEST POP ISZERO PUSH2 0x333B JUMPI POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x24 SWAP3 POP MLOAD SWAP1 PUSH4 0x5E89893 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP2 PUSH2 0x336C SWAP3 SWAP7 POP RETURNDATASIZE DUP8 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP5 SWAP1 SWAP5 CODESIZE PUSH2 0x332F JUMP JUMPDEST POP MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x24 SWAP1 DUP4 MLOAD SWAP1 PUSH4 0x5E89893 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x33B1 SWAP2 SWAP5 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP4 SWAP1 SWAP4 CODESIZE PUSH2 0x3305 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 MSTORE PUSH2 0x100 DUP2 ADD SWAP3 SWAP2 PUSH1 0xE0 SWAP1 PUSH1 0xC0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x33E7 DUP4 PUSH2 0x282A JUMP JUMPDEST AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x33F9 PUSH1 0x20 DUP4 ADD PUSH2 0x282A JUMP JUMPDEST AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x343C PUSH1 0x80 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x34CC SWAP4 PUSH2 0x3493 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP6 PUSH2 0x346D DUP3 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x3479 DUP8 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3489 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP5 DUP6 SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x34ED JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x3516 JUMPI JUMPDEST DUP2 PUSH2 0x3505 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x522 JUMPI PUSH2 0x3103 SWAP1 PUSH2 0x315E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x34F8 JUMP JUMPDEST PUSH2 0x3584 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x134 PUSH2 0x3533 DUP5 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3543 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x133 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP4 DUP5 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x34ED JUMPI POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x35A0 SWAP1 PUSH2 0x2DE8 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH2 0x35AD DUP4 DUP6 PUSH2 0x2FA6 JUMP JUMPDEST SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x35BA JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x79121201 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x303D PUSH2 0x3054 SWAP2 PUSH2 0x35E9 DUP5 DUP3 PUSH2 0x2F4B JUMP JUMPDEST PUSH2 0x361F PUSH2 0x35F8 DUP4 PUSH2 0x150 PUSH2 0x27FC JUMP JUMPDEST PUSH2 0x360B DUP3 SWAP5 SWAP3 SLOAD SWAP3 DUP4 DUP4 PUSH1 0x3 SHL SHR PUSH2 0x2E76 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x151 PUSH2 0x27FC JUMP JUMPDEST SWAP1 PUSH2 0x134 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x3649 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x5E0 PUSH2 0x2E5B SWAP3 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST POP POP POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP7 PUSH2 0x366C PUSH2 0x342D JUMP JUMPDEST SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP6 SWAP1 DUP4 AND DUP1 PUSH2 0x3878 JUMPI JUMPDEST POP DUP3 PUSH2 0x12F SLOAD AND DUP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP6 MSTORE AND DUP1 PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 SWAP5 DUP6 DUP6 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x386D JUMPI DUP5 SWAP6 PUSH2 0x383E JUMPI JUMPDEST POP DUP5 PUSH2 0x371D JUMPI JUMPDEST POP POP POP POP POP DUP7 ADD MLOAD ISZERO PUSH2 0x36D9 JUMPI JUMPDEST POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH2 0x36F1 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x2EFF JUMP JUMPDEST DIV DUP1 DUP6 MSTORE SWAP1 DUP3 ISZERO PUSH2 0x3715 JUMPI PUSH2 0x370D SWAP3 DIV SWAP1 DUP2 PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2DDB JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x36D1 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x370D JUMP JUMPDEST PUSH2 0x372B SWAP1 PUSH2 0x130 SLOAD AND PUSH2 0x3185 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ISZERO PUSH2 0x36C3 JUMPI SWAP1 SWAP2 SWAP3 SWAP4 SWAP12 POP DUP5 DUP12 PUSH2 0x3765 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x375F PUSH2 0x3755 DUP14 DUP14 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x143 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV PUSH2 0x2F12 JUMP JUMPDEST DUP2 DUP4 ADD DUP2 DUP2 MSTORE SWAP6 SWAP1 DUP12 ISZERO PUSH2 0x3834 JUMPI POP PUSH2 0x3790 SWAP2 PUSH2 0x3784 PUSH1 0x60 SWAP3 DUP14 PUSH2 0x2F12 JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE DUP6 MLOAD PUSH2 0x2DDB JUMP JUMPDEST DUP1 SWAP14 JUMPDEST LT SWAP3 DUP4 ISZERO PUSH2 0x37BF JUMPI JUMPDEST POP POP POP PUSH2 0x37AC JUMPI JUMPDEST DUP1 DUP1 DUP1 PUSH2 0x36C3 JUMP JUMPDEST DUP2 SWAP3 SWAP10 POP MSTORE DUP1 PUSH1 0x60 DUP9 ADD MSTORE SWAP7 CODESIZE DUP1 PUSH2 0x37A4 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3829 JUMPI SWAP1 DUP12 SWAP2 DUP5 SWAP2 PUSH2 0x37F8 JUMPI JUMPDEST POP LT CODESIZE DUP5 DUP2 PUSH2 0x379C JUMP JUMPDEST DUP1 SWAP3 POP DUP6 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x3822 JUMPI JUMPDEST PUSH2 0x3811 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xE99 JUMPI DUP11 SWAP1 MLOAD CODESIZE PUSH2 0x37EE JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3807 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP DUP1 SWAP14 PUSH2 0x3793 JUMP JUMPDEST SWAP1 SWAP5 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3866 JUMPI JUMPDEST PUSH2 0x3856 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1D04 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x36BC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x384C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 POP PUSH1 0x20 DUP4 PUSH2 0x1C3 SLOAD AND SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x64A731E9 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP1 PUSH2 0x38BD JUMPI JUMPDEST PUSH2 0x38B6 SWAP2 POP DUP5 PUSH2 0x2EFF JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x3680 JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x38E8 JUMPI JUMPDEST DUP2 PUSH2 0x38D6 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x20B0 JUMPI PUSH2 0x38B6 SWAP1 MLOAD PUSH2 0x38AB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x38C9 JUMP JUMPDEST DUP1 PUSH2 0x38F9 PUSH2 0x32CA JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH2 0x3906 PUSH1 0x0 PUSH2 0x3221 JUMP JUMPDEST SWAP5 ADD SWAP4 DUP3 SWAP2 PUSH2 0x399E JUMPI JUMPDEST ADD SWAP4 DUP5 PUSH1 0x0 DUP1 DUP3 SLT PUSH2 0x3998 JUMPI POP JUMPDEST DUP5 SUB SWAP2 DUP2 DUP6 GT PUSH2 0x3960 JUMPI POP POP DUP2 DUP2 GT PUSH2 0x3942 JUMPI POP POP PUSH2 0x155 SSTORE PUSH2 0x156 SSTORE NUMBER PUSH2 0x157 SSTORE JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x6DA41E5 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP1 DUP6 SWAP3 GT PUSH2 0x3986 JUMPI PUSH1 0x44 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x6DA41E5 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB4FD35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SUB PUSH2 0x391E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB SWAP1 PUSH2 0x3910 JUMP JUMPDEST PUSH2 0x39D7 SWAP2 SWAP3 PUSH2 0x39BB DUP3 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x39C7 DUP6 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3489 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x3A29 JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A21 SWAP2 PUSH2 0x285A JUMP JUMPDEST SWAP1 PUSH2 0x134 PUSH2 0x3A43 DUP4 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3A53 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x133 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD PUSH2 0x3A18 JUMP JUMPDEST SWAP3 PUSH2 0x3AA7 DUP4 PUSH2 0x3AAD SWAP7 SWAP5 SWAP4 SWAP8 SWAP6 PUSH2 0x3C22 JUMP JUMPDEST SWAP1 PUSH2 0x3AD6 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x3AB8 JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 PUSH2 0x3AE3 SWAP3 SWAP5 SWAP2 SWAP4 PUSH2 0x3BA3 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP2 DUP2 MUL SWAP2 PUSH1 0x1 PUSH1 0xFF SHL SWAP2 DUP6 DUP3 SLT DUP4 DUP3 EQ AND PUSH2 0x3B8F JUMPI DUP2 DUP5 SDIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3B7B JUMPI PUSH8 0xDE0B6B3A763FFFF NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0x3B7B JUMPI PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3B7B JUMPI DUP3 ISZERO PUSH2 0x3B67 JUMPI DUP2 EQ PUSH1 0x0 NOT DUP4 EQ AND PUSH2 0x3B53 JUMPI SDIV SWAP1 DUP1 DUP3 SLT PUSH2 0x32AE JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x3BB2 SWAP1 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x2F9D SWAP2 PUSH2 0x2EFF JUMP JUMPDEST DUP3 DUP3 PUSH2 0x3BE5 SWAP3 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x32B3 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x3BFC SWAP2 PUSH2 0x3629 JUMP JUMPDEST SWAP1 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x3C11 PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 DUP3 SWAP5 DUP1 SLOAD DUP5 MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3C2E DUP2 PUSH2 0x148 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP2 PUSH2 0x18E SWAP2 PUSH2 0x3C44 DUP2 DUP5 PUSH2 0x283E JUMP JUMPDEST POP SLOAD SWAP3 PUSH2 0x18F SLOAD NUMBER LT ISZERO PUSH2 0x3C6A JUMPI JUMPDEST POP POP DUP1 DUP3 LT ISZERO PUSH2 0x32BB JUMPI PUSH2 0xB39 SWAP1 PUSH2 0x2FA3 SWAP4 PUSH2 0x2EFF JUMP JUMPDEST DUP3 SWAP4 POP PUSH2 0x3C7E PUSH2 0x3C89 SWAP4 SWAP3 PUSH2 0x3C84 SWAP3 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x3C02 JUMP JUMPDEST PUSH2 0x3C91 JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x3C53 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP1 MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SUB SWAP1 DUP5 DUP3 GT PUSH2 0xC17 JUMPI PUSH2 0x3CBE PUSH2 0x2E60 SWAP3 PUSH2 0x2E1B SWAP6 PUSH2 0x2EFF JUMP JUMPDEST SWAP3 MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x137 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x3CD8 DUP5 PUSH2 0x2FE9 JUMP JUMPDEST SWAP4 DUP3 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x3D05 JUMPI POP POP POP DUP2 ISZERO PUSH2 0x3CF9 JUMPI SWAP1 PUSH2 0x3CF6 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP POP PUSH2 0x149 SLOAD PUSH1 0x1 SHL SWAP2 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP3 PUSH2 0x3D12 DUP6 PUSH2 0x312F JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3D1E DUP8 DUP10 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE PUSH2 0x3D37 PUSH2 0x3D2C DUP4 DUP9 PUSH2 0x2E92 JUMP JUMPDEST POP PUSH2 0x2E54 DUP9 DUP7 PUSH2 0x283E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x3D74 PUSH2 0x3D7A SWAP3 PUSH2 0x2E60 DUP6 PUSH2 0x3D6B PUSH1 0x1 SWAP8 PUSH2 0x5E5 SWAP7 PUSH2 0x3EC6 JUMP JUMPDEST SWAP5 DUP6 SWAP2 DUP13 PUSH2 0x3C22 JUMP JUMPDEST SWAP6 PUSH2 0x2DDB JUMP JUMPDEST SWAP5 ADD SWAP2 SWAP1 PUSH2 0x3CDC JUMP JUMPDEST PUSH2 0x18F DUP1 SLOAD NUMBER LT ISZERO PUSH2 0x3D92 JUMPI POP JUMP JUMPDEST PUSH2 0x137 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3DAC JUMPI POP POP PUSH2 0x190 SLOAD NUMBER ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 DUP1 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 PUSH1 0x1 SWAP4 PUSH2 0x18E PUSH2 0x3DE2 PUSH2 0x3C7E DUP4 DUP4 PUSH2 0x283E JUMP JUMPDEST SWAP1 PUSH2 0x3E00 PUSH2 0x3DF8 PUSH2 0x3DF2 DUP6 PUSH2 0x312F JUMP JUMPDEST DUP5 PUSH2 0x3C91 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x283E JUMP JUMPDEST POP SSTORE MLOAD PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 ADD PUSH2 0x3D99 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x31DB JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E6C JUMPI JUMPDEST POP ISZERO PUSH2 0x3E5A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3E9D JUMPI JUMPDEST DUP2 PUSH2 0x3E85 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4AB JUMPI POP PUSH2 0x3E97 SWAP1 PUSH2 0x315E JUMP JUMPDEST CODESIZE PUSH2 0x3E52 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3E78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x3EB4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP2 PUSH2 0x2F12 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xC3 STOP SLOAD JUMP 0x4B ADD 0xC6 0xD1 PUSH10 0xEB8BD2456F55EBB4D8C8 0x21 0xD9 0xD1 LOG1 CREATE2 PUSH21 0x158535D7DC1C64736F6C6343000814003300000000 ",
      "sourceMap": "903:25926:51:-:0;;;;;;;1332:4:9;1324:13;;6007::8;903:25926:51;;;;;;;;;;;;;;6078:31:8;6074:139;;-1:-1:-1;903:25926:51;;;;;;;;1324:13:9;903:25926:51;;;;;;;;;;;;;;;;6074:139:8;903:25926:51;;;;;;6007:13:8;903:25926:51;6174:28:8;903:25926:51;;;;;;6174:28:8;6074:139;;;903:25926:51;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "abi_decode_address": {
          "entryPoint": 10282,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_bool_fromMemory": {
          "entryPoint": 12638,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_bytes32t_bool_fromMemory": {
          "entryPoint": 12651,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_struct_RedeemTCandTPParams": {
          "entryPoint": 10414,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_address_uint256": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_uint256_struct_PeggedTokenParams_calldata": {
          "entryPoint": 13253,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256_struct_FeeCalcs": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "allocate_and_zero_memory_array_array_uint256_dyn": {
          "entryPoint": 12265,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "allocate_and_zero_memory_struct_struct_FeeCalcs": {
          "entryPoint": 13357,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "array_allocation_size_array_uint256_dyn": {
          "entryPoint": 12241,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_bytes": {
          "entryPoint": 10386,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_push_from_uint256_to_array_uint256_dyn_storage_ptr": {
          "entryPoint": 12315,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "checked_add_int256": {
          "entryPoint": 11894,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_uint256": {
          "entryPoint": 11739,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_uint256": {
          "entryPoint": 12050,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_uint256": {
          "entryPoint": 12031,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_int256": {
          "entryPoint": 12082,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_uint256": {
          "entryPoint": 12228,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "finalize_allocation": {
          "entryPoint": 10330,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_calcAccWithDecayFactor": {
          "entryPoint": 12833,
          "id": 12543,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "fun_calcCtargemaCA": {
          "entryPoint": 15557,
          "id": 15977,
          "parameterSlots": 0,
          "returnSlots": 2
        },
        "fun_calcFees": {
          "entryPoint": 13912,
          "id": 12325,
          "parameterSlots": 4,
          "returnSlots": 3
        },
        "fun_calcLckACandACgain": {
          "entryPoint": 11752,
          "id": 11242,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "fun_calcMaxQACToOperateTP": {
          "entryPoint": 12904,
          "id": 12721,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "fun_calcNewEma": {
          "entryPoint": 15505,
          "id": 15739,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_calcOtfPnLTP": {
          "entryPoint": 12107,
          "id": 11097,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_checkIfAuthorizedChanger": {
          "entryPoint": 15895,
          "id": 20667,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_checkNotPaused": {
          "entryPoint": 16037,
          "id": 20801,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_depositAndMintTC": {
          "entryPoint": 13598,
          "id": 10732,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_depositAndMintTP": {
          "entryPoint": 13396,
          "id": 10681,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "fun_divPrec": {
          "entryPoint": 16070,
          "id": 27982,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_evalCoverage": {
          "entryPoint": 13717,
          "id": 10941,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "fun_evalTPavailableToMint": {
          "entryPoint": 14997,
          "id": 12368,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "fun_getCglb": {
          "entryPoint": 12198,
          "id": 11330,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getCtargemaTP": {
          "entryPoint": 15394,
          "id": 15827,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getLckACemaAdjusted": {
          "entryPoint": 15267,
          "id": 10785,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "fun_getPACtp": {
          "entryPoint": 12591,
          "id": 11487,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "fun_getPACtps": {
          "entryPoint": 12775,
          "id": 11558,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "fun_getPTCac": {
          "entryPoint": 13865,
          "id": 11282,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getPnLTP": {
          "entryPoint": 11922,
          "id": 11147,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "fun_getTCAvailableToRedeem": {
          "entryPoint": 15322,
          "id": 10822,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "fun_getTPAvailableToMint": {
          "entryPoint": 15062,
          "id": 10903,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "fun_peekFluxCapacitorSettings": {
          "entryPoint": 13002,
          "id": 12471,
          "parameterSlots": 0,
          "returnSlots": 2
        },
        "fun_peekPrice": {
          "entryPoint": 12677,
          "id": 11514,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "fun_setImplementation": {
          "entryPoint": 11345,
          "id": 678,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_settleLiquidationPrices": {
          "entryPoint": 12376,
          "id": 11037,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_tpi": {
          "entryPoint": 12550,
          "id": 11355,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "fun_updateAccumulators": {
          "entryPoint": 14576,
          "id": 12638,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_updateEmas": {
          "entryPoint": 15747,
          "id": 16056,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_updateTPtracking": {
          "entryPoint": 13784,
          "id": 11061,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_upgradeToAndCallUUPS": {
          "entryPoint": 10728,
          "id": 776,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_verifyCallResultFromTarget": {
          "entryPoint": 11507,
          "id": 2931,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "fun_withdrawAndBurnTC": {
          "entryPoint": 14900,
          "id": 10756,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_withdrawAndBurnTP": {
          "entryPoint": 14762,
          "id": 10709,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "memory_array_index_access_uint256_dyn": {
          "entryPoint": 11719,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "read_from_storage_reference_type_struct_EmaItem": {
          "entryPoint": 15362,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "require_helper_stringliteral_36e1": {
          "entryPoint": 10534,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "require_helper_stringliteral_52f1": {
          "entryPoint": 10631,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "storage_array_index_access_contract_IMocRC20_dyn": {
          "entryPoint": 10236,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "storage_array_index_access_struct_PegContainerItem_dyn": {
          "entryPoint": 10302,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "update_byte_slice_dynamic32": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        }
      },
      "generatedSources": [],
      "immutableReferences": {
        "1143": [
          {
            "length": 32,
            "start": 7900
          },
          {
            "length": 32,
            "start": 8269
          },
          {
            "length": 32,
            "start": 8915
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP2 CALLDATALOAD DUP2 SHR SWAP1 DUP2 PUSH4 0x1DDE6EF EQ PUSH2 0x27D8 JUMPI DUP2 PUSH4 0x1F1B684 EQ PUSH2 0x2790 JUMPI DUP2 PUSH4 0x73763B9 EQ PUSH2 0x276C JUMPI DUP2 PUSH4 0xC340A24 EQ PUSH2 0x2743 JUMPI DUP2 PUSH4 0xC36D897 EQ PUSH2 0x2724 JUMPI DUP2 PUSH4 0xD6AC463 EQ PUSH2 0x26DE JUMPI DUP2 PUSH4 0xDB49656 EQ PUSH2 0x26BF JUMPI DUP2 PUSH4 0xE0A8FD2 EQ PUSH2 0x269B JUMPI DUP2 PUSH4 0xF1E5E2B EQ PUSH2 0x2655 JUMPI DUP2 PUSH4 0x13ED7BA5 EQ PUSH2 0x262B JUMPI DUP2 PUSH4 0x1867E2F5 EQ PUSH2 0x260C JUMPI DUP2 PUSH4 0x1FE6A7AD EQ PUSH2 0x25D2 JUMPI DUP2 PUSH4 0x2069F753 EQ PUSH2 0x25AE JUMPI DUP2 PUSH4 0x23B98CDE EQ PUSH2 0x2587 JUMPI DUP2 PUSH4 0x24FFABA3 EQ PUSH2 0x2549 JUMPI DUP2 PUSH4 0x27EAB2A1 EQ PUSH2 0x2503 JUMPI DUP2 PUSH4 0x2A20D57D EQ PUSH2 0x24E4 JUMPI DUP2 PUSH4 0x2C43BD3B EQ PUSH2 0x24C0 JUMPI DUP2 PUSH4 0x2D88AF4A EQ PUSH2 0x2469 JUMPI DUP2 PUSH4 0x2DED50F0 EQ PUSH2 0x244A JUMPI DUP2 PUSH4 0x333431FD EQ PUSH2 0x242B JUMPI DUP2 PUSH4 0x33421C38 EQ PUSH2 0x233A JUMPI DUP2 PUSH4 0x3659CFE6 EQ PUSH2 0x22A1 JUMPI DUP2 PUSH4 0x3915EDCB EQ PUSH2 0x2272 JUMPI DUP2 PUSH4 0x3BC4AC0A EQ PUSH2 0x224E JUMPI DUP2 PUSH4 0x3CFB09EF EQ PUSH2 0x2208 JUMPI DUP2 PUSH4 0x3F4BA83A EQ PUSH2 0x218D JUMPI DUP2 PUSH4 0x407F0E34 EQ PUSH2 0x216E JUMPI DUP2 PUSH4 0x4B746001 EQ PUSH2 0x2121 JUMPI DUP2 PUSH4 0x4D977E78 EQ PUSH2 0x2102 JUMPI DUP2 PUSH4 0x4E1F907A EQ PUSH2 0x20D8 JUMPI DUP2 PUSH4 0x4F0F27EE EQ PUSH2 0x20B9 JUMPI DUP2 PUSH4 0x4F1EF286 EQ PUSH2 0x1FC5 JUMPI DUP2 PUSH4 0x5210570C EQ PUSH2 0x1F9F JUMPI DUP2 PUSH4 0x52D1902D EQ PUSH2 0x1EC9 JUMPI DUP2 PUSH4 0x543AEB48 EQ PUSH2 0x1EA5 JUMPI DUP2 PUSH4 0x5860EE63 EQ PUSH2 0x1E86 JUMPI DUP2 PUSH4 0x5C975ABB EQ PUSH2 0x1E60 JUMPI DUP2 PUSH4 0x5CFBE578 EQ PUSH2 0x1E41 JUMPI DUP2 PUSH4 0x60009E0B EQ PUSH2 0x1E17 JUMPI DUP2 PUSH4 0x647846A5 EQ PUSH2 0x1DED JUMPI DUP2 PUSH4 0x64EC230A EQ PUSH2 0x1DC9 JUMPI DUP2 PUSH4 0x662013F4 EQ PUSH2 0x1DA5 JUMPI DUP2 PUSH4 0x68274357 EQ PUSH2 0x1D7C JUMPI DUP2 PUSH4 0x6845C445 EQ PUSH2 0x1B7D JUMPI DUP2 PUSH4 0x6B5488DF EQ PUSH2 0x1B5E JUMPI DUP2 PUSH4 0x6F30471F EQ PUSH2 0x1B3F JUMPI DUP2 PUSH4 0x70713468 EQ PUSH2 0x1B1B JUMPI DUP2 PUSH4 0x735D3960 EQ PUSH2 0x1AD5 JUMPI DUP2 PUSH4 0x73E28AF9 EQ PUSH2 0x1AB1 JUMPI DUP2 PUSH4 0x7554FFFD EQ PUSH2 0x1A92 JUMPI DUP2 PUSH4 0x76228055 EQ PUSH2 0x1A73 JUMPI DUP2 PUSH4 0x7750BA0C EQ PUSH2 0x1A4F JUMPI DUP2 PUSH4 0x79F9A91C EQ PUSH2 0x1A30 JUMPI DUP2 PUSH4 0x7A193C31 EQ PUSH2 0x1A11 JUMPI DUP2 PUSH4 0x7A4FF1D9 EQ PUSH2 0x19ED JUMPI DUP2 PUSH4 0x7A727FE8 EQ PUSH2 0x19CE JUMPI DUP2 PUSH4 0x7AF5758C EQ PUSH2 0x19AA JUMPI DUP2 PUSH4 0x7B5A17AE EQ PUSH2 0x17DF JUMPI DUP2 PUSH4 0x7CBA2383 EQ PUSH2 0x17BB JUMPI DUP2 PUSH4 0x7D8E0314 EQ PUSH2 0x177E JUMPI DUP2 PUSH4 0x7F01C715 EQ PUSH2 0x1754 JUMPI DUP2 PUSH4 0x7F13B998 EQ PUSH2 0x1720 JUMPI DUP2 PUSH4 0x7F4A4FE0 EQ PUSH2 0x1701 JUMPI DUP2 PUSH4 0x8456CB59 EQ PUSH2 0x166A JUMPI DUP2 PUSH4 0x85BF9593 EQ PUSH2 0x1624 JUMPI DUP2 PUSH4 0x8CFA4241 EQ PUSH2 0x1605 JUMPI DUP2 PUSH4 0x8E2BDB86 EQ PUSH2 0x15DB JUMPI DUP2 PUSH4 0x9853C35A EQ PUSH2 0x15B1 JUMPI DUP2 PUSH4 0x9AD6659D EQ PUSH2 0x1577 JUMPI DUP2 PUSH4 0x9CABFC00 EQ PUSH2 0x152A JUMPI DUP2 PUSH4 0x9FD0506D EQ PUSH2 0x14FD JUMPI DUP2 PUSH4 0xA8E9AC30 EQ PUSH2 0x14DB JUMPI DUP2 PUSH4 0xAEA038DC EQ PUSH2 0x14BC JUMPI DUP2 PUSH4 0xB5E9EA8C EQ PUSH2 0x1492 JUMPI DUP2 PUSH4 0xB9FA6413 EQ PUSH2 0x1473 JUMPI DUP2 PUSH4 0xBB4872DE EQ PUSH2 0x1450 JUMPI DUP2 PUSH4 0xBECACA6B EQ PUSH2 0x142C JUMPI DUP2 PUSH4 0xC00F538D EQ PUSH2 0x1408 JUMPI DUP2 PUSH4 0xC84353C9 EQ PUSH2 0x13E4 JUMPI DUP2 PUSH4 0xCF351C1D EQ PUSH2 0x139E JUMPI DUP2 PUSH4 0xD1A0FAA0 EQ PUSH2 0x1382 JUMPI DUP2 PUSH4 0xD6AF11DA EQ PUSH2 0x1340 JUMPI DUP2 PUSH4 0xD87AAB6F EQ PUSH2 0x1321 JUMPI DUP2 PUSH4 0xD8DB6F5A EQ PUSH2 0x12DB JUMPI DUP2 PUSH4 0xD9B6C2E5 EQ PUSH2 0x1153 JUMPI DUP2 PUSH4 0xDB796072 EQ PUSH2 0xEDB JUMPI DUP2 PUSH4 0xDDB6D190 EQ PUSH2 0xE9D JUMPI DUP2 PUSH4 0xE1E121DA EQ PUSH2 0xC41 JUMPI DUP2 PUSH4 0xE44BB512 EQ PUSH2 0xA3F JUMPI DUP2 PUSH4 0xE4C0AAF4 EQ PUSH2 0x9FA JUMPI DUP2 PUSH4 0xE6B1627C EQ PUSH2 0x9B7 JUMPI DUP2 PUSH4 0xE7C25978 EQ PUSH2 0x993 JUMPI DUP2 PUSH4 0xEE1F438F EQ PUSH2 0x969 JUMPI DUP2 PUSH4 0xF13F4054 EQ PUSH2 0x93F JUMPI DUP2 PUSH4 0xF26114AA EQ PUSH2 0x750 JUMPI DUP2 PUSH4 0xF2808778 EQ PUSH2 0x72C JUMPI DUP2 PUSH4 0xF30B5614 EQ PUSH2 0x70D JUMPI DUP2 PUSH4 0xF375CFBA EQ PUSH2 0x6EE JUMPI DUP2 PUSH4 0xF5571E01 EQ PUSH2 0x546 JUMPI POP DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0xFADDA424 EQ PUSH2 0x4AE JUMPI PUSH4 0xFDA70F8B EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH2 0x4EA PUSH2 0x4E2 PUSH1 0x1 SWAP3 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP ADD SLOAD AND PUSH2 0x4F7 DUP2 PUSH2 0x3185 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x50A JUMPI PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x7F6E4DB9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST SWAP1 PUSH2 0x566 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x56F PUSH2 0x31E7 JUMP JUMPDEST SWAP1 PUSH2 0x5F0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x587 DUP4 DUP7 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP3 PUSH2 0x5AA PUSH2 0x595 DUP6 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP6 PUSH2 0x5A1 DUP8 DUP8 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0x149 SLOAD PUSH2 0x3595 JUMP JUMPDEST PUSH2 0x5EA PUSH1 0x20 DUP10 SWAP7 SWAP4 SWAP7 ADD SWAP8 PUSH2 0x5E5 PUSH2 0x5C3 DUP3 DUP12 MLOAD PUSH2 0x3EC6 JUMP JUMPDEST SWAP8 PUSH2 0x5E0 PUSH2 0x5D6 DUP13 MLOAD PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST SWAP6 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x2EFF JUMP JUMPDEST SWAP1 PUSH2 0x3EC6 JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP2 ADD MLOAD DUP1 DUP9 LT DUP1 ISZERO PUSH2 0x6E6 JUMPI JUMPDEST PUSH2 0x6C8 JUMPI POP PUSH2 0x621 DUP3 PUSH1 0x80 DUP4 ADD MLOAD AND DUP6 DUP5 PUSH1 0xC0 DUP6 ADD MLOAD AND PUSH2 0x13F SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP7 SWAP2 SWAP8 SWAP1 SWAP6 PUSH1 0x60 DUP5 ADD MLOAD DUP1 DUP11 GT PUSH2 0x6A9 JUMPI POP SWAP3 PUSH2 0x658 DUP7 PUSH2 0x662 SWAP7 SWAP5 PUSH1 0xA0 SWAP5 PUSH2 0x651 PUSH1 0x1 PUSH2 0x6A5 SWAP14 SWAP13 SWAP12 SWAP10 PUSH2 0x38F0 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x39AA JUMP JUMPDEST ADD MLOAD AND SWAP1 DUP8 PUSH2 0x351E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 SWAP3 SWAP4 PUSH1 0x60 SWAP2 SWAP6 SWAP5 PUSH1 0xC0 SWAP4 PUSH1 0xE0 DUP7 ADD SWAP8 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE DUP1 MLOAD DUP3 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x44 SWAP1 DUP10 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP8 ISZERO PUSH2 0x600 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x141 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x746 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13C SSTORE DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x93B JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x522 JUMPI DUP2 DUP4 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x797 PUSH1 0x40 DUP6 PUSH2 0x285A JUMP JUMPDEST DUP1 SLOAD DUP5 MSTORE ADD SLOAD AND ISZERO DUP1 ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x8ED JUMPI MLOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x522 JUMPI PUSH2 0x137 SWAP1 PUSH1 0x1 PUSH2 0x7CA DUP6 DUP5 PUSH2 0x283E JUMP JUMPDEST POP ADD SLOAD AND DUP3 SUB PUSH2 0x873 JUMPI JUMPDEST DUP5 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 PUSH1 0x4 DUP6 DUP8 PUSH2 0x826 PUSH2 0x80A DUP4 PUSH2 0x148 PUSH2 0x27FC JUMP JUMPDEST PUSH1 0x44 SWAP3 SWAP2 SWAP3 CALLDATALOAD SWAP1 DUP4 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE DUP1 DUP6 MSTORE PUSH2 0x144 PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP5 MSTORE PUSH2 0x145 PUSH1 0x20 MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x40 DUP6 KECCAK256 SSTORE PUSH2 0x855 DUP2 PUSH2 0x18E PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xC4 CALLDATALOAD SWAP2 ADD SSTORE PUSH2 0x86D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x33C5 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x40 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x40 DUP2 PUSH1 0x4 DUP2 DUP9 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x8FF JUMPI JUMPDEST POP ISZERO PUSH2 0x8ED JUMPI PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP4 PUSH1 0x1 PUSH2 0x8D0 DUP5 PUSH1 0x4 SWAP7 PUSH2 0x283E JUMP JUMPDEST POP ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE SWAP3 DUP2 SWAP3 POP PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x921 SWAP2 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x929 JUMPI JUMPDEST PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x316B JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x89A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x90F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x130 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x152 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x14B SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x18E SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x40 PUSH2 0x9E6 DUP5 DUP5 PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0xA29 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE DUP1 RETURN JUMPDEST DUP3 PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA5B PUSH1 0xC0 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP4 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x64 CALLDATALOAD SWAP1 DUP1 DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI PUSH1 0x60 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x84 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 DUP3 DUP7 AND DUP7 SUB PUSH2 0x522 JUMPI PUSH1 0xA0 DUP9 ADD SWAP6 DUP7 MSTORE PUSH2 0xAC8 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0xADD DUP4 PUSH2 0xAD5 PUSH2 0x31E7 JUMP JUMPDEST SWAP10 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP2 PUSH2 0xB00 PUSH2 0xAEB DUP5 DUP12 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP10 PUSH2 0xAF7 DUP12 DUP7 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0x14A SLOAD PUSH2 0x3595 JUMP JUMPDEST SWAP10 PUSH2 0xB17 DUP9 MLOAD SWAP12 PUSH2 0xB11 DUP4 DUP9 PUSH2 0x3C22 JUMP JUMPDEST SWAP4 PUSH2 0x3629 JUMP JUMPDEST SWAP2 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xC2D JUMPI DUP2 PUSH2 0xB39 PUSH2 0xB3E SWAP3 DUP15 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x2F12 JUMP JUMPDEST SWAP9 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP12 MUL SWAP1 DUP12 DUP3 DIV DUP6 EQ DUP13 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0xB63 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP12 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0xBAE SWAP8 DUP8 PUSH2 0xB91 PUSH2 0xB8A PUSH2 0xBA3 SWAP6 DUP4 SWAP8 PUSH2 0x2F12 JUMP JUMPDEST DUP1 SWAP14 PUSH2 0x2DDB JUMP JUMPDEST SWAP9 DUP10 SWAP3 MLOAD AND SWAP3 MLOAD AND PUSH2 0x142 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP9 SWAP2 DUP8 SWAP9 SWAP2 SWAP9 PUSH2 0x2DDB JUMP JUMPDEST SWAP10 MLOAD DUP1 DUP12 GT PUSH2 0xBF9 JUMPI POP DUP10 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0xBDD PUSH2 0x662 SWAP7 PUSH2 0xBD2 DUP7 PUSH2 0x6A5 SWAP13 PUSH2 0x38F0 JUMP JUMPDEST DUP4 DUP6 MLOAD AND SWAP1 DUP14 PUSH2 0x351E JUMP JUMPDEST MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 POP PUSH2 0x100 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE99 JUMPI PUSH2 0xC5E PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP2 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP4 PUSH1 0x64 CALLDATALOAD DUP6 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 PUSH1 0x84 CALLDATALOAD DUP4 MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP7 SUB PUSH2 0x522 JUMPI PUSH1 0xA0 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0xCFC PUSH2 0x342D JUMP JUMPDEST POP DUP5 MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xE87 JUMPI DUP5 MLOAD PUSH2 0xD3B SWAP1 PUSH2 0xD2B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3106 JUMP JUMPDEST SWAP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3106 JUMP JUMPDEST SWAP6 PUSH2 0xD45 DUP4 PUSH2 0x312F JUMP JUMPDEST SWAP1 PUSH2 0xD4F DUP9 PUSH2 0x312F JUMP JUMPDEST PUSH2 0xD59 DUP4 DUP7 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0xD63 DUP2 DUP11 PUSH2 0x35D8 JUMP JUMPDEST PUSH2 0xD71 DUP4 PUSH1 0x40 DUP11 ADD MLOAD PUSH2 0x3EC6 JUMP JUMPDEST SWAP3 PUSH2 0xD84 DUP2 PUSH2 0xB39 DUP5 PUSH1 0x40 DUP14 ADD MLOAD PUSH2 0x2EFF JUMP JUMPDEST SWAP11 MLOAD DUP1 DUP13 LT DUP1 ISZERO PUSH2 0xE7F JUMPI JUMPDEST PUSH2 0xE61 JUMPI POP SWAP1 DUP11 DUP11 PUSH2 0xDD7 SWAP7 SWAP6 SWAP5 SWAP4 PUSH2 0xDB3 PUSH2 0xDAC DUP6 DUP5 PUSH2 0x3C22 JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x3C22 JUMP JUMPDEST LT PUSH2 0xE32 JUMPI JUMPDEST POP POP SWAP1 MLOAD SWAP3 MLOAD PUSH2 0x13E SLOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 POP AND PUSH2 0x3658 JUMP JUMPDEST SWAP6 SWAP2 SWAP7 SWAP1 SWAP5 MLOAD DUP1 DUP9 GT PUSH2 0xE13 JUMPI POP SWAP2 PUSH1 0x40 DUP5 SWAP3 PUSH2 0xE0B PUSH2 0x662 SWAP6 PUSH2 0x6A5 SWAP10 SWAP9 SWAP8 DUP13 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP7 ADD MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH2 0x39AA JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP8 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xE51 PUSH2 0xE59 SWAP4 PUSH2 0xE41 PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0xE49 PUSH2 0x3CC5 JUMP JUMPDEST DUP2 SWAP4 SWAP2 PUSH2 0x3595 JUMP JUMPDEST SWAP5 SWAP1 SWAP4 PUSH2 0x3A95 JUMP JUMPDEST CODESIZE DUP11 DUP11 PUSH2 0xDB9 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP12 ISZERO PUSH2 0xD90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI DUP2 PUSH1 0x40 SWAP2 PUSH1 0x20 SWAP4 MSTORE PUSH2 0x145 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x93B JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x522 JUMPI PUSH1 0x24 DUP1 CALLDATALOAD DUP3 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x522 JUMPI DUP4 DUP6 MSTORE PUSH2 0x136 SWAP4 PUSH1 0x20 SWAP1 DUP6 DUP3 MSTORE PUSH1 0x1 SWAP3 PUSH1 0xFF DUP5 PUSH1 0x40 DUP11 KECCAK256 ADD SLOAD AND PUSH2 0x1141 JUMPI PUSH2 0x135 SWAP6 DUP7 SLOAD SWAP8 DUP6 PUSH1 0x40 MLOAD PUSH2 0xF44 PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP11 DUP2 MSTORE DUP7 DUP2 ADD SWAP3 DUP3 DUP5 MSTORE DUP7 DUP14 MSTORE DUP8 MSTORE PUSH1 0x40 DUP13 KECCAK256 SWAP1 MLOAD DUP2 SSTORE ADD SWAP1 MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP7 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP8 DUP9 DUP3 LT ISZERO PUSH2 0x112E JUMPI SWAP1 PUSH2 0xF8B SWAP2 DUP8 DUP3 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 DUP4 DUP7 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0xFAB PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP10 DUP2 MSTORE DUP5 DUP2 ADD SWAP3 DUP4 MSTORE PUSH2 0x137 DUP1 SLOAD SWAP1 DUP10 DUP3 LT ISZERO PUSH2 0x111B JUMPI SWAP1 PUSH2 0xFD1 SWAP2 DUP9 DUP3 ADD DUP2 SSTORE PUSH2 0x283E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1108 JUMPI SWAP1 DUP7 SWAP2 MLOAD DUP2 SSTORE ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x1001 PUSH1 0x44 CALLDATALOAD PUSH2 0x148 PUSH2 0x301B JUMP JUMPDEST DUP1 DUP8 MSTORE PUSH2 0x144 DUP3 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP9 KECCAK256 SSTORE DUP7 MSTORE PUSH2 0x145 DUP2 MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x40 DUP8 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x102F PUSH1 0x40 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD DUP3 MSTORE DUP2 ADD PUSH1 0xC4 CALLDATALOAD DUP2 MSTORE PUSH2 0x18E DUP1 SLOAD SWAP1 DUP7 DUP3 LT ISZERO PUSH2 0x10F5 JUMPI SWAP1 PUSH2 0x1058 SWAP2 DUP6 DUP3 ADD DUP2 SSTORE PUSH2 0x283E JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x10E2 JUMPI SWAP1 DUP4 SWAP2 MLOAD DUP4 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x150 SWAP2 DUP3 SLOAD SWAP4 DUP5 LT ISZERO PUSH2 0x10D0 JUMPI POP DUP3 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP5 SWAP3 PUSH2 0x10AB SWAP3 PUSH1 0x4 SWAP6 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST POP POP PUSH2 0x10C1 PUSH2 0x10B9 DUP3 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x151 PUSH2 0x301B JUMP JUMPDEST PUSH2 0x86D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x33C5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 SWAP1 MSTORE DUP5 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP6 DUP10 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x4 DUP12 SWAP1 MSTORE DUP8 DUP12 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP13 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP9 DUP13 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP8 DUP12 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3458F6C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x116A CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST SWAP1 PUSH2 0x1173 PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x117C PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0x1184 PUSH2 0x3CC5 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0x119A DUP5 DUP5 MLOAD AND PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x11BA PUSH2 0x11A8 DUP4 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP7 PUSH2 0x11B4 DUP9 DUP6 PUSH2 0x35D8 JUMP JUMPDEST DUP5 PUSH2 0x3595 JUMP JUMPDEST PUSH1 0x20 DUP7 SWAP8 SWAP3 SWAP8 ADD SWAP7 DUP8 MLOAD PUSH2 0x11CF DUP4 DUP4 DUP10 PUSH2 0x3BDA JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x12BD JUMPI POP POP SWAP1 PUSH2 0x11FB SWAP2 DUP9 MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x11F5 DUP6 DUP6 PUSH2 0x3629 JUMP JUMPDEST SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV SWAP7 DUP8 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0x1237 SWAP4 PUSH2 0x122E PUSH2 0x1224 DUP14 PUSH2 0x5E5 DUP15 MLOAD PUSH2 0x11F5 DUP9 PUSH2 0x5E0 DUP12 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2F12 JUMP JUMPDEST DIV SWAP11 DUP12 DUP9 PUSH2 0x3A95 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP1 DUP9 LT PUSH2 0x129F JUMPI POP PUSH2 0x1260 DUP2 PUSH1 0x80 DUP8 ADD MLOAD AND DUP6 DUP4 PUSH1 0xC0 DUP10 ADD MLOAD AND PUSH2 0x140 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP7 SWAP2 SWAP8 SWAP1 SWAP6 PUSH1 0x60 DUP4 ADD MLOAD DUP1 DUP11 GT PUSH2 0x6A9 JUMPI POP SWAP3 PUSH1 0xA0 DUP6 SWAP4 PUSH2 0x1296 DUP6 DUP14 SWAP6 PUSH2 0x1290 PUSH2 0x662 SWAP11 PUSH2 0x6A5 SWAP15 SWAP14 SWAP13 SWAP11 PUSH2 0x38F0 JUMP JUMPDEST MLOAD PUSH2 0x3A34 JUMP JUMPDEST ADD MLOAD AND SWAP3 PUSH2 0x3454 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x130A PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x152 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x155 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x137A PUSH2 0x1360 PUSH1 0x1 PUSH2 0x3221 JUMP JUMPDEST PUSH2 0x1374 PUSH2 0x136D DUP3 DUP5 PUSH2 0x2F32 JUMP JUMPDEST SWAP2 DUP4 PUSH2 0x2E76 JUMP JUMPDEST SWAP2 PUSH2 0x3268 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x139B PUSH2 0x3D83 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x13CD PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x12F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x13FE PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x14C SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1422 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13D SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1446 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x139 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x153 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x18F SLOAD NUMBER LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH1 0x40 DUP3 DUP2 SWAP3 DUP2 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF PUSH1 0x1 DUP3 SLOAD SWAP3 ADD SLOAD AND DUP3 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15A3 PUSH2 0x159D PUSH2 0x1598 PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x2DE8 JUMP JUMPDEST SWAP1 PUSH2 0x2FA6 JUMP JUMPDEST PUSH2 0x14A SLOAD LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x146 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x158 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x1653 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x153 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1683 PUSH2 0x3EA5 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x16EF JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x16DD JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x15A SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x137A PUSH2 0x1740 PUSH1 0x1 PUSH2 0x3221 JUMP JUMPDEST PUSH2 0x1374 PUSH2 0x174D DUP3 DUP5 PUSH2 0x2E76 JUMP JUMPDEST SWAP2 DUP4 PUSH2 0x2F32 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1C3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x148 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x17AD DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x17D5 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x149 SSTORE DUP1 RETURN JUMPDEST CALLDATASIZE PUSH1 0x3 NOT ADD SLT SWAP1 POP PUSH2 0x4AB JUMPI PUSH2 0x17F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x28AE JUMP JUMPDEST PUSH2 0x17FE PUSH2 0x342D JUMP JUMPDEST POP PUSH2 0x1807 PUSH2 0x3D83 JUMP JUMPDEST PUSH2 0x180F PUSH2 0x3CC5 JUMP JUMPDEST DUP3 MLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x1828 SWAP1 DUP3 AND PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x1842 PUSH2 0x1836 DUP4 DUP6 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0xAF7 DUP6 DUP6 PUSH2 0x35D8 JUMP JUMPDEST SWAP6 PUSH8 0xDE0B6B3A763FFFF NOT SWAP1 DUP2 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x1996 JUMPI PUSH2 0x1862 SWAP1 DUP7 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x186C DUP7 DUP7 PUSH2 0x3C22 JUMP JUMPDEST SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x1996 JUMPI PUSH2 0x18B0 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x1886 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH2 0x189A PUSH1 0x20 DUP9 ADD SWAP3 PUSH2 0x5E5 DUP4 DUP6 MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP6 DUP7 SWAP2 PUSH2 0x134 SLOAD SWAP1 PUSH2 0x2F12 JUMP JUMPDEST DIV SWAP8 PUSH1 0x40 DUP9 ADD MLOAD DUP1 DUP11 GT PUSH2 0x1978 JUMPI POP PUSH2 0x18CB SWAP1 DUP4 MLOAD SWAP3 PUSH2 0x3629 JUMP JUMPDEST SWAP6 DUP6 DUP10 MUL SWAP1 DUP10 DUP3 DIV DUP8 EQ DUP11 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x18E6 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xBE7 JUMPI PUSH2 0x190A PUSH2 0x192F SWAP7 PUSH2 0x1903 PUSH1 0x60 SWAP10 PUSH2 0x1924 SWAP5 PUSH2 0x2EFF JUMP JUMPDEST DIV DUP4 PUSH2 0x2DDB JUMP JUMPDEST SWAP4 DUP5 DUP2 PUSH1 0x80 DUP12 ADD MLOAD AND SWAP2 PUSH1 0xC0 DUP12 ADD MLOAD AND PUSH2 0x141 SLOAD SWAP3 PUSH2 0x3658 JUMP JUMPDEST SWAP8 SWAP2 DUP6 SWAP8 SWAP2 SWAP8 PUSH2 0x2FC4 JUMP JUMPDEST SWAP8 ADD MLOAD DUP1 DUP9 LT PUSH2 0x195A JUMPI POP SWAP3 PUSH2 0x1955 DUP9 SWAP10 SWAP4 PUSH2 0x6A5 SWAP9 SWAP10 SWAP4 PUSH2 0x1290 PUSH1 0x1 PUSH2 0x662 SWAP9 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0x39AA JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP9 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x19C4 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x140 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x190 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1A07 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x141 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x134 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x142 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1A69 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13B SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x156 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x139 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1ACB PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x154 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x1B04 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x158 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1B35 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13E SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x154 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x149 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP1 DUP4 DUP4 SUB PUSH2 0x522 JUMPI PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP2 DUP3 DUP3 SUB PUSH2 0x522 JUMPI PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x522 JUMPI PUSH1 0x64 CALLDATALOAD SWAP6 PUSH1 0xFF PUSH2 0x14B SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1D6A JUMPI PUSH2 0x1BDD SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0x1BEA DUP3 PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP6 SWAP1 SLOAD SWAP9 PUSH1 0x40 MLOAD SWAP7 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP9 MSTORE DUP3 PUSH1 0x4 DUP10 ADD MSTORE DUP8 PUSH1 0x24 DUP2 DUP9 PUSH1 0x20 SWAP15 DUP16 SWAP6 PUSH1 0x3 SHL SHR AND GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x1D5F JUMPI DUP9 SWAP8 PUSH2 0x1D30 JUMPI JUMPDEST POP DUP7 ISZERO PUSH2 0x1D12 JUMPI PUSH2 0x1C44 PUSH2 0x1C37 DUP6 PUSH2 0x138 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP9 PUSH2 0x3EC6 JUMP JUMPDEST SWAP9 DUP10 DUP2 LT PUSH2 0x1D08 JUMPI JUMPDEST POP SWAP1 PUSH2 0x1C8C SWAP4 SWAP3 SWAP2 PUSH32 0xFAAB3901CD2D6E9B5D0A0C6E34C643B8C844726F3C54DE69517E571BF24BBD92 PUSH1 0x40 DUP13 DUP13 DUP3 MLOAD SWAP2 DUP13 DUP4 MSTORE DUP3 ADD MSTORE LOG4 PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1D04 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x1CF9 JUMPI PUSH2 0x1CE4 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x1CEF DUP3 DUP1 SWAP3 PUSH2 0x285A JUMP JUMPDEST PUSH2 0x4AB JUMPI DUP1 PUSH2 0x1CDA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST SWAP9 POP PUSH2 0x1C8C PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x44 DUP8 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x3FE8C5EB PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP7 POP DUP10 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1D58 JUMPI JUMPDEST PUSH2 0x1D48 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x522 JUMPI MLOAD SWAP6 DUP11 PUSH2 0x1C21 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31B0D35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1D95 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x1DC0 PUSH2 0x3CC5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1DE3 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x159 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x12F SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x133 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x157 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1EBF PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x143 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x1F34 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x1FB8 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND PUSH1 0xCA SSTORE DUP1 RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x522 JUMPI DUP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x20B4 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x20B4 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x2014 DUP2 PUSH2 0x2892 JUMP JUMPDEST SWAP3 PUSH2 0x2022 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x285A JUMP JUMPDEST DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP8 ADD ADD GT PUSH2 0x20B0 JUMPI PUSH2 0x139B SWAP6 PUSH1 0x20 DUP4 PUSH2 0x20A3 SWAP5 PUSH1 0x24 PUSH1 0x1 SWAP10 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x207A DUP3 ADDRESS EQ ISZERO PUSH2 0x2926 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x2987 JUMP JUMPDEST PUSH2 0x20AB PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x29E8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x147 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x137 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x40 PUSH2 0x2150 DUP5 DUP5 PUSH2 0x283E JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x21F6 JUMPI PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x16EF JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x522 JUMPI PUSH2 0x2237 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x14F DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2268 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x190 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x138 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x17AD DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI PUSH2 0x139B SWAP2 PUSH2 0x2300 DUP3 DUP6 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x207A DUP3 ADDRESS EQ ISZERO PUSH2 0x2926 JUMP JUMPDEST PUSH2 0x2308 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x2311 DUP3 PUSH2 0x2892 JUMP JUMPDEST SWAP1 PUSH2 0x231F PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x232E DUP5 PUSH2 0x2892 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x29E8 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2353 PUSH2 0x3EA5 JUMP JUMPDEST PUSH2 0x14B DUP1 SLOAD PUSH1 0xFF DUP2 AND DUP1 PUSH2 0x241D JUMPI JUMPDEST DUP1 PUSH2 0x2403 JUMPI JUMPDEST PUSH2 0x2370 JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 DUP3 DUP1 LOG1 PUSH2 0x133 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x93B JUMPI DUP3 PUSH1 0x4 DUP2 DUP5 DUP1 SWAP5 PUSH4 0x8456CB59 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x23F6 JUMPI PUSH2 0x23E6 JUMPI JUMPDEST POP POP PUSH2 0x23E0 PUSH2 0x3058 JUMP JUMPDEST DUP2 DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH2 0x23EF SWAP2 PUSH2 0x285A JUMP JUMPDEST DUP2 DUP2 PUSH2 0x23D6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x2412 PUSH2 0x159D PUSH2 0x1598 PUSH2 0x31E7 JUMP JUMPDEST PUSH2 0x14A SLOAD LT ISZERO PUSH2 0x2368 JUMP JUMPDEST POP PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x2362 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x13F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x143 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x93B JUMPI PUSH2 0x2496 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x24DA PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x14A SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x140 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x2532 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x147 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI DUP2 PUSH1 0x40 SWAP2 PUSH1 0x20 SWAP4 MSTORE PUSH2 0x144 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x14B SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x25C8 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x142 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x93B JUMPI PUSH2 0x25F9 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x14B SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x14D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x14F SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x2684 PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x130 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x26B5 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13F SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x159 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x93B JUMPI PUSH2 0x270D PUSH2 0x3E17 JUMP JUMPDEST PUSH2 0x146 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x18F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x2786 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x15A SSTORE DUP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x135 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x4AB JUMPI PUSH1 0x20 PUSH2 0x27BF DUP5 DUP5 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x4AB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x4AB JUMPI PUSH2 0x27F2 PUSH2 0x3E17 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x13A SSTORE DUP1 RETURN JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x522 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287C JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x287C JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH2 0x28C8 PUSH1 0xE0 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0xC0 PUSH2 0x2921 DUP2 DUP4 SWAP6 PUSH2 0x28D9 DUP2 PUSH2 0x282A JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x2905 PUSH1 0x80 DUP3 ADD PUSH2 0x282A JUMP JUMPDEST PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x2916 PUSH1 0xA0 DUP3 ADD PUSH2 0x282A JUMP JUMPDEST PUSH1 0xA0 DUP7 ADD MSTORE ADD PUSH2 0x282A JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x292D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x298E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2A23 JUMPI POP PUSH2 0x2A21 SWAP2 POP PUSH2 0x2C51 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP5 SWAP2 SWAP4 SWAP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP7 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x2C22 JUMPI JUMPDEST POP PUSH2 0x2AB4 JUMPI DUP6 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP6 SWAP3 SWAP5 SWAP3 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x2BCC JUMPI PUSH2 0x2AE9 DUP7 PUSH2 0x2C51 JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP4 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x2BC4 JUMPI JUMPDEST POP PUSH2 0x2B26 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2BB0 SWAP4 PUSH1 0x0 DUP1 PUSH2 0x2B37 PUSH1 0x27 PUSH2 0x2892 JUMP JUMPDEST SWAP6 PUSH2 0x2B44 DUP6 MLOAD SWAP8 DUP9 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x27 DUP8 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP7 DUP9 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL DUP6 DUP9 ADD MSTORE DUP6 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL SWAP2 RETURNDATASIZE ISZERO PUSH2 0x2BBA JUMPI RETURNDATASIZE PUSH2 0x2BA1 PUSH2 0x2B98 DUP3 PUSH2 0x2892 JUMP JUMPDEST SWAP3 MLOAD SWAP3 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 DUP2 SWAP5 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY PUSH2 0x2CF3 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2B20 JUMP JUMPDEST POP PUSH1 0x60 SWAP3 POP PUSH2 0x2CF3 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x2B1A JUMP JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2C4A JUMPI JUMPDEST PUSH2 0x2C39 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4AB JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x2A54 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2C2F JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2C98 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2D55 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2D07 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2D10 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2D68 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x2DAE JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x2D8B JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2814 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC17 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x137 DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x2E1F JUMPI POP POP POP POP PUSH2 0x2E1B PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x139 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0x2E6C PUSH2 0x2E5B PUSH2 0x2E66 PUSH1 0x1 SWAP4 PUSH2 0x2E60 PUSH2 0x2E3D DUP11 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD PUSH2 0x2E48 DUP2 DUP13 PUSH2 0x2E92 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x2E54 DUP14 DUP13 PUSH2 0x283E JUMP JUMPDEST POP SLOAD PUSH2 0x2DDB JUMP JUMPDEST PUSH2 0x3EC6 JUMP JUMPDEST SWAP1 PUSH2 0x2DDB JUMP JUMPDEST SWAP9 PUSH2 0x2DDB JUMP JUMPDEST SWAP5 ADD SWAP3 SWAP2 SWAP1 PUSH2 0x2DF9 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0xC17 JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x2EC0 DUP2 PUSH1 0x0 SWAP6 PUSH2 0x2EB6 PUSH2 0x2EAD DUP3 PUSH2 0x150 PUSH2 0x27FC JUMP JUMPDEST SWAP4 SWAP1 SLOAD SWAP3 PUSH2 0x2F4B JUMP JUMPDEST SWAP2 PUSH1 0x3 SHL SHR PUSH2 0x2E76 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT PUSH2 0x2ECF JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x2EF7 SWAP2 SWAP5 POP PUSH2 0x2EF1 SWAP3 POP DUP1 SWAP5 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x13A SLOAD PUSH2 0x2EFF JUMP JUMPDEST DIV PUSH2 0x2EFF JUMP JUMPDEST DIV CODESIZE DUP1 PUSH2 0x2EC9 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0xC17 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x2F1C JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB SWAP3 SWAP2 PUSH1 0x0 SGT DUP1 ISZERO DUP3 DUP6 SGT AND SWAP2 DUP5 SLT AND OR PUSH2 0xC17 JUMPI JUMP JUMPDEST PUSH2 0x2F57 DUP2 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP SLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x2F97 PUSH2 0x2F8A PUSH2 0x2F9D SWAP4 PUSH2 0x151 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP5 PUSH2 0x2F12 JUMP JUMPDEST SWAP3 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH2 0x2F32 JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FBC JUMPI PUSH2 0x2E5B PUSH2 0x2FA3 SWAP3 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xC17 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x287C JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FF3 DUP3 PUSH2 0x2FD1 JUMP JUMPDEST PUSH2 0x3000 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x285A JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x3011 PUSH1 0x1F NOT SWAP2 PUSH2 0x2FD1 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x287C JUMPI DUP2 PUSH2 0x303D SWAP2 PUSH1 0x1 PUSH2 0x3054 SWAP5 ADD DUP2 SSTORE PUSH2 0x27FC JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x131 SLOAD DUP1 ISZERO PUSH2 0x3103 JUMPI PUSH2 0x137 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x3075 DUP5 PUSH2 0x2FE9 JUMP JUMPDEST SWAP1 DUP3 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH2 0x30BF JUMPI POP POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3093 JUMPI POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x30B9 PUSH2 0x30B1 DUP7 PUSH2 0xB39 DUP8 PUSH2 0x30AB PUSH1 0x1 SWAP8 DUP10 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x138 PUSH2 0x301B JUMP JUMPDEST ADD PUSH2 0x3085 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x30FB PUSH1 0x1 SWAP2 PUSH2 0x30D0 DUP7 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x30DA DUP8 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE PUSH2 0x2E60 PUSH2 0x30E8 DUP8 DUP7 PUSH2 0x283E JUMP JUMPDEST POP SLOAD PUSH2 0x30F4 DUP9 DUP9 PUSH2 0x2DC7 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x3EC6 JUMP JUMPDEST SWAP4 ADD SWAP1 PUSH2 0x3079 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x136 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8ED JUMPI SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x313B SWAP1 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3152 DUP2 PUSH2 0x3185 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x50A JUMPI POP SWAP1 JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x522 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x522 JUMPI PUSH2 0x2FA3 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x315E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP2 DUP4 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x31DB JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP4 PUSH2 0x31BC JUMPI POP SWAP2 SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x31D7 SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE DUP2 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x137 SLOAD SWAP1 PUSH2 0x31F5 DUP3 PUSH2 0x2FE9 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3204 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x3210 PUSH1 0x1 SWAP3 PUSH2 0x312F JUMP JUMPDEST PUSH2 0x321A DUP3 DUP8 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE ADD PUSH2 0x31F9 JUMP JUMPDEST SWAP1 PUSH2 0x3242 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 PUSH2 0x157 SLOAD PUSH2 0x154 SLOAD SWAP3 NUMBER ADD SUB MUL PUSH2 0x2F12 JUMP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x325F JUMPI DUP3 SUB SWAP2 DUP1 DUP4 PUSH2 0x155 SLOAD MUL DIV SWAP3 PUSH2 0x156 SLOAD MUL SDIV SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x3272 PUSH2 0x32CA JUMP JUMPDEST SWAP3 SWAP1 DUP1 DUP3 LT ISZERO PUSH2 0x32C0 JUMPI DUP4 SWAP2 PUSH2 0x3287 SWAP2 PUSH2 0x2FC4 JUMP JUMPDEST SWAP4 GT ISZERO PUSH2 0x32BB JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x32B3 JUMPI PUSH2 0x329F SWAP2 PUSH2 0x2FC4 JUMP JUMPDEST PUSH1 0x1 SHR DUP1 DUP3 LT ISZERO PUSH2 0x32AE JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST POP POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x152 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 DUP5 PUSH1 0x4 DUP2 DUP5 GAS STATICCALL DUP1 ISZERO PUSH2 0x33BA JUMPI PUSH1 0x0 SWAP5 DUP6 SWAP2 PUSH2 0x3397 JUMPI JUMPDEST POP ISZERO PUSH2 0x3380 JUMPI POP PUSH2 0x153 SLOAD AND SWAP1 DUP1 MLOAD SWAP5 DUP6 MSTORE DUP1 DUP6 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL DUP1 ISZERO PUSH2 0x3375 JUMPI PUSH1 0x0 SWAP6 DUP7 SWAP2 PUSH2 0x3352 JUMPI JUMPDEST POP ISZERO PUSH2 0x333B JUMPI POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x24 SWAP3 POP MLOAD SWAP1 PUSH4 0x5E89893 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP2 PUSH2 0x336C SWAP3 SWAP7 POP RETURNDATASIZE DUP8 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP5 SWAP1 SWAP5 CODESIZE PUSH2 0x332F JUMP JUMPDEST POP MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x24 SWAP1 DUP4 MLOAD SWAP1 PUSH4 0x5E89893 PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x33B1 SWAP2 SWAP5 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x929 JUMPI PUSH2 0x919 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST SWAP4 SWAP1 SWAP4 CODESIZE PUSH2 0x3305 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP2 MSTORE PUSH2 0x100 DUP2 ADD SWAP3 SWAP2 PUSH1 0xE0 SWAP1 PUSH1 0xC0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x33E7 DUP4 PUSH2 0x282A JUMP JUMPDEST AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x33F9 PUSH1 0x20 DUP4 ADD PUSH2 0x282A JUMP JUMPDEST AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD DUP3 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x343C PUSH1 0x80 DUP4 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x34CC SWAP4 PUSH2 0x3493 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP6 PUSH2 0x346D DUP3 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x3479 DUP8 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3489 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x135 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP5 DUP6 SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x34ED JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x3516 JUMPI JUMPDEST DUP2 PUSH2 0x3505 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x522 JUMPI PUSH2 0x3103 SWAP1 PUSH2 0x315E JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x34F8 JUMP JUMPDEST PUSH2 0x3584 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x134 PUSH2 0x3533 DUP5 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3543 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2DDB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x133 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP4 DUP5 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x34ED JUMPI POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x35A0 SWAP1 PUSH2 0x2DE8 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH2 0x35AD DUP4 DUP6 PUSH2 0x2FA6 JUMP JUMPDEST SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x35BA JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x79121201 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x303D PUSH2 0x3054 SWAP2 PUSH2 0x35E9 DUP5 DUP3 PUSH2 0x2F4B JUMP JUMPDEST PUSH2 0x361F PUSH2 0x35F8 DUP4 PUSH2 0x150 PUSH2 0x27FC JUMP JUMPDEST PUSH2 0x360B DUP3 SWAP5 SWAP3 SLOAD SWAP3 DUP4 DUP4 PUSH1 0x3 SHL SHR PUSH2 0x2E76 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 SHL SWAP2 DUP3 SHL SWAP2 PUSH1 0x0 NOT SWAP1 SHL NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x151 PUSH2 0x27FC JUMP JUMPDEST SWAP1 PUSH2 0x134 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x3649 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x5E0 PUSH2 0x2E5B SWAP3 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST POP POP POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP7 PUSH2 0x366C PUSH2 0x342D JUMP JUMPDEST SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP6 SWAP1 DUP4 AND DUP1 PUSH2 0x3878 JUMPI JUMPDEST POP DUP3 PUSH2 0x12F SLOAD AND DUP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP6 MSTORE AND DUP1 PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 SWAP5 DUP6 DUP6 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x386D JUMPI DUP5 SWAP6 PUSH2 0x383E JUMPI JUMPDEST POP DUP5 PUSH2 0x371D JUMPI JUMPDEST POP POP POP POP POP DUP7 ADD MLOAD ISZERO PUSH2 0x36D9 JUMPI JUMPDEST POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH2 0x36F1 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x2EFF JUMP JUMPDEST DIV DUP1 DUP6 MSTORE SWAP1 DUP3 ISZERO PUSH2 0x3715 JUMPI PUSH2 0x370D SWAP3 DIV SWAP1 DUP2 PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2DDB JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x36D1 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x370D JUMP JUMPDEST PUSH2 0x372B SWAP1 PUSH2 0x130 SLOAD AND PUSH2 0x3185 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ISZERO PUSH2 0x36C3 JUMPI SWAP1 SWAP2 SWAP3 SWAP4 SWAP12 POP DUP5 DUP12 PUSH2 0x3765 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x375F PUSH2 0x3755 DUP14 DUP14 PUSH2 0x2EFF JUMP JUMPDEST PUSH2 0x143 SLOAD SWAP1 PUSH2 0x2EFF JUMP JUMPDEST DIV PUSH2 0x2F12 JUMP JUMPDEST DUP2 DUP4 ADD DUP2 DUP2 MSTORE SWAP6 SWAP1 DUP12 ISZERO PUSH2 0x3834 JUMPI POP PUSH2 0x3790 SWAP2 PUSH2 0x3784 PUSH1 0x60 SWAP3 DUP14 PUSH2 0x2F12 JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE DUP6 MLOAD PUSH2 0x2DDB JUMP JUMPDEST DUP1 SWAP14 JUMPDEST LT SWAP3 DUP4 ISZERO PUSH2 0x37BF JUMPI JUMPDEST POP POP POP PUSH2 0x37AC JUMPI JUMPDEST DUP1 DUP1 DUP1 PUSH2 0x36C3 JUMP JUMPDEST DUP2 SWAP3 SWAP10 POP MSTORE DUP1 PUSH1 0x60 DUP9 ADD MSTORE SWAP7 CODESIZE DUP1 PUSH2 0x37A4 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3829 JUMPI SWAP1 DUP12 SWAP2 DUP5 SWAP2 PUSH2 0x37F8 JUMPI JUMPDEST POP LT CODESIZE DUP5 DUP2 PUSH2 0x379C JUMP JUMPDEST DUP1 SWAP3 POP DUP6 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x3822 JUMPI JUMPDEST PUSH2 0x3811 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xE99 JUMPI DUP11 SWAP1 MLOAD CODESIZE PUSH2 0x37EE JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3807 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP DUP1 SWAP14 PUSH2 0x3793 JUMP JUMPDEST SWAP1 SWAP5 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3866 JUMPI JUMPDEST PUSH2 0x3856 DUP2 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1D04 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x36BC JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x384C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 POP PUSH1 0x20 DUP4 PUSH2 0x1C3 SLOAD AND SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x64A731E9 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP1 PUSH2 0x38BD JUMPI JUMPDEST PUSH2 0x38B6 SWAP2 POP DUP5 PUSH2 0x2EFF JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x3680 JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x38E8 JUMPI JUMPDEST DUP2 PUSH2 0x38D6 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x20B0 JUMPI PUSH2 0x38B6 SWAP1 MLOAD PUSH2 0x38AB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x38C9 JUMP JUMPDEST DUP1 PUSH2 0x38F9 PUSH2 0x32CA JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH2 0x3906 PUSH1 0x0 PUSH2 0x3221 JUMP JUMPDEST SWAP5 ADD SWAP4 DUP3 SWAP2 PUSH2 0x399E JUMPI JUMPDEST ADD SWAP4 DUP5 PUSH1 0x0 DUP1 DUP3 SLT PUSH2 0x3998 JUMPI POP JUMPDEST DUP5 SUB SWAP2 DUP2 DUP6 GT PUSH2 0x3960 JUMPI POP POP DUP2 DUP2 GT PUSH2 0x3942 JUMPI POP POP PUSH2 0x155 SSTORE PUSH2 0x156 SSTORE NUMBER PUSH2 0x157 SSTORE JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x6DA41E5 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP1 DUP6 SWAP3 GT PUSH2 0x3986 JUMPI PUSH1 0x44 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x6DA41E5 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFB4FD35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SUB PUSH2 0x391E JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x0 SUB SWAP1 PUSH2 0x3910 JUMP JUMPDEST PUSH2 0x39D7 SWAP2 SWAP3 PUSH2 0x39BB DUP3 PUSH2 0x137 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x39C7 DUP6 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3489 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x31DB JUMPI PUSH2 0x3A29 JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A21 SWAP2 PUSH2 0x285A JUMP JUMPDEST SWAP1 PUSH2 0x134 PUSH2 0x3A43 DUP4 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3A53 PUSH2 0x131 SWAP2 DUP3 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x133 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD PUSH2 0x3A18 JUMP JUMPDEST SWAP3 PUSH2 0x3AA7 DUP4 PUSH2 0x3AAD SWAP7 SWAP5 SWAP4 SWAP8 SWAP6 PUSH2 0x3C22 JUMP JUMPDEST SWAP1 PUSH2 0x3AD6 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x3AB8 JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 PUSH2 0x3AE3 SWAP3 SWAP5 SWAP2 SWAP4 PUSH2 0x3BA3 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP2 DUP2 MUL SWAP2 PUSH1 0x1 PUSH1 0xFF SHL SWAP2 DUP6 DUP3 SLT DUP4 DUP3 EQ AND PUSH2 0x3B8F JUMPI DUP2 DUP5 SDIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3B7B JUMPI PUSH8 0xDE0B6B3A763FFFF NOT DUP4 ADD SWAP3 DUP4 GT PUSH2 0x3B7B JUMPI PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP2 MUL SWAP4 DUP2 DUP6 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x3B7B JUMPI DUP3 ISZERO PUSH2 0x3B67 JUMPI DUP2 EQ PUSH1 0x0 NOT DUP4 EQ AND PUSH2 0x3B53 JUMPI SDIV SWAP1 DUP1 DUP3 SLT PUSH2 0x32AE JUMPI POP SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x3BB2 SWAP1 PUSH2 0x131 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x2F9D SWAP2 PUSH2 0x2EFF JUMP JUMPDEST DUP3 DUP3 PUSH2 0x3BE5 SWAP3 PUSH2 0x3BA3 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 SGT ISZERO PUSH2 0x32B3 JUMPI PUSH2 0x2FA3 SWAP3 PUSH2 0x3BFC SWAP2 PUSH2 0x3629 JUMP JUMPDEST SWAP1 PUSH2 0x2F12 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x3C11 PUSH1 0x40 DUP3 PUSH2 0x285A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 DUP3 SWAP5 DUP1 SLOAD DUP5 MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3C2E DUP2 PUSH2 0x148 PUSH2 0x27FC JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP2 PUSH2 0x18E SWAP2 PUSH2 0x3C44 DUP2 DUP5 PUSH2 0x283E JUMP JUMPDEST POP SLOAD SWAP3 PUSH2 0x18F SLOAD NUMBER LT ISZERO PUSH2 0x3C6A JUMPI JUMPDEST POP POP DUP1 DUP3 LT ISZERO PUSH2 0x32BB JUMPI PUSH2 0xB39 SWAP1 PUSH2 0x2FA3 SWAP4 PUSH2 0x2EFF JUMP JUMPDEST DUP3 SWAP4 POP PUSH2 0x3C7E PUSH2 0x3C89 SWAP4 SWAP3 PUSH2 0x3C84 SWAP3 PUSH2 0x283E JUMP JUMPDEST POP PUSH2 0x3C02 JUMP JUMPDEST PUSH2 0x3C91 JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x3C53 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP1 MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SUB SWAP1 DUP5 DUP3 GT PUSH2 0xC17 JUMPI PUSH2 0x3CBE PUSH2 0x2E60 SWAP3 PUSH2 0x2E1B SWAP6 PUSH2 0x2EFF JUMP JUMPDEST SWAP3 MLOAD PUSH2 0x2EFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x137 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x3CD8 DUP5 PUSH2 0x2FE9 JUMP JUMPDEST SWAP4 DUP3 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x3D05 JUMPI POP POP POP DUP2 ISZERO PUSH2 0x3CF9 JUMPI SWAP1 PUSH2 0x3CF6 SWAP2 PUSH2 0x2F12 JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP POP PUSH2 0x149 SLOAD PUSH1 0x1 SHL SWAP2 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP3 PUSH2 0x3D12 DUP6 PUSH2 0x312F JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x3D1E DUP8 DUP10 PUSH2 0x2DC7 JUMP JUMPDEST MSTORE PUSH2 0x3D37 PUSH2 0x3D2C DUP4 DUP9 PUSH2 0x2E92 JUMP JUMPDEST POP PUSH2 0x2E54 DUP9 DUP7 PUSH2 0x283E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x3D74 PUSH2 0x3D7A SWAP3 PUSH2 0x2E60 DUP6 PUSH2 0x3D6B PUSH1 0x1 SWAP8 PUSH2 0x5E5 SWAP7 PUSH2 0x3EC6 JUMP JUMPDEST SWAP5 DUP6 SWAP2 DUP13 PUSH2 0x3C22 JUMP JUMPDEST SWAP6 PUSH2 0x2DDB JUMP JUMPDEST SWAP5 ADD SWAP2 SWAP1 PUSH2 0x3CDC JUMP JUMPDEST PUSH2 0x18F DUP1 SLOAD NUMBER LT ISZERO PUSH2 0x3D92 JUMPI POP JUMP JUMPDEST PUSH2 0x137 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3DAC JUMPI POP POP PUSH2 0x190 SLOAD NUMBER ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 DUP1 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 PUSH1 0x1 SWAP4 PUSH2 0x18E PUSH2 0x3DE2 PUSH2 0x3C7E DUP4 DUP4 PUSH2 0x283E JUMP JUMPDEST SWAP1 PUSH2 0x3E00 PUSH2 0x3DF8 PUSH2 0x3DF2 DUP6 PUSH2 0x312F JUMP JUMPDEST DUP5 PUSH2 0x3C91 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x283E JUMP JUMPDEST POP SSTORE MLOAD PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 ADD PUSH2 0x3D99 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x31DB JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3E6C JUMPI JUMPDEST POP ISZERO PUSH2 0x3E5A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3E9D JUMPI JUMPDEST DUP2 PUSH2 0x3E85 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x285A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4AB JUMPI POP PUSH2 0x3E97 SWAP1 PUSH2 0x315E JUMP JUMPDEST CODESIZE PUSH2 0x3E52 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3E78 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x3EB4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC17 JUMPI PUSH2 0x2FA3 SWAP2 PUSH2 0x2F12 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xC3 STOP SLOAD JUMP 0x4B ADD 0xC6 0xD1 PUSH10 0xEB8BD2456F55EBB4D8C8 0x21 0xD9 0xD1 LOG1 CREATE2 PUSH21 0x158535D7DC1C64736F6C6343000814003300000000 ",
      "sourceMapi;:::-;33351:12;:23;:::i;:::-;:37;;903:25926:51;;33426:25:48;;;:::i;:::-;33465:4;;;;33461:61;;903:25926:51;;;;;;;;33461:61:48;903:25926:51;;;;33478:44:48;;;;;;903:25926:51;33478:44:48;;903:25926:51;33478:44:48;903:25926:51;;;;;;;;;;;;;;;;;;5994:33:48;903:25926:51;;;;;;;;;-1:-1:-1;;903:25926:51;;;-1:-1:-1;903:25926:51;;;;;;:::i;:::-;;;;:::i;:::-;;18924:12;;:::i;:::-;903:25926;19575:78;903:25926;;;;;;18958:16;903:25926;;;;18958:16;:::i;:::-;19000:9;19197:32;19000:9;;;;:::i;:::-;903:25926;19040:5;;;;;:::i;:::-;19211:9;903:25926;19197:32;:::i;:::-;19605:47;19370:11;;;;;;903:25926;19606:37;19361:28;903:25926;;;19361:28;:::i;:::-;903:25926;30069:16:48;19584:19:51;903:25926;;19598:5;903:25926;19584:19;;:::i;:::-;903:25926;30069:5:48;903:25926:51;30069:16:48;:::i;:::-;19606:37:51;:::i;:::-;19605:47;:::i;:::-;19575:78;;:::i;:::-;19735:14;903:25926;19735:14;;903:25926;19723:26;;;:44;;;;903:25926;19719:107;;19910:14;19887:133;19910:14;;;;903:25926;;19938:14;;;;;903:25926;;19996:14;903:25926;19887:133;;:::i;:::-;20050:14;;;;;;;;903:25926;20034:30;;;20030:95;;15695:4:49;;20268:37:51;15695:4:49;20315:50:51;15695:4:49;;903:25926:51;15695:4:49;;903:25926:51;;15695:4:49;;;;;:::i;:::-;903:25926:51;20268:37;;:::i;:::-;20347:17;903:25926;;20315:50;;;:::i;:::-;903:25926;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20030:95;903:25926;;;;;;23622:52;;;;20073;;903:25926;20073:52;;903:25926;;;;;20073:52;19719:107;903:25926;;;;;19776:50;;;;;;903:25926;19776:50;;903:25926;;;;;19776:50;19723:44;19753:14;;;19723:44;;903:25926;;;;;;;;;;;;;;7112:31:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;4920:20:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;35685:22:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;4525:16;903:25926;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;4586:44;;903:25926;;4744:39;903:25926;;;;;;;;;;4795:12;:15;903:25926;4795:15;;;;:::i;:::-;:29;;903:25926;;4744:81;;4740:353;;903:25926;5133:10;5551:40;903:25926;5133:10;;903:25926;5133:10;;:7;:10;:::i;:::-;5146:26;903:25926;;;;;;;;;;;;;825:11:80;;;903:25926:51;;;;;;;;;;;;;5210:10;903:25926;;5258:28;903:25926;;;;;;;5326:12;903:25926;;5376:30;903:25926;;;;;5470:8;;:5;:8;:::i;:::-;903:25926;;5484:26;903:25926;5470:11;;903:25926;5551:40;903:25926;;5551:40;;;;;:::i;:::-;;;;903:25926;;4740:353;903:25926;;;;;971:66:6;;;4956:20:51;;903:25926;4956:20;903:25926;4956:20;;;;;;;;;971:66:6;4956:20:51;;;4740:353;4994:4;;4990:33;;5551:40;5037:15;903:25926;5037:15;;903:25926;5037:15;;:::i;:::-;:29;;903:25926;-1:-1:-1;;;;;903:25926:51;;;;;;;;4740:353;;;;;;4990:33;903:25926;;-1:-1:-1;;;5007:16:51;;903:25926;;5007:16;4956:20;;;;903:25926;4956:20;903:25926;4956:20;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;903:25926;;971:66:6;903:25926:51;;971:66:6;;;;903:25926:51;;;;;;;;;;;;;;;;;4727:43:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;9635:42:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;8425:22:48;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;901:22:52;;903:25926:51;;;901:22:52;;;;;903:25926:51;901:22:52;;;;:::i;:::-;903:25926:51;;;;901:22:52;;903:25926:51;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;-1:-1:-1;;;;;903:25926:51;;1885:23:56;903:25926:51;;;1885:23:56;903:25926:51;;;;;;;-1:-1:-1;;903:25926:51;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8721:16;8687:12;;;:::i;:::-;903:25926;;;8721:16;:::i;:::-;8763:9;9044:31;8763:9;;;;:::i;:::-;903:25926;8803:5;;;;;:::i;:::-;9058:8;903:25926;9044:31;:::i;:::-;903:25926;9247:25;903:25926;;9209:24;;;;;:::i;:::-;9247:25;;:::i;:::-;903:25926;-1:-1:-1;;903:25926:51;;;;;;;24957:26;;24956:37;24957:26;;;:::i;:::-;24956:37;:::i;:::-;633:8:80;;;;;;;;;;;;;;;;;;1355:21;;;:::i;:::-;633:8;;;;;;;;;;;;;;;9532:31:51;1355:21:80;;25229:29:51;1355:21:80;9373:132:51;1355:21:80;;;;:::i;:::-;25229:29:51;;;:::i;:::-;903:25926;;;;;;;;9481:14;903:25926;9373:132;;:::i;:::-;9532:31;;;;;;;:::i;:::-;903:25926;;9577:31;;;9573:95;;9820:19;;;9816:64;;10062:17;10090:55;15420:5:49;;;903:25926:51;15420:5:49;;:::i;:::-;903:25926:51;;;;10062:17;;;:::i;:::-;903:25926;;;;10090:55;;:::i;9816:64::-;903:25926;;-1:-1:-1;;;9848:32:51;;903:25926;;9848:32;9573:95;903:25926;;;;;23622:52;;;;9617:51;;903:25926;9617:51;;903:25926;;;;;9617:51;633:8:80;903:25926:51;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;903:25926:51;;;;-1:-1:-1;;;;;903:25926:51;;;;;15552:30;15548:57;;903:25926;;15675:18;;15631:20;;-1:-1:-1;;;;;903:25926:51;15631:20;:::i;:::-;903:25926;;-1:-1:-1;;;;;903:25926:51;15675:18;:::i;:::-;15723:16;;;;:::i;:::-;15767:14;;;;:::i;:::-;15816:9;;;;:::i;:::-;15859:7;;;;:::i;:::-;15996:32;903:25926;;;;;15996:32;:::i;:::-;903:25926;16151:35;903:25926;16152:21;903:25926;;;;;16152:21;:::i;16151:35::-;903:25926;;16200:26;;;:44;;;;903:25926;16196:107;;16388:28;;;;17055:133;16388:28;;;;16419:32;16388:28;;;;:::i;:::-;16419:32;;;:::i;:::-;-1:-1:-1;16384:612:51;;903:25926;-1:-1:-1;;903:25926:51;;;;17164:14;903:25926;;-1:-1:-1;;;;;903:25926:51;;;;-1:-1:-1;903:25926:51;17055:133;:::i;:::-;903:25926;;;;;;17202:30;;;17198:95;;903:25926;;;;;17303:55;17368:41;903:25926;;;;;;;;;;;;;;;;17303:55;;:::i;:::-;903:25926;;17368:41;;:::i;17198:95::-;903:25926;;;;;;23622:52;;;;17241;;903:25926;17241:52;;903:25926;;;;;17241:52;16384:612;16776:33;16977:7;5738:23:52;;;:::i;:::-;5921:17;;:::i;:::-;16776:33:51;;;;:::i;:::-;16977:7;;;;:::i;:::-;16384:612;;;;;16196:107;903:25926;;;;;23325:50;;;;16253;;903:25926;16253:50;;903:25926;;;;;16253:50;16200:44;16230:14;;;16200:44;;15548:57;903:25926;;-1:-1:-1;;;15591:14:51;;903:25926;;15591:14;903:25926;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;7843:47:48;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;2275:39;903:25926;;;;;;;;;;;;;2329:16;2275:39;;903:25926;;;;;;;;;;;2329:41;903:25926;;2325:79;;2443:8;903:25926;;;;;;;;;;;:::i;:::-;;;;2506:53;;;903:25926;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;2690:58;;;903:25926;;;2672:12;903:25926;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;2790:40;2803:26;903:25926;2790:7;:40;:::i;:::-;903:25926;;;2868:10;903:25926;;2916:28;903:25926;;;;;;;2984:12;903:25926;;3034:30;903:25926;;;;;;;;;;;;:::i;:::-;3154:24;903:25926;;;3139:74;;3184:26;903:25926;;;3128:5;903:25926;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3224:5;903:25926;;;;;;;;;;;3373:49;903:25926;;;;;;;;;;:::i;:::-;3310:21;;3294:38;3310:21;;;:::i;:::-;3294:10;:38;:::i;:::-;3373:49;903:25926;;3373:49;;;;;:::i;903:25926::-;-1:-1:-1;;;903:25926:51;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;2325:79;903:25926;;-1:-1:-1;;;2379:25:51;;903:25926;;2379:25;903:25926;;-1:-1:-1;;903:25926:51;;;-1:-1:-1;903:25926:51;;;;;;:::i;:::-;;;;:::i;:::-;;5738:23:52;;:::i;:::-;5921:17;;:::i;:::-;903:25926:51;;;;;;;;21926:16;903:25926;;;;21926:16;:::i;:::-;21968:9;22235:33;21968:9;;;;:::i;:::-;903:25926;22008:5;;;;;:::i;:::-;22235:33;;:::i;:::-;22408:11;;;;;;903:25926;;;11024:54:49;;;;;:::i;:::-;11152:26;;;11148:88;;903:25926:51;;;1640:7:80;903:25926:51;;;633:8:80;22599:25:51;;;;;;;:::i;:::-;1640:7:80;;:::i;:::-;633:8;22777:21:51;;;22773:66;;23268:7;903:25926;23028:71;23029:61;903:25926;23029:53;903:25926;;23044:37;903:25926;30069:16:48;903:25926:51;30069:5:48;903:25926:51;30069:16:48;:::i;23029:61:51:-;23094:5;903:25926;23028:71;;:::i;:::-;633:8:80;23268:7:51;;;;:::i;:::-;903:25926;23302:14;;903:25926;23290:26;;;23286:89;;23459:14;23436:133;23459:14;;;;903:25926;;23487:14;;;;;903:25926;;23545:14;903:25926;23436:133;;:::i;:::-;23599:14;;;;;;;;903:25926;23583:30;;;23579:95;;15420:5:49;;903:25926:51;15420:5:49;;23815:34:51;15420:5:49;;;;23859:53:51;15420:5:49;903:25926:51;15420:5:49;;;;;:::i;:::-;903:25926:51;23815:34;:::i;:::-;23894:17;903:25926;;23859:53;;:::i;23286:89::-;903:25926;;;;;23325:50;;;;;;903:25926;23325:50;;903:25926;;;;;23325:50;11148:88:49;903:25926:51;;;;;11187:49:49;;;;;;903:25926:51;11187:49:49;;903:25926:51;;;;;11187:49:49;903:25926:51;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;43439:68:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;10124:34:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;17780:52:49;17318:26;17342:1;17318:26;:::i;:::-;17703:59;17613;;;;:::i;:::-;17703;;;:::i;:::-;17780:52;;:::i;:::-;903:25926:51;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;39604:38:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;43082:10:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;36017:26:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;41156:24:48;903:25926:51;;;;;;;;;;;;;;;;;;569:21:58;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;10813:36:48;903:25926:51;;;;;;;;;;;;;;;;;;;;9897:38:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;6445:26:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;6571:18:52;903:25926:51;6555:12:52;:34;;903:25926:51;;;;;;;;;;;;;;;;;;;622:21:58;903:25926:51;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;5412:60:48;903:25926:51;;;;;;;5412:60:48;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;32441:24:48;28767:27;28738:12;;:::i;:::-;28767:27;:::i;:::-;32441:24;;:::i;:::-;32490:8;903:25926:51;-1:-1:-1;32482:16:48;903:25926:51;;;;;;;;;;;;;;;;;;;7976:32:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;10489:41:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;8369:23:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;43846:60:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;898:66:58;;:::i;:::-;2323:6;903:25926:51;;;;;-1:-1:-1;;;;;903:25926:51;2309:10:58;:20;2305:45;;903:25926:51;;;2364:10:58;2360:36;;903:25926:51;;;;;;2323:6:58;903:25926:51;2435:18:58;903:25926:51;;;2309:10:58;903:25926:51;;2435:18:58;903:25926:51;;2360:36:58;903:25926:51;;-1:-1:-1;;;2383:13:58;;903:25926:51;;2383:13:58;2305:45;903:25926:51;;-1:-1:-1;;;2338:12:58;;903:25926:51;;2338:12:58;903:25926:51;;;;;;;;;;;;;;10721:41:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;18725:52:49;18261:26;18285:1;18261:26;:::i;:::-;18648:59;18558;;;;:::i;:::-;18648;;;:::i;903:25926:51:-;;;;;;;;;;;;;2860:28:49;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;8215:24:48;;903:25926:51;;;8215:24:48;;;;;903:25926:51;8215:24:48;;;;:::i;:::-;903:25926:51;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;40328:22:48;903:25926:51;;;;;-1:-1:-1;;903:25926:51;;;-1:-1:-1;903:25926:51;;;;;;:::i;:::-;;;:::i;:::-;;5738:23:52;;:::i;:::-;5921:17;;:::i;:::-;903:25926:51;;;;;-1:-1:-1;;;;;903:25926:51;11670:16;;903:25926;;11670:16;:::i;:::-;11712:9;11993:31;11712:9;;;;:::i;:::-;903:25926;11752:5;;;;;:::i;11993:31::-;903:25926;-1:-1:-1;;903:25926:51;;;;;;;;;12636:26;;;;:::i;:::-;12667:24;;;;:::i;:::-;903:25926;;;;;;;;12776:35;12635:63;;;;;;;:::i;:::-;12777:11;:25;:11;;;903:25926;12777:19;903:25926;;;12777:19;:::i;:25::-;633:8:80;903:25926:51;;;12806:5;903:25926;12776:35;;:::i;:::-;633:8:80;12852:11:51;903:25926;12852:11;;903:25926;12838:25;;;12834:83;;903:25926;13184:25;903:25926;;;13184:25;;:::i;:::-;633:8:80;;;;;;;;;;;;;;;;1355:21;;;:::i;:::-;26448:18:51;;;26444:63;;26732:38;13469:32;1640:7:80;;13529:14:51;1640:7:80;13310:135:51;1640:7:80;;:::i;:::-;633:8;26732:38:51;;:::i;:::-;13333:14;;;;;;903:25926;;13361:14;;;;903:25926;;13419:16;903:25926;13310:135;;:::i;:::-;13469:32;;;;;;;:::i;:::-;13529:14;;903:25926;13515:28;;;13511:93;;15695:4:49;;13776:16:51;15695:4:49;;;903:25926:51;15695:4:49;;;;903:25926:51;13803:37;15695:4:49;;:::i;13776:16:51:-;13803:37;:::i;13511:93::-;903:25926;;;;;13552:52;;;;;;903:25926;13552:52;;903:25926;;;;;13552:52;12834:83;903:25926;;;;;12872:45;;;;;;903:25926;12872:45;;903:25926;;;;;12872:45;903:25926;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;37183:32:48;903:25926:51;;;;;;;;;;;;;;;;;1066:38:52;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;37594:36:48;903:25926:51;;;;;;;;;;;;;;;;;5286:20:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;7291:29:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;35359:26:48;903:25926:51;;;;;;;;;;;;;;;;;10245:37:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;5808:25:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;44195:32:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;41897:56:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;36407:32:48;903:25926:51;;;;;;;;;;;;;;;;;10021:29:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;8294:24:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6410:10;903:25926;;;;6409:11;6405:44;;6471:9;;;:::i;:::-;6504:11;;;:8;:11;:::i;:::-;903:25926;;;;;;971:66:6;;;;6504:30:51;;;903:25926;6504:30;;903:25926;;;;;;;;;;;;;6504:30;;;;;;;;;;;903:25926;6604:8;;;6600:53;;6780:23;6700:14;;:11;:14;:::i;:::-;903:25926;;;;;;6780:23;;:::i;:::-;6897:26;;;;6893:58;;903:25926;;;7207:11;903:25926;;;7104:57;903:25926;;;;;;;;;;;;7104:57;6504:8;7207:11;:::i;:::-;903:25926;;;;;;;7207:30;;;;;;903:25926;;-1:-1:-1;;;7207:30:51;;-1:-1:-1;;;;;903:25926:51;;;;;7207:30;;903:25926;;;;;;;;;;;;;;;;;;7207:30;;;;;;;;903:25926;;;;;;;;;7207:30;;;;;;:::i;:::-;903:25926;;7207:30;;;;903:25926;;971:66:6;903:25926:51;;971:66:6;;;;7207:30:51;903:25926;;;6893:58;;-1:-1:-1;7207:11:51;6893:58;;6600:53;903:25926;;;;6621:32;;;;;;;903:25926;6621:32;;903:25926;;;;;6621:32;6504:30;;;;;;;;;;;;;;;;;:::i;:::-;;;903:25926;;;;;6504:30;;;;;;;;;;903:25926;;971:66:6;903:25926:51;;971:66:6;;;;6405:44:51;903:25926;;-1:-1:-1;;;6429:20:51;;903:25926;;6429:20;903:25926;;;;;;;;;;;;;986:87:56;;:::i;:::-;3320:4:58;903:25926:51;;3308:16:58;903:25926:51;;;3308:16:58;903:25926:51;;;;;;;;;;;;;;;;;6338:17:52;;:::i;:::-;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;42221:32:48;903:25926:51;;;;;;;;;;;;;;;;4667:22:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;5214:20:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;8838:33:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;;2082:7:58;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;10346:39:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;38506:26:48;903:25926:51;;;;;;;;;;;;;;;;2333:6:9;-1:-1:-1;;;;;903:25926:51;2324:4:9;2316:23;903:25926:51;;;;;1312:66:6;903:25926:51;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;986:87:56;;:::i;:::-;903:25926:51;;2972:17:58;903:25926:51;;2972:17:58;903:25926:51;;;;;;;-1:-1:-1;;903:25926:51;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;4109:4:9;903:25926:51;;;1963:87:9;903:25926:51;;;;;;;;;;;;;1898:6:9;;903:25926:51;1889:4:9;1873:80;1889:4;;1881:23;;1873:80;:::i;:::-;1312:66:6;903:25926:51;;1971:30:9;1963:87;:::i;:::-;986::56;;:::i;:::-;4109:4:9;:::i;903:25926:51:-;;;;;;;;;;;;;;;;;;;;;;;6163:26:48;903:25926:51;;;;;;;;;;;;;;;;;;;;8058:48:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;8660:18:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;5499:38:48;;903:25926:51;;;5499:38:48;;;;;903:25926:51;5499:38:48;;;;:::i;:::-;-1:-1:-1;903:25926:51;;;5499:38:48;;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;6608:29:48;903:25926:51;;;;;;;;;;;;;;;;;;;;1108:7:58;903:25926:51;;;;;;1107:8:58;1103:38;;903:25926:51;;;;-1:-1:-1;;;;;903:25926:51;2606:10:58;:20;2602:45;;903:25926:51;;;1108:7:58;903:25926:51;2687:20:58;903:25926:51;;;2606:10:58;903:25926:51;;2687:20:58;903:25926:51;;1103:38:58;903:25926:51;;-1:-1:-1;;;1124:17:58;;903:25926:51;;1124:17:58;903:25926:51;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;44506:27:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;7482:36:52;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;5625:28:48;;903:25926:51;;;5625:28:48;;;;;903:25926:51;5625:28:48;;;;:::i;903:25926:51:-;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;3569:5:9;1898:6;1963:87;1898:6;;;;903:25926:51;1889:4:9;1873:80;1889:4;;1881:23;;1873:80;:::i;1963:87::-;986::56;;:::i;:::-;903:25926:51;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;903:25926:51;;;:::i;:::-;;;;;;;3569:5:9;:::i;903:25926:51:-;;;;;;;;;;;;;898:66:58;;:::i;:::-;32815:10:48;903:25926:51;;;;;32815:25:48;;;903:25926:51;32815:51:48;;;903:25926:51;32811:269:48;;903:25926:51;;;32811:269:48;-1:-1:-1;;903:25926:51;;;;;;;32918:20:48;;;;32952:7;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;32952:15:48;;;;;971:66:6;903:25926:51;971:66:6;;;;;;;32952:15:48;;;;;;;;;;32811:269;32952:15;;;;:::i;:::-;32811:269;;903:25926:51;;;32952:15:48;;;;:::i;:::-;;;;;;903:25926:51;;;971:66:6;;;;;;;;32815:51:48;28738:12;32441:24;28767:27;28738:12;;:::i;32441:24::-;32490:8;903:25926:51;-1:-1:-1;32482:16:48;32815:51;;:25;903:25926:51;;;;;;32829:11:48;32815:25;;903:25926:51;;;;;;;;;;;;;;6770:29:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;7540:26:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;986:87:56;;:::i;:::-;3662:19:58;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;40574:20:48;903:25926:51;;;;;;;;;;;;;;;;;6932:29:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;39242:70:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;7681:45:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;8544:22:48;903:25926:51;;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;37999:32:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;;;;;;;;;986:87:56;;:::i;:::-;40814:24:48;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;8713:18:48;903:25926:51;;;;;;;;;;;;;;;;;;;;8914:23:48;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;40003:72:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;36795:32:48;903:25926:51;;;;;;;;;;;;;;;;;10625:29:48;903:25926:51;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;986:87:56;;:::i;:::-;38830:38:48;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;970:33:52;903:25926:51;;;;;;;;;;;;;;;;;;;;747:25:56;903:25926:51;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;42739:56:48;903:25926:51;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;5352:26:48;;903:25926:51;;;5352:26:48;;;;;903:25926:51;5352:26:48;;;;:::i;:::-;903:25926:51;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;986:87:56;;:::i;:::-;903:25926:51;;41536:40:48;903:25926:51;;;;;;;;;;;-1:-1:-1;903:25926:51;;-1:-1:-1;903:25926:51;;;-1:-1:-1;903:25926:51;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;903:25926:51;;-1:-1:-1;903:25926:51;;;;;;-1:-1:-1;903:25926:51;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;2820:944:6;;;903:25926:51;971:66:6;903:25926:51;;3232:526:6;903:25926:51;;;3330:17:6;;;;;:::i;:::-;2820:944::o;3232:526::-;903:25926:51;;;-1:-1:-1;;;3383:63:6;;;;903:25926:51;;;;-1:-1:-1;;;;;903:25926:51;;;3383:63:6;903:25926:51;3383:63:6;903:25926:51;;3383:63:6;;-1:-1:-1;;3383:63:6;;;3232:526;-1:-1:-1;3379:302:6;;903:25926:51;;-1:-1:-1;;;3610:56:6;;3383:63;3610:56;;971:66;;;;;;;903:25926:51;971:66:6;903:25926:51;;;971:66:6;-1:-1:-1;;;971:66:6;;;;;;3610:56;3379:302;3496:28;;;;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;-1:-1:-1;2204:27:6;;903:25926:51;;2523:15:6;;;;:28;;;3379:302;2519:123;;;3379:302;3232:526;;;;2820:944::o;2519:123::-;7318:69:18;903:25926:51;-1:-1:-1;903:25926:51;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;7276:25:18;;;;;;;;;903:25926:51;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;-1:-1:-1;903:25926:51;;;;;;7318:69:18;:::i;:::-;;2519:123:6;;;;;;903:25926:51;-1:-1:-1;903:25926:51;;-1:-1:-1;7318:69:18;:::i;2523:28:6:-;;;;;;971:66;903:25926:51;;-1:-1:-1;;;971:66:6;;3383:63;971:66;;;;;;;;;903:25926:51;971:66:6;903:25926:51;;;971:66:6;-1:-1:-1;;;971:66:6;;;;;;;3383:63;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;;3383:63;;;;;;;;;1699:281;1713:19:18;;:23;903:25926:51;;1312:66:6;903:25926:51;;-1:-1:-1;;;;;;903:25926:51;-1:-1:-1;;;;;903:25926:51;;;;;;;;;1699:281:6:o;903:25926:51:-;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;7682:628:18;;;;7886:418;;;903:25926:51;;;7917:22:18;7913:286;;8212:17;;:::o;7913:286::-;1713:19;:23;903:25926:51;;8212:17:18;:::o;903:25926:51:-;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;;;;7886:418:18;903:25926:51;;;;-1:-1:-1;8991:21:18;:17;;9163:142;;;;;;;8987:379;903:25926:51;;;;;;9335:20:18;;903:25926:51;;9335:20:18;;;;903:25926:51;;;;;;;;;9011:1:18;903:25926:51;;;;;;;;;;;;9011:1:18;903:25926:51;;;;;;;;;;;;;;9335:20:18;;;;903:25926:51;;;;;;;;;;;;;;;;;;;-1:-1:-1;903:25926:51;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;29100:628:48:-;;903:25926:51;29193:15:48;903:25926:51;29240:12:48;;903:25926:51;;29274:13:48;903:25926:51;29269:332:48;29289:13;;;;;;903:25926:51;;;;1640:7:80;633:8;903:25926:51;29677:10:48;903:25926:51;1640:7:80;;:::i;:::-;633:8;29100:628:48;:::o;29304:20::-;29356:10;;;;;29570:20;29520:28;29502:54;1081:1:80;29356:10:48;29511:45;29356:10;;;;:::i;:::-;903:25926:51;29418:19:48;;;;:::i;:::-;29520:15;;;;;;:::i;:::-;903:25926:51;;29520:28:48;:::i;:::-;29511:45;:::i;:::-;29502:54;;:::i;:::-;29570:20;;:::i;:::-;29304;903:25926:51;29274:13:48;;;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;:::o;27921:478:48:-;;;903:25926:51;28007:17:48;28085:37;28007:17;903:25926:51;28085:9:48;28097:25;28085:9;;:5;:9;:::i;:::-;903:25926:51;;;28097:25:48;;:::i;:::-;903:25926:51;;;;28085:37:48;:::i;:::-;903:25926:51;28136:16:48;;28132:225;;27921:478;28366:26;;;27921:478;:::o;28132:225::-;1640:7:80;28168:33:48;;;1640:7:80;28168:33:48;;;633:8:80;;903:25926:51;;;28307:18:48;903:25926:51;1640:7:80;:::i;:::-;633:8;1640:7;:::i;:::-;633:8;28132:225:48;;;;633:8:80;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;903:25926:51;;;633:8:80;;;;;;;;;;;;;;;-1:-1:-1;633:8:80;;;;;;;;;;;;;:::o;27312:306:48:-;27460:16;;:12;:16;:::i;:::-;903:25926:51;;633:8:80;;;;;;;;;;;;;;;;;27560:51:48;27573:14;27567:20;27573:14;27598:12;27573:14;:10;:14;:::i;:::-;903:25926:51;;;;;;27567:20:48;;:::i;:::-;27598:12;;:::i;:::-;27560:51;;:::i;:::-;27312:306;:::o;31476:310::-;31644:11;;31640:35;;30069:16;31731:48;903:25926:51;30069:5:48;903:25926:51;30069:16:48;:::i;31640:35::-;825:11:80;;;;31657:18:48;:::o;903:25926:51:-;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;825:11:80;;;903:25926:51;;;;;;;;;;:::o;25766:1037:48:-;25902:5;903:25926:51;25977:21:48;;25973:34;;26036:12;903:25926:51;;;26191:13:48;-1:-1:-1;26281:24:48;;;;:::i;:::-;26399:13;;26394:212;26414:13;;;;;;26620;;-1:-1:-1;26635:13:48;;;;;;25766:1037;;;;;:::o;26650:20::-;26748:9;26730:56;26747:38;26748:9;:17;:9;;1081:1:80;26748:9:48;;;:::i;:::-;903:25926:51;26748:17:48;:::i;26747:38::-;26730:11;:56;:::i;:::-;903:25926:51;26620:13:48;;26429:20;26477:12;;26546:49;1081:1:80;26477:12:48;;;;:::i;:::-;26465:24;;;;:::i;:::-;903:25926:51;26555:40:48;26564:15;;;;:::i;:::-;903:25926:51;;26585:9:48;;;;:::i;:::-;903:25926:51;26555:40:48;;:::i;26546:49::-;26429:20;903:25926:51;26399:13:48;;;25973:34;26000:7;:::o;31792:228::-;-1:-1:-1;;;;;903:25926:51;-1:-1:-1;903:25926:51;;;31902:16:48;903:25926:51;;;;;;31944:14:48;;903:25926:51;;;31943:15:48;31939:44;;903:25926:51;31792:228:48;:::o;33746:305::-;33858:16;33746:305;33858:12;:16;:::i;:::-;-1:-1:-1;903:25926:51;33858:30:48;903:25926:51;-1:-1:-1;;;;;903:25926:51;33926:25:48;903:25926:51;33926:25:48;:::i;:::-;33965:4;;;;33961:61;;34032:12;33746:305;:::o;903:25926:51:-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;971:66:6;;903:25926:51;;;:::i;34372:193:48:-;903:25926:51;;;-1:-1:-1;;;34499:21:48;;903:25926:51;34372:193:48;903:25926:51;;34499:21:48;;903:25926:51;;-1:-1:-1;;;;;903:25926:51;34499:21:48;;;;;;;;;;;;;34530:28;;34372:193;:::o;34499:21::-;;;;;;;903:25926:51;34499:21:48;;;;;;;;;:::i;:::-;;;34372:193::o;34499:21::-;903:25926:51;;971:66:6;34499:21:48;971:66:6;;;;;34665:284:48;34765:12;903:25926:51;34803:24:48;;;;:::i;:::-;34842:13;34854:1;34857:13;;;;;;34665:284;;:::o;34872:20::-;34920:12;;1081:1:80;34920:12:48;;:::i;:::-;34908:24;;;;:::i;:::-;903:25926:51;;34842:13:48;;12463:903:49;;12846:44;633:8:80;903:25926:51;;12743:24:49;903:25926:51;12876:14:49;903:25926:51;12712:12:49;;903:25926:51;;;12846:44:49;:::i;:::-;12908:18;;;;12904:37;;903:25926:51;;;;;13077:19:49;903:25926:51;;633:8:80;725;13210:23:49;725:8:80;;;12463:903:49;:::o;12904:37::-;-1:-1:-1;;;;;;12928:13:49:o;16201:699::-;;;16436:28;;:::i;:::-;16478:47;;;;;;16474:61;;16574:46;;;;;:::i;:::-;16635:30;;;16631:61;;16706:30;;;;16702:44;;16790:29;;;:::i;:::-;633:8:80;;672:5:43;;;;;;:13;16201:699:49;:::o;672:13:43:-;;;16201:699:49;:::o;16702:44::-;16738:8;;;16745:1;16738:8;:::o;16631:61::-;16667:25;;;:::o;16474:61::-;16527:8;;;;;16534:1;16527:8;:::o;11493:643::-;11725:21;903:25926:51;;;;-1:-1:-1;;;11779:19:49;;;971:66:6;903:25926:51;;;;-1:-1:-1;;;;;903:25926:51;;;;;11779:19:49;903:25926:51;;11779:19:49;;;;;;-1:-1:-1;;;11779:19:49;;;11493:643;11812:4;;11808:59;;903:25926:51;11934:17:49;903:25926:51;;;;;11980:19:49;;;;;11779;11980;;;;;;;;-1:-1:-1;;;11980:19:49;;;11493:643;12013:4;;12009:59;;12078:51;;;11493:643;:::o;12009:59::-;903:25926:51;;;;11825:42:49;;;;12026;;11779:19;12026:42;;903:25926:51;12026:42:49;11980:19;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;903:25926:51;;971:66:6;-1:-1:-1;971:66:6;;;;;11808:59:49;903:25926:51;;;;11825:42:49;;;;;;11779:19;11825:42;;903:25926:51;11825:42:49;11779:19;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;903:25926:51;;971:66:6;-1:-1:-1;971:66:6;;;;;903:25926:51;;;;;;;;;;;;;-1:-1:-1;;;;;903:25926:51;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;-1:-1:-1;903:25926:51;;;;;;;;;;;;;;;;;:::o;18991:313:48:-;19262:35;18991:313;19262:12;-1:-1:-1;18991:313:48;19262:35;18991:313;18225:16;;:12;:16;:::i;:::-;903:25926:51;18225:28:48;903:25926:51;;;18225:28:48;:::i;:::-;903:25926:51;;17257:13:48;;903:25926:51;;;17257:13:48;:::i;:::-;903:25926:51;;19262:8:48;:12;:::i;:::-;903:25926:51;;;;-1:-1:-1;;;19262:35:48;;-1:-1:-1;;;;;903:25926:51;;;19262:35:48;;;903:25926:51;;;;;;;;;;;;;;;;;;;;;;;;19262:35:48;;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;19262:35:48;;;;;;;;18991:313;:::o;19262:35::-;;;;;;;;;;;;;;;:::i;:::-;;;903:25926:51;;;;;;;:::i;19262:35:48:-;;;-1:-1:-1;19262:35:48;;20182:284;20429:30;20182:284;20429:30;20182:284;17544:13;;903:25926:51;;;17544:13:48;:::i;:::-;903:25926:51;;17257:13:48;;903:25926:51;;;17257:13:48;:::i;:::-;903:25926:51;;20429:7:48;903:25926:51;;;-1:-1:-1;;;20429:30:48;;-1:-1:-1;;;;;903:25926:51;;;20429:30:48;;;903:25926:51;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;;20429:30:48;;;;;;;;;;;20182:284;:::o;25210:378::-;;;25382:28;25210:378;25382:28;:::i;:::-;25363:47;;;25435:24;25363:47;;25435:24;:::i;:::-;25531:15;;;;;25527:54;;25210:378;;:::o;25527:54::-;903:25926:51;;;;;25555:26:48;;;;;;;;;903:25926:51;;;;;25555:26:48;26973:152;27095:14;903:25926:51;26973:152:48;27060:25;;;;:::i;:::-;903:25926:51;27047:9:48;;:5;:9;:::i;:::-;:38;903:25926:51;;;;;;;;;;27047:38:48;:::i;:::-;903:25926:51;;;;;;;825:11:80;;;903:25926:51;;;;;;;;;;27095:10:48;:14;:::i;30349:313::-;;30510:5;903:25926:51;30510:10:48;;;30506:26;;30597:58;903:25926:51;30069:16:48;30607:39;903:25926:51;30069:5:48;903:25926:51;30069:16:48;:::i;30506:26::-;30522:10;;;633:8:80;30522:10:48;:::o;6821:2423:49:-;;;;;903:25926:51;6969:21:49;903:25926:51;6992:28:49;;903:25926:51;;;:::i;:::-;7058:21:49;-1:-1:-1;;;;;903:25926:51;7058:21:49;;903:25926:51;;;7089:140:49;;6821:2423;903:25926:51;;7264:8:49;903:25926:51;;;;;971:66:6;;;;7264:42:49;;903:25926:51;7264:42:49;;;;903:25926:51;7300:4:49;903:25926:51;;;;7264:42:49;;;;903:25926:51;7264:42:49;;;;;;;;;;;;;6821:2423;7320:19;;7316:1094;;6821:2423;8651:18;;;;;;;903:25926:51;8651:23:49;8647:527;;6821:2423;9183:54;;;;;6821:2423;:::o;8647:527::-;633:8:80;;;;1640:7;633:8;1640:7;;;;:::i;:::-;633:8;903:25926:51;;;633:8:80;8846:13:49;;;;9037:42;633:8:80;;8920:24:49;;903:25926:51;8920:24:49;;903:25926:51;9037:42:49;:::i;:::-;8647:527;;;;;8842:322;9118:31;;;8842:322;;7316:1094;7404:33;903:25926:51;7415:21:49;903:25926:51;;7404:33:49;:::i;:::-;7451:949;;;;7316:1094;7451:949;7649:17;;;;;;;;7640:56;7649:17;633:8:80;1640:7;7649:17:49;;;;:::i;:::-;7668:11;903:25926:51;1640:7:80;;:::i;:::-;633:8;7640:56:49;:::i;:::-;7619:18;;;903:25926:51;;;7619:18:49;;7718:13;;;;7839:25;7948:51;7839:25;;7806:30;7839:25;;;:::i;:::-;7806:30;;;;903:25926:51;;;7948:51:49;:::i;:::-;7714:392;;;8127:38;:92;;;;;7714:392;8123:263;;;;;7714:392;7451:949;;;7316:1094;;8123:263;903:25926:51;;;;;8287:30:49;;;;903:25926:51;8123:263:49;;;;;8127:92;903:25926:51;;;;;;;971:66:6;;;;;;;8169:27:49;;7264:42;8169:27;;903:25926:51;8169:27:49;;;;;;;;;;;;;;8127:92;8169:50;;8127:92;;;;;8169:27;;;;;;;;;;;;;;;;;;:::i;:::-;;;903:25926:51;;;;;;;8169:27:49;;;;;;;;;903:25926:51;;971:66:6;903:25926:51;;971:66:6;;;;7714:392:49;8046:41;;;7714:392;;;;7264:42;;;;;;;;;;;;;;;;;:::i;:::-;;;903:25926:51;;;;;7264:42:49;;;;;;;;;;903:25926:51;;971:66:6;903:25926:51;;971:66:6;;;;7089:140:49;903:25926:51;;;7186:32:49;903:25926:51;7186:10:49;903:25926:51;;;;;;971:66:6;;;;;;;7186:32:49;;;;;903:25926:51;7186:32:49;;;;;;;;;;7089:140;7179:39;;;;;:::i;:::-;7089:140;;;;7186:32;;;;;;;;;;;;;;;;:::i;:::-;;;903:25926:51;;;;7179:39:49;903:25926:51;;7186:32:49;;;;;-1:-1:-1;7186:32:49;;13793:1357;13940:28;;;:::i;:::-;14048:26;;;;14072:1;14048:26;:::i;:::-;903:25926:51;;14152:28:49;;14194:33;;;13793:1357;903:25926:51;;;14072:1:49;1227:6:45;;;14072:1:49;;1227:15:45;;903:25926:51;;14501:45:49;;;;14497:258;;14772:48;;;;;14768:158;;903:25926:51;;14970:44:49;903:25926:51;15028:52:49;903:25926:51;15121:12:49;15094:39;903:25926:51;13793:1357:49:o;14768:158::-;903:25926:51;;;;;14662:78:49;;;;14845:81;;;;;903:25926:51;;;;;14845:81:49;14497:258;14570:27;;;;;14566:71;;903:25926:51;;;;14662:78:49;;;;;;;;;903:25926:51;;;;;14662:78:49;14566:71;903:25926:51;;-1:-1:-1;;;14606:31:49;;;;;1227:15:45;903:25926:51;1227:15:45;;14194:33:49;903:25926:51;;;14072:1:49;903:25926:51;14194:33:49;;;19588:319:48;19862:12;19588:319;;18611:16;;:12;:16;:::i;:::-;903:25926:51;18611:28:48;903:25926:51;;;18611:28:48;:::i;:::-;903:25926:51;;18649:13:48;;903:25926:51;;;18649:13:48;:::i;19862:12::-;903:25926:51;;;;;;;;-1:-1:-1;;;;;903:25926:51;19862:38:48;;;;;903:25926:51;;-1:-1:-1;;;19862:38:48;;19888:4;19862:38;;;903:25926:51;;;;;;;;-1:-1:-1;;903:25926:51;;;-1:-1:-1;903:25926:51;;;;19862:38:48;;;;;;;;;;;19588:319;:::o;19862:38::-;-1:-1:-1;19862:38:48;;;:::i;20700:247::-;;17875:13;;903:25926:51;;;17875:13:48;:::i;:::-;903:25926:51;;17898:13:48;;903:25926:51;;;17898:13:48;:::i;:::-;903:25926:51;;20907:7:48;903:25926:51;-1:-1:-1;;;;;903:25926:51;20907:33:48;;;;;903:25926:51;;-1:-1:-1;;;20907:33:48;;20928:4;20907:33;;;903:25926:51;;;;;;;;-1:-1:-1;;903:25926:51;;;-1:-1:-1;903:25926:51;;;;20907:33:48;903:25926:51;9785:521:49;;10013:26;9785:521;10077:72;9785:521;;;;;10013:26;:::i;:::-;10077:72;;:::i;:::-;10221:24;;;10217:82;;9785:521;;:::o;10217:82::-;903:25926:51;;;;;10254:45:49;;;;;;;;;903:25926:51;;;;;10254:45:49;24271:526:48;;23490:51;24271:526;;;;23490:51;:::i;:::-;-1:-1:-1;;903:25926:51;;;;-1:-1:-1;;;903:25926:51;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;903:25926:51;;;;;;;633:8:80;;;;;;;;;;;;;;;;903:25926:51;;;;;;-1:-1:-1;;903:25926:51;;;;;;24704:27:48;;;;24700:41;;24751:39;24271:526;:::o;903:25926:51:-;-1:-1:-1;;;903:25926:51;;;;;;;;;-1:-1:-1;;;633:8:80;;;;;;903:25926:51;633:8:80;;-1:-1:-1;;;903:25926:51;;;;;;;;;-1:-1:-1;;;903:25926:51;;;;;;;;21410:316:48;;;30069:16;21410:316;30069:5;903:25926:51;30069:16:48;:::i;:::-;633:8:80;;;;;;;;;;;;;;;;;21638:81:48;21698:20;;;;:::i;22135:440::-;;;22367:51;22135:440;22367:51;:::i;:::-;22432:21;22452:1;22432:21;;;22428:35;;22513:55;22541:27;;;;:::i;:::-;22513:55;;:::i;903:25926:51:-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;2916:409:52:-;3042:11;;:7;:11;:::i;:::-;903:25926:51;;;;;;3082:5:52;;:9;;;;;:::i;:::-;903:25926:51;;;6571:18:52;903:25926:51;6555:12:52;:34;;3105:68;;2916:409;3187:18;;;;;;3183:41;;3287:19;;3286:32;3287:19;;:::i;3105:68::-;3155:9;;;;3142:31;3155:9;;903:25926:51;3155:9:52;;:::i;:::-;903:25926:51;;:::i;:::-;3142:31:52;:::i;:::-;3105:68;;;;;1398:409;1599:16;903:25926:51;;1599:16:52;;903:25926:51;;633:8:80;;903:25926:51;;;;;;;;;1572:44:52;1680:25;1572:44;1774:13;1572:44;;:::i;:::-;903:25926:51;;1680:25:52;:::i;4254:1040::-;903:25926:51;4380:11:52;4421:12;903:25926:51;;;4459:24:52;;;;:::i;:::-;4498:13;;4493:486;4513:13;;;;;;5109:8;;;;;5105:111;;5278:9;;;;:::i;:::-;4254:1040;:::o;5105:111::-;-1:-1:-1;;5169:9:52;903:25926:51;1081:1:80;903:25926:51;;5161:30:52:o;4528:20::-;4580:12;;;;;;;:::i;:::-;4606:17;;;;;;:::i;:::-;903:25926:51;4771:28:52;4658:19;;;;:::i;:::-;4771:15;;;;;:::i;:28::-;633:8:80;;;;;;;;;;;;;;;;4876:37:52;4958:10;4761:59;4883:30;4761:59;;1081:1:80;4761:59:52;4883:24;4761:59;;:::i;:::-;4883:24;;;;;:::i;4876:37::-;4958:10;;:::i;:::-;4528:20;903:25926:51;4498:13:52;;;;6774:316;6571:18;903:25926:51;;6555:12:52;:34;;6813:271;;6774:316;:::o;6813:271::-;6873:12;903:25926:51;-1:-1:-1;6926:13:52;;;;;;903:25926:51;;7049:23:52;903:25926:51;6555:12:52;903:25926:51;;;6774:316:52:o;6941:20::-;3545:5;;3741:42;1081:1:80;3545:5:52;;903:25926:51;3545:9:52;;;;:::i;903:25926:51:-;3580:13:52;3704:9;3620:33;3580:13;;;:::i;:::-;3620:33;;:::i;:::-;3704:9;;;;:::i;:::-;903:25926:51;;;;;;;;;;;;;;3741:42:52;903:25926:51;6911:13:52;;2016:143:56;2081:8;903:25926:51;;;-1:-1:-1;;;2081:40:56;;2110:10;2081:40;;;903:25926:51;;2081:40:56;;903:25926:51;;;;;;-1:-1:-1;;;;;903:25926:51;2081:40:56;;;;;;;-1:-1:-1;2081:40:56;;;2016:143;2080:41;;2076:76;;2016:143::o;2076:76::-;903:25926:51;;-1:-1:-1;;;2130:22:56;;2081:40;;2130:22;2081:40;;;;;;;;;;;;;;;;:::i;:::-;;;903:25926:51;;;;;;;;:::i;:::-;2081:40:56;;;;;;-1:-1:-1;2081:40:56;;1865:93:58;903:25926:51;1920:7:58;903:25926:51;;;;1916:35:58;;1865:93::o;1916:35::-;903:25926:51;;-1:-1:-1;;;1936:15:58;;;;;1264:119:80;;633:8;;;;;;;;;;;;;;;;1355:21;;;:::i"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "3232000",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "absoluteAccumulator()": "4088",
        "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "appreciationFactor()": "4463",
        "bes()": "2900",
        "bns()": "2482",
        "calcCtargemaCA()": "infinite",
        "changeGovernor(address)": "infinite",
        "decayBlockSpan()": "3274",
        "differentialAccumulator()": "3384",
        "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "emaCalculationBlockSpan()": "3494",
        "evalLiquidation()": "infinite",
        "feeRetainer()": "2944",
        "feeToken()": "3166",
        "feeTokenPct()": "2680",
        "feeTokenPriceProvider()": "4354",
        "getPACtp(address)": "infinite",
        "governor()": "2352",
        "isLiquidationReached()": "infinite",
        "lastOperationBlockNumber()": "3054",
        "liqEnabled()": "4298",
        "liqRedeemTPTo(address,address,address,uint256)": "infinite",
        "liqThrld()": "3714",
        "liquidated()": "2566",
        "makeStoppable()": "infinite",
        "makeUnstoppable()": "infinite",
        "maxAbsoluteOpProvider()": "4332",
        "maxOpDiffProvider()": "3914",
        "maxQACToMintTP()": "infinite",
        "maxQACToRedeemTP()": "infinite",
        "mintTCandTPFee()": "3428",
        "mintTCandTPto((address,uint256,uint256,address,address,address))": "infinite",
        "mocAppreciationBeneficiaryAddress()": "2946",
        "mocFeeFlowAddress()": "3782",
        "mocQueue()": "2484",
        "mocVendors()": "3628",
        "nACcb()": "4396",
        "nTCcb()": "3450",
        "nextEmaCalculation()": "2350",
        "nextTCInterestPayment()": "3912",
        "pause()": "29027",
        "paused()": "3094",
        "pauser()": "3857",
        "pegContainer(uint256)": "9389",
        "peggedTokenIndex(address)": "6056",
        "protThrld()": "3252",
        "proxiableUUID()": "infinite",
        "qACLockedInPending()": "3098",
        "redeemTCandTPFee()": "4418",
        "redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "setAppreciationFactor(uint256)": "infinite",
        "setBes(uint256)": "infinite",
        "setDecayBlockSpan(uint256)": "infinite",
        "setEmaCalculationBlockSpan(uint256)": "infinite",
        "setFeeRetainer(uint256)": "infinite",
        "setFeeTokenAddress(address)": "infinite",
        "setFeeTokenPct(uint256)": "infinite",
        "setFeeTokenPriceProviderAddress(address)": "infinite",
        "setLiqEnabled(bool)": "infinite",
        "setLiqThrld(uint256)": "infinite",
        "setMaxAbsoluteOpProviderAddress(address)": "infinite",
        "setMaxOpDiffProviderAddress(address)": "infinite",
        "setMintTCandTPFee(uint256)": "infinite",
        "setMocAppreciationBeneficiaryAddress(address)": "infinite",
        "setMocFeeFlowAddress(address)": "infinite",
        "setMocQueue(address)": "infinite",
        "setPauser(address)": "infinite",
        "setProtThrld(uint256)": "infinite",
        "setRedeemTCandTPFee(uint256)": "infinite",
        "setSuccessFee(uint256)": "infinite",
        "setSwapTCforTPFee(uint256)": "infinite",
        "setSwapTPforTCFee(uint256)": "infinite",
        "setSwapTPforTPFee(uint256)": "infinite",
        "setTCInterestCollectorAddress(address)": "infinite",
        "setTCInterestPaymentBlockSpan(uint256)": "infinite",
        "setTCInterestRate(uint256)": "infinite",
        "setTcMintFee(uint256)": "infinite",
        "setTcRedeemFee(uint256)": "infinite",
        "shouldCalculateEma()": "3854",
        "stoppable()": "3946",
        "successFee()": "3362",
        "swapTCforTPFee()": "2614",
        "swapTCforTPto((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "swapTPforTCFee()": "2702",
        "swapTPforTCto((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "swapTPforTPFee()": "2856",
        "swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))": "infinite",
        "tcInterestCollectorAddress()": "3760",
        "tcInterestPaymentBlockSpan()": "3648",
        "tcInterestRate()": "2394",
        "tcMintFee()": "4502",
        "tcRedeemFee()": "3868",
        "tcToken()": "3144",
        "tpCtarg(uint256)": "7946",
        "tpEma(uint256)": "10754",
        "tpLiqPrices(uint256)": "7132",
        "tpMintFees(address)": "2685",
        "tpRedeemFees(address)": "4291",
        "tpTokens(uint256)": "6672",
        "unpause()": "26036",
        "updateEmas()": "infinite",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite"
      },
      "internal": {
        "_calcQACforMintTCandTP(uint256,uint256,uint256,uint256)": "infinite",
        "_calcQACforRedeemTCandTP(uint256,uint256,uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "absoluteAccumulator()": "d87aab6f",
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "db796072",
      "appreciationFactor()": "fa6e83bd",
      "bes()": "4d977e78",
      "bns()": "1867e2f5",
      "calcCtargemaCA()": "662013f4",
      "changeGovernor(address)": "e4c0aaf4",
      "decayBlockSpan()": "6f30471f",
      "differentialAccumulator()": "76228055",
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "f26114aa",
      "emaCalculationBlockSpan()": "7a727fe8",
      "evalLiquidation()": "33421c38",
      "feeRetainer()": "4f0f27ee",
      "feeToken()": "647846a5",
      "feeTokenPct()": "2ded50f0",
      "feeTokenPriceProvider()": "f13f4054",
      "getPACtp(address)": "fadda424",
      "governor()": "0c340a24",
      "isLiquidationReached()": "9ad6659d",
      "lastOperationBlockNumber()": "5860ee63",
      "liqEnabled()": "e7c25978",
      "liqRedeemTPTo(address,address,address,uint256)": "6845c445",
      "liqThrld()": "8cfa4241",
      "liquidated()": "23b98cde",
      "makeStoppable()": "68274357",
      "makeUnstoppable()": "5210570c",
      "maxAbsoluteOpProvider()": "ee1f438f",
      "maxOpDiffProvider()": "b5e9ea8c",
      "maxQACToMintTP()": "d6af11da",
      "maxQACToRedeemTP()": "7f13b998",
      "mintTCandTPFee()": "79f9a91c",
      "mintTCandTPto((address,uint256,uint256,address,address,address))": "e44bb512",
      "mocAppreciationBeneficiaryAddress()": "4e1f907a",
      "mocFeeFlowAddress()": "9853c35a",
      "mocQueue()": "13ed7ba5",
      "mocVendors()": "7f01c715",
      "nACcb()": "f30b5614",
      "nTCcb()": "7a193c31",
      "nextEmaCalculation()": "0c36d897",
      "nextTCInterestPayment()": "b9fa6413",
      "pause()": "8456cb59",
      "paused()": "5c975abb",
      "pauser()": "9fd0506d",
      "pegContainer(uint256)": "4b746001",
      "peggedTokenIndex(address)": "9cabfc00",
      "protThrld()": "6b5488df",
      "proxiableUUID()": "52d1902d",
      "qACLockedInPending()": "5cfbe578",
      "redeemTCandTPFee()": "f375cfba",
      "redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))": "7b5a17ae",
      "setAppreciationFactor(uint256)": "01dde6ef",
      "setBes(uint256)": "c84353c9",
      "setDecayBlockSpan(uint256)": "73e28af9",
      "setEmaCalculationBlockSpan(uint256)": "3bc4ac0a",
      "setFeeRetainer(uint256)": "7750ba0c",
      "setFeeTokenAddress(address)": "cf351c1d",
      "setFeeTokenPct(uint256)": "543aeb48",
      "setFeeTokenPriceProviderAddress(address)": "0f1e5e2b",
      "setLiqEnabled(bool)": "1fe6a7ad",
      "setLiqThrld(uint256)": "2c43bd3b",
      "setMaxAbsoluteOpProviderAddress(address)": "d8db6f5a",
      "setMaxOpDiffProviderAddress(address)": "85bf9593",
      "setMintTCandTPFee(uint256)": "2069f753",
      "setMocAppreciationBeneficiaryAddress(address)": "27eab2a1",
      "setMocFeeFlowAddress(address)": "0d6ac463",
      "setMocQueue(address)": "3cfb09ef",
      "setPauser(address)": "2d88af4a",
      "setProtThrld(uint256)": "7cba2383",
      "setRedeemTCandTPFee(uint256)": "7a4ff1d9",
      "setSuccessFee(uint256)": "becaca6b",
      "setSwapTCforTPFee(uint256)": "7af5758c",
      "setSwapTPforTCFee(uint256)": "0e0a8fd2",
      "setSwapTPforTPFee(uint256)": "70713468",
      "setTCInterestCollectorAddress(address)": "735d3960",
      "setTCInterestPaymentBlockSpan(uint256)": "073763b9",
      "setTCInterestRate(uint256)": "64ec230a",
      "setTcMintFee(uint256)": "f2808778",
      "setTcRedeemFee(uint256)": "c00f538d",
      "shouldCalculateEma()": "a8e9ac30",
      "stoppable()": "bb4872de",
      "successFee()": "7554fffd",
      "swapTCforTPFee()": "2a20d57d",
      "swapTCforTPto((address,uint256,uint256,uint256,address,address,address))": "d9b6c2e5",
      "swapTPforTCFee()": "333431fd",
      "swapTPforTCto((address,uint256,uint256,uint256,address,address,address))": "f5571e01",
      "swapTPforTPFee()": "407f0e34",
      "swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))": "e1e121da",
      "tcInterestCollectorAddress()": "8e2bdb86",
      "tcInterestPaymentBlockSpan()": "7f4a4fe0",
      "tcInterestRate()": "0db49656",
      "tcMintFee()": "fda70f8b",
      "tcRedeemFee()": "aea038dc",
      "tcToken()": "60009e0b",
      "tpCtarg(uint256)": "7d8e0314",
      "tpEma(uint256)": "e6b1627c",
      "tpLiqPrices(uint256)": "3915edcb",
      "tpMintFees(address)": "24ffaba3",
      "tpRedeemFees(address)": "ddb6d190",
      "tpTokens(uint256)": "01f1b684",
      "unpause()": "3f4ba83a",
      "updateEmas()": "d1a0faa0",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQacSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQtpSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTCtoRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToMint_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFluxCapacitorOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cglb_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"covThrld_\",\"type\":\"uint256\"}],\"name\":\"LowCoverage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_\",\"type\":\"uint256\"}],\"name\":\"MaxFluxCapacitorOperationReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataProviderAddress_\",\"type\":\"address\"}],\"name\":\"MissingProviderData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProviderAddress_\",\"type\":\"address\"}],\"name\":\"MissingProviderPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedChanger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhenLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhilePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeggedTokenAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACtoRedeem_\",\"type\":\"uint256\"}],\"name\":\"QacBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QacNeededMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"}],\"name\":\"QtcBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"QtpBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unstoppable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"}],\"name\":\"LiqTPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"PeggedTokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTPema_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTPema_\",\"type\":\"uint256\"}],\"name\":\"TPemaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"absoluteAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"addPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appreciationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcCtargemaCA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ctargemaCA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"differentialAccumulator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"editPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emaCalculationBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evalLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRetainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPriceProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"}],\"name\":\"getPACtp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidationReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOperationBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mocACBalance\",\"type\":\"uint256\"}],\"name\":\"liqRedeemTPTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeStoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnstoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAbsoluteOpProvider\",\"outputs\":[{\"internalType\":\"contract IDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOpDiffProvider\",\"outputs\":[{\"internalType\":\"contract IDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQACToMintTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQAC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQACToRedeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQAC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.MintTCandTPParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"mintTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenTotalNeeded\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCommons.FeeCalcs\",\"name\":\"feeCalcs\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocAppreciationBeneficiaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocFeeFlowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocVendors\",\"outputs\":[{\"internalType\":\"contract MocVendors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nACcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTCcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEmaCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTCInterestPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pegContainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nTP\",\"type\":\"uint256\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peggedTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qACLockedInPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.RedeemTCandTPParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"redeemTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtoRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPtoRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenTotalNeeded\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCommons.FeeCalcs\",\"name\":\"feeCalcs\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appreciationFactor_\",\"type\":\"uint256\"}],\"name\":\"setAppreciationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bes_\",\"type\":\"uint256\"}],\"name\":\"setBes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decayBlockSpan_\",\"type\":\"uint256\"}],\"name\":\"setDecayBlockSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockSpan_\",\"type\":\"uint256\"}],\"name\":\"setEmaCalculationBlockSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRetainer_\",\"type\":\"uint256\"}],\"name\":\"setFeeRetainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeTokenAddress_\",\"type\":\"address\"}],\"name\":\"setFeeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTokenPct_\",\"type\":\"uint256\"}],\"name\":\"setFeeTokenPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeTokenPriceProviderAddress_\",\"type\":\"address\"}],\"name\":\"setFeeTokenPriceProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"liqEnabled_\",\"type\":\"bool\"}],\"name\":\"setLiqEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqThrld_\",\"type\":\"uint256\"}],\"name\":\"setLiqThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAbsoluteOpProviderAddress_\",\"type\":\"address\"}],\"name\":\"setMaxAbsoluteOpProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxOpDiffProviderAddress_\",\"type\":\"address\"}],\"name\":\"setMaxOpDiffProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setMintTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocAppreciationBeneficiaryAddress_\",\"type\":\"address\"}],\"name\":\"setMocAppreciationBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeFlowAddress_\",\"type\":\"address\"}],\"name\":\"setMocFeeFlowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocQueueAddress_\",\"type\":\"address\"}],\"name\":\"setMocQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser_\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protThrld_\",\"type\":\"uint256\"}],\"name\":\"setProtThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setRedeemTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"successFee_\",\"type\":\"uint256\"}],\"name\":\"setSuccessFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTCforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTCforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTCFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTCFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tcInterestCollectorAddress_\",\"type\":\"address\"}],\"name\":\"setTCInterestCollectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcInterestPaymentBlockSpan_\",\"type\":\"uint256\"}],\"name\":\"setTCInterestPaymentBlockSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcInterestRate_\",\"type\":\"uint256\"}],\"name\":\"setTCInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcMintFee_\",\"type\":\"uint256\"}],\"name\":\"setTcMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcRedeemFee_\",\"type\":\"uint256\"}],\"name\":\"setTcRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldCalculateEma\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoppable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTCforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTCforTPParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"swapTCforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACSurcharges\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenTotalNeeded\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCommons.FeeCalcs\",\"name\":\"feeCalcs\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTCFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTPforTCParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"swapTPforTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACSurcharges\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenTotalNeeded\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCommons.FeeCalcs\",\"name\":\"feeCalcs\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tpTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTPforTPParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"swapTPforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACSurcharges\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenTotalNeeded\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCommons.FeeCalcs\",\"name\":\"feeCalcs\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcInterestCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcInterestPaymentBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcToken\",\"outputs\":[{\"internalType\":\"contract MocTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpCtarg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpEma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpLiqPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tpMintFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tpRedeemFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpTokens\",\"outputs\":[{\"internalType\":\"contract IMocRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEmas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"IMPORTANT NOTES:  1. MocCore and MocCoreExpansion must have always the same storage layout to avoid collisions  2. Because MocCore is upgradeable and delegates calls to MocCoreExpansion, it cannot be upgradeable because      a proxy contract cannot delegate calls to another proxy contract. So, for any MocCoreExpansion upgrade      you must deploy a new implementation and set it to MocCore.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`  This function is called by MocCore contract using it's context with delegate call  Checks done there:  -  onlyAuthorizedChanger: the caller must have governance authorization.tpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements:  - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"calcCtargemaCA()\":{\"details\":\"qAC = nTP / pACtp      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\",\"returns\":{\"ctargemaCA\":\"[PREC]\"}},\"changeGovernor(address)\":{\"params\":{\"newGovernor_\":\"New governor address\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`  This function is called by MocCore contract using it's context with delegate call  Checks done there:  -  onlyAuthorizedChanger: the caller must have governance authorization.tpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the tpTokenAddress must exists\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"getPACtp(address)\":{\"params\":{\"tp_\":\"Pegged Token address\"},\"returns\":{\"_0\":\"price [PREC]\"}},\"isLiquidationReached()\":{\"returns\":{\"_0\":\"true if liquidation state is reached, false otherwise\"}},\"liqRedeemTPTo(address,address,address,uint256)\":{\"details\":\"This function is called by MocCore contract using it's context with delegate call  The equivalent AC given the liquidation frozen price(qACRedeemed) is transferred  to the `recipient_` by MocCore contract  Checks done there:  -  notPaused: the contract must be unpaused\",\"params\":{\"recipient_\":\"address who receives the AC\",\"sender_\":\"address owner of the TP to be redeemed\",\"tp_\":\"Pegged Token address\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to `recipient_`\"}},\"makeStoppable()\":{\"details\":\"Should be called through governance\"},\"makeUnstoppable()\":{\"details\":\"Should be called through governance\"},\"maxQACToMintTP()\":{\"returns\":{\"maxQAC\":\"minimum regarding maxAbsoluteOperation and maxOperationalDifference\"}},\"maxQACToRedeemTP()\":{\"returns\":{\"maxQAC\":\"minimum regarding maxAbsoluteOperation and maxOperationalDifference\"}},\"mintTCandTPto((address,uint256,uint256,address,address,address))\":{\"details\":\"i_ Pegged Token index      qTP_ amount of Pegged Token to mint      qACmax_ maximum amount of Collateral Asset that can be spent      sender_ address who sends Collateral Asset      recipient_ address who receives the Collateral Token and Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is applied\",\"params\":{\"params_\":\"mint TC and TP function parameters\"},\"returns\":{\"feeCalcs\":\"platform fee detail breakdown\",\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qFeeTokenTotalNeeded\":\"amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"pause()\":{\"details\":\"Should only be called by the pauser and when it is stoppable\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))\":{\"details\":\"i_ Pegged Token index      qTC_ amount of Collateral Token to redeem      qTP_ maximum amount of Pegged Token to redeem      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive      sender_ address who sends Collateral Token and Pegged Token      recipient_ address who receives the Collateral Asset      vendor_ address who receives a markup. If its address(0) no markup is applied\",\"params\":{\"params_\":\"redeem TC and TP function parameters\"},\"returns\":{\"feeCalcs\":\"platform fee detail breakdown\",\"qACtoRedeem\":\"amount of AC sent to `recipient_`\",\"qFeeTokenTotalNeeded\":\"amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\",\"qTPtoRedeem\":\"amount of Pegged Token redeemed\"}},\"setAppreciationFactor(uint256)\":{\"details\":\"sets appreciation Factor value.\",\"params\":{\"appreciationFactor_\":\"pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\"}},\"setBes(uint256)\":{\"details\":\"bns is not automatically updated, you have to wait until next settlement to be made : bns = block.number + bes*\",\"params\":{\"bes_\":\"number of blocks between settlements\"}},\"setDecayBlockSpan(uint256)\":{\"details\":\"sets flux capacitor decay block span\",\"params\":{\"decayBlockSpan_\":\"flux capacitor decay block span\"}},\"setEmaCalculationBlockSpan(uint256)\":{\"details\":\"nextEmaCalculation is not automatically updated, you have to wait until next  EMA calculation to be made : nextEmaCalculation = block.number + emaCalculationBlockSpan*\",\"params\":{\"blockSpan_\":\"Defines how many blocks should pass between EMA calculations\"}},\"setFeeRetainer(uint256)\":{\"details\":\"sets the fee pct to be retainer on AC fees payments as AC re-injection.\",\"params\":{\"feeRetainer_\":\"pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setFeeTokenAddress(address)\":{\"details\":\"sets Fee Token contract address\",\"params\":{\"mocFeeTokenAddress_\":\"Fee Token new contract address\"}},\"setFeeTokenPct(uint256)\":{\"details\":\"sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.\",\"params\":{\"feeTokenPct_\":\"pct applied on the top of the operation`s fee when using Fee Token  as fee payment method [PREC]  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setFeeTokenPriceProviderAddress(address)\":{\"details\":\"sets Fee Token price provider contract address\",\"params\":{\"mocFeeTokenPriceProviderAddress_\":\"Fee Token price provider new contract address\"}},\"setLiqEnabled(bool)\":{\"details\":\"enables and disables the liquidation mechanism.\",\"params\":{\"liqEnabled_\":\"is liquidation enabled\"}},\"setLiqThrld(uint256)\":{\"details\":\"sets the value of the liq threshold configuration param\",\"params\":{\"liqThrld_\":\"liquidation threshold\"}},\"setMaxAbsoluteOpProviderAddress(address)\":{\"details\":\"sets max absolute operation provider address\",\"params\":{\"maxAbsoluteOpProviderAddress_\":\"max absolute operation provider address\"}},\"setMaxOpDiffProviderAddress(address)\":{\"details\":\"sets max operation difference provider address\",\"params\":{\"maxOpDiffProviderAddress_\":\"max operation difference provider address\"}},\"setMintTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when mint Collateral Token and Pegged Token in one operation.\",\"params\":{\"mintTCandTPFee_\":\"additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setMocAppreciationBeneficiaryAddress(address)\":{\"details\":\"sets Moc Appreciation Beneficiary Address\",\"params\":{\"mocAppreciationBeneficiaryAddress_\":\"moc Appreciation Beneficiary new address\"}},\"setMocFeeFlowAddress(address)\":{\"details\":\"sets Moc Fee Flow contract address\",\"params\":{\"mocFeeFlowAddress_\":\"moc Fee Flow new contract address\"}},\"setMocQueue(address)\":{\"details\":\"sets Moc Queue contract address\",\"params\":{\"mocQueueAddress_\":\"moc queue new contract address\"}},\"setPauser(address)\":{\"details\":\"Should be called through governance\",\"params\":{\"newPauser_\":\"Address of the new pauser\"}},\"setProtThrld(uint256)\":{\"details\":\"sets the value of the protected threshold configuration param\",\"params\":{\"protThrld_\":\"coverage protected state threshold [PREC]\"}},\"setRedeemTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\",\"params\":{\"redeemTCandTPFee_\":\"additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSuccessFee(uint256)\":{\"details\":\"sets success Fee value.\",\"params\":{\"successFee_\":\"pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\"}},\"setSwapTCforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap Collateral Token for a Pegged Token.\",\"params\":{\"swapTCforTPFee_\":\"additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTCFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for Collateral Token.\",\"params\":{\"swapTPforTCFee_\":\"additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for another Pegged Token.\",\"params\":{\"swapTPforTPFee_\":\"additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTCInterestCollectorAddress(address)\":{\"details\":\"sets TC interest collector address\",\"params\":{\"tcInterestCollectorAddress_\":\"TC interest collector address\"}},\"setTCInterestPaymentBlockSpan(uint256)\":{\"details\":\"sets TC interest payment block spannextTCInterestPayment is not automatically updated, you have to wait until next  interest payment to be made : nextTCInterestPayment = block.number + tcInterestPaymentBlockSpan\",\"params\":{\"tcInterestPaymentBlockSpan_\":\"amount of blocks to wait for next TC interest payment\"}},\"setTCInterestRate(uint256)\":{\"details\":\"sets TC interest rate\",\"params\":{\"tcInterestRate_\":\"pct interest charged to TC holders on the total collateral in the protocol [PREC]\"}},\"setTcMintFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral mint.\",\"params\":{\"tcMintFee_\":\"addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTcRedeemFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral redeem.\",\"params\":{\"tcRedeemFee_\":\"addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"swapTCforTPto((address,uint256,uint256,uint256,address,address,address))\":{\"details\":\"This function is called by MocCore contract using it's context with delegate calli_ Pegged Token index      qTC_ amount of Collateral Token to swap      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Collateral Token      recipient_ address who receives the Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\",\"params\":{\"params_\":\"swap TC for TP function parameters\"},\"returns\":{\"qACSurcharges\":\"amount of AC used to pay fees and markup\",\"qFeeTokenTotalNeeded\":\"amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\",\"qTPtoMint\":\"amount of Pegged Token minted\"}},\"swapTPforTCto((address,uint256,uint256,uint256,address,address,address))\":{\"details\":\"This function is called by MocCore contract using it's context with delegate calli_ Pegged Token index      qTP_ amount Pegged Token to swap      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Pegged Token      recipient_ address who receives Collateral Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\",\"params\":{\"params_\":\"swap TP for TC function parameters\"},\"returns\":{\"feeCalcs\":\"struct with:\",\"qACSurcharges\":\"amount of AC used to pay fees and markup\",\"qFeeTokenTotalNeeded\":\"amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))\":{\"details\":\"This function is called by MocCore contract using it's context with delegate calliFrom_ owned Pegged Token index      iTo_ target Pegged Token index      qTP_ amount of owned Pegged Token to swap      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive      qACmax_ maximum amount of Collateral Asset that can be spent in fees      sender_ address who sends the Pegged Token      recipient_ address who receives the target Pegged Token      vendor_ address who receives a markup. If its address(0) no markup is appliedqACFee amount of AC needed to pay fees      qFeeToken amount of Fee Token needed to pay fess      qACVendorMarkup amount of AC needed to pay vendor markup      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\",\"params\":{\"params_\":\"swap TP for TP function parameters\"},\"returns\":{\"feeCalcs\":\"struct with:\",\"qACSurcharges\":\"amount of AC used to pay fees and markup\",\"qFeeTokenTotalNeeded\":\"amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\",\"qTPtoMint\":\"amount of Pegged Token minted\"}},\"updateEmas()\":{\"details\":\"All price provider prices must be available, fails if not\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"MocCoreExpansion\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"add a Pegged Token to the protocol\"},\"calcCtargemaCA()\":{\"notice\":\"calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\"},\"changeGovernor(address)\":{\"notice\":\"Change the contract's governor. Should be called through the old governance system\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"modifies a Pegged Token of the protocol\"},\"evalLiquidation()\":{\"notice\":\"evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event.\"},\"getPACtp(address)\":{\"notice\":\"get how many Pegged Token equal 1 Collateral Asset\"},\"governor()\":{\"notice\":\"The address of the contract which governs this one\"},\"isLiquidationReached()\":{\"notice\":\"If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation\"},\"liqRedeemTPTo(address,address,address,uint256)\":{\"notice\":\"Allow redeem on liquidation state, user Peg balance gets burned\"},\"makeStoppable()\":{\"notice\":\"Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function\"},\"makeUnstoppable()\":{\"notice\":\"Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so\"},\"maxQACToMintTP()\":{\"notice\":\"gets the max amount of AC allowed to operate to mint TP with, restricted by accumulators // TODO: move this function to a MocView contract\"},\"maxQACToRedeemTP()\":{\"notice\":\"gets the max amount of AC allowed to operate to redeem TP with, restricted by accumulators // TODO: move this function to a MocView contract\"},\"mintTCandTPto((address,uint256,uint256,address,address,address))\":{\"notice\":\"mint Collateral Token and Pegged Token in exchange for Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"pause()\":{\"notice\":\"Called by the owner to pause, triggers stopped state\"},\"paused()\":{\"notice\":\"Returns true if paused\"},\"redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"redeem Collateral Asset in exchange for Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"setPauser(address)\":{\"notice\":\"Changes the address which is enable to pause this contract\"},\"shouldCalculateEma()\":{\"notice\":\"true if the necessary span has pass since last ema update\"},\"swapTCforTPto((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"swap Collateral Token to Pegged Token\"},\"swapTPforTCto((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"swap Pegged Token to Collateral Token\"},\"swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"swap Pegged Token to another one  This operation is done without checking coverage unless the target coverage for  received Pegged Token is greater than the Pegged Token sent\"},\"unpause()\":{\"notice\":\"Called by the owner to unpause, returns to normal state\"},\"updateEmas()\":{\"notice\":\"If time, calculates the EMA for all the Pegged Token prices.\"}},\"notice\":\"This contract is used as an expansion of MocCore because 24kb size limitation  MocCore delegate some function calls to it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MocCoreExpansion.sol\":\"MocCoreExpansion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf0bd7f71ffae5f0addd375e8511fbf2ad8ca0c9b2606c32d92bdda7d76a7a81c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/core/MocBaseBucket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocTC, IMocRC20 } from \\\"../tokens/MocTC.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MocBaseBucket: Moc Collateral Bag\\n * @notice MocBaseBucket holds Bucket Zero state, both for the Collateral Bag and PeggedTokens Items.\\n * @dev Abstracts all rw operations on the main bucket and expose all calculations relative to its state.\\n */\\nabstract contract MocBaseBucket is MocUpgradable {\\n    // ------- Events -------\\n\\n    event ContractLiquidated();\\n\\n    // ------- Custom Errors -------\\n    error MissingProviderPrice(address priceProviderAddress_);\\n    error Liquidated();\\n    error LowCoverage(uint256 cglb_, uint256 covThrld_);\\n\\n    // ------- Structs -------\\n    struct PegContainerItem {\\n        // total supply of Pegged Token\\n        uint256 nTP;\\n        // PegToken PriceFeed address\\n        IPriceProvider priceProvider;\\n    }\\n\\n    struct PeggedTokenIndex {\\n        // Pegged Token index\\n        uint256 index;\\n        // true if Pegged Token exists\\n        bool exists;\\n    }\\n\\n    struct InitializeBaseBucketParams {\\n        // MocQueue contract address\\n        address mocQueueAddress;\\n        // Fee Token contract address\\n        address feeTokenAddress;\\n        // Fee Token price provider address\\n        address feeTokenPriceProviderAddress;\\n        // Collateral Token contract address\\n        address tcTokenAddress;\\n        // Moc Fee Flow contract address\\n        address mocFeeFlowAddress;\\n        // moc appreciation beneficiary Address\\n        address mocAppreciationBeneficiaryAddress;\\n        // protected state threshold [PREC]\\n        uint256 protThrld;\\n        // liquidation coverage threshold [PREC]\\n        uint256 liqThrld;\\n        // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n        uint256 feeRetainer;\\n        // additional fee pct applied on mint Collateral Tokens operations [PREC]\\n        uint256 tcMintFee;\\n        // additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n        uint256 tcRedeemFee;\\n        // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n        uint256 swapTPforTPFee;\\n        // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n        uint256 swapTPforTCFee;\\n        // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n        uint256 swapTCforTPFee;\\n        // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n        uint256 redeemTCandTPFee;\\n        // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n        uint256 mintTCandTPFee;\\n        // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n        // e.g. if tcMintFee = 1%, feeTokenPct = 50% => qFeeToken = 0.5%\\n        uint256 feeTokenPct;\\n        // pct of the gain because Pegged Tokens devaluation that is transferred\\n        // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n        uint256 successFee;\\n        // pct of the gain because Pegged Tokens devaluation that is returned\\n        // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n        uint256 appreciationFactor;\\n        // number of blocks between settlements\\n        uint256 bes;\\n        // TC interest collector address\\n        address tcInterestCollectorAddress;\\n        // pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n        uint256 tcInterestRate;\\n        // amount of blocks to wait for next TC interest payment\\n        uint256 tcInterestPaymentBlockSpan;\\n        // max absolute operation provider address:\\n        //  absolute maximum transaction allowed for a certain number of blocks\\n        //  if absoluteAccumulator is above the value provided the operation will be rejected\\n        address maxAbsoluteOpProviderAddress;\\n        // max operation difference provider address:\\n        //  differential maximum transaction allowed for a certain number of blocks\\n        //  if operationalDifference is above the value provided the operation will be rejected\\n        address maxOpDiffProviderAddress;\\n        // number of blocks that have to elapse for the linear decay factor to be 0\\n        uint256 decayBlockSpan;\\n    }\\n\\n    // ------- Storage -------\\n\\n    // Fee Token\\n    IERC20 public feeToken;\\n    // Fee Token price provider\\n    IPriceProvider public feeTokenPriceProvider;\\n    // total amount of Collateral Asset held in the Collateral Bag\\n    // WARN: On RC20 implementation, this correlates with contract acBalance\\n    uint256 public nACcb;\\n    // amount of Collateral Asset that the Vaults owe to the Collateral Bag\\n    // this variable is not used and is reserved for a future upgrade of the protocol\\n    // slither-disable-next-line constable-states\\n    uint256 internal nACioucb;\\n\\n    // Collateral Token\\n    MocTC public tcToken;\\n    // Collateral Token in the Collateral Bag\\n    uint256 public nTCcb;\\n\\n    // Pegged Tokens MocRC20 addresses\\n    IMocRC20[] public tpTokens;\\n    // Pegged Token indexes\\n    mapping(address => PeggedTokenIndex) public peggedTokenIndex;\\n    // peg container\\n    PegContainerItem[] public pegContainer;\\n    // Pegged Token prices, at which they can be redeemed after liquidation event\\n    uint256[] public tpLiqPrices;\\n    // pct of the gain because Pegged Tokens devaluation that is transferred\\n    // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n    uint256 public successFee;\\n    // pct of the gain because Pegged Tokens devaluation that is returned\\n    // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n    uint256 public appreciationFactor;\\n\\n    // ------- Storage Fees -------\\n\\n    // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n    uint256 public feeRetainer; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on Collateral Tokens mint [PREC]\\n    uint256 public tcMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on Collateral Tokens redeem [PREC]\\n    uint256 public tcRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n    uint256 public swapTPforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n    uint256 public swapTPforTCFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n    uint256 public swapTCforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n    uint256 public redeemTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n    uint256 public mintTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n    // e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n    uint256 public feeTokenPct; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Pegged Token => addition fee pct applied on TP mint [PREC]\\n    mapping(address => uint256) public tpMintFees; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // Pegged Token =>  addition fee pct applied on TP redeem [PREC]\\n    mapping(address => uint256) public tpRedeemFees; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Moc Fee Flow contract address\\n    address public mocFeeFlowAddress;\\n    // Moc appreciation beneficiary address\\n    address public mocAppreciationBeneficiaryAddress;\\n\\n    // ------- Storage Coverage Tracking -------\\n\\n    // Target coverage for each Pegged Token [PREC]\\n    uint256[] public tpCtarg;\\n    // Coverage protected state threshold [PREC]\\n    uint256 public protThrld;\\n    // Coverage liquidation threshold [PREC]\\n    uint256 public liqThrld;\\n    // Liquidation enabled\\n    bool public liqEnabled;\\n    // Irreversible state, peg lost, contract is terminated and all funds can be withdrawn\\n    bool public liquidated;\\n\\n    // ------- Storage Settlement -------\\n\\n    // number of blocks between settlements\\n    uint256 public bes;\\n    // next settlement block\\n    uint256 public bns;\\n\\n    // ------- Storage Queue -------\\n\\n    // amount of AC locked on MocQueue for pending operations\\n    uint256 public qACLockedInPending;\\n    // address for MocQueue contract\\n    address public mocQueue; // cannot used MocQueue, import failed due circular reference\\n\\n    // ------- Storage Success Fee Tracking -------\\n\\n    // profit and loss in collateral asset for each Pegged Token because its devaluation [N]\\n    // if it is positive it is a profit that will be distributed and reset during settlement\\n    int256[] internal tpiou;\\n    // Pegged Token price used at last operation(redeem or mint) [PREC]\\n    uint256[] internal pACtpLstop;\\n\\n    // ------- Storage Flux Capacitor -------\\n\\n    // max absolute operation provider:\\n    //  absolute maximum transaction allowed for a certain number of blocks\\n    //  if absoluteAccumulator is above the value provided the operation will be rejected\\n    IDataProvider public maxAbsoluteOpProvider;\\n    // max operation difference provider:\\n    //  differential maximum transaction allowed for a certain number of blocks\\n    //  if operationalDifference is above the value provided the operation will be rejected\\n    IDataProvider public maxOpDiffProvider;\\n    // number of blocks that have to elapse for the linear decay factor to be 0\\n    uint256 public decayBlockSpan;\\n    // accumulator increased by minting and redeeming TP operations\\n    uint256 public absoluteAccumulator;\\n    // accumulator increased by minting and decreased by redeeming TP operations\\n    int256 public differentialAccumulator;\\n    // last block number where an operation was submitted\\n    uint256 public lastOperationBlockNumber;\\n\\n    // ------- Storage TC Holders Interest Payment -------\\n\\n    // TC interest collector address\\n    address public tcInterestCollectorAddress;\\n    // pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n    uint256 public tcInterestRate;\\n    // amount of blocks to wait for next TC interest payment\\n    uint256 public tcInterestPaymentBlockSpan;\\n    // next TC interest payment block number\\n    uint256 public nextTCInterestPayment;\\n\\n    // ------- Modifiers -------\\n    /// @notice functions with this modifier reverts being in liquidated state\\n    modifier notLiquidated() {\\n        _checkLiquidated();\\n        _;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeBaseBucketParams_ contract initializer params\\n     * @dev   mocQueueAddress address for MocQueue contract\\n     *        feeTokenAddress Fee Token contract address\\n     *        feeTokenPriceProviderAddress Fee Token price provider contract address\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected coverage threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        feeTokenPct pct applied on the top of the operation`s fee when using\\n     *          Fee Token as fee payment method [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *        bes number of blocks between settlements\\n     *        tcInterestCollectorAddress TC interest collector address\\n     *        tcInterestRate pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     *        tcInterestPaymentBlockSpan amount of blocks to wait for next TC interest payment\\n     *        maxAbsoluteOpProviderAddress max absolute operation provider address\\n     *        maxOpDiffProviderAddress max operation difference provider address\\n     *        decayBlockSpan number of blocks that have to elapse for the linear decay factor to be 0\\n     */\\n    function __MocBaseBucket_init_unchained(\\n        InitializeBaseBucketParams calldata initializeBaseBucketParams_\\n    ) internal onlyInitializing {\\n        if (initializeBaseBucketParams_.protThrld < ONE) revert InvalidValue();\\n        _checkLessThanOne(initializeBaseBucketParams_.feeRetainer);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcMintFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcRedeemFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTCFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTCforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.redeemTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.mintTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.feeTokenPct);\\n        _checkLessThanOne(initializeBaseBucketParams_.successFee + initializeBaseBucketParams_.appreciationFactor);\\n        mocQueue = initializeBaseBucketParams_.mocQueueAddress;\\n        feeToken = IERC20(initializeBaseBucketParams_.feeTokenAddress);\\n        feeTokenPriceProvider = IPriceProvider(initializeBaseBucketParams_.feeTokenPriceProviderAddress);\\n        tcToken = MocTC(initializeBaseBucketParams_.tcTokenAddress);\\n        mocFeeFlowAddress = initializeBaseBucketParams_.mocFeeFlowAddress;\\n        mocAppreciationBeneficiaryAddress = initializeBaseBucketParams_.mocAppreciationBeneficiaryAddress;\\n        protThrld = initializeBaseBucketParams_.protThrld;\\n        liqThrld = initializeBaseBucketParams_.liqThrld;\\n        feeRetainer = initializeBaseBucketParams_.feeRetainer;\\n        tcMintFee = initializeBaseBucketParams_.tcMintFee;\\n        tcRedeemFee = initializeBaseBucketParams_.tcRedeemFee;\\n        swapTPforTPFee = initializeBaseBucketParams_.swapTPforTPFee;\\n        swapTPforTCFee = initializeBaseBucketParams_.swapTPforTCFee;\\n        swapTCforTPFee = initializeBaseBucketParams_.swapTCforTPFee;\\n        redeemTCandTPFee = initializeBaseBucketParams_.redeemTCandTPFee;\\n        mintTCandTPFee = initializeBaseBucketParams_.mintTCandTPFee;\\n        feeTokenPct = initializeBaseBucketParams_.feeTokenPct;\\n        successFee = initializeBaseBucketParams_.successFee;\\n        appreciationFactor = initializeBaseBucketParams_.appreciationFactor;\\n        bes = initializeBaseBucketParams_.bes;\\n        tcInterestCollectorAddress = initializeBaseBucketParams_.tcInterestCollectorAddress;\\n        tcInterestRate = initializeBaseBucketParams_.tcInterestRate;\\n        tcInterestPaymentBlockSpan = initializeBaseBucketParams_.tcInterestPaymentBlockSpan;\\n        maxAbsoluteOpProvider = IDataProvider(initializeBaseBucketParams_.maxAbsoluteOpProviderAddress);\\n        maxOpDiffProvider = IDataProvider(initializeBaseBucketParams_.maxOpDiffProviderAddress);\\n        decayBlockSpan = initializeBaseBucketParams_.decayBlockSpan;\\n        lastOperationBlockNumber = block.number;\\n        unchecked {\\n            bns = block.number + initializeBaseBucketParams_.bes;\\n            nextTCInterestPayment = block.number + initializeBaseBucketParams_.tcInterestPaymentBlockSpan;\\n        }\\n        liquidated = false;\\n        liqEnabled = false;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * reverts if in liquidated state\\n     */\\n    function _checkLiquidated() internal view {\\n        if (liquidated) revert Liquidated();\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Asset to the Bucket\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositAC(uint256 qAC_) internal {\\n        nACcb += qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb += qTC_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb -= qTC_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP += qTP_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Pegged Token and Collateral Asset from the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP -= qTP_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket and mints `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTP(uint256 i_, uint256 qTP_, uint256 qAC_, address recipient_) internal {\\n        // add qTP and qAC to the Bucket\\n        _depositTP(i_, qTP_, qAC_);\\n        // mint qTP to the recipient\\n        // slither-disable-next-line unused-return\\n        tpTokens[i_].mint(recipient_, qTP_);\\n    }\\n\\n    /**\\n     * @notice subtracts Pegged Token and Collateral Asset from the Bucket and burns `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawAndBurnTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        // sub qTP and qAC from the Bucket\\n        _withdrawTP(i_, qTP_, qAC_);\\n        // burn the qTp previously locked from the user\\n        // slither-disable-next-line unused-return\\n        tpTokens[i_].burn(address(this), qTP_);\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket and mints qTCtoMint\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTC(uint256 qTC_, uint256 qAC_, address recipient_) internal {\\n        // add qTC to the Bucket\\n        _depositTC(qTC_, qAC_);\\n        // mint qTC to the recipient\\n        // slither-disable-next-line unused-return\\n        tcToken.mint(recipient_, qTC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket and burns `qTC_`\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawAndBurnTC(uint256 qTC_, uint256 qAC_) internal {\\n        // sub qTC and qAC from the Bucket\\n        _withdrawTC(qTC_, qAC_);\\n        // burn the qTC previously locked from the user\\n        tcToken.burn(address(this), qTC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset available considering how many are locked by Pegged Token adjusted by EMA\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return lckACemaAdjusted [PREC]\\n     */\\n    function _getLckACemaAdjusted(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (int256 lckACemaAdjusted) {\\n        // [PREC] = [N] * [PREC] - [PREC] * [N]\\n        return int256(_getTotalACavailable(nACgain_) * PRECISION) - int256(ctargemaCA_ * lckAC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function _getTCAvailableToRedeem(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view virtual returns (uint256 tcAvailableToRedeem) {\\n        // [PREC]\\n        int256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        if (lckACemaAdjusted <= 0) return 0;\\n        // [N] = [PREC] / [PREC]\\n        return uint256(lckACemaAdjusted) / _getPTCac(lckAC_, nACgain_);\\n    }\\n\\n    /**\\n     * @notice get signed amount of Pegged Token available to mint\\n     * @dev negative value is needed for multi collateral implementation\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMintSigned(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (int256 tpAvailableToMint) {\\n        int256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        // [N] = [PREC] * [PREC] / ([PREC]) * [PREC])\\n        return (lckACemaAdjusted * int256(pACtp_)) / int256((ctargemaTP_ - ONE) * PRECISION);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMint(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view virtual returns (uint256 tpAvailableToMint) {\\n        int256 tpAvailableToMintSigned = _getTPAvailableToMintSigned(\\n            ctargemaCA_,\\n            ctargemaTP_,\\n            pACtp_,\\n            lckAC_,\\n            nACgain_\\n        );\\n        if (tpAvailableToMintSigned < 0) return 0;\\n        return uint256(tpAvailableToMintSigned);\\n    }\\n\\n    /**\\n     * @notice evaluates whether or not the coverage is over the cThrld_, reverts if below\\n     * @param cThrld_ coverage threshold to check for [PREC]\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC amount of Collateral Asset locked by Pegged Tokens [PREC]\\n     * @return nACgain amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalCoverage(\\n        uint256 cThrld_,\\n        uint256[] memory pACtps_\\n    ) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        (lckAC, nACgain) = _calcLckACandACgain(pACtps_);\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        // check if coverage is above the given threshold\\n        if (cglb <= cThrld_) revert LowCoverage(cglb, cThrld_);\\n    }\\n\\n    /**\\n     * @dev Calculates price at liquidation event as a relation between Pegs total supply\\n     * and the amount of Asset Collateral available to distribute\\n     */\\n    function settleLiquidationPrices() internal {\\n        // Total amount of AC available to be redeemed\\n        uint256 totalACAvailable = nACcb;\\n        // slither-disable-next-line incorrect-equality\\n        if (totalACAvailable == 0) return;\\n        uint256 pegAmount = pegContainer.length;\\n        // this could be get by getLckAC(), but given the prices are needed after,\\n        // it's better to cache them here.\\n        uint256 lckAC;\\n        // Auxiliary cache of pegs pACtp\\n        uint256[] memory pACtps = new uint256[](pegAmount);\\n        // for each peg, calculates the proportion of AC reserves it's locked\\n\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = _getPACtp(i);\\n            // [N] = [N] * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP, pACtps[i]);\\n        }\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            // [PREC] = [PREC] * [N] / [N];\\n            tpLiqPrices.push((pACtps[i] * lckAC) / totalACAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice updates Pegged Token P&L and last operation price\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     */\\n    function _updateTPtracking(uint256 i_, uint256 pACtp_) internal {\\n        tpiou[i_] += _calcOtfPnLTP(i_, pACtp_);\\n        pACtpLstop[i_] = pACtp_;\\n    }\\n\\n    /**\\n     * @notice calculates on the fly Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return otfPnLtp [N]\\n     */\\n    function _calcOtfPnLTP(uint256 i_, uint256 pACtp_) internal view returns (int256 otfPnLtp) {\\n        // [PREC] = [N] * [PREC]\\n        uint256 nTP = pegContainer[i_].nTP * PRECISION;\\n        // [N] = [PREC] / [PREC] - [PREC] / [PREC]\\n        return int256(nTP / pACtpLstop[i_]) - int256(nTP / pACtp_);\\n    }\\n\\n    /**\\n     * @notice gets accumulated Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return tpGain amount of Pegged Token to be minted during settlement [N]\\n     * @return adjPnLtpi total amount of P&L in Collateral Asset [N]\\n     */\\n    function _getPnLTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 tpGain, uint256 adjPnLtpi) {\\n        // [N] = [N] + [N]\\n        int256 adjPnLtpiAux = tpiou[i_] + _calcOtfPnLTP(i_, pACtp_);\\n        if (adjPnLtpiAux > 0) {\\n            adjPnLtpi = uint256(adjPnLtpiAux);\\n            // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n            tpGain = _mulPrec(_mulPrec(appreciationFactor, pACtp_), adjPnLtpi);\\n        }\\n        return (tpGain, adjPnLtpi);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _getLckACandACgain() internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256[] memory pACtps = _getPACtps();\\n        return _calcLckACandACgain(pACtps);\\n    }\\n\\n    /**\\n     * @notice calculates the amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _calcLckACandACgain(uint256[] memory pACtps_) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256 pegAmount = pegContainer.length;\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = pACtps_[i];\\n            (uint256 tpGain, uint256 adjPnLtpi) = _getPnLTP(i, pACtp);\\n            // [N] = ([N] + [N]) * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP + tpGain, pACtp);\\n            nACgain += adjPnLtpi;\\n        }\\n        // [N] = [N] * [PREC] / [PREC]\\n        nACgain = _mulPrec(nACgain, successFee);\\n        return (lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return totalACavailable [N]\\n     */\\n    function _getTotalACavailable(uint256 nACgain_) internal view returns (uint256 totalACavailable) {\\n        // [N] = [N] - [N]\\n        return nACcb - nACgain_;\\n    }\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return pTCac [PREC]\\n     */\\n    function _getPTCac(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 pTCac) {\\n        // slither-disable-next-line incorrect-equality\\n        if (nTCcb == 0) return ONE;\\n        // [PREC] = ([N] - [N]) * [PREC]) / [N]\\n        return _divPrec((_getTotalACavailable(nACgain_) - lckAC_), nTCcb);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return leverageTC [PREC]\\n     */\\n    function _getLeverageTC(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 leverageTC) {\\n        uint256 totalACavailable = _getTotalACavailable(nACgain_);\\n        // [PREC] = [N] * [PREC] / ([N] - [N])\\n        return _divPrec(totalACavailable, totalACavailable - lckAC_);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return cglob [PREC]\\n     */\\n    function _getCglb(uint256 lckAC_, uint256 nACgain_) internal view virtual returns (uint256 cglob) {\\n        // slither-disable-next-line incorrect-equality\\n        if (lckAC_ == 0) return UINT256_MAX;\\n        // [PREC] = [N] * [PREC] / [N]\\n        return _divPrec(_getTotalACavailable(nACgain_), lckAC_);\\n    }\\n\\n    function _tpi(address tpAddress) internal view returns (uint256) {\\n        PeggedTokenIndex storage ptIndex = peggedTokenIndex[tpAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        return ptIndex.index;\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice If liquidation is enabled, verifies if forced liquidation has been\\n     * reached, checking if globalCoverage <= liquidation\\n     * @return true if liquidation state is reached, false otherwise\\n     */\\n    function isLiquidationReached() public view returns (bool) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        return cglb <= liqThrld;\\n    }\\n\\n    /**\\n     * @notice evaluates if liquidation threshold has been reached and liq is Enabled.\\n     * If so forces contracts liquidation, blocking all mint & redeem operations.\\n     *\\n     * May emit a {ContractLiquidated} event.\\n     */\\n    function evalLiquidation() public virtual notPaused {\\n        if (liqEnabled && !liquidated && isLiquidationReached()) {\\n            liquidated = true;\\n            emit ContractLiquidated();\\n            tcToken.pause();\\n            // Freeze current Peg Price given the AC available\\n            settleLiquidationPrices();\\n        }\\n    }\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param tp_ Pegged Token address\\n     * @return price [PREC]\\n     */\\n    function getPACtp(address tp_) public view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[_tpi(tp_)].priceProvider;\\n        (uint256 price, bool has) = _peekPrice(priceProvider);\\n        if (!has) revert MissingProviderPrice(address(priceProvider));\\n        return price;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param i_ Pegged Token index\\n     * @return price [PREC]\\n     */\\n    function _getPACtp(uint256 i_) internal view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[i_].priceProvider;\\n        (uint256 price, bool has) = _peekPrice(priceProvider);\\n        if (!has) revert MissingProviderPrice(address(priceProvider));\\n        return price;\\n    }\\n\\n    /**\\n     * @notice ask to a price provider for its token price\\n     * @dev saves some contract size by using this function instead of calling the external directly\\n     * @param priceProvider_ Pegged Token index\\n     * @return price casted to uint256 [PREC]\\n     * @return has true if has a valid price\\n     */\\n    function _peekPrice(IPriceProvider priceProvider_) internal view returns (uint256, bool) {\\n        (bytes32 price, bool has) = priceProvider_.peek();\\n        return (uint256(price), has);\\n    }\\n\\n    /**\\n     * @notice gets all TP prices\\n     * @return pACtps All tps prices [PREC]\\n     */\\n    function _getPACtps() internal view returns (uint256[] memory pACtps) {\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = _getPACtp(i);\\n        }\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets the fee pct to be retainer on AC fees payments as AC re-injection.\\n     * @param feeRetainer_  pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeRetainer(uint256 feeRetainer_) external onlyAuthorizedChanger {\\n        feeRetainer = feeRetainer_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral mint.\\n     * @param tcMintFee_ addition fee pct applied on Collateral Tokens mint [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcMintFee(uint256 tcMintFee_) external onlyAuthorizedChanger {\\n        tcMintFee = tcMintFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral redeem.\\n     * @param tcRedeemFee_ addition fee pct applied on Collateral Tokens redeem [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcRedeemFee(uint256 tcRedeemFee_) external onlyAuthorizedChanger {\\n        tcRedeemFee = tcRedeemFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for another Pegged Token.\\n     * @param swapTPforTPFee_ additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTPFee(uint256 swapTPforTPFee_) external onlyAuthorizedChanger {\\n        swapTPforTPFee = swapTPforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for Collateral Token.\\n     * @param swapTPforTCFee_ additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTCFee(uint256 swapTPforTCFee_) external onlyAuthorizedChanger {\\n        swapTPforTCFee = swapTPforTCFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap Collateral Token for a Pegged Token.\\n     * @param swapTCforTPFee_ additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTCforTPFee(uint256 swapTCforTPFee_) external onlyAuthorizedChanger {\\n        swapTCforTPFee = swapTCforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\\n     * @param redeemTCandTPFee_ additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setRedeemTCandTPFee(uint256 redeemTCandTPFee_) external onlyAuthorizedChanger {\\n        redeemTCandTPFee = redeemTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when mint Collateral Token and Pegged Token in one operation.\\n     * @param mintTCandTPFee_ additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setMintTCandTPFee(uint256 mintTCandTPFee_) external onlyAuthorizedChanger {\\n        mintTCandTPFee = mintTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.\\n     * @param feeTokenPct_ pct applied on the top of the operation`s fee when using Fee Token\\n     *  as fee payment method [PREC]\\n     *  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n     *  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeTokenPct(uint256 feeTokenPct_) external onlyAuthorizedChanger {\\n        feeTokenPct = feeTokenPct_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Fee Flow contract address\\n     * @param mocFeeFlowAddress_ moc Fee Flow new contract address\\n     */\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocFeeFlowAddress = mocFeeFlowAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Appreciation Beneficiary Address\\n     * @param mocAppreciationBeneficiaryAddress_ moc Appreciation Beneficiary new address\\n     */\\n    function setMocAppreciationBeneficiaryAddress(\\n        address mocAppreciationBeneficiaryAddress_\\n    ) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocAppreciationBeneficiaryAddress = mocAppreciationBeneficiaryAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Fee Token contract address\\n     * @param mocFeeTokenAddress_ Fee Token new contract address\\n     */\\n    function setFeeTokenAddress(address mocFeeTokenAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeToken = IERC20(mocFeeTokenAddress_);\\n    }\\n\\n    /**\\n     * @dev sets Fee Token price provider contract address\\n     * @param mocFeeTokenPriceProviderAddress_ Fee Token price provider new contract address\\n     */\\n    function setFeeTokenPriceProviderAddress(address mocFeeTokenPriceProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeTokenPriceProvider = IPriceProvider(mocFeeTokenPriceProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets the value of the protected threshold configuration param\\n     * @param protThrld_ coverage protected state threshold [PREC]\\n     */\\n    function setProtThrld(uint256 protThrld_) external onlyAuthorizedChanger {\\n        protThrld = protThrld_;\\n    }\\n\\n    /**\\n     * @dev sets the value of the liq threshold configuration param\\n     * @param liqThrld_ liquidation threshold\\n     */\\n    function setLiqThrld(uint256 liqThrld_) external onlyAuthorizedChanger {\\n        liqThrld = liqThrld_;\\n    }\\n\\n    /**\\n     * @dev enables and disables the liquidation mechanism.\\n     * @param liqEnabled_ is liquidation enabled\\n     */\\n    function setLiqEnabled(bool liqEnabled_) external onlyAuthorizedChanger {\\n        liqEnabled = liqEnabled_;\\n    }\\n\\n    /**\\n     * @dev sets success Fee value.\\n     * @param successFee_ pct of the gain because Pegged Tokens devaluation that is\\n     * transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     */\\n    function setSuccessFee(uint256 successFee_) external onlyAuthorizedChanger {\\n        successFee = successFee_;\\n    }\\n\\n    /**\\n     * @dev sets appreciation Factor value.\\n     * @param appreciationFactor_ pct of the gain because Pegged Tokens devaluation that is returned\\n     * in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     */\\n    function setAppreciationFactor(uint256 appreciationFactor_) external onlyAuthorizedChanger {\\n        appreciationFactor = appreciationFactor_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest collector address\\n     * @param tcInterestCollectorAddress_ TC interest collector address\\n     */\\n    function setTCInterestCollectorAddress(address tcInterestCollectorAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        tcInterestCollectorAddress = tcInterestCollectorAddress_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest rate\\n     * @param tcInterestRate_ pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     */\\n    function setTCInterestRate(uint256 tcInterestRate_) external onlyAuthorizedChanger {\\n        tcInterestRate = tcInterestRate_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest payment block span\\n     * @param tcInterestPaymentBlockSpan_ amount of blocks to wait for next TC interest payment\\n     * @dev nextTCInterestPayment is not automatically updated, you have to wait until next\\n     *  interest payment to be made : nextTCInterestPayment = block.number + tcInterestPaymentBlockSpan\\n     */\\n    function setTCInterestPaymentBlockSpan(uint256 tcInterestPaymentBlockSpan_) external onlyAuthorizedChanger {\\n        tcInterestPaymentBlockSpan = tcInterestPaymentBlockSpan_;\\n    }\\n\\n    /**\\n     * @param bes_ number of blocks between settlements\\n     * @dev bns is not automatically updated, you have to wait until next\\n     * settlement to be made : bns = block.number + bes\\n     **/\\n    function setBes(uint256 bes_) external onlyAuthorizedChanger {\\n        bes = bes_;\\n    }\\n\\n    /**\\n     * @dev sets max absolute operation provider address\\n     * @param maxAbsoluteOpProviderAddress_ max absolute operation provider address\\n     */\\n    function setMaxAbsoluteOpProviderAddress(address maxAbsoluteOpProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        maxAbsoluteOpProvider = IDataProvider(maxAbsoluteOpProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets max operation difference provider address\\n     * @param maxOpDiffProviderAddress_ max operation difference provider address\\n     */\\n    function setMaxOpDiffProviderAddress(address maxOpDiffProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        maxOpDiffProvider = IDataProvider(maxOpDiffProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets flux capacitor decay block span\\n     * @param decayBlockSpan_ flux capacitor decay block span\\n     */\\n    function setDecayBlockSpan(uint256 decayBlockSpan_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        decayBlockSpan = decayBlockSpan_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Queue contract address\\n     * @param mocQueueAddress_ moc queue new contract address\\n     */\\n    function setMocQueue(address mocQueueAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocQueue = mocQueueAddress_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5ef1f1c63d7f0b6cd7227f19e37f7bf8ed5403ded9d546c7cb550a58e9adf1f6\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCommons.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocVendors } from \\\"../vendors/MocVendors.sol\\\";\\nimport { MocEma } from \\\"./MocEma.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\nimport { SignedMath } from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n// ------- External Structs -------\\n\\nstruct PeggedTokenParams {\\n    // Pegged Token contract address to add\\n    address tpTokenAddress;\\n    // priceProviderAddress Pegged Token price provider contract address\\n    address priceProviderAddress;\\n    // Pegged Token target coverage [PREC]\\n    uint256 tpCtarg;\\n    // additional fee pct applied on mint [PREC]\\n    uint256 tpMintFee;\\n    // additional fee pct applied on redeem [PREC]\\n    uint256 tpRedeemFee;\\n    // initial Pegged Token exponential moving average [PREC]\\n    uint256 tpEma;\\n    // Pegged Token smoothing factor [PREC]\\n    uint256 tpEmaSf;\\n}\\n\\n//    +-----------------+\\n//    |  MocBaseBucket  |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+\\n//    |    MocEma       |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+ contains  +-----------------+\\n//    |    MocCommons   | ------>   |    MocVendors   |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+ contains  +-----------------+\\n//    |     MocCore     | ------>   |MocCoreExpansion |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//            |\\n//    +-----------------+\\n//    |  MocOperations  |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+           +-----------------+\\n//    |  MocCACoinbase  |           |    MocCARC20    |\\n//    +-----------------+           +-----------------+\\n/**\\n * @title MocCommons\\n * @dev To bypass the 24kb size limitation on MocCore we use MocCoreExpansion contract. Some functions\\n *  are implemented there and MocCore delegates calls to it. To achieve that, we need both to have the\\n *  exact same storage layout and be able to access the same common functions.\\n *  MocCommons contract serves as the last shared ancestor in the line of inheritance for them,\\n *  and all storage variables must be either declared here or in a parent contract.\\n *  Declaring variables after this point could result in storage collisions.\\n */\\nabstract contract MocCommons is MocEma {\\n    // ------- Storage -------\\n\\n    // Address for MocVendors contract, provides fee markup information\\n    MocVendors public mocVendors;\\n\\n    // ------- Internal Structs -------\\n\\n    struct MintTCandTPParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct RedeemTCandTPParams {\\n        address tp;\\n        uint256 qTC;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTPforTPParams {\\n        address tpFrom;\\n        address tpTo;\\n        uint256 qTP;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTPforTCParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qTCmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTCforTPParams {\\n        address tp;\\n        uint256 qTC;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct RedeemTPParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct FeeCalcs {\\n        uint256 qACFee;\\n        uint256 qFeeToken;\\n        uint256 qACVendorMarkup;\\n        uint256 qFeeTokenVendorMarkup;\\n    }\\n\\n    // ------- Custom Errors -------\\n\\n    error PeggedTokenAlreadyAdded();\\n    error InsufficientTPtoRedeem(uint256 qTP_, uint256 tpAvailableToRedeem_);\\n    error TransferFailed();\\n    error OnlyWhenLiquidated();\\n    error InsufficientQacSent(uint256 qACsent_, uint256 qACNeeded_);\\n    error InsufficientTPtoMint(uint256 qTP_, uint256 tpAvailableToMint_);\\n    error QtpBelowMinimumRequired(uint256 qTPmin_, uint256 qTP_);\\n    error QtcBelowMinimumRequired(uint256 qTCmin_, uint256 qTC_);\\n    error QacNeededMustBeGreaterThanZero();\\n    error InsufficientTCtoRedeem(uint256 qTC_, uint256 tcAvailableToRedeem_);\\n    error MissingProviderData(address dataProviderAddress_);\\n    error MaxFluxCapacitorOperationReached(uint256 max_, uint256 new_);\\n    error InvalidFluxCapacitorOperation();\\n    error InsufficientQtpSent(uint256 qTPsent_, uint256 qTPNeeded_);\\n    error QacBelowMinimumRequired(uint256 qACmin_, uint256 qACtoRedeem_);\\n\\n    // ------- Events -------\\n\\n    event LiqTPRedeemed(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_\\n    );\\n    event PeggedTokenChange(uint256 i_, PeggedTokenParams peggedTokenParams_);\\n\\n    // ------- Initializer -------\\n\\n    /**\\n     * @notice contract initializer\\n     * @param mocVendors_ address for MocVendors contract.\\n     */\\n    function __MocCommons_init_unchained(address mocVendors_) internal onlyInitializing {\\n        mocVendors = MocVendors(mocVendors_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice calc fees amount in qAC or Fee Token\\n     *  If `sender_` has enough Fee Token to pay fees, will be used. In another case will use qAC\\n     * @dev if qFeeToken > 0, qACFee = 0. If qACFee > 0, qFeeToken = 0.\\n     * @param sender_ address who executes the operation\\n     * @param qAC_ amount of AC involved in the operation, could be sent form sender for mint or\\n     *  sent to recipient for redeem [N]\\n     * @param qACFeePct_ additional fee pct applied on operation\\n     * @return qACSurcharges amount of AC needed to pay fees and markup. 0 if pays with Fee Token\\n     * @return qFeeTokenTotalNeeded amount of Fee Token needed to pay fees and markup. 0 if pays with AC\\n     * @return feeCalcs\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function _calcFees(\\n        address sender_,\\n        address vendor_,\\n        uint256 qAC_,\\n        uint256 qACFeePct_\\n    ) internal view returns (uint256 qACSurcharges, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        uint256 qACmarked = 0;\\n        if (vendor_ != address(0)) {\\n            // [PREC] = [N] * [PREC]\\n            qACmarked = qAC_ * mocVendors.vendorMarkup(vendor_);\\n        }\\n        uint256 senderAllowance = feeToken.allowance(sender_, address(this));\\n        if (senderAllowance > 0) {\\n            (uint256 feeTokenPrice, bool hasFeeTokenPrice) = _peekPrice(feeTokenPriceProvider);\\n            if (hasFeeTokenPrice) {\\n                // calculates Fee Token to be charged as fee\\n                // [N] = ([N] * [PREC] * [PREC] / [PREC]) / [PREC]\\n                feeCalcs.qFeeToken = _mulPrec(qAC_ * qACFeePct_, feeTokenPct) / feeTokenPrice;\\n                if (qACmarked > 0) {\\n                    // [N] = [N] * [PREC] / [PREC]\\n                    feeCalcs.qFeeTokenVendorMarkup = qACmarked / feeTokenPrice;\\n                    // [N] = [N] + [N]\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken + feeCalcs.qFeeTokenVendorMarkup;\\n                } else {\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken;\\n                }\\n                if (senderAllowance < qFeeTokenTotalNeeded || feeToken.balanceOf(sender_) < qFeeTokenTotalNeeded) {\\n                    feeCalcs.qFeeToken = 0;\\n                    feeCalcs.qFeeTokenVendorMarkup = 0;\\n                    qFeeTokenTotalNeeded = 0;\\n                }\\n            }\\n        }\\n        // if sender hasn't got enough feeToken balance or allowance or price provider hasn't got a valid price\\n        // then qFeeToken == 0 and sender pays fees with AC\\n        // slither-disable-next-line incorrect-equality\\n        if (feeCalcs.qFeeToken == 0) {\\n            // calculates qAC to be charged as fee\\n            // [N] = [N] * [PREC] / [PREC]\\n            feeCalcs.qACFee = _mulPrec(qAC_, qACFeePct_);\\n            if (qACmarked > 0) {\\n                // [N] = [PREC] / [PREC]\\n                feeCalcs.qACVendorMarkup = qACmarked / PRECISION;\\n                // [N] = [N] + [N]\\n                qACSurcharges = feeCalcs.qACFee + feeCalcs.qACVendorMarkup;\\n            } else {\\n                qACSurcharges = feeCalcs.qACFee;\\n            }\\n        }\\n        return (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice evaluates if there are enough Pegged Token available to mint, reverts if it`s not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint [N]\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalTPavailableToMint(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 ctargemaTP = _getCtargemaTP(i_, pACtp_);\\n        uint256 tpAvailableToMint = _getTPAvailableToMint(ctargemaCA_, ctargemaTP, pACtp_, lckAC_, nACgain_);\\n        // check if there are enough TP available to mint\\n        if (tpAvailableToMint < qTP_) revert InsufficientTPtoMint(qTP_, tpAvailableToMint);\\n    }\\n\\n    /**\\n     * @notice evaluates if there is enough Collateral Token available to redeem, reverts if there's not\\n     * @param qTC_ amount of Collateral Token to redeem [N]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of Collateral Asset that will be distributed at\\n     *         settlement because Pegged Token devaluation [N]\\n     */\\n    function _evalTCAvailableToRedeem(\\n        uint256 qTC_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 tcAvailableToRedeem = _getTCAvailableToRedeem(ctargemaCA_, lckAC_, nACgain_);\\n        // check if there are enough TC available to redeem\\n        if (tcAvailableToRedeem < qTC_) revert InsufficientTCtoRedeem(qTC_, tcAvailableToRedeem);\\n    }\\n\\n    /**\\n     * @notice ask to oracles for flux capacitor settings\\n     * @return absolute maximum transaction allowed for a certain number of blocks\\n     * @return differential maximum transaction allowed for a certain number of blocks\\n     */\\n    function _peekFluxCapacitorSettings() internal view returns (uint256, uint256) {\\n        bytes32 maxAbsoluteOp;\\n        bytes32 maxOpDiff;\\n        bool has;\\n        // get max absolute operation\\n        IDataProvider dataProvider = maxAbsoluteOpProvider;\\n        (maxAbsoluteOp, has) = dataProvider.peek();\\n        if (!has) revert MissingProviderData(address(dataProvider));\\n        // get max operational difference\\n        dataProvider = maxOpDiffProvider;\\n        (maxOpDiff, has) = dataProvider.peek();\\n        if (!has) revert MissingProviderData(address(dataProvider));\\n        return (uint256(maxAbsoluteOp), uint256(maxOpDiff));\\n    }\\n\\n    /**\\n     * @notice returns lineal decay factor\\n     * @param blocksAmount_ amount of blocks to ask for the decay\\n     * @return newAbsoluteAccumulator absolute accumulator updated by lineal decay factor [N]\\n     * @return newDifferentialAccumulator differential accumulator updated by lineal decay factor [N]\\n     */\\n    function _calcAccWithDecayFactor(\\n        uint256 blocksAmount_\\n    ) internal view returns (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) {\\n        unchecked {\\n            // [N] = [N] - [N]\\n            uint256 blocksElapsed = block.number + blocksAmount_ - lastOperationBlockNumber;\\n            // [PREC] = [N] * [PREC] / [N]\\n            uint256 blocksRatio = (blocksElapsed * PRECISION) / decayBlockSpan;\\n            if (blocksRatio >= ONE) return (0, 0);\\n            uint256 decayFactor = ONE - blocksRatio;\\n            // [N] = [N] * [PREC] / [PREC]\\n            newAbsoluteAccumulator = (absoluteAccumulator * decayFactor) / PRECISION;\\n            // [N] = [N] * [PREC] / [PREC]\\n            newDifferentialAccumulator = (differentialAccumulator * int256(decayFactor)) / int256(PRECISION);\\n            return (newAbsoluteAccumulator, newDifferentialAccumulator);\\n        }\\n    }\\n\\n    /**\\n     * @notice common function used to update accumulators during a TP operation\\n     *  reverts if not allowed\\n     * @dev the only difference between a redeem and a mint operation is that in the first one,\\n     * the qAC is subtracted on newDifferentialAccumulator instead of added\\n     * @param qAC_ amount of Collateral Asset used to mint\\n     * @param redeemFlag_ true if it is a redeem TP operation\\n     */\\n    function _updateAccumulators(uint256 qAC_, bool redeemFlag_) internal {\\n        (uint256 maxAbsoluteOperation, uint256 maxOperationalDifference) = _peekFluxCapacitorSettings();\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(0);\\n        unchecked {\\n            newAbsoluteAccumulator += qAC_;\\n            int256 qACInt = int256(qAC_);\\n            if (redeemFlag_) qACInt = -qACInt;\\n            newDifferentialAccumulator += qACInt;\\n            // cannot underflow, always newDifferentialAccumulator <= newAbsoluteAccumulator\\n            uint256 operationalDifference = newAbsoluteAccumulator - SignedMath.abs(newDifferentialAccumulator);\\n            if (newAbsoluteAccumulator > maxAbsoluteOperation) {\\n                if (qAC_ > maxAbsoluteOperation) revert InvalidFluxCapacitorOperation();\\n                revert MaxFluxCapacitorOperationReached(maxAbsoluteOperation, newAbsoluteAccumulator);\\n            }\\n            if (operationalDifference > maxOperationalDifference)\\n                revert MaxFluxCapacitorOperationReached(maxOperationalDifference, operationalDifference);\\n            // update storage\\n            absoluteAccumulator = newAbsoluteAccumulator;\\n            differentialAccumulator = newDifferentialAccumulator;\\n            lastOperationBlockNumber = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice update accumulators during a mint TP operation\\n     *  reverts if not allowed\\n     * @param qAC_ amount of Collateral Asset used to mint\\n     */\\n    function _updateAccumulatorsOnMintTP(uint256 qAC_) internal {\\n        _updateAccumulators(qAC_, false);\\n    }\\n\\n    /**\\n     * @notice update accumulators during a redeem operation\\n     *  reverts if not allowed\\n     * @param qAC_ reserve amount used for redeem\\n     */\\n    function _updateAccumulatorsOnRedeemTP(uint256 qAC_) internal {\\n        _updateAccumulators(qAC_, true);\\n    }\\n\\n    /**\\n     * @notice internal common function used to calc max AC allowed to mint or redeem TP\\n     *  due to accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @param newAbsoluteAccumulator_ absolute accumulator updated by lineal decay factor [N]\\n     * @param a_ on mint = AA - DA ; on redeem = AA + DA\\n     * @param b_ on mint = AA + DA ; on redeem = AA - DA\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function _calcMaxQACToOperateTP(\\n        uint256 newAbsoluteAccumulator_,\\n        uint256 a_,\\n        uint256 b_\\n    ) internal view returns (uint256 maxQAC) {\\n        (uint256 maxAbsoluteOperation, uint256 maxOperationalDifference) = _peekFluxCapacitorSettings();\\n        if (newAbsoluteAccumulator_ >= maxAbsoluteOperation) return 0;\\n        uint256 absoluteAccAllowed = maxAbsoluteOperation - newAbsoluteAccumulator_;\\n\\n        if (a_ <= maxOperationalDifference) return absoluteAccAllowed;\\n        if (b_ >= maxOperationalDifference) return 0;\\n        uint256 differentialAccAllowed = (maxOperationalDifference - b_) / 2;\\n        return Math.min(absoluteAccAllowed, differentialAccAllowed);\\n    }\\n\\n    /**\\n     * @notice gets the max amount of AC allowed to operate to mint TP with, restricted by accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function maxQACToMintTP() external view returns (uint256 maxQAC) {\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(1);\\n        // X = mint amount\\n        // (AA + X) - |DA + X| <= MODA && X >= 0\\n        // 1) if DA + X >= 0 ---> AA + X - DA - X <= MODA ---> AA - DA <= MODA\\n        // 2) if DA + X < 0 ---> X <= (MODA - (AA + DA)) / 2\\n\\n        // AA >= |DA|\\n        uint256 a = uint256(int256(newAbsoluteAccumulator) - newDifferentialAccumulator);\\n        uint256 b = uint256(int256(newAbsoluteAccumulator) + newDifferentialAccumulator);\\n        return _calcMaxQACToOperateTP(newAbsoluteAccumulator, a, b);\\n    }\\n\\n    /**\\n     * @notice gets the max amount of AC allowed to operate to redeem TP with, restricted by accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function maxQACToRedeemTP() external view returns (uint256 maxQAC) {\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(1);\\n        // X = redeem amount\\n        // (AA + X) - |DA - X| <= MODA && X >= 0\\n        // 1) if DA - X < 0 ---> AA + X + DA - X <= MODA ---> AA + DA <= MODA\\n        // 2) if DA - X >= 0 ---> X <= (MODA - (AA - DA)) / 2\\n\\n        // AA >= |DA|\\n        uint256 a = uint256(int256(newAbsoluteAccumulator) + newDifferentialAccumulator);\\n        uint256 b = uint256(int256(newAbsoluteAccumulator) - newDifferentialAccumulator);\\n        return _calcMaxQACToOperateTP(newAbsoluteAccumulator, a, b);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3d0e52c5f03867ae551825f0e3aafee08f86742ddfddd33e4651ac1e55849faf\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCoreExpansion.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCommons, PeggedTokenParams } from \\\"./MocCommons.sol\\\";\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\n\\n/**\\n * @title MocCoreExpansion\\n * @notice This contract is used as an expansion of MocCore because 24kb size limitation\\n *  MocCore delegate some function calls to it.\\n * @dev IMPORTANT NOTES:\\n *  1. MocCore and MocCoreExpansion must have always the same storage layout to avoid collisions\\n *  2. Because MocCore is upgradeable and delegates calls to MocCoreExpansion, it cannot be upgradeable because\\n *      a proxy contract cannot delegate calls to another proxy contract. So, for any MocCoreExpansion upgrade\\n *      you must deploy a new implementation and set it to MocCore.\\n */\\ncontract MocCoreExpansion is MocCommons {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     *  - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        IMocRC20 tpToken = IMocRC20(peggedTokenParams_.tpTokenAddress);\\n\\n        IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n        if (peggedTokenIndex[address(tpToken)].exists) revert PeggedTokenAlreadyAdded();\\n        uint256 newTPindex = uint256(tpTokens.length);\\n        peggedTokenIndex[address(tpToken)] = PeggedTokenIndex({ index: newTPindex, exists: true });\\n\\n        // set Pegged Token address\\n        tpTokens.push(tpToken);\\n        // set peg container item\\n        pegContainer.push(PegContainerItem({ nTP: 0, priceProvider: priceProvider }));\\n        // set target coverage\\n        tpCtarg.push(peggedTokenParams_.tpCtarg);\\n        // set mint fee pct\\n        tpMintFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma.push(EmaItem({ ema: peggedTokenParams_.tpEma, sf: peggedTokenParams_.tpEmaSf }));\\n        tpiou.push();\\n        // reverts if price provider is invalid\\n        pACtpLstop.push(_getPACtp(newTPindex));\\n        // emit the event\\n        emit PeggedTokenChange(newTPindex, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        PeggedTokenIndex memory ptIndex = peggedTokenIndex[peggedTokenParams_.tpTokenAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        uint256 i = ptIndex.index;\\n        // if being edited, verifies it is a valid priceProvider\\n        if (peggedTokenParams_.priceProviderAddress != address(pegContainer[i].priceProvider)) {\\n            IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n            (, bool has) = priceProvider.peek();\\n            if (!has) revert InvalidAddress();\\n            pegContainer[i].priceProvider = priceProvider;\\n        }\\n        // set target coverage\\n        tpCtarg[i] = peggedTokenParams_.tpCtarg;\\n        // set mint fee pct\\n        tpMintFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma[i].sf = peggedTokenParams_.tpEmaSf;\\n        // emit the event\\n        emit PeggedTokenChange(i, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     *  The equivalent AC given the liquidation frozen price(qACRedeemed) is transferred\\n     *  to the `recipient_` by MocCore contract\\n     *  Checks done there:\\n     *  -  notPaused: the contract must be unpaused\\n     * @param tp_ Pegged Token address\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTPTo(\\n        address tp_,\\n        address sender_,\\n        address recipient_,\\n        uint256 mocACBalance\\n    ) external returns (uint256 qACRedeemed) {\\n        if (!liquidated) revert OnlyWhenLiquidated();\\n        uint256 i = _tpi(tp_);\\n        uint256 qTP = tpTokens[i].balanceOf(sender_);\\n        // slither-disable-next-line incorrect-equality\\n        if (qTP == 0) revert InsufficientTPtoRedeem(qTP, qTP);\\n        // [PREC]\\n        uint256 liqPACtp = tpLiqPrices[i];\\n        // [PREC] = [N] * [PREC] / [PREC]\\n        qACRedeemed = _divPrec(qTP, liqPACtp);\\n        // Given rounding errors, the last redeemer might receive a little less\\n        if (mocACBalance < qACRedeemed) qACRedeemed = mocACBalance;\\n        // in liquidation doesn't pay fees or markup\\n        // qACfee, qFeeToken, qACVendorMarkup, qFeeTokenVendorMarkup  = (0, 0, 0, 0)\\n        emit LiqTPRedeemed(tp_, sender_, recipient_, qTP, qACRedeemed);\\n        // burn qTP from the sender\\n        tpTokens[i].burn(sender_, qTP);\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token and Pegged Token in exchange for Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param params_ mint TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends Collateral Asset\\n     *      recipient_ address who receives the Collateral Token and Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function mintTCandTPto(\\n        MintTCandTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256 qACNeededtoMint;\\n        uint256 qACtoMintTP;\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(liqThrld, pACtps);\\n        (qTCtoMint, qACNeededtoMint, qACtoMintTP) = _calcQACforMintTCandTP(\\n            params_.qTP,\\n            pACtp,\\n            _getCtargemaTP(i, pACtp),\\n            _getPTCac(lckAC, nACgain)\\n        );\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededtoMint,\\n            mintTCandTPFee\\n        );\\n        qACtotalNeeded = qACNeededtoMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnMintTP(qACtoMintTP);\\n        _depositAndMintTC(qTCtoMint, qACNeededtoMint, params_.recipient);\\n        _depositAndMintTP(i, params_.qTP, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param params_ redeem TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qTP_ maximum amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends Collateral Token and Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qTPtoRedeem amount of Pegged Token redeemed\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function redeemTCandTPto(\\n        RedeemTCandTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACtoRedeem, uint256 qTPtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(liqThrld, pACtps);\\n        // calculate how many TP are needed to redeem TC and not change coverage\\n        // qTPtoRedeem = (qTC * pACtp * pTCac)(ctargemaCA - 1) / (cglb - 1)(ctargemaTP - 1)\\n        // pTCac = (totalACavailable - lckAC) / nTCcb\\n        // cglb = totalACavailable / lckAC => cglb - 1 = (totalACavailable - lckAC) / lckAC\\n        // qTPtoRedeem = (qTC * pACtp * (totalACavailable - lckAC)(ctargemaCA - 1) / nTCcb) / ...\\n        // ...((totalACavailable - lckAC) / lckAC)(ctargemaTP - 1)\\n        // So, we can simplify (totalACavailable - lckAC)\\n        // [PREC] = [PREC] * [PREC] / [PREC]\\n        uint256 aux = (pACtp * (ctargemaCA - ONE)) / (_getCtargemaTP(i, pACtp) - ONE);\\n        // [N] = ([N] * [N] * [PREC] / [N]) / [PREC]\\n        qTPtoRedeem = ((params_.qTC * lckAC * aux) / nTCcb) / PRECISION;\\n        if (qTPtoRedeem > params_.qTP) revert InsufficientQtpSent(params_.qTP, qTPtoRedeem);\\n        // if qTC == 0 => qTPtoRedeem == 0 and will revert because QacNeededMustBeGreaterThanZero\\n        (uint256 qACtotalToRedeem, uint256 qACtoRedeemTP) = _calcQACforRedeemTCandTP(\\n            params_.qTC,\\n            qTPtoRedeem,\\n            pACtp,\\n            _getPTCac(lckAC, nACgain)\\n        );\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            redeemTCandTPFee\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnRedeemTP(qACtoRedeemTP);\\n        _withdrawAndBurnTC(params_.qTC, qACtotalToRedeem);\\n        _withdrawAndBurnTP(i, qTPtoRedeem, 0);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TP for TP function parameters\\n     * @dev\\n     *      iFrom_ owned Pegged Token index\\n     *      iTo_ target Pegged Token index\\n     *      qTP_ amount of owned Pegged Token to swap\\n     *      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the target Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTPforTPto(\\n        SwapTPforTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        if (params_.tpFrom == params_.tpTo) revert InvalidValue();\\n        uint256 iFrom = _tpi(params_.tpFrom);\\n        uint256 iTo = _tpi(params_.tpTo);\\n        uint256 pACtpFrom = _getPACtp(iFrom);\\n        uint256 pACtpTo = _getPACtp(iTo);\\n        _updateTPtracking(iFrom, pACtpFrom);\\n        _updateTPtracking(iTo, pACtpTo);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtpFrom);\\n        // calculate how many qTP can mint with the given qAC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qTPtoMint = (params_.qTP * pACtpTo) / pACtpFrom;\\n        if (qTPtoMint < params_.qTPmin || qTPtoMint == 0) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        // if ctargemaTPto > ctargemaTPfrom we need to check coverage\\n        if (_getCtargemaTP(iTo, pACtpTo) > _getCtargemaTP(iFrom, pACtpFrom)) {\\n            (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n            // evaluates whether or not the system coverage is healthy enough to mint TP\\n            // given the target coverage adjusted by the moving average, reverts if it's not\\n            (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n            // evaluates if there are enough TP available to mint, reverts if it's not\\n            _evalTPavailableToMint(iTo, qTPtoMint, pACtpTo, ctargemaCA, lckAC, nACgain);\\n        }\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        _depositAndMintTP(iTo, qTPtoMint, 0, params_.recipient);\\n        _withdrawAndBurnTP(iFrom, params_.qTP, 0);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to Collateral Token\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TP for TC function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount Pegged Token to swap\\n     *      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTPforTCto(\\n        SwapTPforTCParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        // calculate how many total qAC are redeemed TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtp);\\n        // calculate how many qTC can mint with the given qAC\\n        // qTCtoMint = qTP / pTCac / pACtp\\n        // [N] = [N] * [N] * [PREC] / ([N] - [N]) * [PREC]\\n        qTCtoMint = _divPrec(params_.qTP * nTCcb, (_getTotalACavailable(nACgain) - lckAC) * pACtp);\\n        // slither-disable-next-line incorrect-equality\\n        if (qTCtoMint < params_.qTCmin || qTCtoMint == 0) revert QtcBelowMinimumRequired(params_.qTCmin, qTCtoMint);\\n\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTCFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnRedeemTP(qACtotalToRedeem);\\n        _withdrawAndBurnTP(i, params_.qTP, 0);\\n        _depositAndMintTC(qTCtoMint, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice swap Collateral Token to Pegged Token\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TC for TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to swap\\n     *      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTCforTPto(\\n        SwapTCforTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(params_.qTC, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        // if is 0 reverts because it is trying to swap an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qTP can mint with the given qAC\\n        // qTPtoMint = qTC * pTCac * pACtp\\n        // [N] = ([N] * ([N] - [N]) * [PREC] / [N]) / [PREC]\\n        qTPtoMint = ((params_.qTC * (_getTotalACavailable(nACgain) - lckAC) * pACtp) / nTCcb) / PRECISION;\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(i, qTPtoMint, pACtp, ctargemaCA, lckAC, nACgain);\\n        if (qTPtoMint < params_.qTPmin) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTCforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnMintTP(qACtotalToRedeem);\\n        _withdrawAndBurnTC(params_.qTC, 0);\\n        _depositAndMintTP(i, qTPtoMint, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qTCtoMint amount of Collateral Token to mint [N]\\n     * @return qACNeededtoMint total amount of Collateral Asset needed to mint [N]\\n     * @return qACtoMintTP amount of Collateral Asset used to mint Pegged Token [N]\\n     */\\n    function _calcQACforMintTCandTP(\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaTP_,\\n        uint256 pTCac_\\n    ) internal pure returns (uint256 qTCtoMint, uint256 qACNeededtoMint, uint256 qACtoMintTP) {\\n        // calculate how many TC are needed to mint TP and total qAC used for mint both\\n        // [N] = [N] * ([PREC] - [PREC]) / [PREC]\\n        qACNeededtoMint = (qTP_ * (ctargemaTP_ - ONE)) / pACtp_;\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qTCtoMint = _divPrec(qACNeededtoMint, pTCac_);\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qACtoMintTP = _divPrec(qTP_, pACtp_);\\n        // [N] = [N] + [N]\\n        qACNeededtoMint = qACNeededtoMint + qACtoMintTP;\\n        return (qTCtoMint, qACNeededtoMint, qACtoMintTP);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qACtotalToRedeem total amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACtoRedeemTP amount of Collateral Asset used to redeem Pegged Token [N]\\n     */\\n    function _calcQACforRedeemTCandTP(\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 pTCac_\\n    ) internal pure returns (uint256 qACtotalToRedeem, uint256 qACtoRedeemTP) {\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtoRedeemTP = _divPrec(qTP_, pACtp_);\\n        // if is 0 reverts because it is trying to redeem an amount of TP below precision\\n        // we check it here to prevent qTP == 0 && qTC != 0\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtoRedeemTP == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qAC are redeemed because TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        // TODO: rounding error could be avoid replacing here with qTC_ * totalACavailable / nTCcb\\n        qACtotalToRedeem = qACtoRedeemTP + _mulPrec(qTC_, pTCac_);\\n        return (qACtotalToRedeem, qACtoRedeemTP);\\n    }\\n}\\n\",\"keccak256\":\"0x25caf3c48be4d24abc681b05ff85aa13e31d18f6f93922ce246b1676e686a408\",\"license\":\"UNLICENSED\"},\"contracts/core/MocEma.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { MocBaseBucket } from \\\"./MocBaseBucket.sol\\\";\\n\\n/**\\n * @title MocEma: Exponential Moving Average\\n * @notice Moc Ema, provides a set of methods that allows to calculate and track\\n * Exponential Moving Average for each of the pegged Tokens.\\n * @dev More information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n */\\nabstract contract MocEma is MocBaseBucket {\\n    // ------- Events -------\\n    event TPemaUpdated(uint256 indexed i_, uint256 oldTPema_, uint256 newTPema_);\\n\\n    // ------- Structs -------\\n    struct EmaItem {\\n        // exponential moving average\\n        uint256 ema;\\n        // smoothing factor\\n        uint256 sf;\\n    }\\n\\n    // ------- Storage -------\\n    // TP EMA items, indexes are in sync with PeggedTokens across Moc solution\\n    EmaItem[] public tpEma;\\n    // next Ema Calculation Block number\\n    uint256 public nextEmaCalculation;\\n    // amount of blocks to wait for next ema calculation\\n    uint256 public emaCalculationBlockSpan;\\n\\n    /**\\n     * @notice calculates exponential moving average of the value of a Pegged Token\\n     * @dev more information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n     * @param currentTPema_ current Ema value\\n     * @param pACtp_ current tp AC price\\n     */\\n    function __calcNewEma(EmaItem memory currentTPema_, uint256 pACtp_) private pure returns (uint256) {\\n        // [PREC\\u00b2] = [PREC] * ([PREC] - [PREC])\\n        uint256 term1 = currentTPema_.ema * (ONE - currentTPema_.sf);\\n        // [PREC\\u00b2] = [PREC] * [PREC]\\n        uint256 term2 = currentTPema_.sf * pACtp_;\\n        // [PREC] = ([PREC\\u00b2] + [PREC\\u00b2]) / [PREC]\\n        return (term1 + term2) / PRECISION;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function __MocEma_init_unchained(uint256 emaCalculationBlockSpan_) internal onlyInitializing {\\n        if (emaCalculationBlockSpan_ == 0) revert InvalidValue();\\n        emaCalculationBlockSpan = emaCalculationBlockSpan_;\\n        _updateNextEmaCalculation(emaCalculationBlockSpan_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice updates next EMA block calculation\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function _updateNextEmaCalculation(uint256 emaCalculationBlockSpan_) internal {\\n        unchecked {\\n            nextEmaCalculation = block.number + emaCalculationBlockSpan_;\\n        }\\n    }\\n\\n    /**\\n     * @notice get target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return ctargemaTP [PREC]\\n     */\\n    function _getCtargemaTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 ctargemaTP) {\\n        uint256 auxTPctarg = tpCtarg[i_];\\n        uint256 auxTpEma = tpEma[i_].ema;\\n        if (shouldCalculateEma()) auxTpEma = __calcNewEma(tpEma[i_], pACtp_);\\n        if (auxTpEma >= pACtp_) return auxTPctarg;\\n        // [PREC] = [PREC] * [PREC] / [PREC]\\n        return (auxTPctarg * pACtp_) / auxTpEma;\\n    }\\n\\n    /**\\n     * @notice update exponential moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     */\\n    function updateTPema(uint256 i_) internal {\\n        EmaItem memory currentTPema = tpEma[i_];\\n        uint256 pACtp = _getPACtp(i_);\\n        uint256 newEma = __calcNewEma(currentTPema, pACtp);\\n        // save new ema value to storage\\n        tpEma[i_].ema = newEma;\\n        emit TPemaUpdated(i_, currentTPema.ema, newEma);\\n    }\\n\\n    /**\\n     * @notice calculates CA target coverage, adjusted by all Pegged Token's to\\n     *  Collateral Asset last stored moving average price\\n     * @dev WARN: if EMA are not up to date, the resulting coverage might not reflect real spot value\\n     *      qAC = (nTP + tpGain) / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _calcCtargemaCA() internal view returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        uint256 num;\\n        uint256 den;\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = _getPACtp(i);\\n            pACtps[i] = pACtp;\\n            (uint256 tpGain, ) = _getPnLTP(i, pACtp);\\n            // [PREC] = [N] * [PREC] * [PREC]  / [PREC]\\n            uint256 qAC = _divPrec((pegContainer[i].nTP + tpGain) * PRECISION, pACtp);\\n            // [PREC]^2 = [PREC] * [PREC]\\n            num += _getCtargemaTP(i, pACtp) * qAC;\\n            // [PREC] = [PREC]\\n            den += qAC;\\n        }\\n        // we must return a default value when all nTP are 0\\n        // slither-disable-next-line incorrect-equality\\n        if (den == 0) {\\n            unchecked {\\n                return (protThrld * 2, pACtps);\\n            }\\n        }\\n        // [PREC] = ([PREC]^2) / [PREC]\\n        ctargemaCA = num / den;\\n    }\\n\\n    /**\\n     * @notice make sure Ema is up to date, and calculates target coverage adjusted by all Pegged Token's\\n     * to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _updateEmasAndCalcCtargemaCA() internal returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        // Make sure EMAs are up to date for all the pegs, in the, unlikely, scenario they hadn't been updated already\\n        updateEmas();\\n        return _calcCtargemaCA();\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     */\\n    function calcCtargemaCA() external view returns (uint256 ctargemaCA) {\\n        (ctargemaCA, ) = _calcCtargemaCA();\\n    }\\n\\n    /**\\n     * @notice true if the necessary span has pass since last ema update\\n     */\\n    function shouldCalculateEma() public view returns (bool) {\\n        unchecked {\\n            return block.number >= nextEmaCalculation;\\n        }\\n    }\\n\\n    /**\\n     * @notice If time, calculates the EMA for all the Pegged Token prices.\\n     * @dev All price provider prices must be available, fails if not\\n     */\\n    function updateEmas() public {\\n        if (shouldCalculateEma()) {\\n            uint256 pegAmount = pegContainer.length;\\n            for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n                updateTPema(i);\\n            }\\n            _updateNextEmaCalculation(emaCalculationBlockSpan);\\n        }\\n    }\\n\\n    /**\\n     * @param blockSpan_ Defines how many blocks should pass between EMA calculations\\n     * @dev nextEmaCalculation is not automatically updated, you have to wait until next\\n     *  EMA calculation to be made : nextEmaCalculation = block.number + emaCalculationBlockSpan\\n     **/\\n    function setEmaCalculationBlockSpan(uint256 blockSpan_) external onlyAuthorizedChanger {\\n        emaCalculationBlockSpan = blockSpan_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7ca1141851bba2ee28342ae1aff2e90e8e482f936c20361b7325e0a7a31f15f6\",\"license\":\"UNLICENSED\"},\"contracts/governance/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IGovernor } from \\\"../interfaces/IGovernor.sol\\\";\\nimport { MocHelper } from \\\"../utils/MocHelper.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n  @title Governed\\n  @notice Base contract to be inherited by governed contracts\\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behavior\\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\\n  governance aspect of the child contract\\n  */\\nabstract contract Governed is Initializable, MocHelper {\\n    /**\\n    @notice The address of the contract which governs this one\\n   */\\n    IGovernor public governor;\\n\\n    error NotAuthorizedChanger();\\n\\n    /**\\n    @notice Modifier that protects the function\\n    @dev You should use this modifier in any function that should be called through\\n    the governance system\\n   */\\n    modifier onlyAuthorizedChanger() {\\n        checkIfAuthorizedChanger();\\n        _;\\n    }\\n\\n    /**\\n    @notice Initialize the contract with the basic settings\\n    @dev This initialize replaces the constructor but it is not called automatically.\\n    It is necessary because of the upgradeability of the contracts\\n    @param governorAddress_ Governor address\\n   */\\n    function __Governed_init(address governorAddress_) internal onlyInitializing {\\n        __Governed_init_unchained(governorAddress_);\\n    }\\n\\n    function __Governed_init_unchained(address governorAddress_) internal onlyInitializing {\\n        governor = IGovernor(governorAddress_);\\n    }\\n\\n    /**\\n    @notice Change the contract's governor. Should be called through the old governance system\\n    @param newGovernor_ New governor address\\n   */\\n    function changeGovernor(IGovernor newGovernor_) external onlyAuthorizedChanger {\\n        governor = newGovernor_;\\n    }\\n\\n    /**\\n    @notice Checks if the msg sender is an authorized changer, reverts otherwise\\n   */\\n    function checkIfAuthorizedChanger() internal view {\\n        if (!governor.isAuthorizedChanger(msg.sender)) revert NotAuthorizedChanger();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x4ca00d6d57ffff0ee43e4441d1bafa20c4e3f52e43e50b08cf68d7f65540e09a\",\"license\":\"UNLICENSED\"},\"contracts/governance/MocUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { Stoppable } from \\\"../governance/Stoppable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// Import to allow compilation and deploy of ERC1967Proxy\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nabstract contract MocUpgradable is UUPSUpgradeable, Stoppable {\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function __MocUpgradable_init(address governorAddress_, address pauserAddress_) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        __Governed_init(governorAddress_);\\n        __Stoppable_init_unchained(pauserAddress_, true);\\n    }\\n\\n    /**\\n     * @inheritdoc UUPSUpgradeable\\n     * @dev checks that the changer that will do the upgrade is currently authorized by governance to makes\\n     * changes within the system\\n     * @param newImplementation new implementation contract address(not used)\\n     */\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcfd79734ffdc0e9e294b7c27a56e65228a704d77b9b75881227765a314a29186\",\"license\":\"UNLICENSED\"},\"contracts/governance/Stoppable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { Governed } from \\\"./Governed.sol\\\";\\n\\n/**\\n * @title Stoppable\\n * @notice Allow a contract to be paused through the stopper subsystem. This contracts\\n * is able to disable the stoppability feature through governance.\\n * @dev This contract was heavily based on the _Pausable_ contract of openzeppelin-eth but\\n * it was modified in order to being able to turn on and off its stoppability\\n */\\ncontract Stoppable is Governed {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool public stoppable;\\n    bool private _paused;\\n    address public pauser;\\n\\n    // ------- Custom Errors -------\\n    error Unstoppable();\\n    error OnlyWhilePaused();\\n    error NotWhenPaused();\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is not paused\\n     */\\n    modifier notPaused() {\\n        _checkNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is paused\\n     */\\n    modifier onlyPaused() {\\n        if (!_paused) revert OnlyWhilePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the basic settings\\n     * @dev This initialize replaces the constructor but it is not called automatically.\\n     * It is necessary because of the upgradeability of the contracts. Either this function or the previous can be used\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     * @param stoppable_ Define if the contract starts being unstoppable or not\\n     */\\n    function __Stoppable_init_unchained(address pauserAddress_, bool stoppable_) internal onlyInitializing {\\n        stoppable = stoppable_;\\n        pauser = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev reverts with NotWhenPaused when _paused\\n     */\\n    function _checkNotPaused() internal view {\\n        if (_paused) revert NotWhenPaused();\\n    }\\n\\n    /**\\n     * @notice Returns true if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Called by the owner to pause, triggers stopped state\\n     * @dev Should only be called by the pauser and when it is stoppable\\n     */\\n    function pause() external notPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        if (!stoppable) revert Unstoppable();\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Switches OFF the stoppability of the contract; if the contract was paused\\n     * it will no longer be so\\n     * @dev Should be called through governance\\n     */\\n    function makeUnstoppable() external onlyAuthorizedChanger {\\n        stoppable = false;\\n    }\\n\\n    /**\\n     * @notice Switches ON the stoppability of the contract; if the contract was paused\\n     * before making it unstoppable it will be paused again after calling this function\\n     * @dev Should be called through governance\\n     */\\n    function makeStoppable() external onlyAuthorizedChanger {\\n        stoppable = true;\\n    }\\n\\n    /**\\n     * @notice Changes the address which is enable to pause this contract\\n     * @param newPauser_ Address of the new pauser\\n     * @dev Should be called through governance\\n     */\\n    function setPauser(address newPauser_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        pauser = newPauser_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x535935f16a10f894197c692692649ac42c764018c981f1651bf1d59dc3bb32d5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x22e20ac9596a6a4c4545b0c5cf307c2924987d6033ef75357850b0de4d1f0901\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IDataProvider\\n * @notice Amphiraos-Oracle Interface for peeking the data from an oracle\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IDataProvider {\\n    /**\\n     * @notice returns the given `data` if `valid`\\n     * @param data peeked\\n     * @param valid true if the data is valid\\n     */\\n    function peek() external view returns (bytes32 data, bool valid);\\n}\\n\",\"keccak256\":\"0xa24e4a8fe86fd41e5da606a361b504a20d97b579c5d620221442dd080e2ba39b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangeContract } from \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0f8cd9de3ed9348e6a58cf4d971586f60f5542a20ecd3748194e4ba288f419c1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IMocRC20\\n * @notice Base Moc ERC20 Token Interface: burn, mint. It can be both Pegs and Collateral Tokens.\\n */\\ninterface IMocRC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x59d458617a8daf761e2f0ff84a367b32b4eacabfb8340e244f52bc168cb8a16a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IPriceFeed\\n * @notice Amphiraos-Oracle Interface for peeking the price of a given asset\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IPriceProvider {\\n    /**\\n     * @notice returns the given `price` for the asset if `valid`\\n     * @param price assetPrice\\n     * @param valid true if the price is valid\\n     */\\n    function peek() external view returns (bytes32 price, bool valid);\\n}\\n\",\"keccak256\":\"0xf91d285e24227b0c2f0c187d610d63e33a4fc9c1e193e0ced8df131eac440b23\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { IGovernor, Governed } from \\\"../governance/Governed.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title MocRC20\\n * @notice Base Moc ERC20 Token: burn, mint. It can be both Pegs and Collateral Tokens.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocRC20 is IMocRC20, AccessControlEnumerableUpgradeable, ERC20Upgradeable, UUPSUpgradeable, Governed {\\n    bytes32 private constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 private constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    error NotUniqueRole(bytes32 role);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * See {__MocRC20_init}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external virtual initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n        _grantRole(MINTER_ROLE, admin_);\\n        _grantRole(BURNER_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE` to `admin` address.\\n     *\\n     * See {ERC20_init}.\\n     */\\n    function __MocRC20_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) internal onlyInitializing {\\n        __ERC20_init(name_, symbol_);\\n        __AccessControlEnumerable_init();\\n        __UUPSUpgradeable_init();\\n        __Governed_init(address(governor_));\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @inheritdoc UUPSUpgradeable\\n     * @dev checks that the changer that will do the upgrade is currently authorized by governance to makes\\n     * changes within the system\\n     * @param newImplementation new implementation contract address(not used)\\n     */\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) returns (bool) {\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     * Requirements:\\n     *\\n     * - the caller must have the `BURNER_ROLE`.\\n     */\\n    function burn(address to, uint256 amount) external virtual onlyRole(BURNER_ROLE) {\\n        _burn(to, amount);\\n    }\\n\\n    /**\\n     * @dev Grants all `roles` to `account` while sender renounces to all ``role``\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     * - no one else must have any other role\\n     *\\n     * May emit a {RoleGranted x3, RoleRevoked x3} event.\\n     */\\n    function transferAllRoles(address account) public virtual onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, account);\\n        _grantRole(MINTER_ROLE, account);\\n        _grantRole(BURNER_ROLE, account);\\n        _revokeRole(MINTER_ROLE, msg.sender);\\n        _revokeRole(BURNER_ROLE, msg.sender);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // One the new admin account has roles\\n        if (getRoleMemberCount(DEFAULT_ADMIN_ROLE) != 1) revert NotUniqueRole(DEFAULT_ADMIN_ROLE);\\n        if (getRoleMemberCount(MINTER_ROLE) != 1) revert NotUniqueRole(MINTER_ROLE);\\n        if (getRoleMemberCount(BURNER_ROLE) != 1) revert NotUniqueRole(BURNER_ROLE);\\n    }\\n}\\n\",\"keccak256\":\"0x5ae23d94f4a2cf84d0999a307d0d8b0031ba52f5f01ee31510051e961d952239\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocTC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocRC20, IGovernor, IMocRC20 } from \\\"./MocRC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { ERC20PausableUpgradeable, ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title MocTC\\n * @notice Base Moc  ERC20 Collateral Tokens: Allows burn, mint and pause.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocTC is MocRC20, ERC20PausableUpgradeable {\\n    bytes32 private constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Grants `PAUSER_ROLE` to `admin` address.\\n     *\\n     * See {MocRC20-constructor}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external override initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n        __ERC20Pausable_init();\\n    }\\n\\n    /**\\n     * @dev override only to satisfy compiler\\n     * @inheritdoc ERC20PausableUpgradeable\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        ERC20PausableUpgradeable._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract.\\n     * See {ERC20PausableUpgradeable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Grants all `roles` to `account` while sender renounces to all ``role``.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     * - no one else must have any other role\\n     *\\n     * May emit a {RoleGranted x4, RoleRevoked x4} event.\\n     */\\n    function transferAllRoles(address account) public override onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\\n        _grantRole(PAUSER_ROLE, account);\\n        _revokeRole(PAUSER_ROLE, msg.sender);\\n        super.transferAllRoles(account);\\n        if (getRoleMemberCount(PAUSER_ROLE) != 1) revert NotUniqueRole(PAUSER_ROLE);\\n    }\\n}\\n\",\"keccak256\":\"0x9cf0f1716999076e7128bfb83af415eb99bfd43b785e6efc8015e45df6e1baf3\",\"license\":\"UNLICENSED\"},\"contracts/utils/MocHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nabstract contract MocHelper {\\n    error InvalidAddress();\\n    error InvalidValue();\\n    // Constants may not be used in child contracts and that is fine as they are\\n    // not using any space in storage, so we disable the check\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant PRECISION = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant ONE = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant UINT256_MAX = ~uint256(0);\\n\\n    // Saves gas\\n    // https://github.com/KadenZipfel/gas-optimizations/blob/main/gas-saving-patterns/unchecked-arithmetic.md\\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice add precision and div two number\\n     * @param a_ numerator\\n     * @param b_ denominator\\n     * @return `a_` * PRECISION / `b_`\\n     */\\n    function _divPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * PRECISION) / b_;\\n    }\\n\\n    /**\\n     * @notice multiply two number and remove precision\\n     * @param a_ term 1\\n     * @param b_ term 2\\n     * @return `a_` * `b_` / PRECISION\\n     */\\n    function _mulPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * b_) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice reverts if value if less than PRECISION ONE\\n     * @param value_ value to check [PREC]\\n     */\\n    function _checkLessThanOne(uint256 value_) internal pure {\\n        if (value_ > ONE) revert InvalidValue();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x73fa805076c35c1e4db33e957ab681fb34637a9d3d99b1ae5edcf7fb43248c0b\",\"license\":\"UNLICENSED\"},\"contracts/vendors/MocVendors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\n\\n/**\\n * @title MocVendors\\n * @notice MocVendors allows a third-party to add a markup to all operations\\n *  A vendor can set a markup themselves or ask vendors guardian to do it on their behalf.\\n *  Considerations:\\n *  - Theres is not a markup limit or restriction\\n *  - The currency that the vendor receives is always the same that is used to pay fees(AC or Fee Token)\\n *  - A malicious vendor front running an operation increasing the markup is protected in some way\\n *      by the maximum (AC or Fee Token) that the user expect to spend(or de minimum that expect to receive)\\n */\\ncontract MocVendors is MocUpgradable {\\n    // ------- Events -------\\n    event VendorMarkupChanged(address indexed vendorAddress_, uint256 newMarkup_);\\n    // ------- Custom Errors -------\\n    error NotVendorsGuardian(address sender_);\\n\\n    // ------- Storage -------\\n\\n    // address authorized to change a vendor's markup\\n    address public vendorsGuardianAddress;\\n    // addition markup pct applied on each operation when operating through a vendor [PREC]\\n    mapping(address => uint256) public vendorMarkup; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // ------- Initializer -------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice contract initializer\\n     * @param vendorsGuardianAddress_ The address authorized to change a vendor's markup\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function initialize(\\n        address vendorsGuardianAddress_,\\n        address governorAddress_,\\n        address pauserAddress_\\n    ) external initializer {\\n        // slither-disable-next-line missing-zero-check\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n        __MocUpgradable_init(governorAddress_, pauserAddress_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function _setMarkup(address vendorAddress_, uint256 newMarkup_) internal {\\n        vendorMarkup[vendorAddress_] = newMarkup_;\\n        emit VendorMarkupChanged(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice vendor sets its own markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setMarkup(uint256 newMarkup_) external {\\n        _setMarkup(msg.sender, newMarkup_);\\n    }\\n\\n    /**\\n     * @notice guardian sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setVendorMarkup(address vendorAddress_, uint256 newMarkup_) external {\\n        if (msg.sender != vendorsGuardianAddress) revert NotVendorsGuardian(msg.sender);\\n        _setMarkup(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev Sets the address which will be authorized to set a vendor markup.\\n     * @param vendorsGuardianAddress_ Address which will be authorized to set a vendor markup.\\n     */\\n    function setVendorsGuardianAddress(address vendorsGuardianAddress_) public onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2fd4ff4cf08ecabbd32b44f837c3d7f6f14b5512574abc23b4f35a12995d3ae9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 950,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 953,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 932,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1247,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28019,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20601,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "governor",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IGovernor)21376"
      },
      {
        "astId": 20672,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20741,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "stoppable",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 20743,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "_paused",
        "offset": 1,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 20745,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "pauser",
        "offset": 2,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 20904,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20723,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10197,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "feeToken",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)6209"
      },
      {
        "astId": 10200,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "feeTokenPriceProvider",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IPriceProvider)21414"
      },
      {
        "astId": 10202,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "nACcb",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 10204,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "nACioucb",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 10207,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcToken",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(MocTC)27844"
      },
      {
        "astId": 10209,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "nTCcb",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 10213,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpTokens",
        "offset": 0,
        "slot": "309",
        "type": "t_array(t_contract(IMocRC20)21402)dyn_storage"
      },
      {
        "astId": 10218,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "peggedTokenIndex",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_struct(PeggedTokenIndex)10141_storage)"
      },
      {
        "astId": 10222,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "pegContainer",
        "offset": 0,
        "slot": "311",
        "type": "t_array(t_struct(PegContainerItem)10136_storage)dyn_storage"
      },
      {
        "astId": 10225,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpLiqPrices",
        "offset": 0,
        "slot": "312",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10227,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "successFee",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 10229,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "appreciationFactor",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 10231,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "feeRetainer",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 10233,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcMintFee",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 10235,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcRedeemFee",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      },
      {
        "astId": 10237,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "swapTPforTPFee",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 10239,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "swapTPforTCFee",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 10241,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "swapTCforTPFee",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 10243,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "redeemTCandTPFee",
        "offset": 0,
        "slot": "321",
        "type": "t_uint256"
      },
      {
        "astId": 10245,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "mintTCandTPFee",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 10247,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "feeTokenPct",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      },
      {
        "astId": 10251,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpMintFees",
        "offset": 0,
        "slot": "324",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10255,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpRedeemFees",
        "offset": 0,
        "slot": "325",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10257,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "mocFeeFlowAddress",
        "offset": 0,
        "slot": "326",
        "type": "t_address"
      },
      {
        "astId": 10259,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "mocAppreciationBeneficiaryAddress",
        "offset": 0,
        "slot": "327",
        "type": "t_address"
      },
      {
        "astId": 10262,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpCtarg",
        "offset": 0,
        "slot": "328",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10264,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "protThrld",
        "offset": 0,
        "slot": "329",
        "type": "t_uint256"
      },
      {
        "astId": 10266,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "liqThrld",
        "offset": 0,
        "slot": "330",
        "type": "t_uint256"
      },
      {
        "astId": 10268,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "liqEnabled",
        "offset": 0,
        "slot": "331",
        "type": "t_bool"
      },
      {
        "astId": 10270,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "liquidated",
        "offset": 1,
        "slot": "331",
        "type": "t_bool"
      },
      {
        "astId": 10272,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "bes",
        "offset": 0,
        "slot": "332",
        "type": "t_uint256"
      },
      {
        "astId": 10274,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "bns",
        "offset": 0,
        "slot": "333",
        "type": "t_uint256"
      },
      {
        "astId": 10276,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "qACLockedInPending",
        "offset": 0,
        "slot": "334",
        "type": "t_uint256"
      },
      {
        "astId": 10278,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "mocQueue",
        "offset": 0,
        "slot": "335",
        "type": "t_address"
      },
      {
        "astId": 10281,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpiou",
        "offset": 0,
        "slot": "336",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 10284,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "pACtpLstop",
        "offset": 0,
        "slot": "337",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10287,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "maxAbsoluteOpProvider",
        "offset": 0,
        "slot": "338",
        "type": "t_contract(IDataProvider)21355"
      },
      {
        "astId": 10290,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "maxOpDiffProvider",
        "offset": 0,
        "slot": "339",
        "type": "t_contract(IDataProvider)21355"
      },
      {
        "astId": 10292,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "decayBlockSpan",
        "offset": 0,
        "slot": "340",
        "type": "t_uint256"
      },
      {
        "astId": 10294,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "absoluteAccumulator",
        "offset": 0,
        "slot": "341",
        "type": "t_uint256"
      },
      {
        "astId": 10296,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "differentialAccumulator",
        "offset": 0,
        "slot": "342",
        "type": "t_int256"
      },
      {
        "astId": 10298,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "lastOperationBlockNumber",
        "offset": 0,
        "slot": "343",
        "type": "t_uint256"
      },
      {
        "astId": 10300,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcInterestCollectorAddress",
        "offset": 0,
        "slot": "344",
        "type": "t_address"
      },
      {
        "astId": 10302,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcInterestRate",
        "offset": 0,
        "slot": "345",
        "type": "t_uint256"
      },
      {
        "astId": 10304,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tcInterestPaymentBlockSpan",
        "offset": 0,
        "slot": "346",
        "type": "t_uint256"
      },
      {
        "astId": 10306,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "nextTCInterestPayment",
        "offset": 0,
        "slot": "347",
        "type": "t_uint256"
      },
      {
        "astId": 11909,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "348",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15698,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "tpEma",
        "offset": 0,
        "slot": "398",
        "type": "t_array(t_struct(EmaItem)15694_storage)dyn_storage"
      },
      {
        "astId": 15700,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "nextEmaCalculation",
        "offset": 0,
        "slot": "399",
        "type": "t_uint256"
      },
      {
        "astId": 15702,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "emaCalculationBlockSpan",
        "offset": 0,
        "slot": "400",
        "type": "t_uint256"
      },
      {
        "astId": 16074,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11943,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "mocVendors",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(MocVendors)28149"
      },
      {
        "astId": 12816,
        "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IMocRC20)21402)dyn_storage": {
        "base": "t_contract(IMocRC20)21402",
        "encoding": "dynamic_array",
        "label": "contract IMocRC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmaItem)15694_storage)dyn_storage": {
        "base": "t_struct(EmaItem)15694_storage",
        "encoding": "dynamic_array",
        "label": "struct MocEma.EmaItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PegContainerItem)10136_storage)dyn_storage": {
        "base": "t_struct(PegContainerItem)10136_storage",
        "encoding": "dynamic_array",
        "label": "struct MocBaseBucket.PegContainerItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDataProvider)21355": {
        "encoding": "inplace",
        "label": "contract IDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6209": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernor)21376": {
        "encoding": "inplace",
        "label": "contract IGovernor",
        "numberOfBytes": "20"
      },
      "t_contract(IMocRC20)21402": {
        "encoding": "inplace",
        "label": "contract IMocRC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)21414": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_contract(MocTC)27844": {
        "encoding": "inplace",
        "label": "contract MocTC",
        "numberOfBytes": "20"
      },
      "t_contract(MocVendors)28149": {
        "encoding": "inplace",
        "label": "contract MocVendors",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(PeggedTokenIndex)10141_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MocBaseBucket.PeggedTokenIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(PeggedTokenIndex)10141_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EmaItem)15694_storage": {
        "encoding": "inplace",
        "label": "struct MocEma.EmaItem",
        "members": [
          {
            "astId": 15691,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "ema",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15693,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "sf",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PegContainerItem)10136_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PegContainerItem",
        "members": [
          {
            "astId": 10132,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "nTP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10135,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "priceProvider",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceProvider)21414"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PeggedTokenIndex)10141_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PeggedTokenIndex",
        "members": [
          {
            "astId": 10138,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10140,
            "contract": "contracts/core/MocCoreExpansion.sol:MocCoreExpansion",
            "label": "exists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "add a Pegged Token to the protocol"
      },
      "calcCtargemaCA()": {
        "notice": "calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average"
      },
      "changeGovernor(address)": {
        "notice": "Change the contract's governor. Should be called through the old governance system"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "modifies a Pegged Token of the protocol"
      },
      "evalLiquidation()": {
        "notice": "evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event."
      },
      "getPACtp(address)": {
        "notice": "get how many Pegged Token equal 1 Collateral Asset"
      },
      "governor()": {
        "notice": "The address of the contract which governs this one"
      },
      "isLiquidationReached()": {
        "notice": "If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation"
      },
      "liqRedeemTPTo(address,address,address,uint256)": {
        "notice": "Allow redeem on liquidation state, user Peg balance gets burned"
      },
      "makeStoppable()": {
        "notice": "Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function"
      },
      "makeUnstoppable()": {
        "notice": "Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so"
      },
      "maxQACToMintTP()": {
        "notice": "gets the max amount of AC allowed to operate to mint TP with, restricted by accumulators // TODO: move this function to a MocView contract"
      },
      "maxQACToRedeemTP()": {
        "notice": "gets the max amount of AC allowed to operate to redeem TP with, restricted by accumulators // TODO: move this function to a MocView contract"
      },
      "mintTCandTPto((address,uint256,uint256,address,address,address))": {
        "notice": "mint Collateral Token and Pegged Token in exchange for Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "pause()": {
        "notice": "Called by the owner to pause, triggers stopped state"
      },
      "paused()": {
        "notice": "Returns true if paused"
      },
      "redeemTCandTPto((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "redeem Collateral Asset in exchange for Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "setPauser(address)": {
        "notice": "Changes the address which is enable to pause this contract"
      },
      "shouldCalculateEma()": {
        "notice": "true if the necessary span has pass since last ema update"
      },
      "swapTCforTPto((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "swap Collateral Token to Pegged Token"
      },
      "swapTPforTCto((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "swap Pegged Token to Collateral Token"
      },
      "swapTPforTPto((address,address,uint256,uint256,uint256,address,address,address))": {
        "notice": "swap Pegged Token to another one  This operation is done without checking coverage unless the target coverage for  received Pegged Token is greater than the Pegged Token sent"
      },
      "unpause()": {
        "notice": "Called by the owner to unpause, returns to normal state"
      },
      "updateEmas()": {
        "notice": "If time, calculates the EMA for all the Pegged Token prices."
      }
    },
    "notice": "This contract is used as an expansion of MocCore because 24kb size limitation  MocCore delegate some function calls to it.",
    "version": 1
  }
}