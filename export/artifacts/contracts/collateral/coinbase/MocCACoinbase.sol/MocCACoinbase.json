{
  "contractName": "MocCACoinbase",
  "sourceName": "contracts/collateral/coinbase/MocCACoinbase.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQacSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQtpSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tcAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTCtoRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToMint_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoRedeem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Liquidated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cglb_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "covThrld_",
          "type": "uint256"
        }
      ],
      "name": "LowCoverage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingBlocksToSettlement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceProviderAddress_",
          "type": "address"
        }
      ],
      "name": "MissingProviderPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedChanger",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhenPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhenLiquidated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhilePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeggedTokenAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACtoRedeem_",
          "type": "uint256"
        }
      ],
      "name": "QacBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QacNeededMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        }
      ],
      "name": "QtcBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "QtpBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unstoppable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "PeggedTokenChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SettlementExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mocGain_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tpGain_",
          "type": "uint256[]"
        }
      ],
      "name": "SuccessFeeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TCMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TCRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TCSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPfrom_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPto_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTPema_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTPema_",
          "type": "uint256"
        }
      ],
      "name": "TPemaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "addPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appreciationFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcCtargemaCA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ctargemaCA",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGovernor",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "editPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emaCalculationBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "evalLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRetainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokenPriceProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCglb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cglob",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLeverageTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "leverageTC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "getPACtp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPTCac",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pTCac",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTCAvailableToRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tcAvailableToRedeem",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "getTPAvailableToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tpAvailableToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalACavailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalACavailable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "feeTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feeTokenPriceProviderAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tcTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "mocFeeFlowAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "mocAppreciationBeneficiaryAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "protThrld",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liqThrld",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeRetainer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tcMintFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tcRedeemFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "swapTPforTPFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "swapTPforTCFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "swapTCforTPFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "redeemTCandTPFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintTCandTPFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeTokenPct",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "successFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "appreciationFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MocBaseBucket.InitializeBaseBucketParams",
              "name": "initializeBaseBucketParams",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "governorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pauserAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mocCoreExpansion",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "emaCalculationBlockSpan",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "mocVendors",
              "type": "address"
            }
          ],
          "internalType": "struct MocCore.InitializeCoreParams",
          "name": "initializeCoreParams_",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidationReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "liqRedeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "liqRedeemTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeStoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeUnstoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        }
      ],
      "name": "mintTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTCViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "mintTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTCandTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTCandTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTCtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "mintTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "mintTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocAppreciationBeneficiaryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocFeeFlowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocVendors",
      "outputs": [
        {
          "internalType": "contract MocVendors",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nACcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nTCcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEmaCalculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pegContainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nTP",
          "type": "uint256"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "peggedTokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTCViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTCandTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTCandTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTCtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "redeemTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "appreciationFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAppreciationFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bes_",
          "type": "uint256"
        }
      ],
      "name": "setBes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockSpan_",
          "type": "uint256"
        }
      ],
      "name": "setEmaCalculationBlockSpan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRetainer_",
          "type": "uint256"
        }
      ],
      "name": "setFeeRetainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeTokenAddress_",
          "type": "address"
        }
      ],
      "name": "setFeeTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeTokenPct_",
          "type": "uint256"
        }
      ],
      "name": "setFeeTokenPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeTokenPriceProviderAddress_",
          "type": "address"
        }
      ],
      "name": "setFeeTokenPriceProviderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "liqEnabled_",
          "type": "bool"
        }
      ],
      "name": "setLiqEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liqThrld_",
          "type": "uint256"
        }
      ],
      "name": "setLiqThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setMintTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocAppreciationBeneficiaryAddress_",
          "type": "address"
        }
      ],
      "name": "setMocAppreciationBeneficiaryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocCoreExpansion_",
          "type": "address"
        }
      ],
      "name": "setMocCoreExpansion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeFlowAddress_",
          "type": "address"
        }
      ],
      "name": "setMocFeeFlowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser_",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protThrld_",
          "type": "uint256"
        }
      ],
      "name": "setProtThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setRedeemTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "successFee_",
          "type": "uint256"
        }
      ],
      "name": "setSuccessFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTCforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTCforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTCFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTCFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcMintFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcRedeemFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldCalculateEma",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stoppable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        }
      ],
      "name": "swapTCforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTCforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTCforTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTCforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTCforTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        }
      ],
      "name": "swapTPforTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTCFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTPforTCViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTPforTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTPforTCtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        }
      ],
      "name": "swapTPforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTPforTPViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTPforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        }
      ],
      "name": "swapTPforTPtoViaVendor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qFeeToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcToken",
      "outputs": [
        {
          "internalType": "contract MocTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpCtarg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpEma",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ema",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpTokens",
      "outputs": [
        {
          "internalType": "contract IMocRC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateEmas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082161062000053575b604051615b379081620000e782396080518181816130dd0152818161327f01526135920152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561002b575b361561001957600080fd5b61016361002734825461480d565b9055005b600060e08135811c90816301dde6ef1461417257816301f1b6841461412a57816304856e41146140c95781630ad8c2341461405f5781630aed4f8814613ffe5781630be9482d14613f915781630c340a2414613f685781630c36d89714613f495781630d6ac46314613f015781630df12a8b14613dfa5781630e0a8fd214613dd45781630f1e5e2b14613d8c5781630f60f39614613cb3578163102fefac14613c4957816317574bc514613aab57816317df0ab8146139e25781631867e2f5146139c35781631f79da55146139595781631fb0dda0146139385781631fe6a7ad146138fc5781632069f753146138d657816323b98cde146138af57816327eab2a1146138675781632a20d57d146138485781632c43bd3b146138225781632d88af4a146137c95781632ded50f0146137aa57816331f64ec21461370d578163333431fd146136ee57816333421c38146135f95781633659cfe6146135605781633bc4ac0a1461353a5781633dbc50a9146134e65781633f4ba83a146134695781634017936a14613424578163407f0e3414613405578163471a80e3146133a05781634b746001146133535781634d977e78146133345781634e1f907a1461330a5781634f0f27ee146132eb5781634f1ef286146131f75781635210570c146131cf5781635241271c146131a057816352d1902d146130ca578163543aeb48146130a457816354a73c62146130425781635c616a7314612d985781635c975abb14612d725781635d65d04514612d3e5781635e1e892814612cda57816360009e0b14612cb0578163647846a514612c86578163662013f414612c625781636827435714612c375781636b5488df14612c185781637071346814612bf257816371820f1214612b8b5781637554fffd14612b6c5781637750ba0c14612b4657816379f9a91c14612b275781637a193c3114612b085781637a4ff1d914612ae25781637a727fe814612ac35781637ad2819c14612a525781637af5758c14612a2c5781637c287999146129c25781637cba23831461299c5781637d8e03141461296d5781637dc4e77f1461282a5781637f01c71514612800578163826fcd58146127df57816382a5792c146127055781638456cb591461266c5781638cfa42411461264d578163904aa85b1461262e5781639195c85b1461260d57816391f388d8146125a1578163979d9a88146121335781639839ee8514611f465781639853c35a14611f1c5781639abb14c914611e525781639ad6659d14611e1d5781639bdd7cce14611be85781639cabfc0014611b9b5781639fd0506d14611b6e578163a8e9ac3014611b4c578163ac4fc1a814611a1c578163aea038dc146119fd578163b3903b39146119c6578163b7aef83714611868578163bad25a21146116f0578163bb4872de146116cd578163be22b4e1146115c4578163becaca6b1461159e578163c00f538d14611578578163c039cc6914611532578163c6e06d8914611349578163c84353c914611323578163cf351c1d146112db578163d1a0faa0146112bd578163d8233ecc1461125d578163db7960721461121e578163de08160f146111e1578163de8d520a146111b0578163e401294514611020578163e4c0aaf414610fd9578163e6a683e014610f91578163e6b1627c14610f4e578163e7c2597814610f2a578163e8859a1514610f0f578163ec62967914610ce2578163f13f405414610cb8578163f26114aa14610c4f578163f280877814610c29578163f30b561414610c0a578163f375cfba14610beb578163f5319cc81461096157508063fa6e83bd14610942578063fa79589e146108f0578063fb3bfcea14610779578063fcf207d4146105a45763fda70f8b14610583575061000e565b346105a157806003193601126105a157602061016e54604051908152f35b80fd5b6106a06105b23660046142b4565b9391604093919351916105c660c0846142f6565b825260208201908152604082019434865260608301338152608084019560018060a01b0380911687528060a0860193168352610600614d05565b610608615ad0565b6106106159ae565b61066561064d61061e6158f2565b919061064161062e8a5185614830565b519361063b858c51615199565b82614ddb565b91848b518b51906151f0565b610660670de0b6b3a76400008751614957565b61496a565b9361066e614cb6565b506106958284511686848751166106888a51610176614198565b90549060031b1c92614e59565b96918299919961480d565b988a51808b1161075b575089156107495760409a61072a8594610730948d94878d8d61073d9f838e9151915116907fb1c19484081f58b25de95eb3695caea3c2167249920a6439ec0253054d343e738b868851169461071b8b5191805190602081015160406060908301519201519260405196879687614cdd565b0390a451935191511692615100565b51614a15565b9251169251169180615433565b82519182526020820152f35b60405163f3e39b5d60e01b8152600490fd5b6044908b60405191630b63f1a760e01b835260048301526024820152fd5b5060603660031901126105a1576001600160a01b03602435818116908190036108eb576044358281168091036108eb5761084b906040516107bb60a0826142f6565b600435815260208101913483526040820133815260608301958652608083019182526107e5614d05565b6107ed615ad0565b670de0b6b3a764000061081f610819610810610807614c1c565b61017b54614ddb565b87519291614e1e565b90614957565b0496610829614cb6565b5061084081835116898386511661016e5492614e59565b95918a98919861480d565b978651808a116108cd57508815610749578861073d9761072a6107309360409d8780978c828c51167f73ef11a21cabab55ca448e6e2ae4b60bda75ed8109e2496084c92dc17b8334db8985885116936108c0865191805190602081015160406060908301519201519260405196879687614cdd565b0390a35192511691614d27565b6044908a60405191630b63f1a760e01b835260048301526024820152fd5b600080fd5b50346105a15760203660031901126105a157602061093a61092c6004356109156158f2565b906109346109238484614830565b51948593614844565b95909461584a565b9061522b565b604051908152f35b50346105a157806003193601126105a157602061016c54604051908152f35b905061096e3660046141da565b9361097f60409492945196876142f6565b8552602085015260408401523460608401523360808401526001600160a01b0390811660a08401521660c08201526109b5614d05565b6109bd615ad0565b6109c56159ae565b6109cd6158f2565b9290610a1f6109f36109e0855187614830565b51956109ed878751615199565b83614ddb565b90610a0482828660208a015161576f565b6020860151670de0b6b3a76400009384916108198585614e1e565b0493841561074957610a6993610a5f610a558a610a5060208c015161081988610a4b8b61016354614a15565b614a15565b614957565b610166549061496a565b04978888516151f0565b6040830151808510610bcd5750610aa590610a82614cb6565b50608084015160c08501516101725492916001600160a01b039182169116614e59565b919390926060820151808611610bae57509181610b61610baa9594610b8d945160018060a01b0360808501511660018060a01b0360a086015116917ff4287b96e269f789f166db491b07456566f468352771e466ce088e98d6007a0c8c6020880151610b298a518b6020810151606060408301519201519260405196879687614cdd565b0390a4610b4860208401518260018060a01b03608087015116916153c8565b825160a08401516001600160a01b031691908a90615100565b610b6f866060830151614a15565b608082015160c0909201516001600160a01b03908116921680615433565b604051938493846040919493926060820195825260208201520152565b0390f35b604490845160405191630b63f1a760e01b835260048301526024820152fd5b604490856040519163272e3f5960e21b835260048301526024820152fd5b82346105a157806003193601126105a157602061017354604051908152f35b82346105a157806003193601126105a157602061016354604051908152f35b82346105a15760203660031901126105a157610c43615a42565b60043561016e55604051f35b905034610cb4573660031901126105a157610c68615a42565b6040516379308a5560e11b6020820152610cae90610c9c81610c8e6004602483016157ac565b03601f1981018352826142f6565b61021c546001600160a01b03166152a1565b50604051f35b5080fd5b82346105a157806003193601126105a157610162546040516001600160a01b039091168152602090f35b82610cee3660046142b4565b90929160405192610d0060c0856142f6565b83526020830190815260408301923484526060810192338452608082019360018060a01b0380971685528660a0840192168252610d3b614d05565b610d43615ad0565b610d4b6159ae565b610d536158f2565b979098610d6185518a614830565b5199610d6e8b8751615199565b610d7b8a61017c54614ddb565b5050610d91610d8b88519b614844565b90614e1e565b90670de0b6b3a763ffff198101908111610efb5790610de38c610660610dc58e9f610e149d9e9f610de99761066091614957565b93610ddd670de0b6b3a7640000916106608388614957565b9f614957565b9061480d565b97610df2614cb6565b50610e09838551168a858851166101745492614e59565b97918b9a919a61480d565b9a8051808d11610edd57508b156107495761072a8986958f958f95610baa9f90610ed1610b8d9f998f936107309b8f87908f977f3d9b2786930e9c1e492d52af3cc38bd2ffe9405d82b4997053a26a8956056200908f610ec488918c808d51975116975116975193805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b0390a48486511691614d27565b51935191511692615100565b6044908d60405191630b63f1a760e01b835260048301526024820152fd5b634e487b7160e01b83526011600452602483fd5b82346105a157806003193601126105a157602061093a61580d565b82346105a157806003193601126105a157602060ff61017d54166040519015158152f35b82346105a15760203660031901126105a157600435906101b49081548310156105a1576040610f7d84846142da565b506001815491015482519182526020820152f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb57610fc0615a42565b61021c80546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457611008615a42565b6001600160601b0360a01b6097541617609755604051f35b82346105a15760603660031901126108eb576044356001600160a01b0381811692918390036108eb576040519261105860a0856142f6565b60043584526020840192602435845260408501923384526060860192835260808601918252611085614d05565b61108d615ad0565b6110956159ae565b670de0b6b3a76400006110cf6110bb610819896110c76110b36158f2565b819591614ddb565b9290809584925161576f565b8a5192614e1e565b0493841561074957611105946110e3614cb6565b506110fa83835116828587511661016f5492614e59565b999183989198614a15565b97518089106111925750928080846111848c98958a9860409e61073d9c8f9a8b88807f96956e9e47738119037532fcf68a81b25d418eaf754281e005f11fa2d33bfffb93511693511693611175865191805190602081015160406060908301519201519260405196879687614cdd565b0390a3519084845116916153c8565b511694511691511692615433565b60449089604051916354cde31360e01b835260048301526024820152fd5b82346105a157806003193601126105a157602061093a6111d66111d1614c1c565b614844565b905061016354614a15565b82346105a15760203660031901126105a157600435906101769081548310156105a15760206112108484614198565b90546040519160031b1c8152f35b905034610cb4573660031901126105a157611237615a42565b604051636dbcb03960e11b6020820152610cae90610c9c81610c8e6004602483016157ac565b8260403660031901126105a1576001600160a01b03602435818116908190036108eb5761084b60405161129160a0826142f6565b6004358152602081019034825260408101933385526060820194338652608083019182526107e5614d05565b82346105a157806003193601126105a1576112d66159ae565b604051f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb5761130a615a42565b61016180546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a15761133d615a42565b60043561017e55604051f35b905061135636600461420f565b91939261136960409692965194856142f6565b835260208301938452604083019485526060830191348352608084019033825260a085019333855260c086019360018060a01b0380931685526113aa614d05565b6113b2615ad0565b8761141f610a50610660836114198c6113e36113cc614c1c565b6108076113da845183614830565b51809451615199565b9590610a4b61140f61140385610660670de0b6b3a7640000809a51614957565b9a516101665490614957565b9761016354614a15565b92614957565b9951808b10801561152a575b61150c57506114509061143c614cb6565b508486511690858851166101715492614e59565b97919990988451808c116114ed5750869461072a8d86898f9597610baa9f9e9c61073098610b8d9f9d9b8f92858d6114e595829f5183855116907fb8b8e75e42a3102026137da20c1d52f5e60a1b25d6e77ad232404575753e3fe08d868c5116946114d68b51918051906020810151606060408301519201519260405196879687614cdd565b0390a451935191511692615334565b511691614d27565b6044908a5160405191630b63f1a760e01b835260048301526024820152fd5b6044908b6040519163f577bef560e01b835260048301526024820152fd5b508a1561142b565b82346105a157806003193601126105a157602061093a611571610660670de0b6b3a76400006114196115656111d1614c1c565b61016395919554614a15565b9384614a15565b82346105a15760203660031901126105a157611592615a42565b60043561016f55604051f35b82346105a15760203660031901126105a1576115b8615a42565b60043561016b55604051f35b90506115d136600461420f565b919094926115e260405195866142f6565b8452602084015260408301938452346060840152336080840181905260a08401526001600160a01b031660c0830152611619614d05565b611621615ad0565b6116296159ae565b6116316158f2565b93611682611656611643865188614830565b5196611650888851615199565b84614ddb565b9061166782828760208b015161576f565b6020870151670de0b6b3a76400009384916108198585614e1e565b04948515610749576116b8936116ae610a558b610a5060208d015161081988610a4b8b61016354614a15565b04988989516151f0565b51808510610bcd5750610aa590610a82614cb6565b82346105a157806003193601126105a157602060ff60ca54166040519015158152f35b82346105a1576117c26117043660046141da565b9060409593929495519561171960c0886142f6565b8652602086019283526040860194855260608601338152608087019360018060a01b0380931685528260a0890194168452611752614d05565b61175a615ad0565b611795611765614c1c565b6117806117738b5183614830565b5191610807838d51615199565b5050610660670de0b6b3a76400008451614957565b61179d614cb6565b506117b78484511682868851166106888d51610177614198565b9a9183999199614a15565b9882156107495751808a1061184a5750938089946111848c989583958960409f8d61073d9e9c517f94623cc0bdff77f15a945c5f7c85f92e30baeee629058db590ceeba3755ad3be8d8a808b51169451169461183a895191805190602081015160406060908301519201519260405196879687614cdd565b0390a45191518585511692615334565b6044908a604051916354cde31360e01b835260048301526024820152fd5b905061194c611878366004614235565b94909192936040519061188d610100836142f6565b8152602081019485526040810193845260608101928352608081019534875260a082019333855260c08301903382528984019660018060a01b03988980951689526118d6614d05565b6118de615ad0565b6118e6614cb6565b5060405195631c280ce160e01b6020880152516024870152516044860152516064850152516084840152875160a48401528185511660c4840152511660e48201528484511661010490818301528152611941610124826142f6565b8461021c54166152a1565b92838051810103948686126119c2576020850151966040860151986080606088015198605f1901126105a15750918061073089610baa99989694610b8d98966040519861199a60808b6142f6565b60808101518a5260a081015160208b015260c081015160408b01520151606089015251614a15565b8780fd5b8260403660031901126105a1576001600160a01b039060243582811691908290036108eb5761084b906040516107bb60a0826142f6565b82346105a157806003193601126105a157602061016f54604051908152f35b8260403660031901126108eb5760405190611a3860c0836142f6565b60043582526020820190602435825260408301903482526060840192338452608085019433865260a08101838152611a6e614d05565b611a76615ad0565b611a7e6159ae565b611a866158f2565b969097611a94845189614830565b5198611aa18a8651615199565b611aae8961017c54614ddb565b5050611abe610d8b87519a614844565b90670de0b6b3a763ffff198101908111611b385790610de38b610660611af28d9e610660610e149d9e9f97611b1098614957565b93611b0a670de0b6b3a7640000916106608388614957565b9e614957565b96611b19614cb6565b5060018060a01b0391610e09838551168a858851166101745492614e59565b634e487b7160e01b88526011600452602488fd5b82346105a157806003193601126105a15760206101b554431015604051908152f35b82346105a157806003193601126105a15760ca5460405160109190911c6001600160a01b03168152602090f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb57604082819281526101686020522060ff6001825492015416825191825215156020820152f35b905034610cb45790611c8191611bff366004614235565b9293611c1160409793975196876142f6565b855260208501938452604085019586526060850152608084019233845260a085019060018060a01b03809416825260c08601838152611c4e614d05565b611c56615ad0565b611cab87610a50611c95611c8a611c6b614c1c565b611c76855182614830565b519e8f809651615199565b61017c54614ddb565b92819e918851614957565b670de0b6b3a7640000938491610166549061496a565b049a51808c11611dff575091611ce58b611cdf611d179b9c9d9e9461066085611cd9611cec998c5199614e1e565b94614957565b93614957565b049061480d565b94611cf5614cb6565b50611d0c8189511687838551166101735492614e59565b969188999199614a15565b996060810151808c10611de157508a1561074957896111848d8594848f99610baa9f9d611dd591610b8d9f8f8f90918f92897f754f66f66f0afcd87e3edd11c0796fef32599efe490000fdb0f014e3ad9560fa918f9e8f80611dc6925196511696511696885192805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b0390a4519088885116916153c8565b51918585511692615334565b6044908c604051916354cde31360e01b835260048301526024820152fd5b6044908c60405191637a031da360e11b835260048301526024820152fd5b82346105a157806003193601126105a1576020611e44611e3e6111d1614c1c565b906149eb565b61017c541015604051908152f35b82346105a15760403660031901126108eb5760405190611e7360a0836142f6565b6004358252602082019060243582526040830190338252606084019033825260808501908152611ea1614d05565b611ea9615ad0565b611eb16159ae565b670de0b6b3a7640000611eea611ed6610819611ee2611ece6158f2565b819491614ddb565b81819392958d5161576f565b895192614e1e565b0480156107495761110593611efd614cb6565b5060018060a01b03916110fa83835116828587511661016f5492614e59565b82346105a157806003193601126105a157610178546040516001600160a01b039091168152602090f35b8260603660031901126108eb5760405191611f6190836142f6565b600435825260208201602435815260408301916044358352606084013481526080850133815260a086019433865260c0870192848452611f9f614d05565b611fa7615ad0565b611faf6159ae565b611fb76158f2565b9790928951611fc6908a614830565b5198898b5190611fd591615199565b611fdf9085614ddb565b8581838c5192611fee9361576f565b895191670de0b6b3a764000080936120068484614e1e565b61200f91614957565b04968715610749578c612046948f9e610a558f91610a5061203c935161081989610a4b8c61016354614a15565b049e8f90516151f0565b51808a106121155750612057614cb6565b5061207660018060a01b03938486511690858851166101725492614e59565b97919990988451808c116114ed5750869461072a85858f8f959a610baa9f9e9c9761210b610b8d9f9d998f9b846107309c819f9e829f87517ff4287b96e269f789f166db491b07456566f468352771e466ce088e98d6007a0c8b86808a5116945116946120fe8751918051906020810151606060408301519201519260405196879687614cdd565b0390a451925116916153c8565b5193511692615100565b6044908a6040519163272e3f5960e21b835260048301526024820152fd5b82346105a1576103003660031901126105a157805460ff8160081c161590818092612594575b801561257d575b156125215760ff198116600117835581612510575b5081549061218860ff8360081c16614c56565b6102a4356001600160a01b038116908190036108eb5761021c80546001600160a01b03191690911790556001600160a01b0361026435908116908190036108eb57610284356001600160a01b03811681036108eb576001916121ef60ff8660081c16614c56565b6121fe60ff8660081c16614c56565b61220d60ff8660081c16614c56565b61221c60ff8660081c16614c56565b6001600160601b0360a01b609754161760975561223e60ff8560081c16614c56565b60ca5490620100008360b01b039060101b169061ff018360b01b031916171760ca5561226f60ff8360081c16614c56565b670de0b6b3a764000060a435106124fe5761228b60e435615af1565b61229761010435615af1565b6122a361012435615af1565b6122af61014435615af1565b6122bb61016435615af1565b6122c761018435615af1565b6122d36101a435615af1565b6122df6101c435615af1565b6122eb6101e435615af1565b6123036122fe610224356102043561480d565b615af1565b6004356001600160a01b03811681036108eb5761016180546001600160a01b0319166001600160a01b0392831617905560243590811681036108eb5761016280546001600160a01b0319166001600160a01b0392831617905560443590811681036108eb5761016580546001600160a01b0319166001600160a01b0392831617905560643590811681036108eb5761017880546001600160a01b0319166001600160a01b0392831617905560843590811681036108eb576101799060018060a01b03166001600160601b0360a01b82541617905560a43561017b5560c43561017c5560e43561016d556101043561016e556101243561016f556101443561017055610164356101715561018435610172556101a435610173556101c435610174556101e435610175556102043561016b556102243561016c5561244e610244358061017e554361480d565b61017f5561017d61ffff1981541690556102c43561247160ff8460081c16614c56565b80156124fe576101b681905543016101b5556102e4356001600160a01b038116908190036108eb576124a860ff8460081c16614c56565b6101e980546001600160a01b03191690911790556124c65750604051f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a181610cae565b604051632a9ffab760e21b8152600490fd5b61ffff191661010117825582612175565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156121605750600160ff821614612160565b50600160ff821610612159565b8260603660031901126108eb576001600160a01b039060443582811691908290036108eb576040516106a0916125d860c0836142f6565b600435825260208201906024358252604083019534875260608401903382526080850196875260a08501928352610600614d05565b82346105a15760203660031901126105a157602061093a33336004356156b7565b82346105a15760203660031901126105a157602061093a600435614b46565b82346105a157806003193601126105a157602061017c54604051908152f35b82346105a157806003193601126105a157612685615ad0565b60ca54601081901c6001600160a01b031633036126f35760ff8116156126e1576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1604051f35b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b8260403660031901126108eb576040519061272160c0836142f6565b60043582526106a06020830192602435845260408101933485526060820193338552608083019433865260a0840191825261275a614d05565b612762615ad0565b61276a6159ae565b6127b46127a16127786158f2565b9190612795612788895185614830565b519361063b858b51615199565b91848a518a51906151f0565b610660670de0b6b3a76400008651614957565b926127bd614cb6565b5060018060a01b03906106958284511686848751166106888a51610176614198565b82346105a157806003193601126105a157602061093a611e3e6111d1614c1c565b82346105a157806003193601126105a1576101e9546040516001600160a01b039091168152602090f35b8261283636600461420f565b9391926040519561284790876142f6565b8552602085019283526040850152606084013481526080850133815260a0860194600160a01b60019003809116865260c0870192848452612886614d05565b61288e615ad0565b6128966159ae565b61289e6158f2565b979089516128ac908a614830565b5198898b51906128bb91615199565b6128c59082614ddb565b8281838c51926128d49361576f565b895191670de0b6b3a764000080936128ec8484614e1e565b6128f591614957565b04938415610749578c612922948f9e610a558f91610a5061203c935161081989610a4b8c61016354614a15565b6040890151808b1061294f57506120769061293b614cb6565b508486511690858851166101725492614e59565b6044908b6040519163272e3f5960e21b835260048301526024820152fd5b82346105a15760203660031901126105a1576004359061017a9081548310156105a15760206112108484614198565b82346105a15760203660031901126105a1576129b6615a42565b60043561017b55604051f35b905034610cb45790611c81916129d9366004614235565b92936129eb60409793975196876142f6565b855260208501938452604085019586526060850152336080850181815260a086019182526001600160a01b0393841660c08701908152909490611c4e614d05565b82346105a15760203660031901126105a157612a46615a42565b60043561017255604051f35b905061194c612a62366004614282565b9394906040969293965191612a79610100846142f6565b8252602082019586526040820196875260608201938452608082019634885260a083019433865260c084019160018060a01b0398898095168452848c8701991689526118d6614d05565b82346105a157806003193601126105a15760206101b654604051908152f35b82346105a15760203660031901126105a157612afc615a42565b60043561017355604051f35b82346105a157806003193601126105a157602061016654604051908152f35b82346105a157806003193601126105a157602061017454604051908152f35b82346105a15760203660031901126105a157612b60615a42565b60043561016d55604051f35b82346105a157806003193601126105a157602061016b54604051908152f35b8260603660031901126108eb576001600160a01b03604435818116908190036108eb5760405190612bbd60c0836142f6565b600435825260208201602435815260408301923484526060810192338452608082019333855260a08301918252610d3b614d05565b82346105a15760203660031901126105a157612c0c615a42565b60043561017055604051f35b82346105a157806003193601126105a157602061017b54604051908152f35b82346105a157806003193601126105a157612c50615a42565b600160ff1960ca54161760ca55604051f35b82346105a157806003193601126105a1576020612c7d6158f2565b50604051908152f35b82346105a157806003193601126105a157610161546040516001600160a01b039091168152602090f35b82346105a157806003193601126105a157610165546040516001600160a01b039091168152602090f35b82346105a1576117c2612cee36600461420f565b9092939160405194612d0160c0876142f6565b855260208501908152604085019384523360608601818152608087019182526001600160a01b0393841660a0880190815291939192611752614d05565b82346105a15760403660031901126105a1576024356001600160a01b03811681036108eb5761093a602091336004356156b7565b82346105a157806003193601126105a157602060ff60ca5460081c166040519015158152f35b82346105a157806003193601126105a157612db1615ad0565b61017f8054431061303057612dc961017e544361480d565b90557fd3c59bda47e141a8ec5a33d241b7f71b86e30d359f83a9227d912858b60404fc81604051a18061016954612dff81614a3a565b90835b818110612f6357505081612e7b575b604051916040830190835260209060408285015282518091528160608501930191855b828110612e6757867fae5116a8119d08673a0f1dfa7546b95da4bd54bb17feda7c61130ac7859152f687870388a1604051f35b835185529381019392810192600101612e34565b90612e93670de0b6b3a76400009161016b5490614957565b0490610163612ea3838254614a15565b90556101785461012f805490916001600160a01b031690600214612f1e576002825583612ed5575b5060019055612e11565b8015612f0c578480809286604051915af1612eee614701565b5015612efa5784612ecb565b6040516312171d8360e31b8152600490fd5b60405163e6c4247b60e01b8152600490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b612f6c81614b46565b612f768183615199565b8561018091612f858484614198565b90549060031b1c90828213612fa1575b50505050600101612e02565b84612fe583600197969a612fce612fd461300497612feb97670de0b6b3a764000093849161016c54614957565b04614957565b04612fdf858d614830565b5261480d565b98614198565b819391549060031b600019811b9283911b169119161790565b90556130276130138286614830565b5187848060a01b0361017954169184615100565b90858780612f95565b60405163101b685960e01b8152600490fd5b82346105a1576117c29061305736600461420f565b604051959194919361306a60c0886142f6565b8652602086019283526040860194855233606087019081526001600160a01b039182166080880190815260a0880193845293611752614d05565b82346105a15760203660031901126105a1576130be615a42565b60043561017555604051f35b82346105a157806003193601126105a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036131355760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b82346105a15760203660031901126105a157600435906101779081548310156105a15760206112108484614198565b82346105a157806003193601126105a1576131e8615a42565b60ff1960ca541660ca55604051f35b8260403660031901126105a1576001600160a01b0360043581811681036108eb5782916024359167ffffffffffffffff83116132e657366023840112156132e65782600401356132468161432e565b9261325460405194856142f6565b81845236602483870101116132e2576112d6956020836132d5946024600199018389013786010152807f000000000000000000000000000000000000000000000000000000000000000016906132ac8230141561434a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416146143ab565b6132dd615a42565b61440c565b8580fd5b505050fd5b82346105a157806003193601126105a157602061016d54604051908152f35b82346105a157806003193601126105a157610179546040516001600160a01b039091168152602090f35b82346105a157806003193601126105a157602061017e54604051908152f35b82346105a15760203660031901126105a157600435906101699081548310156105a157604061338284846142da565b50805460019091015482519182526001600160a01b03166020820152f35b82346105a15760603660031901126108eb576044356001600160a01b03818116918290036108eb57604051916133d760a0846142f6565b6004358352602083019160243583526040840191338352606085019133835260808601918252611085614d05565b82346105a157806003193601126105a157602061017054604051908152f35b82346105a157806003193601126105a157602061093a61345361346361345d61344b6158f2565b939093614844565b8181939295615260565b92614e1e565b9061496a565b82346105a157806003193601126105a15760ca5460ff8160081c16156134d457601081901c6001600160a01b031633036126f35761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1604051f35b604051637c7fd07960e01b8152600490fd5b82346105a1576134f73660046142b4565b906040519361350760a0866142f6565b8452602084019283526040840191338352606085019160018060a01b038091168352806080870192168252611085614d05565b82346105a15760203660031901126105a157613554615a42565b6004356101b655604051f35b82346105a15760203660031901126105a1576004356001600160a01b0380821682036108eb576112d6916135bf8285937f000000000000000000000000000000000000000000000000000000000000000016906132ac8230141561434a565b6135c7615a42565b6135d08261432e565b906135de60405192836142f6565b828252601f196135ed8461432e565b0136602084013761440c565b82346105a157806003193601126105a157613612615ad0565b61017d805460ff8116806136e0575b806136c6575b613632575b82604051f35b61ff0019166101001790556040517f8b77276c97a5709f0d6db52329848a254eb760ce8be80d281799f633bdb69e838282a16101655482906001600160a01b0316803b15610cb45782600481848094638456cb5960e01b83525af180156136b9576136a9575b50506136a2614a6c565b818061362c565b6136b2916142f6565b8181613698565b50604051903d90823e3d90fd5b506136d5611e3e6111d1614c1c565b61017c541015613627565b5060ff8160081c1615613621565b82346105a157806003193601126105a157602061017154604051908152f35b8260203660031901126105a1576040519061372960a0836142f6565b600435825261084b602083013481526040840193338552606081019333855260808201908152613757614d05565b61375f615ad0565b670de0b6b3a7640000613782610819613779610807614c1c565b86519291614e1e565b049561378c614cb6565b5060018060a01b0361084081835116898386511661016e5492614e59565b82346105a157806003193601126105a157602061017554604051908152f35b82346105a15760203660031901126105a1576004356001600160a01b0381168103610cb4576137f6615a42565b60ca805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055604051f35b82346105a15760203660031901126105a15761383c615a42565b60043561017c55604051f35b82346105a157806003193601126105a157602061017254604051908152f35b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613896615a42565b61017980546001600160a01b0319169091179055604051f35b82346105a157806003193601126105a157602060ff61017d5460081c166040519015158152f35b82346105a15760203660031901126105a1576138f0615a42565b60043561017455604051f35b82346105a15760203660031901126105a157600435801515809103610cb457613923615a42565b61017d9060ff80198354169116179055604051f35b82346105a157806003193601126105a157602061093a610d8b6111d1614c1c565b8260603660031901126105a1576001600160a01b03604435818116908190036139bf576040519061398b60c0836142f6565b60043582526020820160243581526040830192348452606081013381526080820193845260a0820190878252610d3b614d05565b8280fd5b82346105a157806003193601126105a157602061017f54604051908152f35b82346105a15760603660031901126105a15760405190613a0360c0836142f6565b60043582526117c2602083016024358152604084019260443584526060850191338352608086019233845260a08701928352613a3d614d05565b613a45615ad0565b613a80613a50614c1c565b613a6b613a5e8a5183614830565b5191610807838c51615199565b5050610660670de0b6b3a76400008551614957565b91613a89614cb6565b5060018060a01b03926117b78484511682868851166106888d51610177614198565b905034610cb457611c8a91613ac1366004614260565b939192613ad460409692965192836142f6565b8152602081019283526040810194855260608101938452608081019233845260a082019033825260c08301848152613b0a614d05565b613b12615ad0565b613b3d613b1d614c1c565b610a50611c95613b2e885184614830565b519c8d93611c81858b51615199565b049a51808c11611dff575091611ce58b611cdf613b9e9b9c9d9e9461066085611cd9613b6b998c5199614e1e565b94613b74614cb6565b5060018060a01b0390613b93828a511688848651166101735492614e59565b9791899a919a614a15565b9a51808c10611de157508a1561074957896111848d8594848f99610baa9f9d611dd591610b8d9f8f8f90918f92897f754f66f66f0afcd87e3edd11c0796fef32599efe490000fdb0f014e3ad9560fa918f9e8f80611dc6925196511696511696885192805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b905034610cb45790611c8191613c60366004614282565b91909394613c7460409894985197886142f6565b865260208601948552604086019687526060860152608085019333855260a086019160018060a01b0380951683528460c0880191168152611c4e614d05565b9050613cc0366004614260565b60409291925193613cd3610100866142f6565b845260208401918252604084019283526060840190815261194c608085019434865260a081019233845260c0820195338752888301958a8752613d14614d05565b613d1c615ad0565b613d24614cb6565b50604051631c280ce160e01b602082015293516024850152516044840152516064830152516084820152855160a482015282516001600160a01b0390811660c48301529451851660e482015283518516610104808301919091528152611941610124826142f6565b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613dbb615a42565b61016280546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a157613dee615a42565b60043561017155604051f35b90506060366003190112610cb457613e1560405191826142f6565b600435815260208101906024358252604081019260443584526060820190348252608083013381528460a085019333855260c0860193808552613e56614d05565b613e5e615ad0565b613ea3610a50610660856114198b613e776113cc614c1c565b9590610a4b61140f613e9785610660670de0b6b3a7640000809a51614957565b9c516101665490614957565b9851808a108015613ef9575b613edb5750613ebc614cb6565b5061145060018060a01b03938486511690858851166101715492614e59565b6044908a6040519163f577bef560e01b835260048301526024820152fd5b508915613eaf565b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613f30615a42565b61017880546001600160a01b0319169091179055604051f35b82346105a157806003193601126105a15760206101b554604051908152f35b82346105a157806003193601126105a1576097546040516001600160a01b039091168152602090f35b905061194c613fa1366004614235565b9490919360405190613fb5610100836142f6565b8152602081019384526040810194855260608101928352608081019534875260a082019333855260c083019060018060a01b03978880941683528a8501978c89526118d6614d05565b905061400b36600461420f565b91939261401e60409692965194856142f6565b835260208301938452604083019485526060830191348352608084019033825260a085019360018060a01b03809216855260c08601938085526113aa614d05565b8260603660031901126105a1576001600160a01b0360443581811692908390036105a157506106a060405161409560c0826142f6565b6004358152602081016024358152604082019434865260608301338152608084019533875260a08501928352610600614d05565b826140d53660046141da565b9195936140e860409694965195866142f6565b845260208401948552604084019586526060840190348252608085019133835260a086019460018060a01b0380931686528260c08801951685526113aa614d05565b82346105a15760203660031901126105a157600435906101679081548310156105a15760206141598484614198565b905460405160039290921b1c6001600160a01b03168152f35b82346105a15760203660031901126105a15761418c615a42565b60043561016c55604051f35b80548210156141b05760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b35906001600160a01b03821682036108eb57565b908160a09103126108eb5780359160208201359160408101359161420c6080614205606085016141c6565b93016141c6565b90565b91908260809103126108eb5781359160208101359161420c6060604084013593016141c6565b908160a09103126108eb5780359160208201359160408101359161420c6080606084013593016141c6565b91908260809103126108eb578135916020810135916060604083013592013590565b91908260c09103126108eb5781359160208101359160408201359160608101359161420c60a0614205608085016141c6565b91908260809103126108eb5781359160208101359161420c6060614205604085016141c6565b80548210156141b05760005260206000209060011b0190600090565b90601f8019910116810190811067ffffffffffffffff82111761431857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161431857601f01601f191660200190565b1561435157565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156143b257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9060ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146144465750614444915061465f565b565b6040516352d1902d60e01b81526020939192916001600160a01b038316918581600481865afa60009181614630575b506144d65760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939492937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d444016145d9576145098461465f565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600084a2845115908115916145d1575b5061454a575b50505050565b823b15614582575082600092839261457895519201905af461456a614701565b614572614731565b91614785565b5038808080614544565b60849162461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b90503861453e565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311614658575b61464781836142f6565b810103126105a15750519038614475565b503d61463d565b803b156146a6577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d1561472c573d906147128261432e565b9161472060405193846142f6565b82523d6000602084013e565b606090565b61473b602761432e565b9061474960405192836142f6565b60278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b90916060911561479457505090565b6144449193925b8051909250156147ae5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106147f4575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506147d1565b9190820180921161481a57565b634e487b7160e01b600052601160045260246000fd5b80518210156141b05760209160051b010190565b906000916000906101698054906000925b82841061487b5750505050614877670de0b6b3a76400009161016b5490614957565b0490565b90919293956148ca856148c4600193610de36148978488614830565b51610660670de0b6b3a7640000610a508b6148bd6148b5868b6148f0565b9a90926142da565b505461480d565b9861480d565b9401929190614855565b9190916000838201938412911290801582169115161761481a57565b919060009061491e8160009561491461490b82610180614198565b9390549261498a565b9160031b1c6148d4565b6000811361492d575b50509190565b61494f919450612fce92508094670de0b6b3a764000093849161016c54614957565b043880614927565b806000190482118115151661481a570290565b8115614974570490565b634e487b7160e01b600052601260045260246000fd5b906149d0906149ca6149bd6149b4670de0b6b3a76400006149ad876101696142da565b5054614957565b94610181614198565b90549060031b1c8461496a565b9261496a565b906000828203921281831281169183139015161761481a5790565b8015614a0d57610660670de0b6b3a7640000610a5061420c9461016354614a15565b505060001990565b9190820391821161481a57565b67ffffffffffffffff81116143185760051b60200190565b90614a4482614a22565b614a5160405191826142f6565b8281528092614a62601f1991614a22565b0190602036910137565b610163548015614b435761016990815491600090614a8984614a3a565b9082905b858210614af357505060005b848110614aa7575050505050565b614abf8461066085614ab98587614830565b51614957565b9061016a9182546801000000000000000081101561431857612feb8160019586614aeb94018155614198565b905501614a99565b9092614b3b600191614b0486614b46565b614b0e8787614830565b52610de3614b1c87866142da565b5054610660670de0b6b3a7640000614b348a8a614830565b5192614957565b930190614a8d565b50565b614b52906101696142da565b50600101546001600160a01b0316614b6981614b9a565b91909115614b75575090565b60249060405190637f6e4db960e01b82526004820152fd5b519081151582036108eb57565b604080516359e02dd760e01b815292918190849060049082906001600160a01b03165afa928315614c11576000918294614bd45750509190565b90809450813d8311614c0a575b614beb81836142f6565b810103126105a15750614c02602083519301614b8d565b913880614927565b503d614be1565b50513d6000823e3d90fd5b6101695490614c2a82614a3a565b9160005b818110614c39575050565b80614c45600192614b46565b614c4f8287614830565b5201614c2e565b15614c5d57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405190614cc56080836142f6565b60006060838281528260208201528260408201520152565b9260a094919796959260c0850198855260208501526040840152606083015260808201520152565b60ff61017d5460081c16614d1557565b604051631ca61d7760e01b8152600490fd5b614d8d92602092610166614d3c84825461480d565b9055614d4c61016391825461480d565b9055610165546040516340c10f1960e01b81526001600160a01b03928316600482015260248101939093529193849290911690829060009082906044820190565b03925af18015614dcf57614d9e5750565b6020813d8211614dc7575b81614db6602093836142f6565b810103126108eb57614b4390614b8d565b3d9150614da9565b6040513d6000823e3d90fd5b9190614de690614844565b919092614df383856149eb565b9080821115614e00575050565b6044925060405191637912120160e01b835260048301526024820152fd5b9061016654908115614e4a57670de0b6b3a7640000610a5061420c94610a4b6106609461016354614a15565b505050670de0b6b3a764000090565b929093916000916000918296614e6d614cb6565b966001600160a01b0391859083168061507d575b508261016154168360405193636eb1769f60e11b8552168060048501523060248501526020948585604481865afa94851561507257849561503f575b5084614f1e575b505050505086015115614eda575b505050929190565b90919250614ef2670de0b6b3a7640000928392614957565b04808552908215614f1657614f0e92049081604086015261480d565b388080614ed2565b509050614f0e565b614f2c906101625416614b9a565b92909215614ec457909192939b50848b614f6685670de0b6b3a7640000614f60614f568d8d614957565b6101755490614957565b0461496a565b81830181815295908b156150355750614f9191614f856060928d61496a565b9182910152855161480d565b809d5b10928315614fc0575b505050614fad575b808080614ec4565b8192995052806060880152963880614fa5565b909192506024604051809481936370a0823160e01b835260048301525afa90811561502a57908b918491614ff9575b5010388481614f9d565b809250858092503d8311615023575b61501281836142f6565b810103126139bf578a905138614fef565b503d615008565b6040513d85823e3d90fd5b915050809d614f94565b9094508581813d831161506b575b61505781836142f6565b8101031261506757519338614ebd565b8380fd5b503d61504d565b6040513d86823e3d90fd5b9095506020836101e95416916024604051809481936364a731e960e01b835260048301525afa80156150f55786906150c2575b6150bb915084614957565b9438614e81565b506020813d82116150ed575b816150db602093836142f6565b810103126132e2576150bb90516150b0565b3d91506150ce565b6040513d88823e3d90fd5b6151789361513f600092602095615119826101696142da565b5061512587825461480d565b905561513561016391825461480d565b9055610167614198565b90546040516340c10f1960e01b81526001600160a01b039093166004840152602483019490945290948593928492909183906044820190565b039360039190911b1c6001600160a01b03165af18015614dcf57614d9e5750565b612feb6151ec916151aa848261498a565b6151e26151b983610180614198565b6151cc8294925492838360031b1c6148d4565b919060031b600019811b9283911b169119161790565b9055610181614198565b9055565b9261093483615202969493979561584a565b81811061520d575050565b604492506040519163c39b739f60e01b835260048301526024820152fd5b9361523a93610a509295615260565b670de0b6b3a763ffff19820191821161481a57670de0b6b3a7640000916148779161496a565b90918161526d82856149eb565b11156152995761420c92611419670de0b6b3a7640000610a506152939461016354614a15565b90614a15565b505050600090565b9061420c916000806152b1614731565b93602081519101845af46152c3614701565b92606091156153275750508151156152d9575090565b3b156152e25790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b909392614444925061479b565b615362919392615346826101696142da565b50615352868254614a15565b9055615135610163918254614a15565b905460039190911b1c6001600160a01b031691823b156108eb57604051632770a7eb60e21b81526001600160a01b0390921660048301526024820152906000908290818381604481015b03925af18015614dcf576153bd5750565b6000614444916142f6565b91906101666153d8848254614a15565b90556153e8610163918254614a15565b9055610165546001600160a01b031691823b156108eb57604051632770a7eb60e21b81526001600160a01b0390921660048301526024820152906000908290818381604481016153ac565b84519294939192600091901561555b5750670de0b6b3a764000061545c61016d54865190614957565b049161016361546c84825461480d565b90556101785485516001600160a01b03969187169461548a91614a15565b61012f946002865414612f1e576002865581615534575b5050604001519194600284558261550a575b505050600190555b61012f926002845414612f1e5760028455806154db575b50505060019055565b6001600160a01b03821615612f0c5782918291604051915af16154fc614701565b5015612efa573880806154d2565b811615612f0c5760008092918192604051915af1615526614701565b5015612efa573880806154b3565b8015612f0c57848092918192604051915af161554e614701565b5015612efa5738806154a1565b610178546020860151929561558b94929360609261558391906001600160a01b031686615590565b015191615590565b6154bb565b9190918161559d57505050565b6156369160008060018060a01b03938461016154169360405195602098818a8901946323b872dd60e01b86521660248901521660448701526064860152606485526155e96084866142f6565b6155f28761432e565b9461560060405196876142f6565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af16152c3614701565b80518061564257505050565b818391810103126108eb57816156589101614b8d565b156156605750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b615717906156c3615ad0565b60405163e01dce2d60e01b602082015260248101919091526001600160a01b039283166044820152838316606482018190524760848084019190915282529261570d60a4836142f6565b61021c54166152a1565b6020818051810103126108eb57602001519161012f916002835414612f1e576002835583615749575b50506001905590565b15612f0c57600080809285604051915af1615762614701565b5015612efa573880615740565b928061345d61346392856157839695615260565b81811061578e575050565b604492506040519163a5db715d60e01b835260048301526024820152fd5b60e08101929160c09081906001600160a01b03806157c9836141c6565b1685526157d8602083016141c6565b16602085015260408101356040850152606081013560608501526080810135608085015260a081013560a08501520135910152565b61017f54804310156158245761420c904390614a15565b50600090565b906040516158396040826142f6565b602060018294805484520154910152565b6158568161017a614198565b90549060031b1c916101b49161586c81846142da565b5054926101b554431015615897575b505080821015615892576106609061420c93614957565b505090565b8293506158ab6158b693926158b1926142da565b5061582a565b6158be565b90388061587b565b602081519101805192670de0b6b3a76400009384039084821161481a576158eb610de39261487795614957565b9251614957565b6000806101699182549261590584614a3a565b9382915b858284106159345750505050811561592857906159259161496a565b91565b505061017b5460011b91565b610a5061599f859796610de361596e6159968961066089610a506159808460019d9e9f9c6159646159a59e614b46565b9889978892614830565b5261597986826148f0565b50936142da565b50610a50670de0b6b3a76400009384925461480d565b9485918c61584a565b9561480d565b94019190615909565b6101b580544310156159bd5750565b6101695460005b8181106159d75750506101b65443019055565b80807f19156e9379c7bbbce8f646ce5ee30ba860b8f954717405f3d5859a6c1a21ae606001936101b4615a0d6158ab83836142da565b90615a2b615a23615a1d85614b46565b846158be565b9384926142da565b50555160409182519182526020820152a2016159c4565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa908115614dcf57600091615a97575b5015615a8557565b604051631dd1b1b560e21b8152600490fd5b906020823d8211615ac8575b81615ab0602093836142f6565b810103126105a15750615ac290614b8d565b38615a7d565b3d9150615aa3565b60ff60ca5460081c16615adf57565b60405163783bb6c960e11b8152600490fd5b670de0b6b3a7640000106124fe5756fea26469706673582212205b6be375b46af0333a56acec51efc53808fd96f69e0a8b701ed1bbb23e8e269e64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561002b575b361561001957600080fd5b61016361002734825461480d565b9055005b600060e08135811c90816301dde6ef1461417257816301f1b6841461412a57816304856e41146140c95781630ad8c2341461405f5781630aed4f8814613ffe5781630be9482d14613f915781630c340a2414613f685781630c36d89714613f495781630d6ac46314613f015781630df12a8b14613dfa5781630e0a8fd214613dd45781630f1e5e2b14613d8c5781630f60f39614613cb3578163102fefac14613c4957816317574bc514613aab57816317df0ab8146139e25781631867e2f5146139c35781631f79da55146139595781631fb0dda0146139385781631fe6a7ad146138fc5781632069f753146138d657816323b98cde146138af57816327eab2a1146138675781632a20d57d146138485781632c43bd3b146138225781632d88af4a146137c95781632ded50f0146137aa57816331f64ec21461370d578163333431fd146136ee57816333421c38146135f95781633659cfe6146135605781633bc4ac0a1461353a5781633dbc50a9146134e65781633f4ba83a146134695781634017936a14613424578163407f0e3414613405578163471a80e3146133a05781634b746001146133535781634d977e78146133345781634e1f907a1461330a5781634f0f27ee146132eb5781634f1ef286146131f75781635210570c146131cf5781635241271c146131a057816352d1902d146130ca578163543aeb48146130a457816354a73c62146130425781635c616a7314612d985781635c975abb14612d725781635d65d04514612d3e5781635e1e892814612cda57816360009e0b14612cb0578163647846a514612c86578163662013f414612c625781636827435714612c375781636b5488df14612c185781637071346814612bf257816371820f1214612b8b5781637554fffd14612b6c5781637750ba0c14612b4657816379f9a91c14612b275781637a193c3114612b085781637a4ff1d914612ae25781637a727fe814612ac35781637ad2819c14612a525781637af5758c14612a2c5781637c287999146129c25781637cba23831461299c5781637d8e03141461296d5781637dc4e77f1461282a5781637f01c71514612800578163826fcd58146127df57816382a5792c146127055781638456cb591461266c5781638cfa42411461264d578163904aa85b1461262e5781639195c85b1461260d57816391f388d8146125a1578163979d9a88146121335781639839ee8514611f465781639853c35a14611f1c5781639abb14c914611e525781639ad6659d14611e1d5781639bdd7cce14611be85781639cabfc0014611b9b5781639fd0506d14611b6e578163a8e9ac3014611b4c578163ac4fc1a814611a1c578163aea038dc146119fd578163b3903b39146119c6578163b7aef83714611868578163bad25a21146116f0578163bb4872de146116cd578163be22b4e1146115c4578163becaca6b1461159e578163c00f538d14611578578163c039cc6914611532578163c6e06d8914611349578163c84353c914611323578163cf351c1d146112db578163d1a0faa0146112bd578163d8233ecc1461125d578163db7960721461121e578163de08160f146111e1578163de8d520a146111b0578163e401294514611020578163e4c0aaf414610fd9578163e6a683e014610f91578163e6b1627c14610f4e578163e7c2597814610f2a578163e8859a1514610f0f578163ec62967914610ce2578163f13f405414610cb8578163f26114aa14610c4f578163f280877814610c29578163f30b561414610c0a578163f375cfba14610beb578163f5319cc81461096157508063fa6e83bd14610942578063fa79589e146108f0578063fb3bfcea14610779578063fcf207d4146105a45763fda70f8b14610583575061000e565b346105a157806003193601126105a157602061016e54604051908152f35b80fd5b6106a06105b23660046142b4565b9391604093919351916105c660c0846142f6565b825260208201908152604082019434865260608301338152608084019560018060a01b0380911687528060a0860193168352610600614d05565b610608615ad0565b6106106159ae565b61066561064d61061e6158f2565b919061064161062e8a5185614830565b519361063b858c51615199565b82614ddb565b91848b518b51906151f0565b610660670de0b6b3a76400008751614957565b61496a565b9361066e614cb6565b506106958284511686848751166106888a51610176614198565b90549060031b1c92614e59565b96918299919961480d565b988a51808b1161075b575089156107495760409a61072a8594610730948d94878d8d61073d9f838e9151915116907fb1c19484081f58b25de95eb3695caea3c2167249920a6439ec0253054d343e738b868851169461071b8b5191805190602081015160406060908301519201519260405196879687614cdd565b0390a451935191511692615100565b51614a15565b9251169251169180615433565b82519182526020820152f35b60405163f3e39b5d60e01b8152600490fd5b6044908b60405191630b63f1a760e01b835260048301526024820152fd5b5060603660031901126105a1576001600160a01b03602435818116908190036108eb576044358281168091036108eb5761084b906040516107bb60a0826142f6565b600435815260208101913483526040820133815260608301958652608083019182526107e5614d05565b6107ed615ad0565b670de0b6b3a764000061081f610819610810610807614c1c565b61017b54614ddb565b87519291614e1e565b90614957565b0496610829614cb6565b5061084081835116898386511661016e5492614e59565b95918a98919861480d565b978651808a116108cd57508815610749578861073d9761072a6107309360409d8780978c828c51167f73ef11a21cabab55ca448e6e2ae4b60bda75ed8109e2496084c92dc17b8334db8985885116936108c0865191805190602081015160406060908301519201519260405196879687614cdd565b0390a35192511691614d27565b6044908a60405191630b63f1a760e01b835260048301526024820152fd5b600080fd5b50346105a15760203660031901126105a157602061093a61092c6004356109156158f2565b906109346109238484614830565b51948593614844565b95909461584a565b9061522b565b604051908152f35b50346105a157806003193601126105a157602061016c54604051908152f35b905061096e3660046141da565b9361097f60409492945196876142f6565b8552602085015260408401523460608401523360808401526001600160a01b0390811660a08401521660c08201526109b5614d05565b6109bd615ad0565b6109c56159ae565b6109cd6158f2565b9290610a1f6109f36109e0855187614830565b51956109ed878751615199565b83614ddb565b90610a0482828660208a015161576f565b6020860151670de0b6b3a76400009384916108198585614e1e565b0493841561074957610a6993610a5f610a558a610a5060208c015161081988610a4b8b61016354614a15565b614a15565b614957565b610166549061496a565b04978888516151f0565b6040830151808510610bcd5750610aa590610a82614cb6565b50608084015160c08501516101725492916001600160a01b039182169116614e59565b919390926060820151808611610bae57509181610b61610baa9594610b8d945160018060a01b0360808501511660018060a01b0360a086015116917ff4287b96e269f789f166db491b07456566f468352771e466ce088e98d6007a0c8c6020880151610b298a518b6020810151606060408301519201519260405196879687614cdd565b0390a4610b4860208401518260018060a01b03608087015116916153c8565b825160a08401516001600160a01b031691908a90615100565b610b6f866060830151614a15565b608082015160c0909201516001600160a01b03908116921680615433565b604051938493846040919493926060820195825260208201520152565b0390f35b604490845160405191630b63f1a760e01b835260048301526024820152fd5b604490856040519163272e3f5960e21b835260048301526024820152fd5b82346105a157806003193601126105a157602061017354604051908152f35b82346105a157806003193601126105a157602061016354604051908152f35b82346105a15760203660031901126105a157610c43615a42565b60043561016e55604051f35b905034610cb4573660031901126105a157610c68615a42565b6040516379308a5560e11b6020820152610cae90610c9c81610c8e6004602483016157ac565b03601f1981018352826142f6565b61021c546001600160a01b03166152a1565b50604051f35b5080fd5b82346105a157806003193601126105a157610162546040516001600160a01b039091168152602090f35b82610cee3660046142b4565b90929160405192610d0060c0856142f6565b83526020830190815260408301923484526060810192338452608082019360018060a01b0380971685528660a0840192168252610d3b614d05565b610d43615ad0565b610d4b6159ae565b610d536158f2565b979098610d6185518a614830565b5199610d6e8b8751615199565b610d7b8a61017c54614ddb565b5050610d91610d8b88519b614844565b90614e1e565b90670de0b6b3a763ffff198101908111610efb5790610de38c610660610dc58e9f610e149d9e9f610de99761066091614957565b93610ddd670de0b6b3a7640000916106608388614957565b9f614957565b9061480d565b97610df2614cb6565b50610e09838551168a858851166101745492614e59565b97918b9a919a61480d565b9a8051808d11610edd57508b156107495761072a8986958f958f95610baa9f90610ed1610b8d9f998f936107309b8f87908f977f3d9b2786930e9c1e492d52af3cc38bd2ffe9405d82b4997053a26a8956056200908f610ec488918c808d51975116975116975193805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b0390a48486511691614d27565b51935191511692615100565b6044908d60405191630b63f1a760e01b835260048301526024820152fd5b634e487b7160e01b83526011600452602483fd5b82346105a157806003193601126105a157602061093a61580d565b82346105a157806003193601126105a157602060ff61017d54166040519015158152f35b82346105a15760203660031901126105a157600435906101b49081548310156105a1576040610f7d84846142da565b506001815491015482519182526020820152f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb57610fc0615a42565b61021c80546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457611008615a42565b6001600160601b0360a01b6097541617609755604051f35b82346105a15760603660031901126108eb576044356001600160a01b0381811692918390036108eb576040519261105860a0856142f6565b60043584526020840192602435845260408501923384526060860192835260808601918252611085614d05565b61108d615ad0565b6110956159ae565b670de0b6b3a76400006110cf6110bb610819896110c76110b36158f2565b819591614ddb565b9290809584925161576f565b8a5192614e1e565b0493841561074957611105946110e3614cb6565b506110fa83835116828587511661016f5492614e59565b999183989198614a15565b97518089106111925750928080846111848c98958a9860409e61073d9c8f9a8b88807f96956e9e47738119037532fcf68a81b25d418eaf754281e005f11fa2d33bfffb93511693511693611175865191805190602081015160406060908301519201519260405196879687614cdd565b0390a3519084845116916153c8565b511694511691511692615433565b60449089604051916354cde31360e01b835260048301526024820152fd5b82346105a157806003193601126105a157602061093a6111d66111d1614c1c565b614844565b905061016354614a15565b82346105a15760203660031901126105a157600435906101769081548310156105a15760206112108484614198565b90546040519160031b1c8152f35b905034610cb4573660031901126105a157611237615a42565b604051636dbcb03960e11b6020820152610cae90610c9c81610c8e6004602483016157ac565b8260403660031901126105a1576001600160a01b03602435818116908190036108eb5761084b60405161129160a0826142f6565b6004358152602081019034825260408101933385526060820194338652608083019182526107e5614d05565b82346105a157806003193601126105a1576112d66159ae565b604051f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb5761130a615a42565b61016180546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a15761133d615a42565b60043561017e55604051f35b905061135636600461420f565b91939261136960409692965194856142f6565b835260208301938452604083019485526060830191348352608084019033825260a085019333855260c086019360018060a01b0380931685526113aa614d05565b6113b2615ad0565b8761141f610a50610660836114198c6113e36113cc614c1c565b6108076113da845183614830565b51809451615199565b9590610a4b61140f61140385610660670de0b6b3a7640000809a51614957565b9a516101665490614957565b9761016354614a15565b92614957565b9951808b10801561152a575b61150c57506114509061143c614cb6565b508486511690858851166101715492614e59565b97919990988451808c116114ed5750869461072a8d86898f9597610baa9f9e9c61073098610b8d9f9d9b8f92858d6114e595829f5183855116907fb8b8e75e42a3102026137da20c1d52f5e60a1b25d6e77ad232404575753e3fe08d868c5116946114d68b51918051906020810151606060408301519201519260405196879687614cdd565b0390a451935191511692615334565b511691614d27565b6044908a5160405191630b63f1a760e01b835260048301526024820152fd5b6044908b6040519163f577bef560e01b835260048301526024820152fd5b508a1561142b565b82346105a157806003193601126105a157602061093a611571610660670de0b6b3a76400006114196115656111d1614c1c565b61016395919554614a15565b9384614a15565b82346105a15760203660031901126105a157611592615a42565b60043561016f55604051f35b82346105a15760203660031901126105a1576115b8615a42565b60043561016b55604051f35b90506115d136600461420f565b919094926115e260405195866142f6565b8452602084015260408301938452346060840152336080840181905260a08401526001600160a01b031660c0830152611619614d05565b611621615ad0565b6116296159ae565b6116316158f2565b93611682611656611643865188614830565b5196611650888851615199565b84614ddb565b9061166782828760208b015161576f565b6020870151670de0b6b3a76400009384916108198585614e1e565b04948515610749576116b8936116ae610a558b610a5060208d015161081988610a4b8b61016354614a15565b04988989516151f0565b51808510610bcd5750610aa590610a82614cb6565b82346105a157806003193601126105a157602060ff60ca54166040519015158152f35b82346105a1576117c26117043660046141da565b9060409593929495519561171960c0886142f6565b8652602086019283526040860194855260608601338152608087019360018060a01b0380931685528260a0890194168452611752614d05565b61175a615ad0565b611795611765614c1c565b6117806117738b5183614830565b5191610807838d51615199565b5050610660670de0b6b3a76400008451614957565b61179d614cb6565b506117b78484511682868851166106888d51610177614198565b9a9183999199614a15565b9882156107495751808a1061184a5750938089946111848c989583958960409f8d61073d9e9c517f94623cc0bdff77f15a945c5f7c85f92e30baeee629058db590ceeba3755ad3be8d8a808b51169451169461183a895191805190602081015160406060908301519201519260405196879687614cdd565b0390a45191518585511692615334565b6044908a604051916354cde31360e01b835260048301526024820152fd5b905061194c611878366004614235565b94909192936040519061188d610100836142f6565b8152602081019485526040810193845260608101928352608081019534875260a082019333855260c08301903382528984019660018060a01b03988980951689526118d6614d05565b6118de615ad0565b6118e6614cb6565b5060405195631c280ce160e01b6020880152516024870152516044860152516064850152516084840152875160a48401528185511660c4840152511660e48201528484511661010490818301528152611941610124826142f6565b8461021c54166152a1565b92838051810103948686126119c2576020850151966040860151986080606088015198605f1901126105a15750918061073089610baa99989694610b8d98966040519861199a60808b6142f6565b60808101518a5260a081015160208b015260c081015160408b01520151606089015251614a15565b8780fd5b8260403660031901126105a1576001600160a01b039060243582811691908290036108eb5761084b906040516107bb60a0826142f6565b82346105a157806003193601126105a157602061016f54604051908152f35b8260403660031901126108eb5760405190611a3860c0836142f6565b60043582526020820190602435825260408301903482526060840192338452608085019433865260a08101838152611a6e614d05565b611a76615ad0565b611a7e6159ae565b611a866158f2565b969097611a94845189614830565b5198611aa18a8651615199565b611aae8961017c54614ddb565b5050611abe610d8b87519a614844565b90670de0b6b3a763ffff198101908111611b385790610de38b610660611af28d9e610660610e149d9e9f97611b1098614957565b93611b0a670de0b6b3a7640000916106608388614957565b9e614957565b96611b19614cb6565b5060018060a01b0391610e09838551168a858851166101745492614e59565b634e487b7160e01b88526011600452602488fd5b82346105a157806003193601126105a15760206101b554431015604051908152f35b82346105a157806003193601126105a15760ca5460405160109190911c6001600160a01b03168152602090f35b82346105a15760203660031901126105a1576004356001600160a01b038116908190036108eb57604082819281526101686020522060ff6001825492015416825191825215156020820152f35b905034610cb45790611c8191611bff366004614235565b9293611c1160409793975196876142f6565b855260208501938452604085019586526060850152608084019233845260a085019060018060a01b03809416825260c08601838152611c4e614d05565b611c56615ad0565b611cab87610a50611c95611c8a611c6b614c1c565b611c76855182614830565b519e8f809651615199565b61017c54614ddb565b92819e918851614957565b670de0b6b3a7640000938491610166549061496a565b049a51808c11611dff575091611ce58b611cdf611d179b9c9d9e9461066085611cd9611cec998c5199614e1e565b94614957565b93614957565b049061480d565b94611cf5614cb6565b50611d0c8189511687838551166101735492614e59565b969188999199614a15565b996060810151808c10611de157508a1561074957896111848d8594848f99610baa9f9d611dd591610b8d9f8f8f90918f92897f754f66f66f0afcd87e3edd11c0796fef32599efe490000fdb0f014e3ad9560fa918f9e8f80611dc6925196511696511696885192805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b0390a4519088885116916153c8565b51918585511692615334565b6044908c604051916354cde31360e01b835260048301526024820152fd5b6044908c60405191637a031da360e11b835260048301526024820152fd5b82346105a157806003193601126105a1576020611e44611e3e6111d1614c1c565b906149eb565b61017c541015604051908152f35b82346105a15760403660031901126108eb5760405190611e7360a0836142f6565b6004358252602082019060243582526040830190338252606084019033825260808501908152611ea1614d05565b611ea9615ad0565b611eb16159ae565b670de0b6b3a7640000611eea611ed6610819611ee2611ece6158f2565b819491614ddb565b81819392958d5161576f565b895192614e1e565b0480156107495761110593611efd614cb6565b5060018060a01b03916110fa83835116828587511661016f5492614e59565b82346105a157806003193601126105a157610178546040516001600160a01b039091168152602090f35b8260603660031901126108eb5760405191611f6190836142f6565b600435825260208201602435815260408301916044358352606084013481526080850133815260a086019433865260c0870192848452611f9f614d05565b611fa7615ad0565b611faf6159ae565b611fb76158f2565b9790928951611fc6908a614830565b5198898b5190611fd591615199565b611fdf9085614ddb565b8581838c5192611fee9361576f565b895191670de0b6b3a764000080936120068484614e1e565b61200f91614957565b04968715610749578c612046948f9e610a558f91610a5061203c935161081989610a4b8c61016354614a15565b049e8f90516151f0565b51808a106121155750612057614cb6565b5061207660018060a01b03938486511690858851166101725492614e59565b97919990988451808c116114ed5750869461072a85858f8f959a610baa9f9e9c9761210b610b8d9f9d998f9b846107309c819f9e829f87517ff4287b96e269f789f166db491b07456566f468352771e466ce088e98d6007a0c8b86808a5116945116946120fe8751918051906020810151606060408301519201519260405196879687614cdd565b0390a451925116916153c8565b5193511692615100565b6044908a6040519163272e3f5960e21b835260048301526024820152fd5b82346105a1576103003660031901126105a157805460ff8160081c161590818092612594575b801561257d575b156125215760ff198116600117835581612510575b5081549061218860ff8360081c16614c56565b6102a4356001600160a01b038116908190036108eb5761021c80546001600160a01b03191690911790556001600160a01b0361026435908116908190036108eb57610284356001600160a01b03811681036108eb576001916121ef60ff8660081c16614c56565b6121fe60ff8660081c16614c56565b61220d60ff8660081c16614c56565b61221c60ff8660081c16614c56565b6001600160601b0360a01b609754161760975561223e60ff8560081c16614c56565b60ca5490620100008360b01b039060101b169061ff018360b01b031916171760ca5561226f60ff8360081c16614c56565b670de0b6b3a764000060a435106124fe5761228b60e435615af1565b61229761010435615af1565b6122a361012435615af1565b6122af61014435615af1565b6122bb61016435615af1565b6122c761018435615af1565b6122d36101a435615af1565b6122df6101c435615af1565b6122eb6101e435615af1565b6123036122fe610224356102043561480d565b615af1565b6004356001600160a01b03811681036108eb5761016180546001600160a01b0319166001600160a01b0392831617905560243590811681036108eb5761016280546001600160a01b0319166001600160a01b0392831617905560443590811681036108eb5761016580546001600160a01b0319166001600160a01b0392831617905560643590811681036108eb5761017880546001600160a01b0319166001600160a01b0392831617905560843590811681036108eb576101799060018060a01b03166001600160601b0360a01b82541617905560a43561017b5560c43561017c5560e43561016d556101043561016e556101243561016f556101443561017055610164356101715561018435610172556101a435610173556101c435610174556101e435610175556102043561016b556102243561016c5561244e610244358061017e554361480d565b61017f5561017d61ffff1981541690556102c43561247160ff8460081c16614c56565b80156124fe576101b681905543016101b5556102e4356001600160a01b038116908190036108eb576124a860ff8460081c16614c56565b6101e980546001600160a01b03191690911790556124c65750604051f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a181610cae565b604051632a9ffab760e21b8152600490fd5b61ffff191661010117825582612175565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156121605750600160ff821614612160565b50600160ff821610612159565b8260603660031901126108eb576001600160a01b039060443582811691908290036108eb576040516106a0916125d860c0836142f6565b600435825260208201906024358252604083019534875260608401903382526080850196875260a08501928352610600614d05565b82346105a15760203660031901126105a157602061093a33336004356156b7565b82346105a15760203660031901126105a157602061093a600435614b46565b82346105a157806003193601126105a157602061017c54604051908152f35b82346105a157806003193601126105a157612685615ad0565b60ca54601081901c6001600160a01b031633036126f35760ff8116156126e1576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1604051f35b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b8260403660031901126108eb576040519061272160c0836142f6565b60043582526106a06020830192602435845260408101933485526060820193338552608083019433865260a0840191825261275a614d05565b612762615ad0565b61276a6159ae565b6127b46127a16127786158f2565b9190612795612788895185614830565b519361063b858b51615199565b91848a518a51906151f0565b610660670de0b6b3a76400008651614957565b926127bd614cb6565b5060018060a01b03906106958284511686848751166106888a51610176614198565b82346105a157806003193601126105a157602061093a611e3e6111d1614c1c565b82346105a157806003193601126105a1576101e9546040516001600160a01b039091168152602090f35b8261283636600461420f565b9391926040519561284790876142f6565b8552602085019283526040850152606084013481526080850133815260a0860194600160a01b60019003809116865260c0870192848452612886614d05565b61288e615ad0565b6128966159ae565b61289e6158f2565b979089516128ac908a614830565b5198898b51906128bb91615199565b6128c59082614ddb565b8281838c51926128d49361576f565b895191670de0b6b3a764000080936128ec8484614e1e565b6128f591614957565b04938415610749578c612922948f9e610a558f91610a5061203c935161081989610a4b8c61016354614a15565b6040890151808b1061294f57506120769061293b614cb6565b508486511690858851166101725492614e59565b6044908b6040519163272e3f5960e21b835260048301526024820152fd5b82346105a15760203660031901126105a1576004359061017a9081548310156105a15760206112108484614198565b82346105a15760203660031901126105a1576129b6615a42565b60043561017b55604051f35b905034610cb45790611c81916129d9366004614235565b92936129eb60409793975196876142f6565b855260208501938452604085019586526060850152336080850181815260a086019182526001600160a01b0393841660c08701908152909490611c4e614d05565b82346105a15760203660031901126105a157612a46615a42565b60043561017255604051f35b905061194c612a62366004614282565b9394906040969293965191612a79610100846142f6565b8252602082019586526040820196875260608201938452608082019634885260a083019433865260c084019160018060a01b0398898095168452848c8701991689526118d6614d05565b82346105a157806003193601126105a15760206101b654604051908152f35b82346105a15760203660031901126105a157612afc615a42565b60043561017355604051f35b82346105a157806003193601126105a157602061016654604051908152f35b82346105a157806003193601126105a157602061017454604051908152f35b82346105a15760203660031901126105a157612b60615a42565b60043561016d55604051f35b82346105a157806003193601126105a157602061016b54604051908152f35b8260603660031901126108eb576001600160a01b03604435818116908190036108eb5760405190612bbd60c0836142f6565b600435825260208201602435815260408301923484526060810192338452608082019333855260a08301918252610d3b614d05565b82346105a15760203660031901126105a157612c0c615a42565b60043561017055604051f35b82346105a157806003193601126105a157602061017b54604051908152f35b82346105a157806003193601126105a157612c50615a42565b600160ff1960ca54161760ca55604051f35b82346105a157806003193601126105a1576020612c7d6158f2565b50604051908152f35b82346105a157806003193601126105a157610161546040516001600160a01b039091168152602090f35b82346105a157806003193601126105a157610165546040516001600160a01b039091168152602090f35b82346105a1576117c2612cee36600461420f565b9092939160405194612d0160c0876142f6565b855260208501908152604085019384523360608601818152608087019182526001600160a01b0393841660a0880190815291939192611752614d05565b82346105a15760403660031901126105a1576024356001600160a01b03811681036108eb5761093a602091336004356156b7565b82346105a157806003193601126105a157602060ff60ca5460081c166040519015158152f35b82346105a157806003193601126105a157612db1615ad0565b61017f8054431061303057612dc961017e544361480d565b90557fd3c59bda47e141a8ec5a33d241b7f71b86e30d359f83a9227d912858b60404fc81604051a18061016954612dff81614a3a565b90835b818110612f6357505081612e7b575b604051916040830190835260209060408285015282518091528160608501930191855b828110612e6757867fae5116a8119d08673a0f1dfa7546b95da4bd54bb17feda7c61130ac7859152f687870388a1604051f35b835185529381019392810192600101612e34565b90612e93670de0b6b3a76400009161016b5490614957565b0490610163612ea3838254614a15565b90556101785461012f805490916001600160a01b031690600214612f1e576002825583612ed5575b5060019055612e11565b8015612f0c578480809286604051915af1612eee614701565b5015612efa5784612ecb565b6040516312171d8360e31b8152600490fd5b60405163e6c4247b60e01b8152600490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b612f6c81614b46565b612f768183615199565b8561018091612f858484614198565b90549060031b1c90828213612fa1575b50505050600101612e02565b84612fe583600197969a612fce612fd461300497612feb97670de0b6b3a764000093849161016c54614957565b04614957565b04612fdf858d614830565b5261480d565b98614198565b819391549060031b600019811b9283911b169119161790565b90556130276130138286614830565b5187848060a01b0361017954169184615100565b90858780612f95565b60405163101b685960e01b8152600490fd5b82346105a1576117c29061305736600461420f565b604051959194919361306a60c0886142f6565b8652602086019283526040860194855233606087019081526001600160a01b039182166080880190815260a0880193845293611752614d05565b82346105a15760203660031901126105a1576130be615a42565b60043561017555604051f35b82346105a157806003193601126105a1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036131355760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b82346105a15760203660031901126105a157600435906101779081548310156105a15760206112108484614198565b82346105a157806003193601126105a1576131e8615a42565b60ff1960ca541660ca55604051f35b8260403660031901126105a1576001600160a01b0360043581811681036108eb5782916024359167ffffffffffffffff83116132e657366023840112156132e65782600401356132468161432e565b9261325460405194856142f6565b81845236602483870101116132e2576112d6956020836132d5946024600199018389013786010152807f000000000000000000000000000000000000000000000000000000000000000016906132ac8230141561434a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416146143ab565b6132dd615a42565b61440c565b8580fd5b505050fd5b82346105a157806003193601126105a157602061016d54604051908152f35b82346105a157806003193601126105a157610179546040516001600160a01b039091168152602090f35b82346105a157806003193601126105a157602061017e54604051908152f35b82346105a15760203660031901126105a157600435906101699081548310156105a157604061338284846142da565b50805460019091015482519182526001600160a01b03166020820152f35b82346105a15760603660031901126108eb576044356001600160a01b03818116918290036108eb57604051916133d760a0846142f6565b6004358352602083019160243583526040840191338352606085019133835260808601918252611085614d05565b82346105a157806003193601126105a157602061017054604051908152f35b82346105a157806003193601126105a157602061093a61345361346361345d61344b6158f2565b939093614844565b8181939295615260565b92614e1e565b9061496a565b82346105a157806003193601126105a15760ca5460ff8160081c16156134d457601081901c6001600160a01b031633036126f35761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1604051f35b604051637c7fd07960e01b8152600490fd5b82346105a1576134f73660046142b4565b906040519361350760a0866142f6565b8452602084019283526040840191338352606085019160018060a01b038091168352806080870192168252611085614d05565b82346105a15760203660031901126105a157613554615a42565b6004356101b655604051f35b82346105a15760203660031901126105a1576004356001600160a01b0380821682036108eb576112d6916135bf8285937f000000000000000000000000000000000000000000000000000000000000000016906132ac8230141561434a565b6135c7615a42565b6135d08261432e565b906135de60405192836142f6565b828252601f196135ed8461432e565b0136602084013761440c565b82346105a157806003193601126105a157613612615ad0565b61017d805460ff8116806136e0575b806136c6575b613632575b82604051f35b61ff0019166101001790556040517f8b77276c97a5709f0d6db52329848a254eb760ce8be80d281799f633bdb69e838282a16101655482906001600160a01b0316803b15610cb45782600481848094638456cb5960e01b83525af180156136b9576136a9575b50506136a2614a6c565b818061362c565b6136b2916142f6565b8181613698565b50604051903d90823e3d90fd5b506136d5611e3e6111d1614c1c565b61017c541015613627565b5060ff8160081c1615613621565b82346105a157806003193601126105a157602061017154604051908152f35b8260203660031901126105a1576040519061372960a0836142f6565b600435825261084b602083013481526040840193338552606081019333855260808201908152613757614d05565b61375f615ad0565b670de0b6b3a7640000613782610819613779610807614c1c565b86519291614e1e565b049561378c614cb6565b5060018060a01b0361084081835116898386511661016e5492614e59565b82346105a157806003193601126105a157602061017554604051908152f35b82346105a15760203660031901126105a1576004356001600160a01b0381168103610cb4576137f6615a42565b60ca805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055604051f35b82346105a15760203660031901126105a15761383c615a42565b60043561017c55604051f35b82346105a157806003193601126105a157602061017254604051908152f35b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613896615a42565b61017980546001600160a01b0319169091179055604051f35b82346105a157806003193601126105a157602060ff61017d5460081c166040519015158152f35b82346105a15760203660031901126105a1576138f0615a42565b60043561017455604051f35b82346105a15760203660031901126105a157600435801515809103610cb457613923615a42565b61017d9060ff80198354169116179055604051f35b82346105a157806003193601126105a157602061093a610d8b6111d1614c1c565b8260603660031901126105a1576001600160a01b03604435818116908190036139bf576040519061398b60c0836142f6565b60043582526020820160243581526040830192348452606081013381526080820193845260a0820190878252610d3b614d05565b8280fd5b82346105a157806003193601126105a157602061017f54604051908152f35b82346105a15760603660031901126105a15760405190613a0360c0836142f6565b60043582526117c2602083016024358152604084019260443584526060850191338352608086019233845260a08701928352613a3d614d05565b613a45615ad0565b613a80613a50614c1c565b613a6b613a5e8a5183614830565b5191610807838c51615199565b5050610660670de0b6b3a76400008551614957565b91613a89614cb6565b5060018060a01b03926117b78484511682868851166106888d51610177614198565b905034610cb457611c8a91613ac1366004614260565b939192613ad460409692965192836142f6565b8152602081019283526040810194855260608101938452608081019233845260a082019033825260c08301848152613b0a614d05565b613b12615ad0565b613b3d613b1d614c1c565b610a50611c95613b2e885184614830565b519c8d93611c81858b51615199565b049a51808c11611dff575091611ce58b611cdf613b9e9b9c9d9e9461066085611cd9613b6b998c5199614e1e565b94613b74614cb6565b5060018060a01b0390613b93828a511688848651166101735492614e59565b9791899a919a614a15565b9a51808c10611de157508a1561074957896111848d8594848f99610baa9f9d611dd591610b8d9f8f8f90918f92897f754f66f66f0afcd87e3edd11c0796fef32599efe490000fdb0f014e3ad9560fa918f9e8f80611dc6925196511696511696885192805160208201519060606040840151930151936040519788978893909796959260c0959260e08601998652602086015260408501526060840152608083015260a08201520152565b905034610cb45790611c8191613c60366004614282565b91909394613c7460409894985197886142f6565b865260208601948552604086019687526060860152608085019333855260a086019160018060a01b0380951683528460c0880191168152611c4e614d05565b9050613cc0366004614260565b60409291925193613cd3610100866142f6565b845260208401918252604084019283526060840190815261194c608085019434865260a081019233845260c0820195338752888301958a8752613d14614d05565b613d1c615ad0565b613d24614cb6565b50604051631c280ce160e01b602082015293516024850152516044840152516064830152516084820152855160a482015282516001600160a01b0390811660c48301529451851660e482015283518516610104808301919091528152611941610124826142f6565b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613dbb615a42565b61016280546001600160a01b0319169091179055604051f35b82346105a15760203660031901126105a157613dee615a42565b60043561017155604051f35b90506060366003190112610cb457613e1560405191826142f6565b600435815260208101906024358252604081019260443584526060820190348252608083013381528460a085019333855260c0860193808552613e56614d05565b613e5e615ad0565b613ea3610a50610660856114198b613e776113cc614c1c565b9590610a4b61140f613e9785610660670de0b6b3a7640000809a51614957565b9c516101665490614957565b9851808a108015613ef9575b613edb5750613ebc614cb6565b5061145060018060a01b03938486511690858851166101715492614e59565b6044908a6040519163f577bef560e01b835260048301526024820152fd5b508915613eaf565b82346105a15760203660031901126105a1576004356001600160a01b03811690819003610cb457613f30615a42565b61017880546001600160a01b0319169091179055604051f35b82346105a157806003193601126105a15760206101b554604051908152f35b82346105a157806003193601126105a1576097546040516001600160a01b039091168152602090f35b905061194c613fa1366004614235565b9490919360405190613fb5610100836142f6565b8152602081019384526040810194855260608101928352608081019534875260a082019333855260c083019060018060a01b03978880941683528a8501978c89526118d6614d05565b905061400b36600461420f565b91939261401e60409692965194856142f6565b835260208301938452604083019485526060830191348352608084019033825260a085019360018060a01b03809216855260c08601938085526113aa614d05565b8260603660031901126105a1576001600160a01b0360443581811692908390036105a157506106a060405161409560c0826142f6565b6004358152602081016024358152604082019434865260608301338152608084019533875260a08501928352610600614d05565b826140d53660046141da565b9195936140e860409694965195866142f6565b845260208401948552604084019586526060840190348252608085019133835260a086019460018060a01b0380931686528260c08801951685526113aa614d05565b82346105a15760203660031901126105a157600435906101679081548310156105a15760206141598484614198565b905460405160039290921b1c6001600160a01b03168152f35b82346105a15760203660031901126105a15761418c615a42565b60043561016c55604051f35b80548210156141b05760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b35906001600160a01b03821682036108eb57565b908160a09103126108eb5780359160208201359160408101359161420c6080614205606085016141c6565b93016141c6565b90565b91908260809103126108eb5781359160208101359161420c6060604084013593016141c6565b908160a09103126108eb5780359160208201359160408101359161420c6080606084013593016141c6565b91908260809103126108eb578135916020810135916060604083013592013590565b91908260c09103126108eb5781359160208101359160408201359160608101359161420c60a0614205608085016141c6565b91908260809103126108eb5781359160208101359161420c6060614205604085016141c6565b80548210156141b05760005260206000209060011b0190600090565b90601f8019910116810190811067ffffffffffffffff82111761431857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161431857601f01601f191660200190565b1561435157565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b156143b257565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9060ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146144465750614444915061465f565b565b6040516352d1902d60e01b81526020939192916001600160a01b038316918581600481865afa60009181614630575b506144d65760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b939492937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d444016145d9576145098461465f565b604051917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600084a2845115908115916145d1575b5061454a575b50505050565b823b15614582575082600092839261457895519201905af461456a614701565b614572614731565b91614785565b5038808080614544565b60849162461bcd60e51b82526004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152fd5b90503861453e565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311614658575b61464781836142f6565b810103126105a15750519038614475565b503d61463d565b803b156146a6577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d1561472c573d906147128261432e565b9161472060405193846142f6565b82523d6000602084013e565b606090565b61473b602761432e565b9061474960405192836142f6565b60278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b90916060911561479457505090565b6144449193925b8051909250156147ae5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106147f4575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506147d1565b9190820180921161481a57565b634e487b7160e01b600052601160045260246000fd5b80518210156141b05760209160051b010190565b906000916000906101698054906000925b82841061487b5750505050614877670de0b6b3a76400009161016b5490614957565b0490565b90919293956148ca856148c4600193610de36148978488614830565b51610660670de0b6b3a7640000610a508b6148bd6148b5868b6148f0565b9a90926142da565b505461480d565b9861480d565b9401929190614855565b9190916000838201938412911290801582169115161761481a57565b919060009061491e8160009561491461490b82610180614198565b9390549261498a565b9160031b1c6148d4565b6000811361492d575b50509190565b61494f919450612fce92508094670de0b6b3a764000093849161016c54614957565b043880614927565b806000190482118115151661481a570290565b8115614974570490565b634e487b7160e01b600052601260045260246000fd5b906149d0906149ca6149bd6149b4670de0b6b3a76400006149ad876101696142da565b5054614957565b94610181614198565b90549060031b1c8461496a565b9261496a565b906000828203921281831281169183139015161761481a5790565b8015614a0d57610660670de0b6b3a7640000610a5061420c9461016354614a15565b505060001990565b9190820391821161481a57565b67ffffffffffffffff81116143185760051b60200190565b90614a4482614a22565b614a5160405191826142f6565b8281528092614a62601f1991614a22565b0190602036910137565b610163548015614b435761016990815491600090614a8984614a3a565b9082905b858210614af357505060005b848110614aa7575050505050565b614abf8461066085614ab98587614830565b51614957565b9061016a9182546801000000000000000081101561431857612feb8160019586614aeb94018155614198565b905501614a99565b9092614b3b600191614b0486614b46565b614b0e8787614830565b52610de3614b1c87866142da565b5054610660670de0b6b3a7640000614b348a8a614830565b5192614957565b930190614a8d565b50565b614b52906101696142da565b50600101546001600160a01b0316614b6981614b9a565b91909115614b75575090565b60249060405190637f6e4db960e01b82526004820152fd5b519081151582036108eb57565b604080516359e02dd760e01b815292918190849060049082906001600160a01b03165afa928315614c11576000918294614bd45750509190565b90809450813d8311614c0a575b614beb81836142f6565b810103126105a15750614c02602083519301614b8d565b913880614927565b503d614be1565b50513d6000823e3d90fd5b6101695490614c2a82614a3a565b9160005b818110614c39575050565b80614c45600192614b46565b614c4f8287614830565b5201614c2e565b15614c5d57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405190614cc56080836142f6565b60006060838281528260208201528260408201520152565b9260a094919796959260c0850198855260208501526040840152606083015260808201520152565b60ff61017d5460081c16614d1557565b604051631ca61d7760e01b8152600490fd5b614d8d92602092610166614d3c84825461480d565b9055614d4c61016391825461480d565b9055610165546040516340c10f1960e01b81526001600160a01b03928316600482015260248101939093529193849290911690829060009082906044820190565b03925af18015614dcf57614d9e5750565b6020813d8211614dc7575b81614db6602093836142f6565b810103126108eb57614b4390614b8d565b3d9150614da9565b6040513d6000823e3d90fd5b9190614de690614844565b919092614df383856149eb565b9080821115614e00575050565b6044925060405191637912120160e01b835260048301526024820152fd5b9061016654908115614e4a57670de0b6b3a7640000610a5061420c94610a4b6106609461016354614a15565b505050670de0b6b3a764000090565b929093916000916000918296614e6d614cb6565b966001600160a01b0391859083168061507d575b508261016154168360405193636eb1769f60e11b8552168060048501523060248501526020948585604481865afa94851561507257849561503f575b5084614f1e575b505050505086015115614eda575b505050929190565b90919250614ef2670de0b6b3a7640000928392614957565b04808552908215614f1657614f0e92049081604086015261480d565b388080614ed2565b509050614f0e565b614f2c906101625416614b9a565b92909215614ec457909192939b50848b614f6685670de0b6b3a7640000614f60614f568d8d614957565b6101755490614957565b0461496a565b81830181815295908b156150355750614f9191614f856060928d61496a565b9182910152855161480d565b809d5b10928315614fc0575b505050614fad575b808080614ec4565b8192995052806060880152963880614fa5565b909192506024604051809481936370a0823160e01b835260048301525afa90811561502a57908b918491614ff9575b5010388481614f9d565b809250858092503d8311615023575b61501281836142f6565b810103126139bf578a905138614fef565b503d615008565b6040513d85823e3d90fd5b915050809d614f94565b9094508581813d831161506b575b61505781836142f6565b8101031261506757519338614ebd565b8380fd5b503d61504d565b6040513d86823e3d90fd5b9095506020836101e95416916024604051809481936364a731e960e01b835260048301525afa80156150f55786906150c2575b6150bb915084614957565b9438614e81565b506020813d82116150ed575b816150db602093836142f6565b810103126132e2576150bb90516150b0565b3d91506150ce565b6040513d88823e3d90fd5b6151789361513f600092602095615119826101696142da565b5061512587825461480d565b905561513561016391825461480d565b9055610167614198565b90546040516340c10f1960e01b81526001600160a01b039093166004840152602483019490945290948593928492909183906044820190565b039360039190911b1c6001600160a01b03165af18015614dcf57614d9e5750565b612feb6151ec916151aa848261498a565b6151e26151b983610180614198565b6151cc8294925492838360031b1c6148d4565b919060031b600019811b9283911b169119161790565b9055610181614198565b9055565b9261093483615202969493979561584a565b81811061520d575050565b604492506040519163c39b739f60e01b835260048301526024820152fd5b9361523a93610a509295615260565b670de0b6b3a763ffff19820191821161481a57670de0b6b3a7640000916148779161496a565b90918161526d82856149eb565b11156152995761420c92611419670de0b6b3a7640000610a506152939461016354614a15565b90614a15565b505050600090565b9061420c916000806152b1614731565b93602081519101845af46152c3614701565b92606091156153275750508151156152d9575090565b3b156152e25790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b909392614444925061479b565b615362919392615346826101696142da565b50615352868254614a15565b9055615135610163918254614a15565b905460039190911b1c6001600160a01b031691823b156108eb57604051632770a7eb60e21b81526001600160a01b0390921660048301526024820152906000908290818381604481015b03925af18015614dcf576153bd5750565b6000614444916142f6565b91906101666153d8848254614a15565b90556153e8610163918254614a15565b9055610165546001600160a01b031691823b156108eb57604051632770a7eb60e21b81526001600160a01b0390921660048301526024820152906000908290818381604481016153ac565b84519294939192600091901561555b5750670de0b6b3a764000061545c61016d54865190614957565b049161016361546c84825461480d565b90556101785485516001600160a01b03969187169461548a91614a15565b61012f946002865414612f1e576002865581615534575b5050604001519194600284558261550a575b505050600190555b61012f926002845414612f1e5760028455806154db575b50505060019055565b6001600160a01b03821615612f0c5782918291604051915af16154fc614701565b5015612efa573880806154d2565b811615612f0c5760008092918192604051915af1615526614701565b5015612efa573880806154b3565b8015612f0c57848092918192604051915af161554e614701565b5015612efa5738806154a1565b610178546020860151929561558b94929360609261558391906001600160a01b031686615590565b015191615590565b6154bb565b9190918161559d57505050565b6156369160008060018060a01b03938461016154169360405195602098818a8901946323b872dd60e01b86521660248901521660448701526064860152606485526155e96084866142f6565b6155f28761432e565b9461560060405196876142f6565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af16152c3614701565b80518061564257505050565b818391810103126108eb57816156589101614b8d565b156156605750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b615717906156c3615ad0565b60405163e01dce2d60e01b602082015260248101919091526001600160a01b039283166044820152838316606482018190524760848084019190915282529261570d60a4836142f6565b61021c54166152a1565b6020818051810103126108eb57602001519161012f916002835414612f1e576002835583615749575b50506001905590565b15612f0c57600080809285604051915af1615762614701565b5015612efa573880615740565b928061345d61346392856157839695615260565b81811061578e575050565b604492506040519163a5db715d60e01b835260048301526024820152fd5b60e08101929160c09081906001600160a01b03806157c9836141c6565b1685526157d8602083016141c6565b16602085015260408101356040850152606081013560608501526080810135608085015260a081013560a08501520135910152565b61017f54804310156158245761420c904390614a15565b50600090565b906040516158396040826142f6565b602060018294805484520154910152565b6158568161017a614198565b90549060031b1c916101b49161586c81846142da565b5054926101b554431015615897575b505080821015615892576106609061420c93614957565b505090565b8293506158ab6158b693926158b1926142da565b5061582a565b6158be565b90388061587b565b602081519101805192670de0b6b3a76400009384039084821161481a576158eb610de39261487795614957565b9251614957565b6000806101699182549261590584614a3a565b9382915b858284106159345750505050811561592857906159259161496a565b91565b505061017b5460011b91565b610a5061599f859796610de361596e6159968961066089610a506159808460019d9e9f9c6159646159a59e614b46565b9889978892614830565b5261597986826148f0565b50936142da565b50610a50670de0b6b3a76400009384925461480d565b9485918c61584a565b9561480d565b94019190615909565b6101b580544310156159bd5750565b6101695460005b8181106159d75750506101b65443019055565b80807f19156e9379c7bbbce8f646ce5ee30ba860b8f954717405f3d5859a6c1a21ae606001936101b4615a0d6158ab83836142da565b90615a2b615a23615a1d85614b46565b846158be565b9384926142da565b50555160409182519182526020820152a2016159c4565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa908115614dcf57600091615a97575b5015615a8557565b604051631dd1b1b560e21b8152600490fd5b906020823d8211615ac8575b81615ab0602093836142f6565b810103126105a15750615ac290614b8d565b38615a7d565b3d9150615aa3565b60ff60ca5460081c16615adf57565b60405163783bb6c960e11b8152600490fd5b670de0b6b3a7640000106124fe5756fea26469706673582212205b6be375b46af0333a56acec51efc53808fd96f69e0a8b701ed1bbb23e8e269e64736f6c63430008100033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`  This function is implemented in MocCoreExpansion but with this contract contexttpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "calcCtargemaCA()": {
        "details": "qAC = nTP / pACtp      ctargemaCA = ∑(ctargemaTP * qAC) / ∑(qAC)",
        "returns": {
          "ctargemaCA": "[PREC]"
        }
      },
      "changeGovernor(address)": {
        "params": {
          "newGovernor_": "New governor address"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`  This function is implemented in MocCoreExpansion but with this contract contexttpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - the tpTokenAddress must exists",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "getCglb()": {
        "returns": {
          "cglob": "[PREC]"
        }
      },
      "getLeverageTC()": {
        "returns": {
          "leverageTC": "[PREC]"
        }
      },
      "getPACtp(uint256)": {
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "_0": "price [PREC]"
        }
      },
      "getPTCac()": {
        "returns": {
          "pTCac": "[PREC]"
        }
      },
      "getTCAvailableToRedeem()": {
        "details": "because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TC available to redeem. Consider it an approximation.",
        "returns": {
          "tcAvailableToRedeem": "[N]"
        }
      },
      "getTPAvailableToMint(uint256)": {
        "details": "because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TP available to mint. Consider it an approximation.",
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "tpAvailableToMint": "[N]"
        }
      },
      "getTotalACavailable()": {
        "returns": {
          "totalACavailable": "[N]"
        }
      },
      "initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))": {
        "details": "governorAddress The address that will define when a change contract is authorized      pauserAddress The address that is authorized to pause this contract      tcTokenAddress Collateral Token contract address      mocFeeFlowAddress Moc Fee Flow contract address      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address      protThrld protected state threshold [PREC]      liqThrld liquidation coverage threshold [PREC]      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]      successFee pct of the gain because Pegged Tokens devaluation that is transferred        in Collateral Asset to Moc Fee Flow during the settlement [PREC]      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation      bes number of blocks between settlements",
        "params": {
          "initializeCoreParams_": "contract initializer params"
        }
      },
      "isLiquidationReached()": {
        "returns": {
          "_0": "true if liquidation state is reached, false otherwise"
        }
      },
      "liqRedeemTP(uint256)": {
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender"
        }
      },
      "liqRedeemTPto(uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "recipient_": "address who receives the AC"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to `recipient_`"
        }
      },
      "makeStoppable()": {
        "details": "Should be called through governance"
      },
      "makeUnstoppable()": {
        "details": "Should be called through governance"
      },
      "mintTC(uint256)": {
        "details": "any extra value, not spent on TC nor fees, will be return to sender",
        "params": {
          "qTC_": "amount of Collateral Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTCViaVendor(uint256,address)": {
        "details": "any extra value, not spent on TC nor fees, will be return to sender",
        "params": {
          "qTC_": "amount of Collateral Token to mint",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTCandTP(uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qTP_": "amount of Pegged Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCandTPViaVendor(uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTP_": "amount of Pegged Token to mint",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCandTPto(uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Collateral Token and Pegged Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCandTPtoViaVendor(uint256,uint256,address,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Collateral Token and Pegged Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCto(uint256,address)": {
        "details": "any extra value, not spent on TC nor fees, will be return to sender",
        "params": {
          "qTC_": "amount of Collateral Token to mint",
          "recipient_": "address who receives the Collateral Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTCtoViaVendor(uint256,address,address)": {
        "details": "any extra value, not spent on TC nor fees, will be return to sender",
        "params": {
          "qTC_": "amount of Collateral Token to mint",
          "recipient_": "address who receives the Collateral Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTP(uint256,uint256)": {
        "details": "any extra value, not spent on TP nor fees, will be return to sender",
        "params": {
          "i_": "Pegged Token index to mint",
          "qTP_": "amount of Pegged Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTPViaVendor(uint256,uint256,address)": {
        "details": "any extra value, not spent on TP nor fees, will be return to sender",
        "params": {
          "i_": "Pegged Token index to mint",
          "qTP_": "amount of Pegged Token to mint",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTPto(uint256,uint256,address)": {
        "details": "any extra value, not spent on TP nor fees, will be return to sender",
        "params": {
          "i_": "Pegged Token index to mint",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Pegged Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "mintTPtoViaVendor(uint256,uint256,address,address)": {
        "details": "any extra value, not spent on TP nor fees, will be return to sender",
        "params": {
          "i_": "Pegged Token index to mint",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Pegged Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "pause()": {
        "details": "Should only be called by the pauser and when it is stoppable"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemTC(uint256,uint256)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTC_": "amount of Collateral Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTCViaVendor(uint256,uint256,address)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTC_": "amount of Collateral Token to redeem",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTCandTP(uint256,uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that the sender expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that the sender expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the `recipient_`",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the `recipient_`",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCto(uint256,uint256,address)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "amount of Collateral Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTCtoViaVendor(uint256,uint256,address,address)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "amount of Collateral Token to redeem",
          "recipient_": "address who receives the Collateral Asset",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTP(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTP_": "amount of Pegged Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTPViaVendor(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTP_": "amount of Pegged Token to redeem",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTPto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTP_": "amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "redeemTPtoViaVendor(uint256,uint256,uint256,address,address)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTP_": "amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead"
        }
      },
      "setAppreciationFactor(uint256)": {
        "details": "sets appreciation Factor value.",
        "params": {
          "appreciationFactor_": "pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]"
        }
      },
      "setBes(uint256)": {
        "params": {
          "bes_": "number of blocks between settlements*"
        }
      },
      "setEmaCalculationBlockSpan(uint256)": {
        "params": {
          "blockSpan_": "Defines how many blocks should pass between BMA calculations*"
        }
      },
      "setFeeRetainer(uint256)": {
        "details": "sets the fee pct to be retainer on AC fees payments as AC re-injection.",
        "params": {
          "feeRetainer_": "pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setFeeTokenAddress(address)": {
        "details": "sets Fee Token contract address",
        "params": {
          "mocFeeTokenAddress_": "Fee Token new contract address"
        }
      },
      "setFeeTokenPct(uint256)": {
        "details": "sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.",
        "params": {
          "feeTokenPct_": "pct applied on the top of the operation`s fee when using Fee Token  as fee payment method [PREC]  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setFeeTokenPriceProviderAddress(address)": {
        "details": "sets Fee Token price provider contract address",
        "params": {
          "mocFeeTokenPriceProviderAddress_": "Fee Token price provider new contract address"
        }
      },
      "setLiqEnabled(bool)": {
        "details": "enables and disables the liquidation mechanism.",
        "params": {
          "liqEnabled_": "is liquidation enabled"
        }
      },
      "setLiqThrld(uint256)": {
        "details": "sets the value of the liq threshold configuration param",
        "params": {
          "liqThrld_": "liquidation threshold"
        }
      },
      "setMintTCandTPFee(uint256)": {
        "details": "sets the fee charged when mint Collateral Token and Pegged Token in one operation.",
        "params": {
          "mintTCandTPFee_": "additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setMocAppreciationBeneficiaryAddress(address)": {
        "details": "sets Moc Appreciation Beneficiary Address",
        "params": {
          "mocAppreciationBeneficiaryAddress_": "moc Appreciation Beneficiary new address"
        }
      },
      "setMocCoreExpansion(address)": {
        "details": "sets Moc Core Expansion contract address",
        "params": {
          "mocCoreExpansion_": "moc core expansion new contract address"
        }
      },
      "setMocFeeFlowAddress(address)": {
        "details": "sets Moc Fee Flow contract address",
        "params": {
          "mocFeeFlowAddress_": "moc Fee Flow new contract address"
        }
      },
      "setPauser(address)": {
        "details": "Should be called through governance",
        "params": {
          "newPauser_": "Address of the new pauser"
        }
      },
      "setProtThrld(uint256)": {
        "details": "sets the value of the protected threshold configuration param",
        "params": {
          "protThrld_": "coverage protected state threshold [PREC]"
        }
      },
      "setRedeemTCandTPFee(uint256)": {
        "details": "sets the fee charged when redeem Collateral Token and Pegged Token in one operation.",
        "params": {
          "redeemTCandTPFee_": "additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSuccessFee(uint256)": {
        "details": "sets success Fee value.",
        "params": {
          "successFee_": "pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]"
        }
      },
      "setSwapTCforTPFee(uint256)": {
        "details": "sets the fee charged when swap Collateral Token for a Pegged Token.",
        "params": {
          "swapTCforTPFee_": "additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTCFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for Collateral Token.",
        "params": {
          "swapTPforTCFee_": "additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTPFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for another Pegged Token.",
        "params": {
          "swapTPforTPFee_": "additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTcMintFee(uint256)": {
        "details": "sets the fee charged on Token Collateral mint.",
        "params": {
          "tcMintFee_": "addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTcRedeemFee(uint256)": {
        "details": "sets the fee charged on Token Collateral redeem.",
        "params": {
          "tcRedeemFee_": "addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "swapTCforTP(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qTC_": "amount of Collateral Token to swap",
          "qTPmin_": "minimum amount of Pegged Token that the sender expects to receive"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTCforTPViaVendor(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTC_": "amount of Collateral Token to swap",
          "qTPmin_": "minimum amount of Pegged Token that the sender expects to receive",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTCforTPto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTC_": "amount of Collateral to swap",
          "qTPmin_": "minimum amount of Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the Pegged Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTC_": "amount of Collateral to swap",
          "qTPmin_": "minimum amount of Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the Pegged Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTC(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qTCmin_": "minimum amount of Collateral Token that the sender expects to receive",
          "qTP_": "amount of owned Pegged Token to swap"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTCViaVendor(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTCmin_": "minimum amount of Collateral Token that the sender expects to receive",
          "qTP_": "amount of owned Pegged Token to swap",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTCto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTCmin_": "minimum amount of Collateral Token that `recipient_` expects to receive",
          "qTP_": "amount of owned Pegged Token to swap",
          "recipient_": "address who receives the Collateral Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qTCmin_": "minimum amount of Collateral Token that `recipient_` expects to receive",
          "qTP_": "amount of owned Pegged Token to swap",
          "recipient_": "address who receives the Collateral Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTCMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTP(uint256,uint256,uint256,uint256)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that the sender expects to receive"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that the sender expects to receive",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTPto(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the target Pegged Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the target Pegged Token",
          "vendor_": "address who receives a markup"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qFeeToken": "amount of Fee Token used by sender to pay fees. 0 if qAC is used instead",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "updateEmas()": {
        "details": "All price provider prices must be available, fails if not"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "MocCACoinbase: Moc Collateral Asset Coinbase",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND LT PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B37 SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x30DD ADD MSTORE DUP2 DUP2 PUSH2 0x327F ADD MSTORE PUSH2 0x3592 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x2B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x163 PUSH2 0x27 CALLVALUE DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE STOP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP2 CALLDATALOAD DUP2 SHR SWAP1 DUP2 PUSH4 0x1DDE6EF EQ PUSH2 0x4172 JUMPI DUP2 PUSH4 0x1F1B684 EQ PUSH2 0x412A JUMPI DUP2 PUSH4 0x4856E41 EQ PUSH2 0x40C9 JUMPI DUP2 PUSH4 0xAD8C234 EQ PUSH2 0x405F JUMPI DUP2 PUSH4 0xAED4F88 EQ PUSH2 0x3FFE JUMPI DUP2 PUSH4 0xBE9482D EQ PUSH2 0x3F91 JUMPI DUP2 PUSH4 0xC340A24 EQ PUSH2 0x3F68 JUMPI DUP2 PUSH4 0xC36D897 EQ PUSH2 0x3F49 JUMPI DUP2 PUSH4 0xD6AC463 EQ PUSH2 0x3F01 JUMPI DUP2 PUSH4 0xDF12A8B EQ PUSH2 0x3DFA JUMPI DUP2 PUSH4 0xE0A8FD2 EQ PUSH2 0x3DD4 JUMPI DUP2 PUSH4 0xF1E5E2B EQ PUSH2 0x3D8C JUMPI DUP2 PUSH4 0xF60F396 EQ PUSH2 0x3CB3 JUMPI DUP2 PUSH4 0x102FEFAC EQ PUSH2 0x3C49 JUMPI DUP2 PUSH4 0x17574BC5 EQ PUSH2 0x3AAB JUMPI DUP2 PUSH4 0x17DF0AB8 EQ PUSH2 0x39E2 JUMPI DUP2 PUSH4 0x1867E2F5 EQ PUSH2 0x39C3 JUMPI DUP2 PUSH4 0x1F79DA55 EQ PUSH2 0x3959 JUMPI DUP2 PUSH4 0x1FB0DDA0 EQ PUSH2 0x3938 JUMPI DUP2 PUSH4 0x1FE6A7AD EQ PUSH2 0x38FC JUMPI DUP2 PUSH4 0x2069F753 EQ PUSH2 0x38D6 JUMPI DUP2 PUSH4 0x23B98CDE EQ PUSH2 0x38AF JUMPI DUP2 PUSH4 0x27EAB2A1 EQ PUSH2 0x3867 JUMPI DUP2 PUSH4 0x2A20D57D EQ PUSH2 0x3848 JUMPI DUP2 PUSH4 0x2C43BD3B EQ PUSH2 0x3822 JUMPI DUP2 PUSH4 0x2D88AF4A EQ PUSH2 0x37C9 JUMPI DUP2 PUSH4 0x2DED50F0 EQ PUSH2 0x37AA JUMPI DUP2 PUSH4 0x31F64EC2 EQ PUSH2 0x370D JUMPI DUP2 PUSH4 0x333431FD EQ PUSH2 0x36EE JUMPI DUP2 PUSH4 0x33421C38 EQ PUSH2 0x35F9 JUMPI DUP2 PUSH4 0x3659CFE6 EQ PUSH2 0x3560 JUMPI DUP2 PUSH4 0x3BC4AC0A EQ PUSH2 0x353A JUMPI DUP2 PUSH4 0x3DBC50A9 EQ PUSH2 0x34E6 JUMPI DUP2 PUSH4 0x3F4BA83A EQ PUSH2 0x3469 JUMPI DUP2 PUSH4 0x4017936A EQ PUSH2 0x3424 JUMPI DUP2 PUSH4 0x407F0E34 EQ PUSH2 0x3405 JUMPI DUP2 PUSH4 0x471A80E3 EQ PUSH2 0x33A0 JUMPI DUP2 PUSH4 0x4B746001 EQ PUSH2 0x3353 JUMPI DUP2 PUSH4 0x4D977E78 EQ PUSH2 0x3334 JUMPI DUP2 PUSH4 0x4E1F907A EQ PUSH2 0x330A JUMPI DUP2 PUSH4 0x4F0F27EE EQ PUSH2 0x32EB JUMPI DUP2 PUSH4 0x4F1EF286 EQ PUSH2 0x31F7 JUMPI DUP2 PUSH4 0x5210570C EQ PUSH2 0x31CF JUMPI DUP2 PUSH4 0x5241271C EQ PUSH2 0x31A0 JUMPI DUP2 PUSH4 0x52D1902D EQ PUSH2 0x30CA JUMPI DUP2 PUSH4 0x543AEB48 EQ PUSH2 0x30A4 JUMPI DUP2 PUSH4 0x54A73C62 EQ PUSH2 0x3042 JUMPI DUP2 PUSH4 0x5C616A73 EQ PUSH2 0x2D98 JUMPI DUP2 PUSH4 0x5C975ABB EQ PUSH2 0x2D72 JUMPI DUP2 PUSH4 0x5D65D045 EQ PUSH2 0x2D3E JUMPI DUP2 PUSH4 0x5E1E8928 EQ PUSH2 0x2CDA JUMPI DUP2 PUSH4 0x60009E0B EQ PUSH2 0x2CB0 JUMPI DUP2 PUSH4 0x647846A5 EQ PUSH2 0x2C86 JUMPI DUP2 PUSH4 0x662013F4 EQ PUSH2 0x2C62 JUMPI DUP2 PUSH4 0x68274357 EQ PUSH2 0x2C37 JUMPI DUP2 PUSH4 0x6B5488DF EQ PUSH2 0x2C18 JUMPI DUP2 PUSH4 0x70713468 EQ PUSH2 0x2BF2 JUMPI DUP2 PUSH4 0x71820F12 EQ PUSH2 0x2B8B JUMPI DUP2 PUSH4 0x7554FFFD EQ PUSH2 0x2B6C JUMPI DUP2 PUSH4 0x7750BA0C EQ PUSH2 0x2B46 JUMPI DUP2 PUSH4 0x79F9A91C EQ PUSH2 0x2B27 JUMPI DUP2 PUSH4 0x7A193C31 EQ PUSH2 0x2B08 JUMPI DUP2 PUSH4 0x7A4FF1D9 EQ PUSH2 0x2AE2 JUMPI DUP2 PUSH4 0x7A727FE8 EQ PUSH2 0x2AC3 JUMPI DUP2 PUSH4 0x7AD2819C EQ PUSH2 0x2A52 JUMPI DUP2 PUSH4 0x7AF5758C EQ PUSH2 0x2A2C JUMPI DUP2 PUSH4 0x7C287999 EQ PUSH2 0x29C2 JUMPI DUP2 PUSH4 0x7CBA2383 EQ PUSH2 0x299C JUMPI DUP2 PUSH4 0x7D8E0314 EQ PUSH2 0x296D JUMPI DUP2 PUSH4 0x7DC4E77F EQ PUSH2 0x282A JUMPI DUP2 PUSH4 0x7F01C715 EQ PUSH2 0x2800 JUMPI DUP2 PUSH4 0x826FCD58 EQ PUSH2 0x27DF JUMPI DUP2 PUSH4 0x82A5792C EQ PUSH2 0x2705 JUMPI DUP2 PUSH4 0x8456CB59 EQ PUSH2 0x266C JUMPI DUP2 PUSH4 0x8CFA4241 EQ PUSH2 0x264D JUMPI DUP2 PUSH4 0x904AA85B EQ PUSH2 0x262E JUMPI DUP2 PUSH4 0x9195C85B EQ PUSH2 0x260D JUMPI DUP2 PUSH4 0x91F388D8 EQ PUSH2 0x25A1 JUMPI DUP2 PUSH4 0x979D9A88 EQ PUSH2 0x2133 JUMPI DUP2 PUSH4 0x9839EE85 EQ PUSH2 0x1F46 JUMPI DUP2 PUSH4 0x9853C35A EQ PUSH2 0x1F1C JUMPI DUP2 PUSH4 0x9ABB14C9 EQ PUSH2 0x1E52 JUMPI DUP2 PUSH4 0x9AD6659D EQ PUSH2 0x1E1D JUMPI DUP2 PUSH4 0x9BDD7CCE EQ PUSH2 0x1BE8 JUMPI DUP2 PUSH4 0x9CABFC00 EQ PUSH2 0x1B9B JUMPI DUP2 PUSH4 0x9FD0506D EQ PUSH2 0x1B6E JUMPI DUP2 PUSH4 0xA8E9AC30 EQ PUSH2 0x1B4C JUMPI DUP2 PUSH4 0xAC4FC1A8 EQ PUSH2 0x1A1C JUMPI DUP2 PUSH4 0xAEA038DC EQ PUSH2 0x19FD JUMPI DUP2 PUSH4 0xB3903B39 EQ PUSH2 0x19C6 JUMPI DUP2 PUSH4 0xB7AEF837 EQ PUSH2 0x1868 JUMPI DUP2 PUSH4 0xBAD25A21 EQ PUSH2 0x16F0 JUMPI DUP2 PUSH4 0xBB4872DE EQ PUSH2 0x16CD JUMPI DUP2 PUSH4 0xBE22B4E1 EQ PUSH2 0x15C4 JUMPI DUP2 PUSH4 0xBECACA6B EQ PUSH2 0x159E JUMPI DUP2 PUSH4 0xC00F538D EQ PUSH2 0x1578 JUMPI DUP2 PUSH4 0xC039CC69 EQ PUSH2 0x1532 JUMPI DUP2 PUSH4 0xC6E06D89 EQ PUSH2 0x1349 JUMPI DUP2 PUSH4 0xC84353C9 EQ PUSH2 0x1323 JUMPI DUP2 PUSH4 0xCF351C1D EQ PUSH2 0x12DB JUMPI DUP2 PUSH4 0xD1A0FAA0 EQ PUSH2 0x12BD JUMPI DUP2 PUSH4 0xD8233ECC EQ PUSH2 0x125D JUMPI DUP2 PUSH4 0xDB796072 EQ PUSH2 0x121E JUMPI DUP2 PUSH4 0xDE08160F EQ PUSH2 0x11E1 JUMPI DUP2 PUSH4 0xDE8D520A EQ PUSH2 0x11B0 JUMPI DUP2 PUSH4 0xE4012945 EQ PUSH2 0x1020 JUMPI DUP2 PUSH4 0xE4C0AAF4 EQ PUSH2 0xFD9 JUMPI DUP2 PUSH4 0xE6A683E0 EQ PUSH2 0xF91 JUMPI DUP2 PUSH4 0xE6B1627C EQ PUSH2 0xF4E JUMPI DUP2 PUSH4 0xE7C25978 EQ PUSH2 0xF2A JUMPI DUP2 PUSH4 0xE8859A15 EQ PUSH2 0xF0F JUMPI DUP2 PUSH4 0xEC629679 EQ PUSH2 0xCE2 JUMPI DUP2 PUSH4 0xF13F4054 EQ PUSH2 0xCB8 JUMPI DUP2 PUSH4 0xF26114AA EQ PUSH2 0xC4F JUMPI DUP2 PUSH4 0xF2808778 EQ PUSH2 0xC29 JUMPI DUP2 PUSH4 0xF30B5614 EQ PUSH2 0xC0A JUMPI DUP2 PUSH4 0xF375CFBA EQ PUSH2 0xBEB JUMPI DUP2 PUSH4 0xF5319CC8 EQ PUSH2 0x961 JUMPI POP DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x942 JUMPI DUP1 PUSH4 0xFA79589E EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0xFB3BFCEA EQ PUSH2 0x779 JUMPI DUP1 PUSH4 0xFCF207D4 EQ PUSH2 0x5A4 JUMPI PUSH4 0xFDA70F8B EQ PUSH2 0x583 JUMPI POP PUSH2 0xE JUMP JUMPDEST CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH2 0x6A0 PUSH2 0x5B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP4 SWAP2 PUSH1 0x40 SWAP4 SWAP2 SWAP4 MLOAD SWAP2 PUSH2 0x5C6 PUSH1 0xC0 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0x60 DUP4 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP8 MSTORE DUP1 PUSH1 0xA0 DUP7 ADD SWAP4 AND DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x608 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x610 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x665 PUSH2 0x64D PUSH2 0x61E PUSH2 0x58F2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x641 PUSH2 0x62E DUP11 MLOAD DUP6 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x63B DUP6 DUP13 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP3 PUSH2 0x4DDB JUMP JUMPDEST SWAP2 DUP5 DUP12 MLOAD DUP12 MLOAD SWAP1 PUSH2 0x51F0 JUMP JUMPDEST PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP8 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x496A JUMP JUMPDEST SWAP4 PUSH2 0x66E PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x695 DUP3 DUP5 MLOAD AND DUP7 DUP5 DUP8 MLOAD AND PUSH2 0x688 DUP11 MLOAD PUSH2 0x176 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP7 SWAP2 DUP3 SWAP10 SWAP2 SWAP10 PUSH2 0x480D JUMP JUMPDEST SWAP9 DUP11 MLOAD DUP1 DUP12 GT PUSH2 0x75B JUMPI POP DUP10 ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 SWAP11 PUSH2 0x72A DUP6 SWAP5 PUSH2 0x730 SWAP5 DUP14 SWAP5 DUP8 DUP14 DUP14 PUSH2 0x73D SWAP16 DUP4 DUP15 SWAP2 MLOAD SWAP2 MLOAD AND SWAP1 PUSH32 0xB1C19484081F58B25DE95EB3695CAEA3C2167249920A6439EC0253054D343E73 DUP12 DUP7 DUP9 MLOAD AND SWAP5 PUSH2 0x71B DUP12 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST MLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP3 MLOAD AND SWAP3 MLOAD AND SWAP2 DUP1 PUSH2 0x5433 JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B SWAP1 PUSH1 0x40 MLOAD PUSH2 0x7BB PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x40 DUP3 ADD CALLER DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0x7E5 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x5AD0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x81F PUSH2 0x819 PUSH2 0x810 PUSH2 0x807 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x17B SLOAD PUSH2 0x4DDB JUMP JUMPDEST DUP8 MLOAD SWAP3 SWAP2 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP7 PUSH2 0x829 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x840 DUP2 DUP4 MLOAD AND DUP10 DUP4 DUP7 MLOAD AND PUSH2 0x16E SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP6 SWAP2 DUP11 SWAP9 SWAP2 SWAP9 PUSH2 0x480D JUMP JUMPDEST SWAP8 DUP7 MLOAD DUP1 DUP11 GT PUSH2 0x8CD JUMPI POP DUP9 ISZERO PUSH2 0x749 JUMPI DUP9 PUSH2 0x73D SWAP8 PUSH2 0x72A PUSH2 0x730 SWAP4 PUSH1 0x40 SWAP14 DUP8 DUP1 SWAP8 DUP13 DUP3 DUP13 MLOAD AND PUSH32 0x73EF11A21CABAB55CA448E6E2AE4B60BDA75ED8109E2496084C92DC17B8334DB DUP10 DUP6 DUP9 MLOAD AND SWAP4 PUSH2 0x8C0 DUP7 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG3 MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x92C PUSH1 0x4 CALLDATALOAD PUSH2 0x915 PUSH2 0x58F2 JUMP JUMPDEST SWAP1 PUSH2 0x934 PUSH2 0x923 DUP5 DUP5 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP5 DUP6 SWAP4 PUSH2 0x4844 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x584A JUMP JUMPDEST SWAP1 PUSH2 0x522B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0x96E CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP4 PUSH2 0x97F PUSH1 0x40 SWAP5 SWAP3 SWAP5 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE CALLVALUE PUSH1 0x60 DUP5 ADD MSTORE CALLER PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9B5 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x9BD PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x9C5 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x9CD PUSH2 0x58F2 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0xA1F PUSH2 0x9F3 PUSH2 0x9E0 DUP6 MLOAD DUP8 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP6 PUSH2 0x9ED DUP8 DUP8 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP4 PUSH2 0x4DDB JUMP JUMPDEST SWAP1 PUSH2 0xA04 DUP3 DUP3 DUP7 PUSH1 0x20 DUP11 ADD MLOAD PUSH2 0x576F JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x819 DUP6 DUP6 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI PUSH2 0xA69 SWAP4 PUSH2 0xA5F PUSH2 0xA55 DUP11 PUSH2 0xA50 PUSH1 0x20 DUP13 ADD MLOAD PUSH2 0x819 DUP9 PUSH2 0xA4B DUP12 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x166 SLOAD SWAP1 PUSH2 0x496A JUMP JUMPDEST DIV SWAP8 DUP9 DUP9 MLOAD PUSH2 0x51F0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD DUP1 DUP6 LT PUSH2 0xBCD JUMPI POP PUSH2 0xAA5 SWAP1 PUSH2 0xA82 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x172 SLOAD SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND PUSH2 0x4E59 JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0x60 DUP3 ADD MLOAD DUP1 DUP7 GT PUSH2 0xBAE JUMPI POP SWAP2 DUP2 PUSH2 0xB61 PUSH2 0xBAA SWAP6 SWAP5 PUSH2 0xB8D SWAP5 MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP7 ADD MLOAD AND SWAP2 PUSH32 0xF4287B96E269F789F166DB491B07456566F468352771E466CE088E98D6007A0C DUP13 PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0xB29 DUP11 MLOAD DUP12 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0xB48 PUSH1 0x20 DUP5 ADD MLOAD DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP8 ADD MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 DUP11 SWAP1 PUSH2 0x5100 JUMP JUMPDEST PUSH2 0xB6F DUP7 PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 AND DUP1 PUSH2 0x5433 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x44 SWAP1 DUP5 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP6 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x173 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x163 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0xC43 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16E SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0xC68 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79308A55 PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCAE SWAP1 PUSH2 0xC9C DUP2 PUSH2 0xC8E PUSH1 0x4 PUSH1 0x24 DUP4 ADD PUSH2 0x57AC JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x21C SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52A1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH2 0xCEE CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xD00 PUSH1 0xC0 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 AND DUP6 MSTORE DUP7 PUSH1 0xA0 DUP5 ADD SWAP3 AND DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0xD43 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0xD4B PUSH2 0x59AE JUMP JUMPDEST PUSH2 0xD53 PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 SWAP9 PUSH2 0xD61 DUP6 MLOAD DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP10 PUSH2 0xD6E DUP12 DUP8 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0xD7B DUP11 PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST POP POP PUSH2 0xD91 PUSH2 0xD8B DUP9 MLOAD SWAP12 PUSH2 0x4844 JUMP JUMPDEST SWAP1 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xEFB JUMPI SWAP1 PUSH2 0xDE3 DUP13 PUSH2 0x660 PUSH2 0xDC5 DUP15 SWAP16 PUSH2 0xE14 SWAP14 SWAP15 SWAP16 PUSH2 0xDE9 SWAP8 PUSH2 0x660 SWAP2 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0xDDD PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x660 DUP4 DUP9 PUSH2 0x4957 JUMP JUMPDEST SWAP16 PUSH2 0x4957 JUMP JUMPDEST SWAP1 PUSH2 0x480D JUMP JUMPDEST SWAP8 PUSH2 0xDF2 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0xE09 DUP4 DUP6 MLOAD AND DUP11 DUP6 DUP9 MLOAD AND PUSH2 0x174 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 DUP12 SWAP11 SWAP2 SWAP11 PUSH2 0x480D JUMP JUMPDEST SWAP11 DUP1 MLOAD DUP1 DUP14 GT PUSH2 0xEDD JUMPI POP DUP12 ISZERO PUSH2 0x749 JUMPI PUSH2 0x72A DUP10 DUP7 SWAP6 DUP16 SWAP6 DUP16 SWAP6 PUSH2 0xBAA SWAP16 SWAP1 PUSH2 0xED1 PUSH2 0xB8D SWAP16 SWAP10 DUP16 SWAP4 PUSH2 0x730 SWAP12 DUP16 DUP8 SWAP1 DUP16 SWAP8 PUSH32 0x3D9B2786930E9C1E492D52AF3CC38BD2FFE9405D82B4997053A26A8956056200 SWAP1 DUP16 PUSH2 0xEC4 DUP9 SWAP2 DUP13 DUP1 DUP14 MLOAD SWAP8 MLOAD AND SWAP8 MLOAD AND SWAP8 MLOAD SWAP4 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 DUP5 DUP7 MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP14 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x580D JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x17D SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x1B4 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 PUSH2 0xF7D DUP5 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0xFC0 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x21C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x1008 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP2 DUP4 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1058 PUSH1 0xA0 DUP6 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x108D PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1095 PUSH2 0x59AE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x10CF PUSH2 0x10BB PUSH2 0x819 DUP10 PUSH2 0x10C7 PUSH2 0x10B3 PUSH2 0x58F2 JUMP JUMPDEST DUP2 SWAP6 SWAP2 PUSH2 0x4DDB JUMP JUMPDEST SWAP3 SWAP1 DUP1 SWAP6 DUP5 SWAP3 MLOAD PUSH2 0x576F JUMP JUMPDEST DUP11 MLOAD SWAP3 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI PUSH2 0x1105 SWAP5 PUSH2 0x10E3 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x10FA DUP4 DUP4 MLOAD AND DUP3 DUP6 DUP8 MLOAD AND PUSH2 0x16F SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP10 SWAP2 DUP4 SWAP9 SWAP2 SWAP9 PUSH2 0x4A15 JUMP JUMPDEST SWAP8 MLOAD DUP1 DUP10 LT PUSH2 0x1192 JUMPI POP SWAP3 DUP1 DUP1 DUP5 PUSH2 0x1184 DUP13 SWAP9 SWAP6 DUP11 SWAP9 PUSH1 0x40 SWAP15 PUSH2 0x73D SWAP13 DUP16 SWAP11 DUP12 DUP9 DUP1 PUSH32 0x96956E9E47738119037532FCF68A81B25D418EAF754281E005F11FA2D33BFFFB SWAP4 MLOAD AND SWAP4 MLOAD AND SWAP4 PUSH2 0x1175 DUP7 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG3 MLOAD SWAP1 DUP5 DUP5 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD AND SWAP5 MLOAD AND SWAP2 MLOAD AND SWAP3 PUSH2 0x5433 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP10 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x11D6 PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x4844 JUMP JUMPDEST SWAP1 POP PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x176 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1237 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DBCB039 PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCAE SWAP1 PUSH2 0xC9C DUP2 PUSH2 0xC8E PUSH1 0x4 PUSH1 0x24 DUP4 ADD PUSH2 0x57AC JUMP JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B PUSH1 0x40 MLOAD PUSH2 0x1291 PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0x7E5 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x12D6 PUSH2 0x59AE JUMP JUMPDEST PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x130A PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x133D PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17E SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x1356 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH2 0x1369 PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x13B2 PUSH2 0x5AD0 JUMP JUMPDEST DUP8 PUSH2 0x141F PUSH2 0xA50 PUSH2 0x660 DUP4 PUSH2 0x1419 DUP13 PUSH2 0x13E3 PUSH2 0x13CC PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x807 PUSH2 0x13DA DUP5 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD DUP1 SWAP5 MLOAD PUSH2 0x5199 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0xA4B PUSH2 0x140F PUSH2 0x1403 DUP6 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP11 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP11 MLOAD PUSH2 0x166 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST SWAP8 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP3 PUSH2 0x4957 JUMP JUMPDEST SWAP10 MLOAD DUP1 DUP12 LT DUP1 ISZERO PUSH2 0x152A JUMPI JUMPDEST PUSH2 0x150C JUMPI POP PUSH2 0x1450 SWAP1 PUSH2 0x143C PUSH2 0x4CB6 JUMP JUMPDEST POP DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x171 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 SWAP10 SWAP1 SWAP9 DUP5 MLOAD DUP1 DUP13 GT PUSH2 0x14ED JUMPI POP DUP7 SWAP5 PUSH2 0x72A DUP14 DUP7 DUP10 DUP16 SWAP6 SWAP8 PUSH2 0xBAA SWAP16 SWAP15 SWAP13 PUSH2 0x730 SWAP9 PUSH2 0xB8D SWAP16 SWAP14 SWAP12 DUP16 SWAP3 DUP6 DUP14 PUSH2 0x14E5 SWAP6 DUP3 SWAP16 MLOAD DUP4 DUP6 MLOAD AND SWAP1 PUSH32 0xB8B8E75E42A3102026137DA20C1D52F5E60A1B25D6E77AD232404575753E3FE0 DUP14 DUP7 DUP13 MLOAD AND SWAP5 PUSH2 0x14D6 DUP12 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP11 ISZERO PUSH2 0x142B JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x1571 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1419 PUSH2 0x1565 PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x163 SWAP6 SWAP2 SWAP6 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP4 DUP5 PUSH2 0x4A15 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1592 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16F SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x15B8 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16B SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x15D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 PUSH2 0x15E2 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP4 DUP5 MSTORE CALLVALUE PUSH1 0x60 DUP5 ADD MSTORE CALLER PUSH1 0x80 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1619 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1621 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1629 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1631 PUSH2 0x58F2 JUMP JUMPDEST SWAP4 PUSH2 0x1682 PUSH2 0x1656 PUSH2 0x1643 DUP7 MLOAD DUP9 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP7 PUSH2 0x1650 DUP9 DUP9 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP5 PUSH2 0x4DDB JUMP JUMPDEST SWAP1 PUSH2 0x1667 DUP3 DUP3 DUP8 PUSH1 0x20 DUP12 ADD MLOAD PUSH2 0x576F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x819 DUP6 DUP6 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP5 DUP6 ISZERO PUSH2 0x749 JUMPI PUSH2 0x16B8 SWAP4 PUSH2 0x16AE PUSH2 0xA55 DUP12 PUSH2 0xA50 PUSH1 0x20 DUP14 ADD MLOAD PUSH2 0x819 DUP9 PUSH2 0xA4B DUP12 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DIV SWAP9 DUP10 DUP10 MLOAD PUSH2 0x51F0 JUMP JUMPDEST MLOAD DUP1 DUP6 LT PUSH2 0xBCD JUMPI POP PUSH2 0xAA5 SWAP1 PUSH2 0xA82 PUSH2 0x4CB6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 PUSH2 0x1704 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP6 SWAP4 SWAP3 SWAP5 SWAP6 MLOAD SWAP6 PUSH2 0x1719 PUSH1 0xC0 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP7 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE DUP3 PUSH1 0xA0 DUP10 ADD SWAP5 AND DUP5 MSTORE PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x175A PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1795 PUSH2 0x1765 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x1780 PUSH2 0x1773 DUP12 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x807 DUP4 DUP14 MLOAD PUSH2 0x5199 JUMP JUMPDEST POP POP PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP5 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x179D PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x17B7 DUP5 DUP5 MLOAD AND DUP3 DUP7 DUP9 MLOAD AND PUSH2 0x688 DUP14 MLOAD PUSH2 0x177 PUSH2 0x4198 JUMP JUMPDEST SWAP11 SWAP2 DUP4 SWAP10 SWAP2 SWAP10 PUSH2 0x4A15 JUMP JUMPDEST SWAP9 DUP3 ISZERO PUSH2 0x749 JUMPI MLOAD DUP1 DUP11 LT PUSH2 0x184A JUMPI POP SWAP4 DUP1 DUP10 SWAP5 PUSH2 0x1184 DUP13 SWAP9 SWAP6 DUP4 SWAP6 DUP10 PUSH1 0x40 SWAP16 DUP14 PUSH2 0x73D SWAP15 SWAP13 MLOAD PUSH32 0x94623CC0BDFF77F15A945C5F7C85F92E30BAEEE629058DB590CEEBA3755AD3BE DUP14 DUP11 DUP1 DUP12 MLOAD AND SWAP5 MLOAD AND SWAP5 PUSH2 0x183A DUP10 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP2 MLOAD DUP6 DUP6 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x1878 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x188D PUSH2 0x100 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP2 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0xA0 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 CALLER DUP3 MSTORE DUP10 DUP5 ADD SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP6 AND DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x18DE PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x18E6 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP6 PUSH4 0x1C280CE1 PUSH1 0xE0 SHL PUSH1 0x20 DUP9 ADD MSTORE MLOAD PUSH1 0x24 DUP8 ADD MSTORE MLOAD PUSH1 0x44 DUP7 ADD MSTORE MLOAD PUSH1 0x64 DUP6 ADD MSTORE MLOAD PUSH1 0x84 DUP5 ADD MSTORE DUP8 MLOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP2 DUP6 MLOAD AND PUSH1 0xC4 DUP5 ADD MSTORE MLOAD AND PUSH1 0xE4 DUP3 ADD MSTORE DUP5 DUP5 MLOAD AND PUSH2 0x104 SWAP1 DUP2 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x1941 PUSH2 0x124 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP5 PUSH2 0x21C SLOAD AND PUSH2 0x52A1 JUMP JUMPDEST SWAP3 DUP4 DUP1 MLOAD DUP2 ADD SUB SWAP5 DUP7 DUP7 SLT PUSH2 0x19C2 JUMPI PUSH1 0x20 DUP6 ADD MLOAD SWAP7 PUSH1 0x40 DUP7 ADD MLOAD SWAP9 PUSH1 0x80 PUSH1 0x60 DUP9 ADD MLOAD SWAP9 PUSH1 0x5F NOT ADD SLT PUSH2 0x5A1 JUMPI POP SWAP2 DUP1 PUSH2 0x730 DUP10 PUSH2 0xBAA SWAP10 SWAP9 SWAP7 SWAP5 PUSH2 0xB8D SWAP9 SWAP7 PUSH1 0x40 MLOAD SWAP9 PUSH2 0x199A PUSH1 0x80 DUP12 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP11 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x40 DUP12 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP10 ADD MSTORE MLOAD PUSH2 0x4A15 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B SWAP1 PUSH1 0x40 MLOAD PUSH2 0x7BB PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1A38 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP6 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 DUP2 MSTORE PUSH2 0x1A6E PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1A76 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1A7E PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1A86 PUSH2 0x58F2 JUMP JUMPDEST SWAP7 SWAP1 SWAP8 PUSH2 0x1A94 DUP5 MLOAD DUP10 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 PUSH2 0x1AA1 DUP11 DUP7 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x1AAE DUP10 PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST POP POP PUSH2 0x1ABE PUSH2 0xD8B DUP8 MLOAD SWAP11 PUSH2 0x4844 JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x1B38 JUMPI SWAP1 PUSH2 0xDE3 DUP12 PUSH2 0x660 PUSH2 0x1AF2 DUP14 SWAP15 PUSH2 0x660 PUSH2 0xE14 SWAP14 SWAP15 SWAP16 SWAP8 PUSH2 0x1B10 SWAP9 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0x1B0A PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x660 DUP4 DUP9 PUSH2 0x4957 JUMP JUMPDEST SWAP15 PUSH2 0x4957 JUMP JUMPDEST SWAP7 PUSH2 0x1B19 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xE09 DUP4 DUP6 MLOAD AND DUP11 DUP6 DUP9 MLOAD AND PUSH2 0x174 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B5 SLOAD NUMBER LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 DUP3 DUP2 SWAP3 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF PUSH1 0x1 DUP3 SLOAD SWAP3 ADD SLOAD AND DUP3 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x1BFF CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x1C11 PUSH1 0x40 SWAP8 SWAP4 SWAP8 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP6 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP5 AND DUP3 MSTORE PUSH1 0xC0 DUP7 ADD DUP4 DUP2 MSTORE PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1C56 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1CAB DUP8 PUSH2 0xA50 PUSH2 0x1C95 PUSH2 0x1C8A PUSH2 0x1C6B PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x1C76 DUP6 MLOAD DUP3 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP15 DUP16 DUP1 SWAP7 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST SWAP3 DUP2 SWAP15 SWAP2 DUP9 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x166 SLOAD SWAP1 PUSH2 0x496A JUMP JUMPDEST DIV SWAP11 MLOAD DUP1 DUP13 GT PUSH2 0x1DFF JUMPI POP SWAP2 PUSH2 0x1CE5 DUP12 PUSH2 0x1CDF PUSH2 0x1D17 SWAP12 SWAP13 SWAP14 SWAP15 SWAP5 PUSH2 0x660 DUP6 PUSH2 0x1CD9 PUSH2 0x1CEC SWAP10 DUP13 MLOAD SWAP10 PUSH2 0x4E1E JUMP JUMPDEST SWAP5 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 PUSH2 0x480D JUMP JUMPDEST SWAP5 PUSH2 0x1CF5 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x1D0C DUP2 DUP10 MLOAD AND DUP8 DUP4 DUP6 MLOAD AND PUSH2 0x173 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP7 SWAP2 DUP9 SWAP10 SWAP2 SWAP10 PUSH2 0x4A15 JUMP JUMPDEST SWAP10 PUSH1 0x60 DUP2 ADD MLOAD DUP1 DUP13 LT PUSH2 0x1DE1 JUMPI POP DUP11 ISZERO PUSH2 0x749 JUMPI DUP10 PUSH2 0x1184 DUP14 DUP6 SWAP5 DUP5 DUP16 SWAP10 PUSH2 0xBAA SWAP16 SWAP14 PUSH2 0x1DD5 SWAP2 PUSH2 0xB8D SWAP16 DUP16 DUP16 SWAP1 SWAP2 DUP16 SWAP3 DUP10 PUSH32 0x754F66F66F0AFCD87E3EDD11C0796FEF32599EFE490000FDB0F014E3AD9560FA SWAP2 DUP16 SWAP15 DUP16 DUP1 PUSH2 0x1DC6 SWAP3 MLOAD SWAP7 MLOAD AND SWAP7 MLOAD AND SWAP7 DUP9 MLOAD SWAP3 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP1 DUP9 DUP9 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD SWAP2 DUP6 DUP6 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1E44 PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST SWAP1 PUSH2 0x49EB JUMP JUMPDEST PUSH2 0x17C SLOAD LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1E73 PUSH1 0xA0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x1EA1 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1EA9 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1EB1 PUSH2 0x59AE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1EEA PUSH2 0x1ED6 PUSH2 0x819 PUSH2 0x1EE2 PUSH2 0x1ECE PUSH2 0x58F2 JUMP JUMPDEST DUP2 SWAP5 SWAP2 PUSH2 0x4DDB JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP6 DUP14 MLOAD PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP3 PUSH2 0x4E1E JUMP JUMPDEST DIV DUP1 ISZERO PUSH2 0x749 JUMPI PUSH2 0x1105 SWAP4 PUSH2 0x1EFD PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x10FA DUP4 DUP4 MLOAD AND DUP3 DUP6 DUP8 MLOAD AND PUSH2 0x16F SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x178 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1F61 SWAP1 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 MSTORE PUSH1 0x60 DUP5 ADD CALLVALUE DUP2 MSTORE PUSH1 0x80 DUP6 ADD CALLER DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xC0 DUP8 ADD SWAP3 DUP5 DUP5 MSTORE PUSH2 0x1F9F PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1FA7 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1FAF PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1FB7 PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 SWAP3 DUP10 MLOAD PUSH2 0x1FC6 SWAP1 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 DUP10 DUP12 MLOAD SWAP1 PUSH2 0x1FD5 SWAP2 PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x1FDF SWAP1 DUP6 PUSH2 0x4DDB JUMP JUMPDEST DUP6 DUP2 DUP4 DUP13 MLOAD SWAP3 PUSH2 0x1FEE SWAP4 PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP4 PUSH2 0x2006 DUP5 DUP5 PUSH2 0x4E1E JUMP JUMPDEST PUSH2 0x200F SWAP2 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP7 DUP8 ISZERO PUSH2 0x749 JUMPI DUP13 PUSH2 0x2046 SWAP5 DUP16 SWAP15 PUSH2 0xA55 DUP16 SWAP2 PUSH2 0xA50 PUSH2 0x203C SWAP4 MLOAD PUSH2 0x819 DUP10 PUSH2 0xA4B DUP13 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DIV SWAP15 DUP16 SWAP1 MLOAD PUSH2 0x51F0 JUMP JUMPDEST MLOAD DUP1 DUP11 LT PUSH2 0x2115 JUMPI POP PUSH2 0x2057 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x2076 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x172 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 SWAP10 SWAP1 SWAP9 DUP5 MLOAD DUP1 DUP13 GT PUSH2 0x14ED JUMPI POP DUP7 SWAP5 PUSH2 0x72A DUP6 DUP6 DUP16 DUP16 SWAP6 SWAP11 PUSH2 0xBAA SWAP16 SWAP15 SWAP13 SWAP8 PUSH2 0x210B PUSH2 0xB8D SWAP16 SWAP14 SWAP10 DUP16 SWAP12 DUP5 PUSH2 0x730 SWAP13 DUP2 SWAP16 SWAP15 DUP3 SWAP16 DUP8 MLOAD PUSH32 0xF4287B96E269F789F166DB491B07456566F468352771E466CE088E98D6007A0C DUP12 DUP7 DUP1 DUP11 MLOAD AND SWAP5 MLOAD AND SWAP5 PUSH2 0x20FE DUP8 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD SWAP4 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x300 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO SWAP1 DUP2 DUP1 SWAP3 PUSH2 0x2594 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x257D JUMPI JUMPDEST ISZERO PUSH2 0x2521 JUMPI PUSH1 0xFF NOT DUP2 AND PUSH1 0x1 OR DUP4 SSTORE DUP2 PUSH2 0x2510 JUMPI JUMPDEST POP DUP2 SLOAD SWAP1 PUSH2 0x2188 PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x2A4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x21C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x264 CALLDATALOAD SWAP1 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x284 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH1 0x1 SWAP2 PUSH2 0x21EF PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x21FE PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x220D PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x221C PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH2 0x223E PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 PUSH3 0x10000 DUP4 PUSH1 0xB0 SHL SUB SWAP1 PUSH1 0x10 SHL AND SWAP1 PUSH2 0xFF01 DUP4 PUSH1 0xB0 SHL SUB NOT AND OR OR PUSH1 0xCA SSTORE PUSH2 0x226F PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xA4 CALLDATALOAD LT PUSH2 0x24FE JUMPI PUSH2 0x228B PUSH1 0xE4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x2297 PUSH2 0x104 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22A3 PUSH2 0x124 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22AF PUSH2 0x144 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22BB PUSH2 0x164 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22C7 PUSH2 0x184 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22D3 PUSH2 0x1A4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22DF PUSH2 0x1C4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22EB PUSH2 0x1E4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x2303 PUSH2 0x22FE PUSH2 0x224 CALLDATALOAD PUSH2 0x204 CALLDATALOAD PUSH2 0x480D JUMP JUMPDEST PUSH2 0x5AF1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x165 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x178 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x179 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x17B SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x17C SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x16D SSTORE PUSH2 0x104 CALLDATALOAD PUSH2 0x16E SSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x16F SSTORE PUSH2 0x144 CALLDATALOAD PUSH2 0x170 SSTORE PUSH2 0x164 CALLDATALOAD PUSH2 0x171 SSTORE PUSH2 0x184 CALLDATALOAD PUSH2 0x172 SSTORE PUSH2 0x1A4 CALLDATALOAD PUSH2 0x173 SSTORE PUSH2 0x1C4 CALLDATALOAD PUSH2 0x174 SSTORE PUSH2 0x1E4 CALLDATALOAD PUSH2 0x175 SSTORE PUSH2 0x204 CALLDATALOAD PUSH2 0x16B SSTORE PUSH2 0x224 CALLDATALOAD PUSH2 0x16C SSTORE PUSH2 0x244E PUSH2 0x244 CALLDATALOAD DUP1 PUSH2 0x17E SSTORE NUMBER PUSH2 0x480D JUMP JUMPDEST PUSH2 0x17F SSTORE PUSH2 0x17D PUSH2 0xFFFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x2C4 CALLDATALOAD PUSH2 0x2471 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24FE JUMPI PUSH2 0x1B6 DUP2 SWAP1 SSTORE NUMBER ADD PUSH2 0x1B5 SSTORE PUSH2 0x2E4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x24A8 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x1E9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x24C6 JUMPI POP PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH2 0xFF00 NOT AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP2 PUSH2 0xCAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP3 SSTORE DUP3 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2160 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x2160 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x2159 JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH2 0x6A0 SWAP2 PUSH2 0x25D8 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP7 DUP8 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A CALLER CALLER PUSH1 0x4 CALLDATALOAD PUSH2 0x56B7 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH1 0x4 CALLDATALOAD PUSH2 0x4B46 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2685 PUSH2 0x5AD0 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x26F3 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x26E1 JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2721 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x6A0 PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 CALLVALUE DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x80 DUP4 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xA0 DUP5 ADD SWAP2 DUP3 MSTORE PUSH2 0x275A PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x2762 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x276A PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x27B4 PUSH2 0x27A1 PUSH2 0x2778 PUSH2 0x58F2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2795 PUSH2 0x2788 DUP10 MLOAD DUP6 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x63B DUP6 DUP12 MLOAD PUSH2 0x5199 JUMP JUMPDEST SWAP2 DUP5 DUP11 MLOAD DUP11 MLOAD SWAP1 PUSH2 0x51F0 JUMP JUMPDEST PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP7 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP3 PUSH2 0x27BD PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x695 DUP3 DUP5 MLOAD AND DUP7 DUP5 DUP8 MLOAD AND PUSH2 0x688 DUP11 MLOAD PUSH2 0x176 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1E9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH2 0x2836 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP4 SWAP2 SWAP3 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2847 SWAP1 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLVALUE DUP2 MSTORE PUSH1 0x80 DUP6 ADD CALLER DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 SWAP1 SUB DUP1 SWAP2 AND DUP7 MSTORE PUSH1 0xC0 DUP8 ADD SWAP3 DUP5 DUP5 MSTORE PUSH2 0x2886 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x288E PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x2896 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x289E PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 DUP10 MLOAD PUSH2 0x28AC SWAP1 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 DUP10 DUP12 MLOAD SWAP1 PUSH2 0x28BB SWAP2 PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x28C5 SWAP1 DUP3 PUSH2 0x4DDB JUMP JUMPDEST DUP3 DUP2 DUP4 DUP13 MLOAD SWAP3 PUSH2 0x28D4 SWAP4 PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP4 PUSH2 0x28EC DUP5 DUP5 PUSH2 0x4E1E JUMP JUMPDEST PUSH2 0x28F5 SWAP2 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI DUP13 PUSH2 0x2922 SWAP5 DUP16 SWAP15 PUSH2 0xA55 DUP16 SWAP2 PUSH2 0xA50 PUSH2 0x203C SWAP4 MLOAD PUSH2 0x819 DUP10 PUSH2 0xA4B DUP13 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD DUP1 DUP12 LT PUSH2 0x294F JUMPI POP PUSH2 0x2076 SWAP1 PUSH2 0x293B PUSH2 0x4CB6 JUMP JUMPDEST POP DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x172 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x17A SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x29B6 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17B SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x29D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x29EB PUSH1 0x40 SWAP8 SWAP4 SWAP8 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP6 ADD MSTORE CALLER PUSH1 0x80 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0xC0 DUP8 ADD SWAP1 DUP2 MSTORE SWAP1 SWAP5 SWAP1 PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2A46 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x172 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x2A62 CALLDATASIZE PUSH1 0x4 PUSH2 0x4282 JUMP JUMPDEST SWAP4 SWAP5 SWAP1 PUSH1 0x40 SWAP7 SWAP3 SWAP4 SWAP7 MLOAD SWAP2 PUSH2 0x2A79 PUSH2 0x100 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP6 DUP7 MSTORE PUSH1 0x40 DUP3 ADD SWAP7 DUP8 MSTORE PUSH1 0x60 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP7 CALLVALUE DUP9 MSTORE PUSH1 0xA0 DUP4 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP6 AND DUP5 MSTORE DUP5 DUP13 DUP8 ADD SWAP10 AND DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2AFC PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x173 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x166 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x174 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2B60 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16D SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2BBD PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xA0 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2C0C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x170 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2C50 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x2C7D PUSH2 0x58F2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x165 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 PUSH2 0x2CEE CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x2D01 PUSH1 0xC0 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP6 ADD SWAP4 DUP5 MSTORE CALLER PUSH1 0x60 DUP7 ADD DUP2 DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0xA0 DUP9 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP4 SWAP2 SWAP3 PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x93A PUSH1 0x20 SWAP2 CALLER PUSH1 0x4 CALLDATALOAD PUSH2 0x56B7 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2DB1 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x17F DUP1 SLOAD NUMBER LT PUSH2 0x3030 JUMPI PUSH2 0x2DC9 PUSH2 0x17E SLOAD NUMBER PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH32 0xD3C59BDA47E141A8EC5A33D241B7F71B86E30D359F83A9227D912858B60404FC DUP2 PUSH1 0x40 MLOAD LOG1 DUP1 PUSH2 0x169 SLOAD PUSH2 0x2DFF DUP2 PUSH2 0x4A3A JUMP JUMPDEST SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT PUSH2 0x2F63 JUMPI POP POP DUP2 PUSH2 0x2E7B JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD SWAP1 DUP4 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x40 DUP3 DUP6 ADD MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x60 DUP6 ADD SWAP4 ADD SWAP2 DUP6 JUMPDEST DUP3 DUP2 LT PUSH2 0x2E67 JUMPI DUP7 PUSH32 0xAE5116A8119D08673A0F1DFA7546B95DA4BD54BB17FEDA7C61130AC7859152F6 DUP8 DUP8 SUB DUP9 LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2E34 JUMP JUMPDEST SWAP1 PUSH2 0x2E93 PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x16B SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 PUSH2 0x163 PUSH2 0x2EA3 DUP4 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x178 SLOAD PUSH2 0x12F DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x2 EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP3 SSTORE DUP4 PUSH2 0x2ED5 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 SSTORE PUSH2 0x2E11 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F0C JUMPI DUP5 DUP1 DUP1 SWAP3 DUP7 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x2EEE PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI DUP5 PUSH2 0x2ECB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x2F6C DUP2 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x2F76 DUP2 DUP4 PUSH2 0x5199 JUMP JUMPDEST DUP6 PUSH2 0x180 SWAP2 PUSH2 0x2F85 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 DUP3 DUP3 SGT PUSH2 0x2FA1 JUMPI JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x2E02 JUMP JUMPDEST DUP5 PUSH2 0x2FE5 DUP4 PUSH1 0x1 SWAP8 SWAP7 SWAP11 PUSH2 0x2FCE PUSH2 0x2FD4 PUSH2 0x3004 SWAP8 PUSH2 0x2FEB SWAP8 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x16C SLOAD PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x2FDF DUP6 DUP14 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0x480D JUMP JUMPDEST SWAP9 PUSH2 0x4198 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3027 PUSH2 0x3013 DUP3 DUP7 PUSH2 0x4830 JUMP JUMPDEST MLOAD DUP8 DUP5 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x179 SLOAD AND SWAP2 DUP5 PUSH2 0x5100 JUMP JUMPDEST SWAP1 DUP6 DUP8 DUP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x101B6859 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 SWAP1 PUSH2 0x3057 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 SWAP2 SWAP5 SWAP2 SWAP4 PUSH2 0x306A PUSH1 0xC0 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE CALLER PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 DUP9 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP9 ADD SWAP4 DUP5 MSTORE SWAP4 PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x30BE PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x175 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x3135 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x177 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x31E8 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND PUSH1 0xCA SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI DUP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x32E6 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x32E6 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x3246 DUP2 PUSH2 0x432E JUMP JUMPDEST SWAP3 PUSH2 0x3254 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP8 ADD ADD GT PUSH2 0x32E2 JUMPI PUSH2 0x12D6 SWAP6 PUSH1 0x20 DUP4 PUSH2 0x32D5 SWAP5 PUSH1 0x24 PUSH1 0x1 SWAP10 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x32AC DUP3 ADDRESS EQ ISZERO PUSH2 0x434A JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x43AB JUMP JUMPDEST PUSH2 0x32DD PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x440C JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x179 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x169 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 PUSH2 0x3382 DUP5 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x33D7 PUSH1 0xA0 DUP5 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x170 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x3453 PUSH2 0x3463 PUSH2 0x345D PUSH2 0x344B PUSH2 0x58F2 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 PUSH2 0x4844 JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP6 PUSH2 0x5260 JUMP JUMPDEST SWAP3 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH2 0x496A JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x34D4 JUMPI PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x26F3 JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x34F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x3507 PUSH1 0xA0 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 MSTORE DUP1 PUSH1 0x80 DUP8 ADD SWAP3 AND DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3554 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x1B6 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x8EB JUMPI PUSH2 0x12D6 SWAP2 PUSH2 0x35BF DUP3 DUP6 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x32AC DUP3 ADDRESS EQ ISZERO PUSH2 0x434A JUMP JUMPDEST PUSH2 0x35C7 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x35D0 DUP3 PUSH2 0x432E JUMP JUMPDEST SWAP1 PUSH2 0x35DE PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x35ED DUP5 PUSH2 0x432E JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x440C JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3612 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x17D DUP1 SLOAD PUSH1 0xFF DUP2 AND DUP1 PUSH2 0x36E0 JUMPI JUMPDEST DUP1 PUSH2 0x36C6 JUMPI JUMPDEST PUSH2 0x3632 JUMPI JUMPDEST DUP3 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 DUP3 DUP3 LOG1 PUSH2 0x165 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0xCB4 JUMPI DUP3 PUSH1 0x4 DUP2 DUP5 DUP1 SWAP5 PUSH4 0x8456CB59 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x36B9 JUMPI PUSH2 0x36A9 JUMPI JUMPDEST POP POP PUSH2 0x36A2 PUSH2 0x4A6C JUMP JUMPDEST DUP2 DUP1 PUSH2 0x362C JUMP JUMPDEST PUSH2 0x36B2 SWAP2 PUSH2 0x42F6 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3698 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x36D5 PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x17C SLOAD LT ISZERO PUSH2 0x3627 JUMP JUMPDEST POP PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x3621 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x171 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3729 PUSH1 0xA0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x84B PUSH1 0x20 DUP4 ADD CALLVALUE DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE PUSH2 0x3757 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x375F PUSH2 0x5AD0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x3782 PUSH2 0x819 PUSH2 0x3779 PUSH2 0x807 PUSH2 0x4C1C JUMP JUMPDEST DUP7 MLOAD SWAP3 SWAP2 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP6 PUSH2 0x378C PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x840 DUP2 DUP4 MLOAD AND DUP10 DUP4 DUP7 MLOAD AND PUSH2 0x16E SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x175 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xCB4 JUMPI PUSH2 0x37F6 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x383C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17C SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x172 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3896 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x179 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x17D SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x38F0 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x174 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3923 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x17D SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0xD8B PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x39BF JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x398B PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 DUP8 DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A03 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x17C2 PUSH1 0x20 DUP4 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 DUP4 MSTORE PUSH2 0x3A3D PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3A45 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3A80 PUSH2 0x3A50 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x3A6B PUSH2 0x3A5E DUP11 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x807 DUP4 DUP13 MLOAD PUSH2 0x5199 JUMP JUMPDEST POP POP PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP6 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP2 PUSH2 0x3A89 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0x17B7 DUP5 DUP5 MLOAD AND DUP3 DUP7 DUP9 MLOAD AND PUSH2 0x688 DUP14 MLOAD PUSH2 0x177 PUSH2 0x4198 JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI PUSH2 0x1C8A SWAP2 PUSH2 0x3AC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4260 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 PUSH2 0x3AD4 PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x80 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 DUP2 MSTORE PUSH2 0x3B0A PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3B12 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3B3D PUSH2 0x3B1D PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0xA50 PUSH2 0x1C95 PUSH2 0x3B2E DUP9 MLOAD DUP5 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP13 DUP14 SWAP4 PUSH2 0x1C81 DUP6 DUP12 MLOAD PUSH2 0x5199 JUMP JUMPDEST DIV SWAP11 MLOAD DUP1 DUP13 GT PUSH2 0x1DFF JUMPI POP SWAP2 PUSH2 0x1CE5 DUP12 PUSH2 0x1CDF PUSH2 0x3B9E SWAP12 SWAP13 SWAP14 SWAP15 SWAP5 PUSH2 0x660 DUP6 PUSH2 0x1CD9 PUSH2 0x3B6B SWAP10 DUP13 MLOAD SWAP10 PUSH2 0x4E1E JUMP JUMPDEST SWAP5 PUSH2 0x3B74 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x3B93 DUP3 DUP11 MLOAD AND DUP9 DUP5 DUP7 MLOAD AND PUSH2 0x173 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 DUP10 SWAP11 SWAP2 SWAP11 PUSH2 0x4A15 JUMP JUMPDEST SWAP11 MLOAD DUP1 DUP13 LT PUSH2 0x1DE1 JUMPI POP DUP11 ISZERO PUSH2 0x749 JUMPI DUP10 PUSH2 0x1184 DUP14 DUP6 SWAP5 DUP5 DUP16 SWAP10 PUSH2 0xBAA SWAP16 SWAP14 PUSH2 0x1DD5 SWAP2 PUSH2 0xB8D SWAP16 DUP16 DUP16 SWAP1 SWAP2 DUP16 SWAP3 DUP10 PUSH32 0x754F66F66F0AFCD87E3EDD11C0796FEF32599EFE490000FDB0F014E3AD9560FA SWAP2 DUP16 SWAP15 DUP16 DUP1 PUSH2 0x1DC6 SWAP3 MLOAD SWAP7 MLOAD AND SWAP7 MLOAD AND SWAP7 DUP9 MLOAD SWAP3 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x3C60 CALLDATASIZE PUSH1 0x4 PUSH2 0x4282 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 SWAP5 PUSH2 0x3C74 PUSH1 0x40 SWAP9 SWAP5 SWAP9 MLOAD SWAP8 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP7 DUP8 MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND DUP4 MSTORE DUP5 PUSH1 0xC0 DUP9 ADD SWAP2 AND DUP2 MSTORE PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4260 JUMP JUMPDEST PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP4 PUSH2 0x3CD3 PUSH2 0x100 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x194C PUSH1 0x80 DUP6 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xC0 DUP3 ADD SWAP6 CALLER DUP8 MSTORE DUP9 DUP4 ADD SWAP6 DUP11 DUP8 MSTORE PUSH2 0x3D14 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3D1C PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3D24 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1C280CE1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP4 MLOAD PUSH1 0x24 DUP6 ADD MSTORE MLOAD PUSH1 0x44 DUP5 ADD MSTORE MLOAD PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x84 DUP3 ADD MSTORE DUP6 MLOAD PUSH1 0xA4 DUP3 ADD MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xC4 DUP4 ADD MSTORE SWAP5 MLOAD DUP6 AND PUSH1 0xE4 DUP3 ADD MSTORE DUP4 MLOAD DUP6 AND PUSH2 0x104 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MSTORE PUSH2 0x1941 PUSH2 0x124 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3DBB PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3DEE PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x171 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xCB4 JUMPI PUSH2 0x3E15 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP2 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x80 DUP4 ADD CALLER DUP2 MSTORE DUP5 PUSH1 0xA0 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE PUSH2 0x3E56 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3E5E PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3EA3 PUSH2 0xA50 PUSH2 0x660 DUP6 PUSH2 0x1419 DUP12 PUSH2 0x3E77 PUSH2 0x13CC PUSH2 0x4C1C JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0xA4B PUSH2 0x140F PUSH2 0x3E97 DUP6 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP11 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP13 MLOAD PUSH2 0x166 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST SWAP9 MLOAD DUP1 DUP11 LT DUP1 ISZERO PUSH2 0x3EF9 JUMPI JUMPDEST PUSH2 0x3EDB JUMPI POP PUSH2 0x3EBC PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x1450 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x171 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP10 ISZERO PUSH2 0x3EAF JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3F30 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x178 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x3FA1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP4 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3FB5 PUSH2 0x100 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP2 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0xA0 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 DUP1 SWAP5 AND DUP4 MSTORE DUP11 DUP6 ADD SWAP8 DUP13 DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x400B CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH2 0x401E PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x5A1 JUMPI POP PUSH2 0x6A0 PUSH1 0x40 MLOAD PUSH2 0x4095 PUSH1 0xC0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0x60 DUP4 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP6 CALLER DUP8 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST DUP3 PUSH2 0x40D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP2 SWAP6 SWAP4 PUSH2 0x40E8 PUSH1 0x40 SWAP7 SWAP5 SWAP7 MLOAD SWAP6 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP5 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP7 MSTORE DUP3 PUSH1 0xC0 DUP9 ADD SWAP6 AND DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x167 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x4159 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x418C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16C SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x8EB JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP1 CALLDATALOAD SWAP2 PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x80 PUSH2 0x4205 PUSH1 0x60 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x60 PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP1 CALLDATALOAD SWAP2 PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x80 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0xA0 PUSH2 0x4205 PUSH1 0x80 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x60 PUSH2 0x4205 PUSH1 0x40 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4318 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4318 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4351 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x43B2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x4446 JUMPI POP PUSH2 0x4444 SWAP2 POP PUSH2 0x465F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x4630 JUMPI JUMPDEST POP PUSH2 0x44D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP5 SWAP3 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x45D9 JUMPI PUSH2 0x4509 DUP5 PUSH2 0x465F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP5 LOG2 DUP5 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x45D1 JUMPI JUMPDEST POP PUSH2 0x454A JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x4582 JUMPI POP DUP3 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH2 0x4578 SWAP6 MLOAD SWAP3 ADD SWAP1 GAS DELEGATECALL PUSH2 0x456A PUSH2 0x4701 JUMP JUMPDEST PUSH2 0x4572 PUSH2 0x4731 JUMP JUMPDEST SWAP2 PUSH2 0x4785 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x84 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0x453E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4658 JUMPI JUMPDEST PUSH2 0x4647 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x4475 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x463D JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x46A6 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x472C JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4712 DUP3 PUSH2 0x432E JUMP JUMPDEST SWAP2 PUSH2 0x4720 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x473B PUSH1 0x27 PUSH2 0x432E JUMP JUMPDEST SWAP1 PUSH2 0x4749 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x27 DUP3 MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP4 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 SWAP2 ISZERO PUSH2 0x4794 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x4444 SWAP2 SWAP4 SWAP3 JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x47AE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x47F4 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x47D1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x481A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x169 DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x487B JUMPI POP POP POP POP PUSH2 0x4877 PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x16B SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0x48CA DUP6 PUSH2 0x48C4 PUSH1 0x1 SWAP4 PUSH2 0xDE3 PUSH2 0x4897 DUP5 DUP9 PUSH2 0x4830 JUMP JUMPDEST MLOAD PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 DUP12 PUSH2 0x48BD PUSH2 0x48B5 DUP7 DUP12 PUSH2 0x48F0 JUMP JUMPDEST SWAP11 SWAP1 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP9 PUSH2 0x480D JUMP JUMPDEST SWAP5 ADD SWAP3 SWAP2 SWAP1 PUSH2 0x4855 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x481A JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x491E DUP2 PUSH1 0x0 SWAP6 PUSH2 0x4914 PUSH2 0x490B DUP3 PUSH2 0x180 PUSH2 0x4198 JUMP JUMPDEST SWAP4 SWAP1 SLOAD SWAP3 PUSH2 0x498A JUMP JUMPDEST SWAP2 PUSH1 0x3 SHL SHR PUSH2 0x48D4 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT PUSH2 0x492D JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x494F SWAP2 SWAP5 POP PUSH2 0x2FCE SWAP3 POP DUP1 SWAP5 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x16C SLOAD PUSH2 0x4957 JUMP JUMPDEST DIV CODESIZE DUP1 PUSH2 0x4927 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x481A JUMPI MUL SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x4974 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x49D0 SWAP1 PUSH2 0x49CA PUSH2 0x49BD PUSH2 0x49B4 PUSH8 0xDE0B6B3A7640000 PUSH2 0x49AD DUP8 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP5 PUSH2 0x181 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP5 PUSH2 0x496A JUMP JUMPDEST SWAP3 PUSH2 0x496A JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 DUP3 SUB SWAP3 SLT DUP2 DUP4 SLT DUP2 AND SWAP2 DUP4 SGT SWAP1 ISZERO AND OR PUSH2 0x481A JUMPI SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4A0D JUMPI PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x420C SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x481A JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4318 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4A44 DUP3 PUSH2 0x4A22 JUMP JUMPDEST PUSH2 0x4A51 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x4A62 PUSH1 0x1F NOT SWAP2 PUSH2 0x4A22 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0x163 SLOAD DUP1 ISZERO PUSH2 0x4B43 JUMPI PUSH2 0x169 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x4A89 DUP5 PUSH2 0x4A3A JUMP JUMPDEST SWAP1 DUP3 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH2 0x4AF3 JUMPI POP POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x4AA7 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4ABF DUP5 PUSH2 0x660 DUP6 PUSH2 0x4AB9 DUP6 DUP8 PUSH2 0x4830 JUMP JUMPDEST MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP1 PUSH2 0x16A SWAP2 DUP3 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x4318 JUMPI PUSH2 0x2FEB DUP2 PUSH1 0x1 SWAP6 DUP7 PUSH2 0x4AEB SWAP5 ADD DUP2 SSTORE PUSH2 0x4198 JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x4A99 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x4B3B PUSH1 0x1 SWAP2 PUSH2 0x4B04 DUP7 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x4B0E DUP8 DUP8 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0xDE3 PUSH2 0x4B1C DUP8 DUP7 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4B34 DUP11 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP3 PUSH2 0x4957 JUMP JUMPDEST SWAP4 ADD SWAP1 PUSH2 0x4A8D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x4B52 SWAP1 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B69 DUP2 PUSH2 0x4B9A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x4B75 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x7F6E4DB9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x8EB JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4C11 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP5 PUSH2 0x4BD4 JUMPI POP POP SWAP2 SWAP1 JUMP JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4C0A JUMPI JUMPDEST PUSH2 0x4BEB DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP PUSH2 0x4C02 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x4B8D JUMP JUMPDEST SWAP2 CODESIZE DUP1 PUSH2 0x4927 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4BE1 JUMP JUMPDEST POP MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x169 SLOAD SWAP1 PUSH2 0x4C2A DUP3 PUSH2 0x4A3A JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x4C39 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x4C45 PUSH1 0x1 SWAP3 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x4C4F DUP3 DUP8 PUSH2 0x4830 JUMP JUMPDEST MSTORE ADD PUSH2 0x4C2E JUMP JUMPDEST ISZERO PUSH2 0x4C5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x4CC5 PUSH1 0x80 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP3 PUSH1 0xA0 SWAP5 SWAP2 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 DUP6 ADD SWAP9 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0xFF PUSH2 0x17D SLOAD PUSH1 0x8 SHR AND PUSH2 0x4D15 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1CA61D77 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x4D8D SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x166 PUSH2 0x4D3C DUP5 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x4D4C PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x165 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP4 DUP5 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x4D9E JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x4DC7 JUMPI JUMPDEST DUP2 PUSH2 0x4DB6 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI PUSH2 0x4B43 SWAP1 PUSH2 0x4B8D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x4DE6 SWAP1 PUSH2 0x4844 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH2 0x4DF3 DUP4 DUP6 PUSH2 0x49EB JUMP JUMPDEST SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4E00 JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x79121201 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x166 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x4E4A JUMPI PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x420C SWAP5 PUSH2 0xA4B PUSH2 0x660 SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST POP POP POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP7 PUSH2 0x4E6D PUSH2 0x4CB6 JUMP JUMPDEST SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP6 SWAP1 DUP4 AND DUP1 PUSH2 0x507D JUMPI JUMPDEST POP DUP3 PUSH2 0x161 SLOAD AND DUP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP6 MSTORE AND DUP1 PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 SWAP5 DUP6 DUP6 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x5072 JUMPI DUP5 SWAP6 PUSH2 0x503F JUMPI JUMPDEST POP DUP5 PUSH2 0x4F1E JUMPI JUMPDEST POP POP POP POP POP DUP7 ADD MLOAD ISZERO PUSH2 0x4EDA JUMPI JUMPDEST POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH2 0x4EF2 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x4957 JUMP JUMPDEST DIV DUP1 DUP6 MSTORE SWAP1 DUP3 ISZERO PUSH2 0x4F16 JUMPI PUSH2 0x4F0E SWAP3 DIV SWAP1 DUP2 PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x480D JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x4ED2 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x4F0E JUMP JUMPDEST PUSH2 0x4F2C SWAP1 PUSH2 0x162 SLOAD AND PUSH2 0x4B9A JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ISZERO PUSH2 0x4EC4 JUMPI SWAP1 SWAP2 SWAP3 SWAP4 SWAP12 POP DUP5 DUP12 PUSH2 0x4F66 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F60 PUSH2 0x4F56 DUP14 DUP14 PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x175 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x496A JUMP JUMPDEST DUP2 DUP4 ADD DUP2 DUP2 MSTORE SWAP6 SWAP1 DUP12 ISZERO PUSH2 0x5035 JUMPI POP PUSH2 0x4F91 SWAP2 PUSH2 0x4F85 PUSH1 0x60 SWAP3 DUP14 PUSH2 0x496A JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE DUP6 MLOAD PUSH2 0x480D JUMP JUMPDEST DUP1 SWAP14 JUMPDEST LT SWAP3 DUP4 ISZERO PUSH2 0x4FC0 JUMPI JUMPDEST POP POP POP PUSH2 0x4FAD JUMPI JUMPDEST DUP1 DUP1 DUP1 PUSH2 0x4EC4 JUMP JUMPDEST DUP2 SWAP3 SWAP10 POP MSTORE DUP1 PUSH1 0x60 DUP9 ADD MSTORE SWAP7 CODESIZE DUP1 PUSH2 0x4FA5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x502A JUMPI SWAP1 DUP12 SWAP2 DUP5 SWAP2 PUSH2 0x4FF9 JUMPI JUMPDEST POP LT CODESIZE DUP5 DUP2 PUSH2 0x4F9D JUMP JUMPDEST DUP1 SWAP3 POP DUP6 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x5023 JUMPI JUMPDEST PUSH2 0x5012 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x39BF JUMPI DUP11 SWAP1 MLOAD CODESIZE PUSH2 0x4FEF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5008 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP DUP1 SWAP14 PUSH2 0x4F94 JUMP JUMPDEST SWAP1 SWAP5 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x506B JUMPI JUMPDEST PUSH2 0x5057 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5067 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x4EBD JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x504D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 POP PUSH1 0x20 DUP4 PUSH2 0x1E9 SLOAD AND SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x64A731E9 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x50F5 JUMPI DUP7 SWAP1 PUSH2 0x50C2 JUMPI JUMPDEST PUSH2 0x50BB SWAP2 POP DUP5 PUSH2 0x4957 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4E81 JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x50ED JUMPI JUMPDEST DUP2 PUSH2 0x50DB PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32E2 JUMPI PUSH2 0x50BB SWAP1 MLOAD PUSH2 0x50B0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x50CE JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5178 SWAP4 PUSH2 0x513F PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP6 PUSH2 0x5119 DUP3 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x5125 DUP8 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x5135 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x167 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP5 DUP6 SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x4D9E JUMPI POP JUMP JUMPDEST PUSH2 0x2FEB PUSH2 0x51EC SWAP2 PUSH2 0x51AA DUP5 DUP3 PUSH2 0x498A JUMP JUMPDEST PUSH2 0x51E2 PUSH2 0x51B9 DUP4 PUSH2 0x180 PUSH2 0x4198 JUMP JUMPDEST PUSH2 0x51CC DUP3 SWAP5 SWAP3 SLOAD SWAP3 DUP4 DUP4 PUSH1 0x3 SHL SHR PUSH2 0x48D4 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x181 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH2 0x934 DUP4 PUSH2 0x5202 SWAP7 SWAP5 SWAP4 SWAP8 SWAP6 PUSH2 0x584A JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x520D JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 PUSH2 0x523A SWAP4 PUSH2 0xA50 SWAP3 SWAP6 PUSH2 0x5260 JUMP JUMPDEST PUSH8 0xDE0B6B3A763FFFF NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x481A JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x4877 SWAP2 PUSH2 0x496A JUMP JUMPDEST SWAP1 SWAP2 DUP2 PUSH2 0x526D DUP3 DUP6 PUSH2 0x49EB JUMP JUMPDEST GT ISZERO PUSH2 0x5299 JUMPI PUSH2 0x420C SWAP3 PUSH2 0x1419 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x5293 SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 PUSH2 0x4A15 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x420C SWAP2 PUSH1 0x0 DUP1 PUSH2 0x52B1 PUSH2 0x4731 JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x52C3 PUSH2 0x4701 JUMP JUMPDEST SWAP3 PUSH1 0x60 SWAP2 ISZERO PUSH2 0x5327 JUMPI POP POP DUP2 MLOAD ISZERO PUSH2 0x52D9 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x52E2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 PUSH2 0x4444 SWAP3 POP PUSH2 0x479B JUMP JUMPDEST PUSH2 0x5362 SWAP2 SWAP4 SWAP3 PUSH2 0x5346 DUP3 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x5352 DUP7 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x5135 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x53BD JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4444 SWAP2 PUSH2 0x42F6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x166 PUSH2 0x53D8 DUP5 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x53E8 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x165 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD PUSH2 0x53AC JUMP JUMPDEST DUP5 MLOAD SWAP3 SWAP5 SWAP4 SWAP2 SWAP3 PUSH1 0x0 SWAP2 SWAP1 ISZERO PUSH2 0x555B JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x545C PUSH2 0x16D SLOAD DUP7 MLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP2 PUSH2 0x163 PUSH2 0x546C DUP5 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x178 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP2 DUP8 AND SWAP5 PUSH2 0x548A SWAP2 PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x12F SWAP5 PUSH1 0x2 DUP7 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP7 SSTORE DUP2 PUSH2 0x5534 JUMPI JUMPDEST POP POP PUSH1 0x40 ADD MLOAD SWAP2 SWAP5 PUSH1 0x2 DUP5 SSTORE DUP3 PUSH2 0x550A JUMPI JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SSTORE JUMPDEST PUSH2 0x12F SWAP3 PUSH1 0x2 DUP5 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP5 SSTORE DUP1 PUSH2 0x54DB JUMPI JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x2F0C JUMPI DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x54FC PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 DUP1 PUSH2 0x54D2 JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x2F0C JUMPI PUSH1 0x0 DUP1 SWAP3 SWAP2 DUP2 SWAP3 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x5526 PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 DUP1 PUSH2 0x54B3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F0C JUMPI DUP5 DUP1 SWAP3 SWAP2 DUP2 SWAP3 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x554E PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 PUSH2 0x54A1 JUMP JUMPDEST PUSH2 0x178 SLOAD PUSH1 0x20 DUP7 ADD MLOAD SWAP3 SWAP6 PUSH2 0x558B SWAP5 SWAP3 SWAP4 PUSH1 0x60 SWAP3 PUSH2 0x5583 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH2 0x5590 JUMP JUMPDEST ADD MLOAD SWAP2 PUSH2 0x5590 JUMP JUMPDEST PUSH2 0x54BB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP2 PUSH2 0x559D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x5636 SWAP2 PUSH1 0x0 DUP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 PUSH2 0x161 SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP6 PUSH1 0x20 SWAP9 DUP2 DUP11 DUP10 ADD SWAP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 MSTORE AND PUSH1 0x24 DUP10 ADD MSTORE AND PUSH1 0x44 DUP8 ADD MSTORE PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x64 DUP6 MSTORE PUSH2 0x55E9 PUSH1 0x84 DUP7 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x55F2 DUP8 PUSH2 0x432E JUMP JUMPDEST SWAP5 PUSH2 0x5600 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP9 DUP8 ADD MSTORE MLOAD SWAP1 DUP3 DUP6 GAS CALL PUSH2 0x52C3 PUSH2 0x4701 JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH2 0x5642 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP4 SWAP2 DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI DUP2 PUSH2 0x5658 SWAP2 ADD PUSH2 0x4B8D JUMP JUMPDEST ISZERO PUSH2 0x5660 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x5717 SWAP1 PUSH2 0x56C3 PUSH2 0x5AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE01DCE2D PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP4 DUP4 AND PUSH1 0x64 DUP3 ADD DUP2 SWAP1 MSTORE SELFBALANCE PUSH1 0x84 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE SWAP3 PUSH2 0x570D PUSH1 0xA4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x21C SLOAD AND PUSH2 0x52A1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI PUSH1 0x20 ADD MLOAD SWAP2 PUSH2 0x12F SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP4 SSTORE DUP4 PUSH2 0x5749 JUMPI JUMPDEST POP POP PUSH1 0x1 SWAP1 SSTORE SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2F0C JUMPI PUSH1 0x0 DUP1 DUP1 SWAP3 DUP6 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x5762 PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 PUSH2 0x5740 JUMP JUMPDEST SWAP3 DUP1 PUSH2 0x345D PUSH2 0x3463 SWAP3 DUP6 PUSH2 0x5783 SWAP7 SWAP6 PUSH2 0x5260 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x578E JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP3 SWAP2 PUSH1 0xC0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x57C9 DUP4 PUSH2 0x41C6 JUMP JUMPDEST AND DUP6 MSTORE PUSH2 0x57D8 PUSH1 0x20 DUP4 ADD PUSH2 0x41C6 JUMP JUMPDEST AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x17F SLOAD DUP1 NUMBER LT ISZERO PUSH2 0x5824 JUMPI PUSH2 0x420C SWAP1 NUMBER SWAP1 PUSH2 0x4A15 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x5839 PUSH1 0x40 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 DUP3 SWAP5 DUP1 SLOAD DUP5 MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x5856 DUP2 PUSH2 0x17A PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP2 PUSH2 0x1B4 SWAP2 PUSH2 0x586C DUP2 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD SWAP3 PUSH2 0x1B5 SLOAD NUMBER LT ISZERO PUSH2 0x5897 JUMPI JUMPDEST POP POP DUP1 DUP3 LT ISZERO PUSH2 0x5892 JUMPI PUSH2 0x660 SWAP1 PUSH2 0x420C SWAP4 PUSH2 0x4957 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST DUP3 SWAP4 POP PUSH2 0x58AB PUSH2 0x58B6 SWAP4 SWAP3 PUSH2 0x58B1 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x582A JUMP JUMPDEST PUSH2 0x58BE JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x587B JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP1 MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SUB SWAP1 DUP5 DUP3 GT PUSH2 0x481A JUMPI PUSH2 0x58EB PUSH2 0xDE3 SWAP3 PUSH2 0x4877 SWAP6 PUSH2 0x4957 JUMP JUMPDEST SWAP3 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x169 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x5905 DUP5 PUSH2 0x4A3A JUMP JUMPDEST SWAP4 DUP3 SWAP2 JUMPDEST DUP6 DUP3 DUP5 LT PUSH2 0x5934 JUMPI POP POP POP POP DUP2 ISZERO PUSH2 0x5928 JUMPI SWAP1 PUSH2 0x5925 SWAP2 PUSH2 0x496A JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP POP PUSH2 0x17B SLOAD PUSH1 0x1 SHL SWAP2 JUMP JUMPDEST PUSH2 0xA50 PUSH2 0x599F DUP6 SWAP8 SWAP7 PUSH2 0xDE3 PUSH2 0x596E PUSH2 0x5996 DUP10 PUSH2 0x660 DUP10 PUSH2 0xA50 PUSH2 0x5980 DUP5 PUSH1 0x1 SWAP14 SWAP15 SWAP16 SWAP13 PUSH2 0x5964 PUSH2 0x59A5 SWAP15 PUSH2 0x4B46 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP3 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0x5979 DUP7 DUP3 PUSH2 0x48F0 JUMP JUMPDEST POP SWAP4 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0xA50 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP5 DUP6 SWAP2 DUP13 PUSH2 0x584A JUMP JUMPDEST SWAP6 PUSH2 0x480D JUMP JUMPDEST SWAP5 ADD SWAP2 SWAP1 PUSH2 0x5909 JUMP JUMPDEST PUSH2 0x1B5 DUP1 SLOAD NUMBER LT ISZERO PUSH2 0x59BD JUMPI POP JUMP JUMPDEST PUSH2 0x169 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x59D7 JUMPI POP POP PUSH2 0x1B6 SLOAD NUMBER ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 DUP1 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 PUSH1 0x1 SWAP4 PUSH2 0x1B4 PUSH2 0x5A0D PUSH2 0x58AB DUP4 DUP4 PUSH2 0x42DA JUMP JUMPDEST SWAP1 PUSH2 0x5A2B PUSH2 0x5A23 PUSH2 0x5A1D DUP6 PUSH2 0x4B46 JUMP JUMPDEST DUP5 PUSH2 0x58BE JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP SSTORE MLOAD PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 ADD PUSH2 0x59C4 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4DCF JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5A97 JUMPI JUMPDEST POP ISZERO PUSH2 0x5A85 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x5AC8 JUMPI JUMPDEST DUP2 PUSH2 0x5AB0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP PUSH2 0x5AC2 SWAP1 PUSH2 0x4B8D JUMP JUMPDEST CODESIZE PUSH2 0x5A7D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5AA3 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x5ADF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 LT PUSH2 0x24FE JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST PUSH12 0xE375B46AF0333A56ACEC51EF 0xC5 CODESIZE ADDMOD REVERT SWAP7 0xF6 SWAP15 EXP DUP12 PUSH17 0x1ED1BBB23E8E269E64736F6C6343000810 STOP CALLER ",
      "sourceMap": "260:29856:46:-:0;;;;;;;1332:4:8;1324:13;;5996::7;260:29856:46;;;;;;;;;;;;;;6067:30:7;6063:138;;-1:-1:-1;260:29856:46;;;;;;;;1324:13:8;260:29856:46;;;;;;;;;;;;;;;;6063:138:7;260:29856:46;;;;;;5996:13:7;260:29856:46;6162:28:7;260:29856:46;;;;;;6162:28:7;6063:138;;;260:29856:46;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "abi_decode_address": {
          "entryPoint": 16838,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_bool_fromMemory": {
          "entryPoint": 19341,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_uint256t_uint256t_addresst_address": {
          "entryPoint": 17076,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_uint256t_uint256t_uint256t_address": {
          "entryPoint": 16911,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_uint256t_uint256t_uint256t_addresst_address": {
          "entryPoint": 16858,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_uint256t_uint256t_uint256t_uint256": {
          "entryPoint": 16992,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_uint256t_uint256t_uint256t_uint256t_address": {
          "entryPoint": 16949,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_uint256t_uint256t_uint256t_uint256t_addresst_address": {
          "entryPoint": 17026,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_encode_address_uint256": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_struct_PeggedTokenParams_calldata": {
          "entryPoint": 22444,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256": {
          "entryPoint": 19677,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 8,
          "returnSlots": 1
        },
        "allocate_and_zero_memory_array_array_uint256_dyn": {
          "entryPoint": 19002,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "allocate_and_zero_memory_struct_struct_FeeCalcs": {
          "entryPoint": 19638,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "array_allocation_size_array_uint256_dyn": {
          "entryPoint": 18978,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "array_allocation_size_bytes": {
          "entryPoint": 17198,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_add_int256": {
          "entryPoint": 18644,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_uint256": {
          "entryPoint": 18445,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_uint256": {
          "entryPoint": 18794,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_uint256": {
          "entryPoint": 18775,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_uint256": {
          "entryPoint": 18965,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
          "entryPoint": 18225,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "extract_returndata": {
          "entryPoint": 18177,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "finalize_allocation": {
          "entryPoint": 17142,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_calcCtargemaCA": {
          "entryPoint": 22770,
          "id": 20007,
          "parameterSlots": 0,
          "returnSlots": 2
        },
        "fun_calcFees": {
          "entryPoint": 20057,
          "id": 16242,
          "parameterSlots": 4,
          "returnSlots": 3
        },
        "fun_calcLckACandACgain": {
          "entryPoint": 18500,
          "id": 15417,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "fun_calcNewEma": {
          "entryPoint": 22718,
          "id": 19769,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_calcOtfPnLTP": {
          "entryPoint": 18826,
          "id": 15272,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_checkIfAuthorizedChanger": {
          "entryPoint": 23106,
          "id": 22878,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_checkLessThanOne": {
          "entryPoint": 23281,
          "id": 24920,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_checkLiquidated": {
          "entryPoint": 19717,
          "id": 14795,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_checkNotPaused": {
          "entryPoint": 23248,
          "id": 23011,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_depositAndMintTC": {
          "entryPoint": 19751,
          "id": 14961,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_depositAndMintTP": {
          "entryPoint": 20736,
          "id": 14911,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "fun_distOpResults": {
          "entryPoint": 21555,
          "id": 18153,
          "parameterSlots": 5,
          "returnSlots": 0
        },
        "fun_evalCoverage": {
          "entryPoint": 19931,
          "id": 15116,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "fun_evalTCAvailableToRedeem": {
          "entryPoint": 22383,
          "id": 18778,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "fun_evalTPavailableToMint": {
          "entryPoint": 20976,
          "id": 16285,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "fun_feeTokenTransfer": {
          "entryPoint": 21904,
          "id": 18177,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_functionDelegateCall": {
          "entryPoint": 21153,
          "id": 7761,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getBts": {
          "entryPoint": 22541,
          "id": 19165,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "fun_getCglb": {
          "entryPoint": 18923,
          "id": 15505,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getCtargemaTP": {
          "entryPoint": 22602,
          "id": 19857,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getLckACemaAdjusted": {
          "entryPoint": 21088,
          "id": 15016,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "fun_getPACtp": {
          "entryPoint": 19270,
          "id": 15598,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "fun_getPACtps": {
          "entryPoint": 19484,
          "id": 15669,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "fun_getPTCac": {
          "entryPoint": 19998,
          "id": 15457,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_getPnLTP": {
          "entryPoint": 18672,
          "id": 15322,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "fun_getTPAvailableToMint": {
          "entryPoint": 21035,
          "id": 15078,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "fun_peekPrice": {
          "entryPoint": 19354,
          "id": 15625,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "fun_revert": {
          "entryPoint": 18331,
          "id": 2847,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_setImplementation": {
          "entryPoint": 18015,
          "id": 659,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_settleLiquidationPrices": {
          "entryPoint": 19052,
          "id": 15212,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_updateEmas": {
          "entryPoint": 22958,
          "id": 20086,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_updateTPtracking": {
          "entryPoint": 20889,
          "id": 15236,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_upgradeToAndCallUUPS": {
          "entryPoint": 17420,
          "id": 755,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_verifyCallResult": {
          "entryPoint": 18309,
          "id": 2827,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "fun_verifyCallResultFromTarget": {
          "entryPoint": null,
          "id": 7829,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "fun_withdrawAndBurnTC": {
          "entryPoint": 21448,
          "id": 14984,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_withdrawAndBurnTP": {
          "entryPoint": 21300,
          "id": 14938,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "memory_array_index_access_uint256_dyn": {
          "entryPoint": 18480,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "modifier_notPaused": {
          "entryPoint": 22199,
          "id": 22971,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "read_from_storage_reference_type_struct_EmaItem": {
          "entryPoint": 22570,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "require_helper_stringliteral_36e1": {
          "entryPoint": 17226,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "require_helper_stringliteral_52f1": {
          "entryPoint": 17323,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "require_helper_stringliteral_d688": {
          "entryPoint": 19542,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "storage_array_index_access_contract_IMocRC20_dyn": {
          "entryPoint": 16792,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "storage_array_index_access_struct_PegContainerItem_dyn": {
          "entryPoint": 17114,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "update_byte_slice_dynamic32": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        }
      },
      "generatedSources": [],
      "immutableReferences": {
        "1167": [
          {
            "length": 32,
            "start": 12509
          },
          {
            "length": 32,
            "start": 12927
          },
          {
            "length": 32,
            "start": 13714
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x2B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x163 PUSH2 0x27 CALLVALUE DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE STOP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP2 CALLDATALOAD DUP2 SHR SWAP1 DUP2 PUSH4 0x1DDE6EF EQ PUSH2 0x4172 JUMPI DUP2 PUSH4 0x1F1B684 EQ PUSH2 0x412A JUMPI DUP2 PUSH4 0x4856E41 EQ PUSH2 0x40C9 JUMPI DUP2 PUSH4 0xAD8C234 EQ PUSH2 0x405F JUMPI DUP2 PUSH4 0xAED4F88 EQ PUSH2 0x3FFE JUMPI DUP2 PUSH4 0xBE9482D EQ PUSH2 0x3F91 JUMPI DUP2 PUSH4 0xC340A24 EQ PUSH2 0x3F68 JUMPI DUP2 PUSH4 0xC36D897 EQ PUSH2 0x3F49 JUMPI DUP2 PUSH4 0xD6AC463 EQ PUSH2 0x3F01 JUMPI DUP2 PUSH4 0xDF12A8B EQ PUSH2 0x3DFA JUMPI DUP2 PUSH4 0xE0A8FD2 EQ PUSH2 0x3DD4 JUMPI DUP2 PUSH4 0xF1E5E2B EQ PUSH2 0x3D8C JUMPI DUP2 PUSH4 0xF60F396 EQ PUSH2 0x3CB3 JUMPI DUP2 PUSH4 0x102FEFAC EQ PUSH2 0x3C49 JUMPI DUP2 PUSH4 0x17574BC5 EQ PUSH2 0x3AAB JUMPI DUP2 PUSH4 0x17DF0AB8 EQ PUSH2 0x39E2 JUMPI DUP2 PUSH4 0x1867E2F5 EQ PUSH2 0x39C3 JUMPI DUP2 PUSH4 0x1F79DA55 EQ PUSH2 0x3959 JUMPI DUP2 PUSH4 0x1FB0DDA0 EQ PUSH2 0x3938 JUMPI DUP2 PUSH4 0x1FE6A7AD EQ PUSH2 0x38FC JUMPI DUP2 PUSH4 0x2069F753 EQ PUSH2 0x38D6 JUMPI DUP2 PUSH4 0x23B98CDE EQ PUSH2 0x38AF JUMPI DUP2 PUSH4 0x27EAB2A1 EQ PUSH2 0x3867 JUMPI DUP2 PUSH4 0x2A20D57D EQ PUSH2 0x3848 JUMPI DUP2 PUSH4 0x2C43BD3B EQ PUSH2 0x3822 JUMPI DUP2 PUSH4 0x2D88AF4A EQ PUSH2 0x37C9 JUMPI DUP2 PUSH4 0x2DED50F0 EQ PUSH2 0x37AA JUMPI DUP2 PUSH4 0x31F64EC2 EQ PUSH2 0x370D JUMPI DUP2 PUSH4 0x333431FD EQ PUSH2 0x36EE JUMPI DUP2 PUSH4 0x33421C38 EQ PUSH2 0x35F9 JUMPI DUP2 PUSH4 0x3659CFE6 EQ PUSH2 0x3560 JUMPI DUP2 PUSH4 0x3BC4AC0A EQ PUSH2 0x353A JUMPI DUP2 PUSH4 0x3DBC50A9 EQ PUSH2 0x34E6 JUMPI DUP2 PUSH4 0x3F4BA83A EQ PUSH2 0x3469 JUMPI DUP2 PUSH4 0x4017936A EQ PUSH2 0x3424 JUMPI DUP2 PUSH4 0x407F0E34 EQ PUSH2 0x3405 JUMPI DUP2 PUSH4 0x471A80E3 EQ PUSH2 0x33A0 JUMPI DUP2 PUSH4 0x4B746001 EQ PUSH2 0x3353 JUMPI DUP2 PUSH4 0x4D977E78 EQ PUSH2 0x3334 JUMPI DUP2 PUSH4 0x4E1F907A EQ PUSH2 0x330A JUMPI DUP2 PUSH4 0x4F0F27EE EQ PUSH2 0x32EB JUMPI DUP2 PUSH4 0x4F1EF286 EQ PUSH2 0x31F7 JUMPI DUP2 PUSH4 0x5210570C EQ PUSH2 0x31CF JUMPI DUP2 PUSH4 0x5241271C EQ PUSH2 0x31A0 JUMPI DUP2 PUSH4 0x52D1902D EQ PUSH2 0x30CA JUMPI DUP2 PUSH4 0x543AEB48 EQ PUSH2 0x30A4 JUMPI DUP2 PUSH4 0x54A73C62 EQ PUSH2 0x3042 JUMPI DUP2 PUSH4 0x5C616A73 EQ PUSH2 0x2D98 JUMPI DUP2 PUSH4 0x5C975ABB EQ PUSH2 0x2D72 JUMPI DUP2 PUSH4 0x5D65D045 EQ PUSH2 0x2D3E JUMPI DUP2 PUSH4 0x5E1E8928 EQ PUSH2 0x2CDA JUMPI DUP2 PUSH4 0x60009E0B EQ PUSH2 0x2CB0 JUMPI DUP2 PUSH4 0x647846A5 EQ PUSH2 0x2C86 JUMPI DUP2 PUSH4 0x662013F4 EQ PUSH2 0x2C62 JUMPI DUP2 PUSH4 0x68274357 EQ PUSH2 0x2C37 JUMPI DUP2 PUSH4 0x6B5488DF EQ PUSH2 0x2C18 JUMPI DUP2 PUSH4 0x70713468 EQ PUSH2 0x2BF2 JUMPI DUP2 PUSH4 0x71820F12 EQ PUSH2 0x2B8B JUMPI DUP2 PUSH4 0x7554FFFD EQ PUSH2 0x2B6C JUMPI DUP2 PUSH4 0x7750BA0C EQ PUSH2 0x2B46 JUMPI DUP2 PUSH4 0x79F9A91C EQ PUSH2 0x2B27 JUMPI DUP2 PUSH4 0x7A193C31 EQ PUSH2 0x2B08 JUMPI DUP2 PUSH4 0x7A4FF1D9 EQ PUSH2 0x2AE2 JUMPI DUP2 PUSH4 0x7A727FE8 EQ PUSH2 0x2AC3 JUMPI DUP2 PUSH4 0x7AD2819C EQ PUSH2 0x2A52 JUMPI DUP2 PUSH4 0x7AF5758C EQ PUSH2 0x2A2C JUMPI DUP2 PUSH4 0x7C287999 EQ PUSH2 0x29C2 JUMPI DUP2 PUSH4 0x7CBA2383 EQ PUSH2 0x299C JUMPI DUP2 PUSH4 0x7D8E0314 EQ PUSH2 0x296D JUMPI DUP2 PUSH4 0x7DC4E77F EQ PUSH2 0x282A JUMPI DUP2 PUSH4 0x7F01C715 EQ PUSH2 0x2800 JUMPI DUP2 PUSH4 0x826FCD58 EQ PUSH2 0x27DF JUMPI DUP2 PUSH4 0x82A5792C EQ PUSH2 0x2705 JUMPI DUP2 PUSH4 0x8456CB59 EQ PUSH2 0x266C JUMPI DUP2 PUSH4 0x8CFA4241 EQ PUSH2 0x264D JUMPI DUP2 PUSH4 0x904AA85B EQ PUSH2 0x262E JUMPI DUP2 PUSH4 0x9195C85B EQ PUSH2 0x260D JUMPI DUP2 PUSH4 0x91F388D8 EQ PUSH2 0x25A1 JUMPI DUP2 PUSH4 0x979D9A88 EQ PUSH2 0x2133 JUMPI DUP2 PUSH4 0x9839EE85 EQ PUSH2 0x1F46 JUMPI DUP2 PUSH4 0x9853C35A EQ PUSH2 0x1F1C JUMPI DUP2 PUSH4 0x9ABB14C9 EQ PUSH2 0x1E52 JUMPI DUP2 PUSH4 0x9AD6659D EQ PUSH2 0x1E1D JUMPI DUP2 PUSH4 0x9BDD7CCE EQ PUSH2 0x1BE8 JUMPI DUP2 PUSH4 0x9CABFC00 EQ PUSH2 0x1B9B JUMPI DUP2 PUSH4 0x9FD0506D EQ PUSH2 0x1B6E JUMPI DUP2 PUSH4 0xA8E9AC30 EQ PUSH2 0x1B4C JUMPI DUP2 PUSH4 0xAC4FC1A8 EQ PUSH2 0x1A1C JUMPI DUP2 PUSH4 0xAEA038DC EQ PUSH2 0x19FD JUMPI DUP2 PUSH4 0xB3903B39 EQ PUSH2 0x19C6 JUMPI DUP2 PUSH4 0xB7AEF837 EQ PUSH2 0x1868 JUMPI DUP2 PUSH4 0xBAD25A21 EQ PUSH2 0x16F0 JUMPI DUP2 PUSH4 0xBB4872DE EQ PUSH2 0x16CD JUMPI DUP2 PUSH4 0xBE22B4E1 EQ PUSH2 0x15C4 JUMPI DUP2 PUSH4 0xBECACA6B EQ PUSH2 0x159E JUMPI DUP2 PUSH4 0xC00F538D EQ PUSH2 0x1578 JUMPI DUP2 PUSH4 0xC039CC69 EQ PUSH2 0x1532 JUMPI DUP2 PUSH4 0xC6E06D89 EQ PUSH2 0x1349 JUMPI DUP2 PUSH4 0xC84353C9 EQ PUSH2 0x1323 JUMPI DUP2 PUSH4 0xCF351C1D EQ PUSH2 0x12DB JUMPI DUP2 PUSH4 0xD1A0FAA0 EQ PUSH2 0x12BD JUMPI DUP2 PUSH4 0xD8233ECC EQ PUSH2 0x125D JUMPI DUP2 PUSH4 0xDB796072 EQ PUSH2 0x121E JUMPI DUP2 PUSH4 0xDE08160F EQ PUSH2 0x11E1 JUMPI DUP2 PUSH4 0xDE8D520A EQ PUSH2 0x11B0 JUMPI DUP2 PUSH4 0xE4012945 EQ PUSH2 0x1020 JUMPI DUP2 PUSH4 0xE4C0AAF4 EQ PUSH2 0xFD9 JUMPI DUP2 PUSH4 0xE6A683E0 EQ PUSH2 0xF91 JUMPI DUP2 PUSH4 0xE6B1627C EQ PUSH2 0xF4E JUMPI DUP2 PUSH4 0xE7C25978 EQ PUSH2 0xF2A JUMPI DUP2 PUSH4 0xE8859A15 EQ PUSH2 0xF0F JUMPI DUP2 PUSH4 0xEC629679 EQ PUSH2 0xCE2 JUMPI DUP2 PUSH4 0xF13F4054 EQ PUSH2 0xCB8 JUMPI DUP2 PUSH4 0xF26114AA EQ PUSH2 0xC4F JUMPI DUP2 PUSH4 0xF2808778 EQ PUSH2 0xC29 JUMPI DUP2 PUSH4 0xF30B5614 EQ PUSH2 0xC0A JUMPI DUP2 PUSH4 0xF375CFBA EQ PUSH2 0xBEB JUMPI DUP2 PUSH4 0xF5319CC8 EQ PUSH2 0x961 JUMPI POP DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x942 JUMPI DUP1 PUSH4 0xFA79589E EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0xFB3BFCEA EQ PUSH2 0x779 JUMPI DUP1 PUSH4 0xFCF207D4 EQ PUSH2 0x5A4 JUMPI PUSH4 0xFDA70F8B EQ PUSH2 0x583 JUMPI POP PUSH2 0xE JUMP JUMPDEST CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH2 0x6A0 PUSH2 0x5B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP4 SWAP2 PUSH1 0x40 SWAP4 SWAP2 SWAP4 MLOAD SWAP2 PUSH2 0x5C6 PUSH1 0xC0 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0x60 DUP4 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP8 MSTORE DUP1 PUSH1 0xA0 DUP7 ADD SWAP4 AND DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x608 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x610 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x665 PUSH2 0x64D PUSH2 0x61E PUSH2 0x58F2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x641 PUSH2 0x62E DUP11 MLOAD DUP6 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x63B DUP6 DUP13 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP3 PUSH2 0x4DDB JUMP JUMPDEST SWAP2 DUP5 DUP12 MLOAD DUP12 MLOAD SWAP1 PUSH2 0x51F0 JUMP JUMPDEST PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP8 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x496A JUMP JUMPDEST SWAP4 PUSH2 0x66E PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x695 DUP3 DUP5 MLOAD AND DUP7 DUP5 DUP8 MLOAD AND PUSH2 0x688 DUP11 MLOAD PUSH2 0x176 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP7 SWAP2 DUP3 SWAP10 SWAP2 SWAP10 PUSH2 0x480D JUMP JUMPDEST SWAP9 DUP11 MLOAD DUP1 DUP12 GT PUSH2 0x75B JUMPI POP DUP10 ISZERO PUSH2 0x749 JUMPI PUSH1 0x40 SWAP11 PUSH2 0x72A DUP6 SWAP5 PUSH2 0x730 SWAP5 DUP14 SWAP5 DUP8 DUP14 DUP14 PUSH2 0x73D SWAP16 DUP4 DUP15 SWAP2 MLOAD SWAP2 MLOAD AND SWAP1 PUSH32 0xB1C19484081F58B25DE95EB3695CAEA3C2167249920A6439EC0253054D343E73 DUP12 DUP7 DUP9 MLOAD AND SWAP5 PUSH2 0x71B DUP12 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST MLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP3 MLOAD AND SWAP3 MLOAD AND SWAP2 DUP1 PUSH2 0x5433 JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B SWAP1 PUSH1 0x40 MLOAD PUSH2 0x7BB PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x40 DUP3 ADD CALLER DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 DUP7 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0x7E5 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x7ED PUSH2 0x5AD0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x81F PUSH2 0x819 PUSH2 0x810 PUSH2 0x807 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x17B SLOAD PUSH2 0x4DDB JUMP JUMPDEST DUP8 MLOAD SWAP3 SWAP2 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP7 PUSH2 0x829 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x840 DUP2 DUP4 MLOAD AND DUP10 DUP4 DUP7 MLOAD AND PUSH2 0x16E SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP6 SWAP2 DUP11 SWAP9 SWAP2 SWAP9 PUSH2 0x480D JUMP JUMPDEST SWAP8 DUP7 MLOAD DUP1 DUP11 GT PUSH2 0x8CD JUMPI POP DUP9 ISZERO PUSH2 0x749 JUMPI DUP9 PUSH2 0x73D SWAP8 PUSH2 0x72A PUSH2 0x730 SWAP4 PUSH1 0x40 SWAP14 DUP8 DUP1 SWAP8 DUP13 DUP3 DUP13 MLOAD AND PUSH32 0x73EF11A21CABAB55CA448E6E2AE4B60BDA75ED8109E2496084C92DC17B8334DB DUP10 DUP6 DUP9 MLOAD AND SWAP4 PUSH2 0x8C0 DUP7 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG3 MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x92C PUSH1 0x4 CALLDATALOAD PUSH2 0x915 PUSH2 0x58F2 JUMP JUMPDEST SWAP1 PUSH2 0x934 PUSH2 0x923 DUP5 DUP5 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP5 DUP6 SWAP4 PUSH2 0x4844 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x584A JUMP JUMPDEST SWAP1 PUSH2 0x522B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP PUSH2 0x96E CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP4 PUSH2 0x97F PUSH1 0x40 SWAP5 SWAP3 SWAP5 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE CALLVALUE PUSH1 0x60 DUP5 ADD MSTORE CALLER PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9B5 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x9BD PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x9C5 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x9CD PUSH2 0x58F2 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0xA1F PUSH2 0x9F3 PUSH2 0x9E0 DUP6 MLOAD DUP8 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP6 PUSH2 0x9ED DUP8 DUP8 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP4 PUSH2 0x4DDB JUMP JUMPDEST SWAP1 PUSH2 0xA04 DUP3 DUP3 DUP7 PUSH1 0x20 DUP11 ADD MLOAD PUSH2 0x576F JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x819 DUP6 DUP6 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI PUSH2 0xA69 SWAP4 PUSH2 0xA5F PUSH2 0xA55 DUP11 PUSH2 0xA50 PUSH1 0x20 DUP13 ADD MLOAD PUSH2 0x819 DUP9 PUSH2 0xA4B DUP12 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x166 SLOAD SWAP1 PUSH2 0x496A JUMP JUMPDEST DIV SWAP8 DUP9 DUP9 MLOAD PUSH2 0x51F0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD DUP1 DUP6 LT PUSH2 0xBCD JUMPI POP PUSH2 0xAA5 SWAP1 PUSH2 0xA82 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x172 SLOAD SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND PUSH2 0x4E59 JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0x60 DUP3 ADD MLOAD DUP1 DUP7 GT PUSH2 0xBAE JUMPI POP SWAP2 DUP2 PUSH2 0xB61 PUSH2 0xBAA SWAP6 SWAP5 PUSH2 0xB8D SWAP5 MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP7 ADD MLOAD AND SWAP2 PUSH32 0xF4287B96E269F789F166DB491B07456566F468352771E466CE088E98D6007A0C DUP13 PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0xB29 DUP11 MLOAD DUP12 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0xB48 PUSH1 0x20 DUP5 ADD MLOAD DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP8 ADD MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 DUP11 SWAP1 PUSH2 0x5100 JUMP JUMPDEST PUSH2 0xB6F DUP7 PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 AND DUP1 PUSH2 0x5433 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x44 SWAP1 DUP5 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP6 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x173 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x163 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0xC43 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16E SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0xC68 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x79308A55 PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCAE SWAP1 PUSH2 0xC9C DUP2 PUSH2 0xC8E PUSH1 0x4 PUSH1 0x24 DUP4 ADD PUSH2 0x57AC JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x21C SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52A1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x162 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH2 0xCEE CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xD00 PUSH1 0xC0 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 AND DUP6 MSTORE DUP7 PUSH1 0xA0 DUP5 ADD SWAP3 AND DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0xD43 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0xD4B PUSH2 0x59AE JUMP JUMPDEST PUSH2 0xD53 PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 SWAP9 PUSH2 0xD61 DUP6 MLOAD DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP10 PUSH2 0xD6E DUP12 DUP8 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0xD7B DUP11 PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST POP POP PUSH2 0xD91 PUSH2 0xD8B DUP9 MLOAD SWAP12 PUSH2 0x4844 JUMP JUMPDEST SWAP1 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0xEFB JUMPI SWAP1 PUSH2 0xDE3 DUP13 PUSH2 0x660 PUSH2 0xDC5 DUP15 SWAP16 PUSH2 0xE14 SWAP14 SWAP15 SWAP16 PUSH2 0xDE9 SWAP8 PUSH2 0x660 SWAP2 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0xDDD PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x660 DUP4 DUP9 PUSH2 0x4957 JUMP JUMPDEST SWAP16 PUSH2 0x4957 JUMP JUMPDEST SWAP1 PUSH2 0x480D JUMP JUMPDEST SWAP8 PUSH2 0xDF2 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0xE09 DUP4 DUP6 MLOAD AND DUP11 DUP6 DUP9 MLOAD AND PUSH2 0x174 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 DUP12 SWAP11 SWAP2 SWAP11 PUSH2 0x480D JUMP JUMPDEST SWAP11 DUP1 MLOAD DUP1 DUP14 GT PUSH2 0xEDD JUMPI POP DUP12 ISZERO PUSH2 0x749 JUMPI PUSH2 0x72A DUP10 DUP7 SWAP6 DUP16 SWAP6 DUP16 SWAP6 PUSH2 0xBAA SWAP16 SWAP1 PUSH2 0xED1 PUSH2 0xB8D SWAP16 SWAP10 DUP16 SWAP4 PUSH2 0x730 SWAP12 DUP16 DUP8 SWAP1 DUP16 SWAP8 PUSH32 0x3D9B2786930E9C1E492D52AF3CC38BD2FFE9405D82B4997053A26A8956056200 SWAP1 DUP16 PUSH2 0xEC4 DUP9 SWAP2 DUP13 DUP1 DUP14 MLOAD SWAP8 MLOAD AND SWAP8 MLOAD AND SWAP8 MLOAD SWAP4 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 DUP5 DUP7 MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP14 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x580D JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x17D SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x1B4 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 PUSH2 0xF7D DUP5 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0xFC0 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x21C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x1008 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP3 SWAP2 DUP4 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1058 PUSH1 0xA0 DUP6 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x108D PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1095 PUSH2 0x59AE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x10CF PUSH2 0x10BB PUSH2 0x819 DUP10 PUSH2 0x10C7 PUSH2 0x10B3 PUSH2 0x58F2 JUMP JUMPDEST DUP2 SWAP6 SWAP2 PUSH2 0x4DDB JUMP JUMPDEST SWAP3 SWAP1 DUP1 SWAP6 DUP5 SWAP3 MLOAD PUSH2 0x576F JUMP JUMPDEST DUP11 MLOAD SWAP3 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI PUSH2 0x1105 SWAP5 PUSH2 0x10E3 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x10FA DUP4 DUP4 MLOAD AND DUP3 DUP6 DUP8 MLOAD AND PUSH2 0x16F SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP10 SWAP2 DUP4 SWAP9 SWAP2 SWAP9 PUSH2 0x4A15 JUMP JUMPDEST SWAP8 MLOAD DUP1 DUP10 LT PUSH2 0x1192 JUMPI POP SWAP3 DUP1 DUP1 DUP5 PUSH2 0x1184 DUP13 SWAP9 SWAP6 DUP11 SWAP9 PUSH1 0x40 SWAP15 PUSH2 0x73D SWAP13 DUP16 SWAP11 DUP12 DUP9 DUP1 PUSH32 0x96956E9E47738119037532FCF68A81B25D418EAF754281E005F11FA2D33BFFFB SWAP4 MLOAD AND SWAP4 MLOAD AND SWAP4 PUSH2 0x1175 DUP7 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG3 MLOAD SWAP1 DUP5 DUP5 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD AND SWAP5 MLOAD AND SWAP2 MLOAD AND SWAP3 PUSH2 0x5433 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP10 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x11D6 PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x4844 JUMP JUMPDEST SWAP1 POP PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x176 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH1 0x3 SHL SHR DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1237 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DBCB039 PUSH1 0xE1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCAE SWAP1 PUSH2 0xC9C DUP2 PUSH2 0xC8E PUSH1 0x4 PUSH1 0x24 DUP4 ADD PUSH2 0x57AC JUMP JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B PUSH1 0x40 MLOAD PUSH2 0x1291 PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0x7E5 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x12D6 PUSH2 0x59AE JUMP JUMPDEST PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x130A PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x133D PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17E SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x1356 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH2 0x1369 PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x13B2 PUSH2 0x5AD0 JUMP JUMPDEST DUP8 PUSH2 0x141F PUSH2 0xA50 PUSH2 0x660 DUP4 PUSH2 0x1419 DUP13 PUSH2 0x13E3 PUSH2 0x13CC PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x807 PUSH2 0x13DA DUP5 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD DUP1 SWAP5 MLOAD PUSH2 0x5199 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0xA4B PUSH2 0x140F PUSH2 0x1403 DUP6 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP11 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP11 MLOAD PUSH2 0x166 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST SWAP8 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP3 PUSH2 0x4957 JUMP JUMPDEST SWAP10 MLOAD DUP1 DUP12 LT DUP1 ISZERO PUSH2 0x152A JUMPI JUMPDEST PUSH2 0x150C JUMPI POP PUSH2 0x1450 SWAP1 PUSH2 0x143C PUSH2 0x4CB6 JUMP JUMPDEST POP DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x171 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 SWAP10 SWAP1 SWAP9 DUP5 MLOAD DUP1 DUP13 GT PUSH2 0x14ED JUMPI POP DUP7 SWAP5 PUSH2 0x72A DUP14 DUP7 DUP10 DUP16 SWAP6 SWAP8 PUSH2 0xBAA SWAP16 SWAP15 SWAP13 PUSH2 0x730 SWAP9 PUSH2 0xB8D SWAP16 SWAP14 SWAP12 DUP16 SWAP3 DUP6 DUP14 PUSH2 0x14E5 SWAP6 DUP3 SWAP16 MLOAD DUP4 DUP6 MLOAD AND SWAP1 PUSH32 0xB8B8E75E42A3102026137DA20C1D52F5E60A1B25D6E77AD232404575753E3FE0 DUP14 DUP7 DUP13 MLOAD AND SWAP5 PUSH2 0x14D6 DUP12 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP4 MLOAD SWAP2 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST MLOAD AND SWAP2 PUSH2 0x4D27 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 MLOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP11 ISZERO PUSH2 0x142B JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x1571 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1419 PUSH2 0x1565 PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x163 SWAP6 SWAP2 SWAP6 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP4 DUP5 PUSH2 0x4A15 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1592 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16F SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x15B8 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16B SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x15D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 PUSH2 0x15E2 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP4 DUP5 MSTORE CALLVALUE PUSH1 0x60 DUP5 ADD MSTORE CALLER PUSH1 0x80 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1619 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1621 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1629 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1631 PUSH2 0x58F2 JUMP JUMPDEST SWAP4 PUSH2 0x1682 PUSH2 0x1656 PUSH2 0x1643 DUP7 MLOAD DUP9 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP7 PUSH2 0x1650 DUP9 DUP9 MLOAD PUSH2 0x5199 JUMP JUMPDEST DUP5 PUSH2 0x4DDB JUMP JUMPDEST SWAP1 PUSH2 0x1667 DUP3 DUP3 DUP8 PUSH1 0x20 DUP12 ADD MLOAD PUSH2 0x576F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x819 DUP6 DUP6 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP5 DUP6 ISZERO PUSH2 0x749 JUMPI PUSH2 0x16B8 SWAP4 PUSH2 0x16AE PUSH2 0xA55 DUP12 PUSH2 0xA50 PUSH1 0x20 DUP14 ADD MLOAD PUSH2 0x819 DUP9 PUSH2 0xA4B DUP12 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DIV SWAP9 DUP10 DUP10 MLOAD PUSH2 0x51F0 JUMP JUMPDEST MLOAD DUP1 DUP6 LT PUSH2 0xBCD JUMPI POP PUSH2 0xAA5 SWAP1 PUSH2 0xA82 PUSH2 0x4CB6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 PUSH2 0x1704 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP1 PUSH1 0x40 SWAP6 SWAP4 SWAP3 SWAP5 SWAP6 MLOAD SWAP6 PUSH2 0x1719 PUSH1 0xC0 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP7 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP6 MSTORE DUP3 PUSH1 0xA0 DUP10 ADD SWAP5 AND DUP5 MSTORE PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x175A PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1795 PUSH2 0x1765 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x1780 PUSH2 0x1773 DUP12 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x807 DUP4 DUP14 MLOAD PUSH2 0x5199 JUMP JUMPDEST POP POP PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP5 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x179D PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x17B7 DUP5 DUP5 MLOAD AND DUP3 DUP7 DUP9 MLOAD AND PUSH2 0x688 DUP14 MLOAD PUSH2 0x177 PUSH2 0x4198 JUMP JUMPDEST SWAP11 SWAP2 DUP4 SWAP10 SWAP2 SWAP10 PUSH2 0x4A15 JUMP JUMPDEST SWAP9 DUP3 ISZERO PUSH2 0x749 JUMPI MLOAD DUP1 DUP11 LT PUSH2 0x184A JUMPI POP SWAP4 DUP1 DUP10 SWAP5 PUSH2 0x1184 DUP13 SWAP9 SWAP6 DUP4 SWAP6 DUP10 PUSH1 0x40 SWAP16 DUP14 PUSH2 0x73D SWAP15 SWAP13 MLOAD PUSH32 0x94623CC0BDFF77F15A945C5F7C85F92E30BAEEE629058DB590CEEBA3755AD3BE DUP14 DUP11 DUP1 DUP12 MLOAD AND SWAP5 MLOAD AND SWAP5 PUSH2 0x183A DUP10 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 PUSH1 0x60 SWAP1 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP2 MLOAD DUP6 DUP6 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x1878 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x188D PUSH2 0x100 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP2 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0xA0 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 CALLER DUP3 MSTORE DUP10 DUP5 ADD SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP6 AND DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x18DE PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x18E6 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP6 PUSH4 0x1C280CE1 PUSH1 0xE0 SHL PUSH1 0x20 DUP9 ADD MSTORE MLOAD PUSH1 0x24 DUP8 ADD MSTORE MLOAD PUSH1 0x44 DUP7 ADD MSTORE MLOAD PUSH1 0x64 DUP6 ADD MSTORE MLOAD PUSH1 0x84 DUP5 ADD MSTORE DUP8 MLOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP2 DUP6 MLOAD AND PUSH1 0xC4 DUP5 ADD MSTORE MLOAD AND PUSH1 0xE4 DUP3 ADD MSTORE DUP5 DUP5 MLOAD AND PUSH2 0x104 SWAP1 DUP2 DUP4 ADD MSTORE DUP2 MSTORE PUSH2 0x1941 PUSH2 0x124 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP5 PUSH2 0x21C SLOAD AND PUSH2 0x52A1 JUMP JUMPDEST SWAP3 DUP4 DUP1 MLOAD DUP2 ADD SUB SWAP5 DUP7 DUP7 SLT PUSH2 0x19C2 JUMPI PUSH1 0x20 DUP6 ADD MLOAD SWAP7 PUSH1 0x40 DUP7 ADD MLOAD SWAP9 PUSH1 0x80 PUSH1 0x60 DUP9 ADD MLOAD SWAP9 PUSH1 0x5F NOT ADD SLT PUSH2 0x5A1 JUMPI POP SWAP2 DUP1 PUSH2 0x730 DUP10 PUSH2 0xBAA SWAP10 SWAP9 SWAP7 SWAP5 PUSH2 0xB8D SWAP9 SWAP7 PUSH1 0x40 MLOAD SWAP9 PUSH2 0x199A PUSH1 0x80 DUP12 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP11 MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x40 DUP12 ADD MSTORE ADD MLOAD PUSH1 0x60 DUP10 ADD MSTORE MLOAD PUSH2 0x4A15 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x84B SWAP1 PUSH1 0x40 MLOAD PUSH2 0x7BB PUSH1 0xA0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1A38 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP6 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 DUP2 MSTORE PUSH2 0x1A6E PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1A76 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1A7E PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1A86 PUSH2 0x58F2 JUMP JUMPDEST SWAP7 SWAP1 SWAP8 PUSH2 0x1A94 DUP5 MLOAD DUP10 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 PUSH2 0x1AA1 DUP11 DUP7 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x1AAE DUP10 PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST POP POP PUSH2 0x1ABE PUSH2 0xD8B DUP8 MLOAD SWAP11 PUSH2 0x4844 JUMP JUMPDEST SWAP1 PUSH8 0xDE0B6B3A763FFFF NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x1B38 JUMPI SWAP1 PUSH2 0xDE3 DUP12 PUSH2 0x660 PUSH2 0x1AF2 DUP14 SWAP15 PUSH2 0x660 PUSH2 0xE14 SWAP14 SWAP15 SWAP16 SWAP8 PUSH2 0x1B10 SWAP9 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0x1B0A PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x660 DUP4 DUP9 PUSH2 0x4957 JUMP JUMPDEST SWAP15 PUSH2 0x4957 JUMP JUMPDEST SWAP7 PUSH2 0x1B19 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xE09 DUP4 DUP6 MLOAD AND DUP11 DUP6 DUP9 MLOAD AND PUSH2 0x174 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B5 SLOAD NUMBER LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 DUP3 DUP2 SWAP3 DUP2 MSTORE PUSH2 0x168 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF PUSH1 0x1 DUP3 SLOAD SWAP3 ADD SLOAD AND DUP3 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x1BFF CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x1C11 PUSH1 0x40 SWAP8 SWAP4 SWAP8 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP6 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP5 AND DUP3 MSTORE PUSH1 0xC0 DUP7 ADD DUP4 DUP2 MSTORE PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1C56 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1CAB DUP8 PUSH2 0xA50 PUSH2 0x1C95 PUSH2 0x1C8A PUSH2 0x1C6B PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x1C76 DUP6 MLOAD DUP3 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP15 DUP16 DUP1 SWAP7 MLOAD PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x17C SLOAD PUSH2 0x4DDB JUMP JUMPDEST SWAP3 DUP2 SWAP15 SWAP2 DUP9 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x166 SLOAD SWAP1 PUSH2 0x496A JUMP JUMPDEST DIV SWAP11 MLOAD DUP1 DUP13 GT PUSH2 0x1DFF JUMPI POP SWAP2 PUSH2 0x1CE5 DUP12 PUSH2 0x1CDF PUSH2 0x1D17 SWAP12 SWAP13 SWAP14 SWAP15 SWAP5 PUSH2 0x660 DUP6 PUSH2 0x1CD9 PUSH2 0x1CEC SWAP10 DUP13 MLOAD SWAP10 PUSH2 0x4E1E JUMP JUMPDEST SWAP5 PUSH2 0x4957 JUMP JUMPDEST SWAP4 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 PUSH2 0x480D JUMP JUMPDEST SWAP5 PUSH2 0x1CF5 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x1D0C DUP2 DUP10 MLOAD AND DUP8 DUP4 DUP6 MLOAD AND PUSH2 0x173 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP7 SWAP2 DUP9 SWAP10 SWAP2 SWAP10 PUSH2 0x4A15 JUMP JUMPDEST SWAP10 PUSH1 0x60 DUP2 ADD MLOAD DUP1 DUP13 LT PUSH2 0x1DE1 JUMPI POP DUP11 ISZERO PUSH2 0x749 JUMPI DUP10 PUSH2 0x1184 DUP14 DUP6 SWAP5 DUP5 DUP16 SWAP10 PUSH2 0xBAA SWAP16 SWAP14 PUSH2 0x1DD5 SWAP2 PUSH2 0xB8D SWAP16 DUP16 DUP16 SWAP1 SWAP2 DUP16 SWAP3 DUP10 PUSH32 0x754F66F66F0AFCD87E3EDD11C0796FEF32599EFE490000FDB0F014E3AD9560FA SWAP2 DUP16 SWAP15 DUP16 DUP1 PUSH2 0x1DC6 SWAP3 MLOAD SWAP7 MLOAD AND SWAP7 MLOAD AND SWAP7 DUP9 MLOAD SWAP3 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP1 DUP9 DUP9 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD SWAP2 DUP6 DUP6 MLOAD AND SWAP3 PUSH2 0x5334 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x44 SWAP1 DUP13 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1E44 PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST SWAP1 PUSH2 0x49EB JUMP JUMPDEST PUSH2 0x17C SLOAD LT ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1E73 PUSH1 0xA0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x1EA1 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1EA9 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1EB1 PUSH2 0x59AE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x1EEA PUSH2 0x1ED6 PUSH2 0x819 PUSH2 0x1EE2 PUSH2 0x1ECE PUSH2 0x58F2 JUMP JUMPDEST DUP2 SWAP5 SWAP2 PUSH2 0x4DDB JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP6 DUP14 MLOAD PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP3 PUSH2 0x4E1E JUMP JUMPDEST DIV DUP1 ISZERO PUSH2 0x749 JUMPI PUSH2 0x1105 SWAP4 PUSH2 0x1EFD PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x10FA DUP4 DUP4 MLOAD AND DUP3 DUP6 DUP8 MLOAD AND PUSH2 0x16F SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x178 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1F61 SWAP1 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 MSTORE PUSH1 0x60 DUP5 ADD CALLVALUE DUP2 MSTORE PUSH1 0x80 DUP6 ADD CALLER DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xC0 DUP8 ADD SWAP3 DUP5 DUP5 MSTORE PUSH2 0x1F9F PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x1FA7 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x1FAF PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x1FB7 PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 SWAP3 DUP10 MLOAD PUSH2 0x1FC6 SWAP1 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 DUP10 DUP12 MLOAD SWAP1 PUSH2 0x1FD5 SWAP2 PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x1FDF SWAP1 DUP6 PUSH2 0x4DDB JUMP JUMPDEST DUP6 DUP2 DUP4 DUP13 MLOAD SWAP3 PUSH2 0x1FEE SWAP4 PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP4 PUSH2 0x2006 DUP5 DUP5 PUSH2 0x4E1E JUMP JUMPDEST PUSH2 0x200F SWAP2 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP7 DUP8 ISZERO PUSH2 0x749 JUMPI DUP13 PUSH2 0x2046 SWAP5 DUP16 SWAP15 PUSH2 0xA55 DUP16 SWAP2 PUSH2 0xA50 PUSH2 0x203C SWAP4 MLOAD PUSH2 0x819 DUP10 PUSH2 0xA4B DUP13 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST DIV SWAP15 DUP16 SWAP1 MLOAD PUSH2 0x51F0 JUMP JUMPDEST MLOAD DUP1 DUP11 LT PUSH2 0x2115 JUMPI POP PUSH2 0x2057 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x2076 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x172 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 SWAP10 SWAP1 SWAP9 DUP5 MLOAD DUP1 DUP13 GT PUSH2 0x14ED JUMPI POP DUP7 SWAP5 PUSH2 0x72A DUP6 DUP6 DUP16 DUP16 SWAP6 SWAP11 PUSH2 0xBAA SWAP16 SWAP15 SWAP13 SWAP8 PUSH2 0x210B PUSH2 0xB8D SWAP16 SWAP14 SWAP10 DUP16 SWAP12 DUP5 PUSH2 0x730 SWAP13 DUP2 SWAP16 SWAP15 DUP3 SWAP16 DUP8 MLOAD PUSH32 0xF4287B96E269F789F166DB491B07456566F468352771E466CE088E98D6007A0C DUP12 DUP7 DUP1 DUP11 MLOAD AND SWAP5 MLOAD AND SWAP5 PUSH2 0x20FE DUP8 MLOAD SWAP2 DUP1 MLOAD SWAP1 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x4CDD JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP3 MLOAD AND SWAP2 PUSH2 0x53C8 JUMP JUMPDEST MLOAD SWAP4 MLOAD AND SWAP3 PUSH2 0x5100 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x300 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI DUP1 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO SWAP1 DUP2 DUP1 SWAP3 PUSH2 0x2594 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x257D JUMPI JUMPDEST ISZERO PUSH2 0x2521 JUMPI PUSH1 0xFF NOT DUP2 AND PUSH1 0x1 OR DUP4 SSTORE DUP2 PUSH2 0x2510 JUMPI JUMPDEST POP DUP2 SLOAD SWAP1 PUSH2 0x2188 PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x2A4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x21C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x264 CALLDATALOAD SWAP1 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x284 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH1 0x1 SWAP2 PUSH2 0x21EF PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x21FE PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x220D PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x221C PUSH1 0xFF DUP7 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH2 0x223E PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 PUSH3 0x10000 DUP4 PUSH1 0xB0 SHL SUB SWAP1 PUSH1 0x10 SHL AND SWAP1 PUSH2 0xFF01 DUP4 PUSH1 0xB0 SHL SUB NOT AND OR OR PUSH1 0xCA SSTORE PUSH2 0x226F PUSH1 0xFF DUP4 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xA4 CALLDATALOAD LT PUSH2 0x24FE JUMPI PUSH2 0x228B PUSH1 0xE4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x2297 PUSH2 0x104 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22A3 PUSH2 0x124 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22AF PUSH2 0x144 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22BB PUSH2 0x164 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22C7 PUSH2 0x184 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22D3 PUSH2 0x1A4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22DF PUSH2 0x1C4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x22EB PUSH2 0x1E4 CALLDATALOAD PUSH2 0x5AF1 JUMP JUMPDEST PUSH2 0x2303 PUSH2 0x22FE PUSH2 0x224 CALLDATALOAD PUSH2 0x204 CALLDATALOAD PUSH2 0x480D JUMP JUMPDEST PUSH2 0x5AF1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x161 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x165 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x178 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x179 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x17B SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x17C SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x16D SSTORE PUSH2 0x104 CALLDATALOAD PUSH2 0x16E SSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x16F SSTORE PUSH2 0x144 CALLDATALOAD PUSH2 0x170 SSTORE PUSH2 0x164 CALLDATALOAD PUSH2 0x171 SSTORE PUSH2 0x184 CALLDATALOAD PUSH2 0x172 SSTORE PUSH2 0x1A4 CALLDATALOAD PUSH2 0x173 SSTORE PUSH2 0x1C4 CALLDATALOAD PUSH2 0x174 SSTORE PUSH2 0x1E4 CALLDATALOAD PUSH2 0x175 SSTORE PUSH2 0x204 CALLDATALOAD PUSH2 0x16B SSTORE PUSH2 0x224 CALLDATALOAD PUSH2 0x16C SSTORE PUSH2 0x244E PUSH2 0x244 CALLDATALOAD DUP1 PUSH2 0x17E SSTORE NUMBER PUSH2 0x480D JUMP JUMPDEST PUSH2 0x17F SSTORE PUSH2 0x17D PUSH2 0xFFFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0x2C4 CALLDATALOAD PUSH2 0x2471 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24FE JUMPI PUSH2 0x1B6 DUP2 SWAP1 SSTORE NUMBER ADD PUSH2 0x1B5 SSTORE PUSH2 0x2E4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH2 0x24A8 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0x4C56 JUMP JUMPDEST PUSH2 0x1E9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x24C6 JUMPI POP PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH2 0xFF00 NOT AND DUP2 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP2 PUSH2 0xCAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP3 SSTORE DUP3 PUSH2 0x2175 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2160 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x2160 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x2159 JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH2 0x6A0 SWAP2 PUSH2 0x25D8 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP7 DUP8 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A CALLER CALLER PUSH1 0x4 CALLDATALOAD PUSH2 0x56B7 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH1 0x4 CALLDATALOAD PUSH2 0x4B46 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2685 PUSH2 0x5AD0 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x26F3 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x26E1 JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2721 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x6A0 PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 MSTORE PUSH1 0x40 DUP2 ADD SWAP4 CALLVALUE DUP6 MSTORE PUSH1 0x60 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x80 DUP4 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xA0 DUP5 ADD SWAP2 DUP3 MSTORE PUSH2 0x275A PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x2762 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x276A PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x27B4 PUSH2 0x27A1 PUSH2 0x2778 PUSH2 0x58F2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2795 PUSH2 0x2788 DUP10 MLOAD DUP6 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x63B DUP6 DUP12 MLOAD PUSH2 0x5199 JUMP JUMPDEST SWAP2 DUP5 DUP11 MLOAD DUP11 MLOAD SWAP1 PUSH2 0x51F0 JUMP JUMPDEST PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP7 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP3 PUSH2 0x27BD PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x695 DUP3 DUP5 MLOAD AND DUP7 DUP5 DUP8 MLOAD AND PUSH2 0x688 DUP11 MLOAD PUSH2 0x176 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x1E9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 PUSH2 0x2836 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP4 SWAP2 SWAP3 PUSH1 0x40 MLOAD SWAP6 PUSH2 0x2847 SWAP1 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD CALLVALUE DUP2 MSTORE PUSH1 0x80 DUP6 ADD CALLER DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 PUSH1 0x1 PUSH1 0xA0 SHL PUSH1 0x1 SWAP1 SUB DUP1 SWAP2 AND DUP7 MSTORE PUSH1 0xC0 DUP8 ADD SWAP3 DUP5 DUP5 MSTORE PUSH2 0x2886 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x288E PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x2896 PUSH2 0x59AE JUMP JUMPDEST PUSH2 0x289E PUSH2 0x58F2 JUMP JUMPDEST SWAP8 SWAP1 DUP10 MLOAD PUSH2 0x28AC SWAP1 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP9 DUP10 DUP12 MLOAD SWAP1 PUSH2 0x28BB SWAP2 PUSH2 0x5199 JUMP JUMPDEST PUSH2 0x28C5 SWAP1 DUP3 PUSH2 0x4DDB JUMP JUMPDEST DUP3 DUP2 DUP4 DUP13 MLOAD SWAP3 PUSH2 0x28D4 SWAP4 PUSH2 0x576F JUMP JUMPDEST DUP10 MLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP4 PUSH2 0x28EC DUP5 DUP5 PUSH2 0x4E1E JUMP JUMPDEST PUSH2 0x28F5 SWAP2 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP4 DUP5 ISZERO PUSH2 0x749 JUMPI DUP13 PUSH2 0x2922 SWAP5 DUP16 SWAP15 PUSH2 0xA55 DUP16 SWAP2 PUSH2 0xA50 PUSH2 0x203C SWAP4 MLOAD PUSH2 0x819 DUP10 PUSH2 0xA4B DUP13 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD DUP1 DUP12 LT PUSH2 0x294F JUMPI POP PUSH2 0x2076 SWAP1 PUSH2 0x293B PUSH2 0x4CB6 JUMP JUMPDEST POP DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x172 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP12 PUSH1 0x40 MLOAD SWAP2 PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x17A SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x29B6 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17B SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x29D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x29EB PUSH1 0x40 SWAP8 SWAP4 SWAP8 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP6 ADD MSTORE CALLER PUSH1 0x80 DUP6 ADD DUP2 DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0xC0 DUP8 ADD SWAP1 DUP2 MSTORE SWAP1 SWAP5 SWAP1 PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2A46 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x172 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x2A62 CALLDATASIZE PUSH1 0x4 PUSH2 0x4282 JUMP JUMPDEST SWAP4 SWAP5 SWAP1 PUSH1 0x40 SWAP7 SWAP3 SWAP4 SWAP7 MLOAD SWAP2 PUSH2 0x2A79 PUSH2 0x100 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP6 DUP7 MSTORE PUSH1 0x40 DUP3 ADD SWAP7 DUP8 MSTORE PUSH1 0x60 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP7 CALLVALUE DUP9 MSTORE PUSH1 0xA0 DUP4 ADD SWAP5 CALLER DUP7 MSTORE PUSH1 0xC0 DUP5 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 DUP1 SWAP6 AND DUP5 MSTORE DUP5 DUP13 DUP8 ADD SWAP10 AND DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2AFC PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x173 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x166 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x174 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2B60 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16D SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2BBD PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xA0 DUP4 ADD SWAP2 DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2C0C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x170 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17B SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2C50 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND OR PUSH1 0xCA SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x2C7D PUSH2 0x58F2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x161 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x165 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 PUSH2 0x2CEE CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x2D01 PUSH1 0xC0 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP6 ADD SWAP4 DUP5 MSTORE CALLER PUSH1 0x60 DUP7 ADD DUP2 DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0xA0 DUP9 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP4 SWAP2 SWAP3 PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI PUSH2 0x93A PUSH1 0x20 SWAP2 CALLER PUSH1 0x4 CALLDATALOAD PUSH2 0x56B7 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x2DB1 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x17F DUP1 SLOAD NUMBER LT PUSH2 0x3030 JUMPI PUSH2 0x2DC9 PUSH2 0x17E SLOAD NUMBER PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH32 0xD3C59BDA47E141A8EC5A33D241B7F71B86E30D359F83A9227D912858B60404FC DUP2 PUSH1 0x40 MLOAD LOG1 DUP1 PUSH2 0x169 SLOAD PUSH2 0x2DFF DUP2 PUSH2 0x4A3A JUMP JUMPDEST SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT PUSH2 0x2F63 JUMPI POP POP DUP2 PUSH2 0x2E7B JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD SWAP1 DUP4 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x40 DUP3 DUP6 ADD MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x60 DUP6 ADD SWAP4 ADD SWAP2 DUP6 JUMPDEST DUP3 DUP2 LT PUSH2 0x2E67 JUMPI DUP7 PUSH32 0xAE5116A8119D08673A0F1DFA7546B95DA4BD54BB17FEDA7C61130AC7859152F6 DUP8 DUP8 SUB DUP9 LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2E34 JUMP JUMPDEST SWAP1 PUSH2 0x2E93 PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x16B SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 PUSH2 0x163 PUSH2 0x2EA3 DUP4 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x178 SLOAD PUSH2 0x12F DUP1 SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x2 EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP3 SSTORE DUP4 PUSH2 0x2ED5 JUMPI JUMPDEST POP PUSH1 0x1 SWAP1 SSTORE PUSH2 0x2E11 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F0C JUMPI DUP5 DUP1 DUP1 SWAP3 DUP7 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x2EEE PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI DUP5 PUSH2 0x2ECB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x2F6C DUP2 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x2F76 DUP2 DUP4 PUSH2 0x5199 JUMP JUMPDEST DUP6 PUSH2 0x180 SWAP2 PUSH2 0x2F85 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP1 DUP3 DUP3 SGT PUSH2 0x2FA1 JUMPI JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x2E02 JUMP JUMPDEST DUP5 PUSH2 0x2FE5 DUP4 PUSH1 0x1 SWAP8 SWAP7 SWAP11 PUSH2 0x2FCE PUSH2 0x2FD4 PUSH2 0x3004 SWAP8 PUSH2 0x2FEB SWAP8 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x16C SLOAD PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x2FDF DUP6 DUP14 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0x480D JUMP JUMPDEST SWAP9 PUSH2 0x4198 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x3027 PUSH2 0x3013 DUP3 DUP7 PUSH2 0x4830 JUMP JUMPDEST MLOAD DUP8 DUP5 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x179 SLOAD AND SWAP2 DUP5 PUSH2 0x5100 JUMP JUMPDEST SWAP1 DUP6 DUP8 DUP1 PUSH2 0x2F95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x101B6859 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x17C2 SWAP1 PUSH2 0x3057 CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 SWAP2 SWAP5 SWAP2 SWAP4 PUSH2 0x306A PUSH1 0xC0 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE CALLER PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 DUP9 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP9 ADD SWAP4 DUP5 MSTORE SWAP4 PUSH2 0x1752 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x30BE PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x175 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x3135 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x177 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1210 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x31E8 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0xFF NOT PUSH1 0xCA SLOAD AND PUSH1 0xCA SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x8EB JUMPI DUP3 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x32E6 JUMPI CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0x32E6 JUMPI DUP3 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x3246 DUP2 PUSH2 0x432E JUMP JUMPDEST SWAP3 PUSH2 0x3254 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP8 ADD ADD GT PUSH2 0x32E2 JUMPI PUSH2 0x12D6 SWAP6 PUSH1 0x20 DUP4 PUSH2 0x32D5 SWAP5 PUSH1 0x24 PUSH1 0x1 SWAP10 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x32AC DUP3 ADDRESS EQ ISZERO PUSH2 0x434A JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x43AB JUMP JUMPDEST PUSH2 0x32DD PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x440C JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP POP REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x16D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x179 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x169 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x40 PUSH2 0x3382 DUP5 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8EB JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x33D7 PUSH1 0xA0 DUP5 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x170 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0x3453 PUSH2 0x3463 PUSH2 0x345D PUSH2 0x344B PUSH2 0x58F2 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 PUSH2 0x4844 JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP6 PUSH2 0x5260 JUMP JUMPDEST SWAP3 PUSH2 0x4E1E JUMP JUMPDEST SWAP1 PUSH2 0x496A JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x34D4 JUMPI PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x26F3 JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH2 0x34F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x42B4 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x3507 PUSH1 0xA0 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 MSTORE DUP1 PUSH1 0x80 DUP8 ADD SWAP3 AND DUP3 MSTORE PUSH2 0x1085 PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3554 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x1B6 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x8EB JUMPI PUSH2 0x12D6 SWAP2 PUSH2 0x35BF DUP3 DUP6 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x32AC DUP3 ADDRESS EQ ISZERO PUSH2 0x434A JUMP JUMPDEST PUSH2 0x35C7 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x35D0 DUP3 PUSH2 0x432E JUMP JUMPDEST SWAP1 PUSH2 0x35DE PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x35ED DUP5 PUSH2 0x432E JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x440C JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3612 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x17D DUP1 SLOAD PUSH1 0xFF DUP2 AND DUP1 PUSH2 0x36E0 JUMPI JUMPDEST DUP1 PUSH2 0x36C6 JUMPI JUMPDEST PUSH2 0x3632 JUMPI JUMPDEST DUP3 PUSH1 0x40 MLOAD RETURN JUMPDEST PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 DUP3 DUP3 LOG1 PUSH2 0x165 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 EXTCODESIZE ISZERO PUSH2 0xCB4 JUMPI DUP3 PUSH1 0x4 DUP2 DUP5 DUP1 SWAP5 PUSH4 0x8456CB59 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x36B9 JUMPI PUSH2 0x36A9 JUMPI JUMPDEST POP POP PUSH2 0x36A2 PUSH2 0x4A6C JUMP JUMPDEST DUP2 DUP1 PUSH2 0x362C JUMP JUMPDEST PUSH2 0x36B2 SWAP2 PUSH2 0x42F6 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3698 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH2 0x36D5 PUSH2 0x1E3E PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x17C SLOAD LT ISZERO PUSH2 0x3627 JUMP JUMPDEST POP PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x3621 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x171 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3729 PUSH1 0xA0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x84B PUSH1 0x20 DUP4 ADD CALLVALUE DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE PUSH2 0x3757 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x375F PUSH2 0x5AD0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x3782 PUSH2 0x819 PUSH2 0x3779 PUSH2 0x807 PUSH2 0x4C1C JUMP JUMPDEST DUP7 MLOAD SWAP3 SWAP2 PUSH2 0x4E1E JUMP JUMPDEST DIV SWAP6 PUSH2 0x378C PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x840 DUP2 DUP4 MLOAD AND DUP10 DUP4 DUP7 MLOAD AND PUSH2 0x16E SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x175 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xCB4 JUMPI PUSH2 0x37F6 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x383C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x17C SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x172 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3896 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x179 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x17D SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x38F0 PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x174 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3923 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x17D SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x93A PUSH2 0xD8B PUSH2 0x11D1 PUSH2 0x4C1C JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x39BF JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x398B PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 CALLVALUE DUP5 MSTORE PUSH1 0x60 DUP2 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 DUP8 DUP3 MSTORE PUSH2 0xD3B PUSH2 0x4D05 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x17F SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A03 PUSH1 0xC0 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH2 0x17C2 PUSH1 0x20 DUP4 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP8 ADD SWAP3 DUP4 MSTORE PUSH2 0x3A3D PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3A45 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3A80 PUSH2 0x3A50 PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0x3A6B PUSH2 0x3A5E DUP11 MLOAD DUP4 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x807 DUP4 DUP13 MLOAD PUSH2 0x5199 JUMP JUMPDEST POP POP PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP6 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP2 PUSH2 0x3A89 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0x17B7 DUP5 DUP5 MLOAD AND DUP3 DUP7 DUP9 MLOAD AND PUSH2 0x688 DUP14 MLOAD PUSH2 0x177 PUSH2 0x4198 JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI PUSH2 0x1C8A SWAP2 PUSH2 0x3AC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4260 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 PUSH2 0x3AD4 PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x80 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xC0 DUP4 ADD DUP5 DUP2 MSTORE PUSH2 0x3B0A PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3B12 PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3B3D PUSH2 0x3B1D PUSH2 0x4C1C JUMP JUMPDEST PUSH2 0xA50 PUSH2 0x1C95 PUSH2 0x3B2E DUP9 MLOAD DUP5 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP13 DUP14 SWAP4 PUSH2 0x1C81 DUP6 DUP12 MLOAD PUSH2 0x5199 JUMP JUMPDEST DIV SWAP11 MLOAD DUP1 DUP13 GT PUSH2 0x1DFF JUMPI POP SWAP2 PUSH2 0x1CE5 DUP12 PUSH2 0x1CDF PUSH2 0x3B9E SWAP12 SWAP13 SWAP14 SWAP15 SWAP5 PUSH2 0x660 DUP6 PUSH2 0x1CD9 PUSH2 0x3B6B SWAP10 DUP13 MLOAD SWAP10 PUSH2 0x4E1E JUMP JUMPDEST SWAP5 PUSH2 0x3B74 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x3B93 DUP3 DUP11 MLOAD AND DUP9 DUP5 DUP7 MLOAD AND PUSH2 0x173 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST SWAP8 SWAP2 DUP10 SWAP11 SWAP2 SWAP11 PUSH2 0x4A15 JUMP JUMPDEST SWAP11 MLOAD DUP1 DUP13 LT PUSH2 0x1DE1 JUMPI POP DUP11 ISZERO PUSH2 0x749 JUMPI DUP10 PUSH2 0x1184 DUP14 DUP6 SWAP5 DUP5 DUP16 SWAP10 PUSH2 0xBAA SWAP16 SWAP14 PUSH2 0x1DD5 SWAP2 PUSH2 0xB8D SWAP16 DUP16 DUP16 SWAP1 SWAP2 DUP16 SWAP3 DUP10 PUSH32 0x754F66F66F0AFCD87E3EDD11C0796FEF32599EFE490000FDB0F014E3AD9560FA SWAP2 DUP16 SWAP15 DUP16 DUP1 PUSH2 0x1DC6 SWAP3 MLOAD SWAP7 MLOAD AND SWAP7 MLOAD AND SWAP7 DUP9 MLOAD SWAP3 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 SWAP4 SWAP1 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 SWAP6 SWAP3 PUSH1 0xE0 DUP7 ADD SWAP10 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xCB4 JUMPI SWAP1 PUSH2 0x1C81 SWAP2 PUSH2 0x3C60 CALLDATASIZE PUSH1 0x4 PUSH2 0x4282 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 SWAP5 PUSH2 0x3C74 PUSH1 0x40 SWAP9 SWAP5 SWAP9 MLOAD SWAP8 DUP9 PUSH2 0x42F6 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP7 DUP8 MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xA0 DUP7 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND DUP4 MSTORE DUP5 PUSH1 0xC0 DUP9 ADD SWAP2 AND DUP2 MSTORE PUSH2 0x1C4E PUSH2 0x4D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x3CC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4260 JUMP JUMPDEST PUSH1 0x40 SWAP3 SWAP2 SWAP3 MLOAD SWAP4 PUSH2 0x3CD3 PUSH2 0x100 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x40 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x194C PUSH1 0x80 DUP6 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 CALLER DUP5 MSTORE PUSH1 0xC0 DUP3 ADD SWAP6 CALLER DUP8 MSTORE DUP9 DUP4 ADD SWAP6 DUP11 DUP8 MSTORE PUSH2 0x3D14 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3D1C PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3D24 PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1C280CE1 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP4 MLOAD PUSH1 0x24 DUP6 ADD MSTORE MLOAD PUSH1 0x44 DUP5 ADD MSTORE MLOAD PUSH1 0x64 DUP4 ADD MSTORE MLOAD PUSH1 0x84 DUP3 ADD MSTORE DUP6 MLOAD PUSH1 0xA4 DUP3 ADD MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xC4 DUP4 ADD MSTORE SWAP5 MLOAD DUP6 AND PUSH1 0xE4 DUP3 ADD MSTORE DUP4 MLOAD DUP6 AND PUSH2 0x104 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MSTORE PUSH2 0x1941 PUSH2 0x124 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3DBB PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x162 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x3DEE PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x171 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST SWAP1 POP PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xCB4 JUMPI PUSH2 0x3E15 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE PUSH1 0x40 DUP2 ADD SWAP3 PUSH1 0x44 CALLDATALOAD DUP5 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x80 DUP4 ADD CALLER DUP2 MSTORE DUP5 PUSH1 0xA0 DUP6 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE PUSH2 0x3E56 PUSH2 0x4D05 JUMP JUMPDEST PUSH2 0x3E5E PUSH2 0x5AD0 JUMP JUMPDEST PUSH2 0x3EA3 PUSH2 0xA50 PUSH2 0x660 DUP6 PUSH2 0x1419 DUP12 PUSH2 0x3E77 PUSH2 0x13CC PUSH2 0x4C1C JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0xA4B PUSH2 0x140F PUSH2 0x3E97 DUP6 PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 DUP1 SWAP11 MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP13 MLOAD PUSH2 0x166 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST SWAP9 MLOAD DUP1 DUP11 LT DUP1 ISZERO PUSH2 0x3EF9 JUMPI JUMPDEST PUSH2 0x3EDB JUMPI POP PUSH2 0x3EBC PUSH2 0x4CB6 JUMP JUMPDEST POP PUSH2 0x1450 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 DUP7 MLOAD AND SWAP1 DUP6 DUP9 MLOAD AND PUSH2 0x171 SLOAD SWAP3 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x44 SWAP1 DUP11 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP DUP10 ISZERO PUSH2 0x3EAF JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xCB4 JUMPI PUSH2 0x3F30 PUSH2 0x5A42 JUMP JUMPDEST PUSH2 0x178 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x1B5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP PUSH2 0x194C PUSH2 0x3FA1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4235 JUMP JUMPDEST SWAP5 SWAP1 SWAP2 SWAP4 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3FB5 PUSH2 0x100 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 DUP2 ADD SWAP6 CALLVALUE DUP8 MSTORE PUSH1 0xA0 DUP3 ADD SWAP4 CALLER DUP6 MSTORE PUSH1 0xC0 DUP4 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 DUP1 SWAP5 AND DUP4 MSTORE DUP11 DUP6 ADD SWAP8 DUP13 DUP10 MSTORE PUSH2 0x18D6 PUSH2 0x4D05 JUMP JUMPDEST SWAP1 POP PUSH2 0x400B CALLDATASIZE PUSH1 0x4 PUSH2 0x420F JUMP JUMPDEST SWAP2 SWAP4 SWAP3 PUSH2 0x401E PUSH1 0x40 SWAP7 SWAP3 SWAP7 MLOAD SWAP5 DUP6 PUSH2 0x42F6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 CALLVALUE DUP4 MSTORE PUSH1 0x80 DUP5 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0xA0 DUP6 ADD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE PUSH1 0xC0 DUP7 ADD SWAP4 DUP1 DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST DUP3 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x5A1 JUMPI POP PUSH2 0x6A0 PUSH1 0x40 MLOAD PUSH2 0x4095 PUSH1 0xC0 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x24 CALLDATALOAD DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP5 CALLVALUE DUP7 MSTORE PUSH1 0x60 DUP4 ADD CALLER DUP2 MSTORE PUSH1 0x80 DUP5 ADD SWAP6 CALLER DUP8 MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 DUP4 MSTORE PUSH2 0x600 PUSH2 0x4D05 JUMP JUMPDEST DUP3 PUSH2 0x40D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x41DA JUMP JUMPDEST SWAP2 SWAP6 SWAP4 PUSH2 0x40E8 PUSH1 0x40 SWAP7 SWAP5 SWAP7 MLOAD SWAP6 DUP7 PUSH2 0x42F6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP5 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP5 ADD SWAP1 CALLVALUE DUP3 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 CALLER DUP4 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND DUP7 MSTORE DUP3 PUSH1 0xC0 DUP9 ADD SWAP6 AND DUP6 MSTORE PUSH2 0x13AA PUSH2 0x4D05 JUMP JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH2 0x167 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5A1 JUMPI PUSH1 0x20 PUSH2 0x4159 DUP5 DUP5 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST DUP3 CALLVALUE PUSH2 0x5A1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5A1 JUMPI PUSH2 0x418C PUSH2 0x5A42 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH2 0x16C SSTORE PUSH1 0x40 MLOAD RETURN JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x8EB JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP1 CALLDATALOAD SWAP2 PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x80 PUSH2 0x4205 PUSH1 0x60 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x60 PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP1 CALLDATALOAD SWAP2 PUSH1 0x20 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x80 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x60 PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0xA0 PUSH2 0x4205 PUSH1 0x80 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x8EB JUMPI DUP2 CALLDATALOAD SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH2 0x420C PUSH1 0x60 PUSH2 0x4205 PUSH1 0x40 DUP6 ADD PUSH2 0x41C6 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 SHL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4318 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4318 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4351 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x43B2 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x4446 JUMPI POP PUSH2 0x4444 SWAP2 POP PUSH2 0x465F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP2 DUP6 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x4630 JUMPI JUMPDEST POP PUSH2 0x44D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP5 SWAP3 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x45D9 JUMPI PUSH2 0x4509 DUP5 PUSH2 0x465F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP5 LOG2 DUP5 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x45D1 JUMPI JUMPDEST POP PUSH2 0x454A JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST DUP3 EXTCODESIZE ISZERO PUSH2 0x4582 JUMPI POP DUP3 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH2 0x4578 SWAP6 MLOAD SWAP3 ADD SWAP1 GAS DELEGATECALL PUSH2 0x456A PUSH2 0x4701 JUMP JUMPDEST PUSH2 0x4572 PUSH2 0x4731 JUMP JUMPDEST SWAP2 PUSH2 0x4785 JUMP JUMPDEST POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x4544 JUMP JUMPDEST PUSH1 0x84 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0x453E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4658 JUMPI JUMPDEST PUSH2 0x4647 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x4475 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x463D JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x46A6 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x472C JUMPI RETURNDATASIZE SWAP1 PUSH2 0x4712 DUP3 PUSH2 0x432E JUMP JUMPDEST SWAP2 PUSH2 0x4720 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x42F6 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x473B PUSH1 0x27 PUSH2 0x432E JUMP JUMPDEST SWAP1 PUSH2 0x4749 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x27 DUP3 MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP4 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 SWAP2 ISZERO PUSH2 0x4794 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x4444 SWAP2 SWAP4 SWAP3 JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO PUSH2 0x47AE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x47F4 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x47D1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x481A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x41B0 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x169 DUP1 SLOAD SWAP1 PUSH1 0x0 SWAP3 JUMPDEST DUP3 DUP5 LT PUSH2 0x487B JUMPI POP POP POP POP PUSH2 0x4877 PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x16B SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP6 PUSH2 0x48CA DUP6 PUSH2 0x48C4 PUSH1 0x1 SWAP4 PUSH2 0xDE3 PUSH2 0x4897 DUP5 DUP9 PUSH2 0x4830 JUMP JUMPDEST MLOAD PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 DUP12 PUSH2 0x48BD PUSH2 0x48B5 DUP7 DUP12 PUSH2 0x48F0 JUMP JUMPDEST SWAP11 SWAP1 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP9 PUSH2 0x480D JUMP JUMPDEST SWAP5 ADD SWAP3 SWAP2 SWAP1 PUSH2 0x4855 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x0 DUP4 DUP3 ADD SWAP4 DUP5 SLT SWAP2 SLT SWAP1 DUP1 ISZERO DUP3 AND SWAP2 ISZERO AND OR PUSH2 0x481A JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x491E DUP2 PUSH1 0x0 SWAP6 PUSH2 0x4914 PUSH2 0x490B DUP3 PUSH2 0x180 PUSH2 0x4198 JUMP JUMPDEST SWAP4 SWAP1 SLOAD SWAP3 PUSH2 0x498A JUMP JUMPDEST SWAP2 PUSH1 0x3 SHL SHR PUSH2 0x48D4 JUMP JUMPDEST PUSH1 0x0 DUP2 SGT PUSH2 0x492D JUMPI JUMPDEST POP POP SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x494F SWAP2 SWAP5 POP PUSH2 0x2FCE SWAP3 POP DUP1 SWAP5 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP2 PUSH2 0x16C SLOAD PUSH2 0x4957 JUMP JUMPDEST DIV CODESIZE DUP1 PUSH2 0x4927 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x481A JUMPI MUL SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x4974 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x49D0 SWAP1 PUSH2 0x49CA PUSH2 0x49BD PUSH2 0x49B4 PUSH8 0xDE0B6B3A7640000 PUSH2 0x49AD DUP8 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP5 PUSH2 0x181 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR DUP5 PUSH2 0x496A JUMP JUMPDEST SWAP3 PUSH2 0x496A JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 DUP3 SUB SWAP3 SLT DUP2 DUP4 SLT DUP2 AND SWAP2 DUP4 SGT SWAP1 ISZERO AND OR PUSH2 0x481A JUMPI SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4A0D JUMPI PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x420C SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x481A JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4318 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4A44 DUP3 PUSH2 0x4A22 JUMP JUMPDEST PUSH2 0x4A51 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x42F6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x4A62 PUSH1 0x1F NOT SWAP2 PUSH2 0x4A22 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0x163 SLOAD DUP1 ISZERO PUSH2 0x4B43 JUMPI PUSH2 0x169 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x0 SWAP1 PUSH2 0x4A89 DUP5 PUSH2 0x4A3A JUMP JUMPDEST SWAP1 DUP3 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH2 0x4AF3 JUMPI POP POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x4AA7 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4ABF DUP5 PUSH2 0x660 DUP6 PUSH2 0x4AB9 DUP6 DUP8 PUSH2 0x4830 JUMP JUMPDEST MLOAD PUSH2 0x4957 JUMP JUMPDEST SWAP1 PUSH2 0x16A SWAP2 DUP3 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x4318 JUMPI PUSH2 0x2FEB DUP2 PUSH1 0x1 SWAP6 DUP7 PUSH2 0x4AEB SWAP5 ADD DUP2 SSTORE PUSH2 0x4198 JUMP JUMPDEST SWAP1 SSTORE ADD PUSH2 0x4A99 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x4B3B PUSH1 0x1 SWAP2 PUSH2 0x4B04 DUP7 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x4B0E DUP8 DUP8 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0xDE3 PUSH2 0x4B1C DUP8 DUP7 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD PUSH2 0x660 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4B34 DUP11 DUP11 PUSH2 0x4830 JUMP JUMPDEST MLOAD SWAP3 PUSH2 0x4957 JUMP JUMPDEST SWAP4 ADD SWAP1 PUSH2 0x4A8D JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x4B52 SWAP1 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4B69 DUP2 PUSH2 0x4B9A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ISZERO PUSH2 0x4B75 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x7F6E4DB9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x8EB JUMPI JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4C11 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP5 PUSH2 0x4BD4 JUMPI POP POP SWAP2 SWAP1 JUMP JUMPDEST SWAP1 DUP1 SWAP5 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4C0A JUMPI JUMPDEST PUSH2 0x4BEB DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP PUSH2 0x4C02 PUSH1 0x20 DUP4 MLOAD SWAP4 ADD PUSH2 0x4B8D JUMP JUMPDEST SWAP2 CODESIZE DUP1 PUSH2 0x4927 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4BE1 JUMP JUMPDEST POP MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x169 SLOAD SWAP1 PUSH2 0x4C2A DUP3 PUSH2 0x4A3A JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x4C39 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x4C45 PUSH1 0x1 SWAP3 PUSH2 0x4B46 JUMP JUMPDEST PUSH2 0x4C4F DUP3 DUP8 PUSH2 0x4830 JUMP JUMPDEST MSTORE ADD PUSH2 0x4C2E JUMP JUMPDEST ISZERO PUSH2 0x4C5D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x4CC5 PUSH1 0x80 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP3 PUSH1 0xA0 SWAP5 SWAP2 SWAP8 SWAP7 SWAP6 SWAP3 PUSH1 0xC0 DUP6 ADD SWAP9 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0xFF PUSH2 0x17D SLOAD PUSH1 0x8 SHR AND PUSH2 0x4D15 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1CA61D77 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x4D8D SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x166 PUSH2 0x4D3C DUP5 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x4D4C PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x165 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 SWAP4 DUP5 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x4D9E JUMPI POP JUMP JUMPDEST PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x4DC7 JUMPI JUMPDEST DUP2 PUSH2 0x4DB6 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI PUSH2 0x4B43 SWAP1 PUSH2 0x4B8D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4DA9 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x4DE6 SWAP1 PUSH2 0x4844 JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH2 0x4DF3 DUP4 DUP6 PUSH2 0x49EB JUMP JUMPDEST SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x4E00 JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x79121201 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH2 0x166 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x4E4A JUMPI PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x420C SWAP5 PUSH2 0xA4B PUSH2 0x660 SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST POP POP POP PUSH8 0xDE0B6B3A7640000 SWAP1 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP7 PUSH2 0x4E6D PUSH2 0x4CB6 JUMP JUMPDEST SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP6 SWAP1 DUP4 AND DUP1 PUSH2 0x507D JUMPI JUMPDEST POP DUP3 PUSH2 0x161 SLOAD AND DUP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP6 MSTORE AND DUP1 PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x20 SWAP5 DUP6 DUP6 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x5072 JUMPI DUP5 SWAP6 PUSH2 0x503F JUMPI JUMPDEST POP DUP5 PUSH2 0x4F1E JUMPI JUMPDEST POP POP POP POP POP DUP7 ADD MLOAD ISZERO PUSH2 0x4EDA JUMPI JUMPDEST POP POP POP SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH2 0x4EF2 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 SWAP3 PUSH2 0x4957 JUMP JUMPDEST DIV DUP1 DUP6 MSTORE SWAP1 DUP3 ISZERO PUSH2 0x4F16 JUMPI PUSH2 0x4F0E SWAP3 DIV SWAP1 DUP2 PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x480D JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x4ED2 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x4F0E JUMP JUMPDEST PUSH2 0x4F2C SWAP1 PUSH2 0x162 SLOAD AND PUSH2 0x4B9A JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ISZERO PUSH2 0x4EC4 JUMPI SWAP1 SWAP2 SWAP3 SWAP4 SWAP12 POP DUP5 DUP12 PUSH2 0x4F66 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4F60 PUSH2 0x4F56 DUP14 DUP14 PUSH2 0x4957 JUMP JUMPDEST PUSH2 0x175 SLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV PUSH2 0x496A JUMP JUMPDEST DUP2 DUP4 ADD DUP2 DUP2 MSTORE SWAP6 SWAP1 DUP12 ISZERO PUSH2 0x5035 JUMPI POP PUSH2 0x4F91 SWAP2 PUSH2 0x4F85 PUSH1 0x60 SWAP3 DUP14 PUSH2 0x496A JUMP JUMPDEST SWAP2 DUP3 SWAP2 ADD MSTORE DUP6 MLOAD PUSH2 0x480D JUMP JUMPDEST DUP1 SWAP14 JUMPDEST LT SWAP3 DUP4 ISZERO PUSH2 0x4FC0 JUMPI JUMPDEST POP POP POP PUSH2 0x4FAD JUMPI JUMPDEST DUP1 DUP1 DUP1 PUSH2 0x4EC4 JUMP JUMPDEST DUP2 SWAP3 SWAP10 POP MSTORE DUP1 PUSH1 0x60 DUP9 ADD MSTORE SWAP7 CODESIZE DUP1 PUSH2 0x4FA5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x502A JUMPI SWAP1 DUP12 SWAP2 DUP5 SWAP2 PUSH2 0x4FF9 JUMPI JUMPDEST POP LT CODESIZE DUP5 DUP2 PUSH2 0x4F9D JUMP JUMPDEST DUP1 SWAP3 POP DUP6 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x5023 JUMPI JUMPDEST PUSH2 0x5012 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x39BF JUMPI DUP11 SWAP1 MLOAD CODESIZE PUSH2 0x4FEF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5008 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP POP DUP1 SWAP14 PUSH2 0x4F94 JUMP JUMPDEST SWAP1 SWAP5 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x506B JUMPI JUMPDEST PUSH2 0x5057 DUP2 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5067 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x4EBD JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x504D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 POP PUSH1 0x20 DUP4 PUSH2 0x1E9 SLOAD AND SWAP2 PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x64A731E9 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP1 ISZERO PUSH2 0x50F5 JUMPI DUP7 SWAP1 PUSH2 0x50C2 JUMPI JUMPDEST PUSH2 0x50BB SWAP2 POP DUP5 PUSH2 0x4957 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4E81 JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE DUP3 GT PUSH2 0x50ED JUMPI JUMPDEST DUP2 PUSH2 0x50DB PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32E2 JUMPI PUSH2 0x50BB SWAP1 MLOAD PUSH2 0x50B0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x50CE JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5178 SWAP4 PUSH2 0x513F PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP6 PUSH2 0x5119 DUP3 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x5125 DUP8 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x5135 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x167 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 SWAP5 DUP6 SWAP4 SWAP3 DUP5 SWAP3 SWAP1 SWAP2 DUP4 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x4D9E JUMPI POP JUMP JUMPDEST PUSH2 0x2FEB PUSH2 0x51EC SWAP2 PUSH2 0x51AA DUP5 DUP3 PUSH2 0x498A JUMP JUMPDEST PUSH2 0x51E2 PUSH2 0x51B9 DUP4 PUSH2 0x180 PUSH2 0x4198 JUMP JUMPDEST PUSH2 0x51CC DUP3 SWAP5 SWAP3 SLOAD SWAP3 DUP4 DUP4 PUSH1 0x3 SHL SHR PUSH2 0x48D4 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x181 PUSH2 0x4198 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH2 0x934 DUP4 PUSH2 0x5202 SWAP7 SWAP5 SWAP4 SWAP8 SWAP6 PUSH2 0x584A JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x520D JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 PUSH2 0x523A SWAP4 PUSH2 0xA50 SWAP3 SWAP6 PUSH2 0x5260 JUMP JUMPDEST PUSH8 0xDE0B6B3A763FFFF NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x481A JUMPI PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x4877 SWAP2 PUSH2 0x496A JUMP JUMPDEST SWAP1 SWAP2 DUP2 PUSH2 0x526D DUP3 DUP6 PUSH2 0x49EB JUMP JUMPDEST GT ISZERO PUSH2 0x5299 JUMPI PUSH2 0x420C SWAP3 PUSH2 0x1419 PUSH8 0xDE0B6B3A7640000 PUSH2 0xA50 PUSH2 0x5293 SWAP5 PUSH2 0x163 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 PUSH2 0x4A15 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x420C SWAP2 PUSH1 0x0 DUP1 PUSH2 0x52B1 PUSH2 0x4731 JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x52C3 PUSH2 0x4701 JUMP JUMPDEST SWAP3 PUSH1 0x60 SWAP2 ISZERO PUSH2 0x5327 JUMPI POP POP DUP2 MLOAD ISZERO PUSH2 0x52D9 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x52E2 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 PUSH2 0x4444 SWAP3 POP PUSH2 0x479B JUMP JUMPDEST PUSH2 0x5362 SWAP2 SWAP4 SWAP3 PUSH2 0x5346 DUP3 PUSH2 0x169 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x5352 DUP7 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x5135 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH2 0x53BD JUMPI POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4444 SWAP2 PUSH2 0x42F6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x166 PUSH2 0x53D8 DUP5 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x53E8 PUSH2 0x163 SWAP2 DUP3 SLOAD PUSH2 0x4A15 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x165 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x8EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 DUP2 DUP4 DUP2 PUSH1 0x44 DUP2 ADD PUSH2 0x53AC JUMP JUMPDEST DUP5 MLOAD SWAP3 SWAP5 SWAP4 SWAP2 SWAP3 PUSH1 0x0 SWAP2 SWAP1 ISZERO PUSH2 0x555B JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x545C PUSH2 0x16D SLOAD DUP7 MLOAD SWAP1 PUSH2 0x4957 JUMP JUMPDEST DIV SWAP2 PUSH2 0x163 PUSH2 0x546C DUP5 DUP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x178 SLOAD DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP2 DUP8 AND SWAP5 PUSH2 0x548A SWAP2 PUSH2 0x4A15 JUMP JUMPDEST PUSH2 0x12F SWAP5 PUSH1 0x2 DUP7 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP7 SSTORE DUP2 PUSH2 0x5534 JUMPI JUMPDEST POP POP PUSH1 0x40 ADD MLOAD SWAP2 SWAP5 PUSH1 0x2 DUP5 SSTORE DUP3 PUSH2 0x550A JUMPI JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SSTORE JUMPDEST PUSH2 0x12F SWAP3 PUSH1 0x2 DUP5 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP5 SSTORE DUP1 PUSH2 0x54DB JUMPI JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x2F0C JUMPI DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x54FC PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 DUP1 PUSH2 0x54D2 JUMP JUMPDEST DUP2 AND ISZERO PUSH2 0x2F0C JUMPI PUSH1 0x0 DUP1 SWAP3 SWAP2 DUP2 SWAP3 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x5526 PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 DUP1 PUSH2 0x54B3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F0C JUMPI DUP5 DUP1 SWAP3 SWAP2 DUP2 SWAP3 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x554E PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 PUSH2 0x54A1 JUMP JUMPDEST PUSH2 0x178 SLOAD PUSH1 0x20 DUP7 ADD MLOAD SWAP3 SWAP6 PUSH2 0x558B SWAP5 SWAP3 SWAP4 PUSH1 0x60 SWAP3 PUSH2 0x5583 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH2 0x5590 JUMP JUMPDEST ADD MLOAD SWAP2 PUSH2 0x5590 JUMP JUMPDEST PUSH2 0x54BB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP2 PUSH2 0x559D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x5636 SWAP2 PUSH1 0x0 DUP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 PUSH2 0x161 SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP6 PUSH1 0x20 SWAP9 DUP2 DUP11 DUP10 ADD SWAP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP7 MSTORE AND PUSH1 0x24 DUP10 ADD MSTORE AND PUSH1 0x44 DUP8 ADD MSTORE PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x64 DUP6 MSTORE PUSH2 0x55E9 PUSH1 0x84 DUP7 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x55F2 DUP8 PUSH2 0x432E JUMP JUMPDEST SWAP5 PUSH2 0x5600 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x42F6 JUMP JUMPDEST DUP8 DUP7 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP9 DUP8 ADD MSTORE MLOAD SWAP1 DUP3 DUP6 GAS CALL PUSH2 0x52C3 PUSH2 0x4701 JUMP JUMPDEST DUP1 MLOAD DUP1 PUSH2 0x5642 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP4 SWAP2 DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI DUP2 PUSH2 0x5658 SWAP2 ADD PUSH2 0x4B8D JUMP JUMPDEST ISZERO PUSH2 0x5660 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x5717 SWAP1 PUSH2 0x56C3 PUSH2 0x5AD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE01DCE2D PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE DUP4 DUP4 AND PUSH1 0x64 DUP3 ADD DUP2 SWAP1 MSTORE SELFBALANCE PUSH1 0x84 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE SWAP3 PUSH2 0x570D PUSH1 0xA4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST PUSH2 0x21C SLOAD AND PUSH2 0x52A1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI PUSH1 0x20 ADD MLOAD SWAP2 PUSH2 0x12F SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x2F1E JUMPI PUSH1 0x2 DUP4 SSTORE DUP4 PUSH2 0x5749 JUMPI JUMPDEST POP POP PUSH1 0x1 SWAP1 SSTORE SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2F0C JUMPI PUSH1 0x0 DUP1 DUP1 SWAP3 DUP6 PUSH1 0x40 MLOAD SWAP2 GAS CALL PUSH2 0x5762 PUSH2 0x4701 JUMP JUMPDEST POP ISZERO PUSH2 0x2EFA JUMPI CODESIZE DUP1 PUSH2 0x5740 JUMP JUMPDEST SWAP3 DUP1 PUSH2 0x345D PUSH2 0x3463 SWAP3 DUP6 PUSH2 0x5783 SWAP7 SWAP6 PUSH2 0x5260 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x578E JUMPI POP POP JUMP JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP3 SWAP2 PUSH1 0xC0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x57C9 DUP4 PUSH2 0x41C6 JUMP JUMPDEST AND DUP6 MSTORE PUSH2 0x57D8 PUSH1 0x20 DUP4 ADD PUSH2 0x41C6 JUMP JUMPDEST AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH1 0xA0 DUP6 ADD MSTORE ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x17F SLOAD DUP1 NUMBER LT ISZERO PUSH2 0x5824 JUMPI PUSH2 0x420C SWAP1 NUMBER SWAP1 PUSH2 0x4A15 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x5839 PUSH1 0x40 DUP3 PUSH2 0x42F6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 DUP3 SWAP5 DUP1 SLOAD DUP5 MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x5856 DUP2 PUSH2 0x17A PUSH2 0x4198 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP2 PUSH2 0x1B4 SWAP2 PUSH2 0x586C DUP2 DUP5 PUSH2 0x42DA JUMP JUMPDEST POP SLOAD SWAP3 PUSH2 0x1B5 SLOAD NUMBER LT ISZERO PUSH2 0x5897 JUMPI JUMPDEST POP POP DUP1 DUP3 LT ISZERO PUSH2 0x5892 JUMPI PUSH2 0x660 SWAP1 PUSH2 0x420C SWAP4 PUSH2 0x4957 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST DUP3 SWAP4 POP PUSH2 0x58AB PUSH2 0x58B6 SWAP4 SWAP3 PUSH2 0x58B1 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0x582A JUMP JUMPDEST PUSH2 0x58BE JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x587B JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP1 MLOAD SWAP3 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SUB SWAP1 DUP5 DUP3 GT PUSH2 0x481A JUMPI PUSH2 0x58EB PUSH2 0xDE3 SWAP3 PUSH2 0x4877 SWAP6 PUSH2 0x4957 JUMP JUMPDEST SWAP3 MLOAD PUSH2 0x4957 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x169 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x5905 DUP5 PUSH2 0x4A3A JUMP JUMPDEST SWAP4 DUP3 SWAP2 JUMPDEST DUP6 DUP3 DUP5 LT PUSH2 0x5934 JUMPI POP POP POP POP DUP2 ISZERO PUSH2 0x5928 JUMPI SWAP1 PUSH2 0x5925 SWAP2 PUSH2 0x496A JUMP JUMPDEST SWAP2 JUMP JUMPDEST POP POP PUSH2 0x17B SLOAD PUSH1 0x1 SHL SWAP2 JUMP JUMPDEST PUSH2 0xA50 PUSH2 0x599F DUP6 SWAP8 SWAP7 PUSH2 0xDE3 PUSH2 0x596E PUSH2 0x5996 DUP10 PUSH2 0x660 DUP10 PUSH2 0xA50 PUSH2 0x5980 DUP5 PUSH1 0x1 SWAP14 SWAP15 SWAP16 SWAP13 PUSH2 0x5964 PUSH2 0x59A5 SWAP15 PUSH2 0x4B46 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP3 PUSH2 0x4830 JUMP JUMPDEST MSTORE PUSH2 0x5979 DUP7 DUP3 PUSH2 0x48F0 JUMP JUMPDEST POP SWAP4 PUSH2 0x42DA JUMP JUMPDEST POP PUSH2 0xA50 PUSH8 0xDE0B6B3A7640000 SWAP4 DUP5 SWAP3 SLOAD PUSH2 0x480D JUMP JUMPDEST SWAP5 DUP6 SWAP2 DUP13 PUSH2 0x584A JUMP JUMPDEST SWAP6 PUSH2 0x480D JUMP JUMPDEST SWAP5 ADD SWAP2 SWAP1 PUSH2 0x5909 JUMP JUMPDEST PUSH2 0x1B5 DUP1 SLOAD NUMBER LT ISZERO PUSH2 0x59BD JUMPI POP JUMP JUMPDEST PUSH2 0x169 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x59D7 JUMPI POP POP PUSH2 0x1B6 SLOAD NUMBER ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 DUP1 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 PUSH1 0x1 SWAP4 PUSH2 0x1B4 PUSH2 0x5A0D PUSH2 0x58AB DUP4 DUP4 PUSH2 0x42DA JUMP JUMPDEST SWAP1 PUSH2 0x5A2B PUSH2 0x5A23 PUSH2 0x5A1D DUP6 PUSH2 0x4B46 JUMP JUMPDEST DUP5 PUSH2 0x58BE JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x42DA JUMP JUMPDEST POP SSTORE MLOAD PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG2 ADD PUSH2 0x59C4 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4DCF JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5A97 JUMPI JUMPDEST POP ISZERO PUSH2 0x5A85 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x5AC8 JUMPI JUMPDEST DUP2 PUSH2 0x5AB0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x42F6 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x5A1 JUMPI POP PUSH2 0x5AC2 SWAP1 PUSH2 0x4B8D JUMP JUMPDEST CODESIZE PUSH2 0x5A7D JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5AA3 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x5ADF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 LT PUSH2 0x24FE JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST PUSH12 0xE375B46AF0333A56ACEC51EF 0xC5 CODESIZE ADDMOD REVERT SWAP7 0xF6 SWAP15 EXP DUP12 PUSH17 0x1ED1BBB23E8E269E64736F6C6343000810 STOP CALLER ",
      "sourceMap": "260:29856:46:-:0;;;;;;;;;-1:-1:-1;260:29856:46;;;;;;;;13206:13:49;;29806:9:46;260:29856;;13206:13:49;:::ii;:::-;;;;;;;;;;;;;:::i;:::-;;;10478:193;;;260:29856;;;;10478:193;;10555:9;;260:29856;;10478:193;;;10586:10;260:29856;;10478:193;;;260:29856;;;;;;;;;;;10478:193;260:29856;10478:193;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;1355:21:80;15193:7:51;5863:17:53;;:::i;:::-;260:29856:46;;14994:33:51;14713:17;260:29856:46;;14713:17:51;;:::i;:::-;260:29856:46;;14769:5:51;260:29856:46;;;14769:5:51;:::i;:::-;14994:33;;:::i;:::-;260:29856:46;;;;;;15193:7:51;;:::i;:::-;1356:14:80;633:8;260:29856:46;;1356:14:80;:::i;:::-;1355:21;:::i;:::-;260:29856:46;;;:::i;:::-;;15485:138:51;260:29856:46;;;;;;;;;15593:20:51;260:29856:46;;15593:9:51;:20;:::i;:::-;260:29856:46;;;;;;15485:138:51;;:::i;:::-;15650:31;;;;;;;:::i;:::-;260:29856:46;;;15695:31:51;;;15691:95;;15882:19;;;15878:64;;260:29856:46;;16356:17:51;260:29856:46;;3146:20;260:29856;;;;;;16608:8:51;260:29856:46;;;;;;;;;15957:296:51;260:29856:46;;;;;;15957:296:51;260:29856:46;;;;;16143:18:51;10478:193:46;16143:18:51;;260:29856:46;;10478:193;16175:24:51;;;260:29856:46;16213:30:51;;260:29856:46;;;;15957:296:51;;;;;:::i;:::-;;;;260:29856:46;;;;;;16356:17:51;;:::i;:::-;260:29856:46;3146:20;:::i;:::-;260:29856;;;;;;16608:8:51;;;:::i;:::-;260:29856:46;;;;;10478:193;260:29856;;;;15878:64:51;260:29856:46;;-1:-1:-1;;;15910:32:51;;260:29856:46;;15910:32:51;15691:95;260:29856:46;;;;;30961:52:51;;;;15735:51;;260:29856:46;15735:51:51;;260:29856:46;;;;;15735:51:51;260:29856:46;-1:-1:-1;260:29856:46;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;9834:31:51;260:29856:46;;;;;;;:::i;:::-;;;;;;6607:174;;6665:9;;260:29856;;;6607:174;;6696:10;260:29856;;;6607:174;;260:29856;;;6607:174;;;260:29856;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;633:8:80;1640:7;9529:25:51;9343:32;9180:12;;:::i;:::-;9357:9;260:29856:46;9343:32:51;:::i;:::-;260:29856:46;;;;9529:25:51;:::i;:::-;1640:7:80;;:::i;:::-;633:8;260:29856:46;;;:::i;:::-;;9680:127:51;260:29856:46;;;;;;;;;9788:9:51;260:29856:46;9680:127:51;;:::i;:::-;9834:31;;;;;;;:::i;:::-;260:29856:46;;;9879:31:51;;;9875:95;;10068:19;;;10064:64;;260:29856:46;10726:8:51;260:29856:46;10474:17:51;3146:20:46;260:29856;;;;;;;;;;;10143:273:51;260:29856:46;;;;;;10143:273:51;260:29856:46;;;;;10306:18:51;260:29856:46;10306:18:51;;260:29856:46;;;10338:24:51;;;260:29856:46;10376:30:51;;260:29856:46;;;;10143:273:51;;;;;:::i;:::-;;;;260:29856:46;;;;10474:17:51;;:::i;9875:95::-;260:29856:46;;;;;30961:52:51;;;;9919:51;;260:29856:46;9919:51:51;;260:29856:46;;;;;9919:51:51;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;63414:83:51;63370:27;260:29856:46;;63272:17:51;;:::i;:::-;63315:10;63448:25;63315:10;;;;:::i;:::-;260:29856:46;63370:27:51;;;;:::i;:::-;63448:25;;;;:::i;:::-;63414:83;;:::i;:::-;260:29856:46;;;;;;;;;;;;;;;;;;;;5121:33:49;260:29856:46;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;29375:227;;;260:29856;;29375:227;;260:29856;29486:9;29375:227;;;260:29856;29517:10;29375:227;;;260:29856;-1:-1:-1;;;;;260:29856:46;;;;29375:227;;260:29856;;29375:227;;;260:29856;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;;1640:7:80;33428:33:51;33145:17;260:29856:46;;33145:17:51;;:::i;:::-;260:29856:46;;33201:5:51;260:29856:46;;;33201:5:51;:::i;:::-;33428:33;;:::i;:::-;29375:227:46;33633:7:51;29375:227:46;;;;;;260:29856;33633:7:51;:::i;:::-;29375:227:46;;;260:29856;633:8:80;33792:25:51;;;;;;;:::i;1640:7:80:-;633:8;33914:21:51;;;33910:66;;34413:7;29375:227:46;34165:71:51;34166:61;29375:227:46;34166:53:51;29375:227:46;;;260:29856;34181:37:51;260:29856:46;24770:16:49;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;:::-;34181:37:51;:::i;34166:53::-;:61;:::i;:::-;34231:5;260:29856:46;34165:71:51;;:::i;:::-;633:8:80;260:29856:46;;;;34413:7:51;:::i;:::-;260:29856:46;29375:227;;260:29856;34435:26:51;;;34431:89;;260:29856:46;34615:133:51;260:29856:46;;;:::i;:::-;-1:-1:-1;29375:227:46;;;260:29856;29375:227;;;260:29856;34724:14:51;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;34615:133:51;:::i;:::-;29375:227:46;;;;;;;260:29856;34762:30:51;;;34758:95;;260:29856:46;;;35236:61:51;260:29856:46;;;35580:8:51;260:29856:46;;;;;;;29375:227;;;260:29856;;;;;;;;29375:227;;260:29856;;29375:227;34868:297:51;29375:227:46;;;;260:29856;34868:297:51;260:29856:46;;35055:18:51;29375:227:46;35055:18:51;;260:29856:46;29375:227;260:29856;35087:24:51;;260:29856:46;35125:30:51;;260:29856:46;;;;34868:297:51;;;;;:::i;:::-;;;;35176:50;29375:227:46;;;260:29856;;;;;;;29375:227;;;260:29856;;35176:50:51;;:::i;:::-;260:29856:46;;;29375:227;;260:29856;-1:-1:-1;;;;;260:29856:46;;;;;35236:61:51;:::i;:::-;3146:20:46;29375:227;;;;260:29856;3146:20;:::i;:::-;29375:227;;;260:29856;29375:227;;;;260:29856;-1:-1:-1;;;;;260:29856:46;;;;;;35580:8:51;:::i;:::-;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;34758:95:51;260:29856:46;;;;;;30961:52:51;;;;34801;;260:29856:46;34801:52:51;;260:29856:46;;;;;34801:52:51;34431:89;260:29856:46;;;;;34470:50:51;;;;;;260:29856:46;34470:50:51;;260:29856:46;;;;;34470:50:51;260:29856:46;;;;;;;;;;;;;;6235:31:49;260:29856:46;;;;;;;;;;;;;;;;;;;;;4045:20:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;29514:22:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;-1:-1:-1;;;61322:88:51;;;;61420:55;;61322:88;260:29856:46;61322:88:51;260:29856:46;61322:88:51;;;;:::i;:::-;;260:29856:46;;61322:88:51;;;;;;:::i;:::-;61449:16;260:29856:46;-1:-1:-1;;;;;260:29856:46;61420:55:51;:::i;:::-;;260:29856:46;;;;;;;;;;;;;;;;;;;;3852:43:49;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;15650:198;;;260:29856;;;;15650:198;;15732:9;;260:29856;;15650:198;;;15763:10;;260:29856;;15650:198;;;260:29856;;;;;;;;;;;15650:198;260:29856;15650:198;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;;;20876:17:51;260:29856:46;;20876:17:51;;:::i;:::-;260:29856:46;;20932:5:51;260:29856:46;;;20932:5:51;:::i;:::-;21138:31;260:29856:46;21152:8:51;260:29856:46;21138:31:51;:::i;:::-;260:29856:46;;54275:25:51;54221:28;260:29856:46;;54221:28:51;;:::i;:::-;54275:25;;:::i;:::-;260:29856:46;-1:-1:-1;;260:29856:46;;;;;;;54467:26:51;1355:21:80;54467:26:51;1356:14:80;54466:37:51;54467:26;;21556:31;54467:26;;;54671:40;54467:26;;;;:::i;54466:37::-;633:8:80;1355:21;633:8;1356:14;;;;;:::i;1355:21::-;1356:14;;:::i;1355:21::-;54671:40:51;;:::i;:::-;260:29856:46;;;:::i;:::-;;21397:132:51;260:29856:46;;;;;;;;;21505:14:51;260:29856:46;21397:132:51;;:::i;:::-;21556:31;;;;;;;:::i;:::-;260:29856:46;;;21601:31:51;;;21597:95;;21788:19;;;21784:64;;22271:63;260:29856:46;;;;;;;;;;22243:17:51;22558:8;260:29856:46;;;;3146:20;260:29856;;;;;;21863:324:51;260:29856:46;;21863:324:51;260:29856:46;;;;;;;;;;;;;;;;;15650:198;22077:18:51;;260:29856:46;22109:24:51;15650:198:46;260:29856;22109:24:51;;260:29856:46;22147:30:51;;260:29856:46;;;;21863:324:51;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21863:324:51;;;;260:29856:46;;;;22243:17:51;;:::i;:::-;260:29856:46;;;;;;22271:63:51;;:::i;21597:95::-;260:29856:46;;;;;30961:52:51;;;;21641:51;;260:29856:46;21641:51:51;;260:29856:46;;;;;21641:51:51;260:29856:46;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;7499:22:49;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;901:22:53;;260:29856:46;;;901:22:53;;;;;260:29856:46;901:22:53;;;;:::i;:::-;260:29856:46;;;;901:22:53;;260:29856:46;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;58952:36:51;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;-1:-1:-1;;;;;260:29856:46;;1885:23:56;260:29856:46;;;1885:23:56;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;41422:177:51;;260:29856:46;;;;;;41422:177:51;;41511:10;;260:29856:46;;;41422:177:51;;260:29856:46;;;41422:177:51;;;260:29856:46;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;633:8:80;1640:7;12054:33:51;12418:25;5863:17:53;12259:7:51;5863:17:53;;:::i;:::-;12054:33:51;;;;:::i;:::-;260:29856:46;;;;;;;12259:7:51;:::i;:::-;260:29856:46;;12418:25:51;;:::i;1640:7:80:-;633:8;12542:21:51;;;12538:66;;12883:32;260:29856:46;;;:::i;:::-;;12729:130:51;260:29856:46;;;;;;;;;12838:11:51;260:29856:46;12729:130:51;;:::i;:::-;12883:32;;;;;;;:::i;:::-;260:29856:46;;12929:28:51;;;12925:93;;260:29856:46;;;;;13365:14:51;260:29856:46;;;;;;;13532:8:51;260:29856:46;;;;;;13033:272:51;260:29856:46;;;;;;;13033:272:51;260:29856:46;;;;;13195:18:51;260:29856:46;13195:18:51;;260:29856:46;;;13227:24:51;;;260:29856:46;13265:30:51;;260:29856:46;;;;13033:272:51;;;;;:::i;:::-;;;;260:29856:46;;;;;;13365:14:51;;:::i;:::-;260:29856:46;;;;;;;;13532:8:51;;:::i;12925:93::-;260:29856:46;;;;;25755:52:51;;;;12966;;260:29856:46;12966:52:51;;260:29856:46;;;;;12966:52:51;260:29856:46;;;;;;;;;;;;;;24770:16:49;23468:27;23439:12;;:::i;:::-;23468:27;:::i;:::-;260:29856:46;;24770:5:49;260:29856:46;24770:16:49;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;;6799:26:49;;260:29856:46;;;6799:26:49;;;;;260:29856:46;6799:26:49;;;;:::i;:::-;260:29856:46;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;-1:-1:-1;;;60098:87:51;;;;60195:55;;60098:87;260:29856:46;60098:87:51;260:29856:46;60098:87:51;;;;:::i;260:29856:46:-;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;9834:31:51;260:29856:46;;;;;;:::i;:::-;;;;;;4690:174;;4748:9;;260:29856;;;4690:174;;4779:10;;260:29856;;4690:174;;;4779:10;;260:29856;;4690:174;;;260:29856;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;33433:38:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;64458:10:51;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;22638:227;;;260:29856;;;;22638:227;;260:29856;;;22638:227;;;22749:9;;260:29856;;22638:227;;;22780:10;;260:29856;;22638:227;;;22780:10;;260:29856;;22638:227;;;260:29856;;;;;;;;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;29856:12:51;1355:21:80;30516:37:51;1356:14:80;29856:12:51;30515:47;29856:12;30107:32;29856:12;;:::i;:::-;29950:5;29894:17;260:29856:46;;29894:17:51;;:::i;:::-;260:29856:46;;;;29950:5:51;:::i;30107:32::-;633:8:80;;24770:16:49;30494:19:51;1355:21:80;633:8;1356:14;633:8;260:29856:46;;;1356:14:80;:::i;1355:21::-;260:29856:46;;30508:5:51;260:29856:46;30494:19:51;;:::i;:::-;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;30515:47:51:-;1356:14:80;;:::i;1355:21::-;260:29856:46;;30577:26:51;;;:44;;;;260:29856:46;30573:107:51;;260:29856:46;30775:133:51;260:29856:46;;;:::i;:::-;;;;;;;;;;;30884:14:51;260:29856:46;30775:133:51;;:::i;:::-;260:29856:46;;;;;;;30922:30:51;;;30918:95;;260:29856:46;;;31407:50:51;260:29856:46;;;;;;;;;;3146:20;260:29856;31740:8:51;260:29856:46;;;;;;;31336:61:51;260:29856:46;;;;;;;;;31028:297:51;260:29856:46;;;;;;31028:297:51;260:29856:46;;;;;31215:18:51;22638:227:46;31215:18:51;;260:29856:46;22638:227;260:29856;31247:24:51;;260:29856:46;31285:30:51;;260:29856:46;;;;31028:297:51;;;;;:::i;:::-;;;;260:29856:46;;;;;;31336:61:51;;:::i;:::-;260:29856:46;;31407:50:51;;:::i;30918:95::-;260:29856:46;;;;;;30961:52:51;;;;;;260:29856:46;30961:52:51;;260:29856:46;;;;;30961:52:51;30573:107;260:29856:46;;;;;30630:50:51;;;;;;260:29856:46;30630:50:51;;260:29856:46;;;;;30630:50:51;30577:44;30607:14;;;30577:44;;260:29856:46;;;;;;;;;;;;;;1355:21:80;24770:16:49;1356:14:80;633:8;25831:25:49;23468:27;23439:12;;:::i;23468:27::-;24770:5;260:29856:46;;;;24770:16:49;:::i;:::-;25831:25;;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;29846:26:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;34985:24:49;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;27078:227;;;260:29856;;27078:227;;260:29856;;;27189:9;27078:227;;;260:29856;27220:10;27078:227;;;260:29856;;;27078:227;;;260:29856;-1:-1:-1;;;;;260:29856:46;27078:227;;;260:29856;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;1640:7:80;33428:33:51;33145:17;260:29856:46;;33145:17:51;;:::i;:::-;260:29856:46;;33201:5:51;260:29856:46;;;33201:5:51;:::i;:::-;33428:33;;:::i;:::-;27078:227:46;33633:7:51;27078:227:46;;;;;;260:29856;33633:7:51;:::i;:::-;27078:227:46;;;260:29856;633:8:80;33792:25:51;;;;;;;:::i;1640:7:80:-;633:8;33914:21:51;;;33910:66;;34413:7;27078:227:46;34165:71:51;34166:61;27078:227:46;34166:53:51;27078:227:46;;;260:29856;34181:37:51;260:29856:46;24770:16:49;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;34165:71:51:-;633:8:80;260:29856:46;;;;34413:7:51;:::i;:::-;260:29856:46;34435:26:51;;;34431:89;;260:29856:46;34615:133:51;260:29856:46;;;:::i;:::-;;;;;;;;;;;;;;;569:21:58;260:29856:46;;;;;;;;;;;;;;;18403:32:51;260:29856:46;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;46474:193:51;;;260:29856:46;;;;46474:193:51;;260:29856:46;;;46474:193:51;;;46582:10;260:29856:46;;46474:193:51;;;260:29856:46;;;;;;;;;;;46474:193:51;260:29856:46;46474:193:51;;260:29856:46;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;1355:21:80;17706:12:51;;:::i;:::-;17924:32;17744:17;260:29856:46;;17744:17:51;;:::i;:::-;260:29856:46;;17800:5:51;260:29856:46;;;17800:5:51;:::i;17924:32::-;260:29856:46;;1356:14:80;633:8;260:29856:46;;1356:14:80;:::i;1355:21::-;260:29856:46;;:::i;:::-;;18238:141:51;260:29856:46;;;;;;;;;18347:22:51;260:29856:46;;18347:11:51;:22;:::i;18238:141::-;18403:32;;;;;;;:::i;:::-;18533:21;;;18529:66;;260:29856:46;18609:28:51;;;18605:93;;260:29856:46;;;;;19079:14:51;260:29856:46;;;;;;;;;19246:8:51;260:29856:46;;;18713:295:51;260:29856:46;;;;;;;;;;18713:295:51;260:29856:46;;;;;18898:18:51;46474:193;18898:18;;260:29856:46;;46474:193:51;18930:24;;;260:29856:46;18968:30:51;;260:29856:46;;;;18713:295:51;;;;;:::i;:::-;;;;260:29856:46;;;;;;;19079:14:51;;:::i;18605:93::-;260:29856:46;;;;;25755:52:51;;;;18646;;260:29856:46;18646:52:51;;260:29856:46;;;;;18646:52:51;260:29856:46;;;28340:55:51;260:29856:46;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;17925:258;;;260:29856;;;;17925:258;;260:29856;;;17925:258;;;260:29856;;;17925:258;;;18067:9;;260:29856;;17925:258;;;18098:10;;260:29856;;17925:258;;;18098:10;;260:29856;;17925:258;;;260:29856;;;;;;;;;;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;260:29856:46;;:::i;:::-;;;;951:66:5;;;;17925:258:46;28170:75:51;;;260:29856:46;28170:75:51;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28170:75:51;;;260:29856:46;28170:75:51;;:::i;:::-;260:29856:46;28369:16:51;260:29856:46;;28340:55:51;:::i;:::-;260:29856:46;;;;28316:140:51;;260:29856:46;;;;;;;17925:258;28316:140:51;;260:29856:46;;;;;;;17925:258;;260:29856;;;;;;;;;;;;;3146:20;260:29856;;;;;;28739:8:51;260:29856:46;;;;;;17925:258;260:29856;;:::i;:::-;17925:258;260:29856;;;;;17925:258;260:29856;;;17925:258;260:29856;;;17925:258;260:29856;;;;;;;;;17925:258;260:29856;;;;3146:20;:::i;260:29856::-;;;;;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;9834:31:51;260:29856:46;;;;;;;:::i;:::-;;;;;;;;;;;;;;5568:26:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;;11618:201;;260:29856;;;;;;11618:201;;11700:9;;260:29856;;11618:201;;;11731:10;;260:29856;;11618:201;;;11731:10;;260:29856;;11618:201;;;260:29856;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;;;20876:17:51;260:29856:46;;20876:17:51;;:::i;:::-;260:29856:46;;20932:5:51;260:29856:46;;;20932:5:51;:::i;:::-;21138:31;260:29856:46;21152:8:51;260:29856:46;21138:31:51;:::i;:::-;260:29856:46;;54275:25:51;54221:28;260:29856:46;;54221:28:51;;:::i;54275:25::-;260:29856:46;-1:-1:-1;;260:29856:46;;;;;;;54467:26:51;1355:21:80;54467:26:51;1356:14:80;54466:37:51;54467:26;;;21556:31;54467:26;;;;54671:40;54467:26;;:::i;54466:37::-;633:8:80;1355:21;633:8;1356:14;;;;;:::i;1355:21::-;1356:14;;:::i;54671:40:51:-;260:29856:46;;;:::i;:::-;;;;;;;;21397:132:51;260:29856:46;;;;;;;;;21505:14:51;260:29856:46;21397:132:51;;:::i;260:29856:46:-;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;6513:18:53;260:29856:46;6497:12:53;:34;;260:29856:46;;;;;;;;;;;;;;;;;;;622:21:58;260:29856:46;;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;4537:60:49;260:29856:46;;;;;;;4537:60:49;;260:29856:46;;;;;;;;;;;;;;;;;;;;;24257:5:51;260:29856:46;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;50773:224:51;;;260:29856:46;;;;50773:224:51;;260:29856:46;;;50773:224:51;;;260:29856:46;50773:224:51;;;50909:10;;260:29856:46;;50773:224:51;;;260:29856:46;;;;;;;;;;;50773:224:51;;;260:29856:46;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;25123:37:51;24163:12;25124:19;:27;24498:31;24163:12;;:::i;:::-;24201:17;260:29856:46;;24201:17:51;;:::i;:::-;260:29856:46;;;;;;24257:5:51;:::i;:::-;24512:8;260:29856:46;24498:31:51;:::i;:::-;260:29856:46;;;;;;25124:19:51;:::i;:27::-;633:8:80;260:29856:46;;;25155:5:51;260:29856:46;25123:37:51;;:::i;:::-;633:8:80;260:29856:46;;25188:25:51;;;25184:83;;260:29856:46;;1640:7:80;260:29856:46;1355:21:80;25672:32:51;260:29856:46;;;;;1356:14:80;260:29856:46;25362:25:51;55760:42;260:29856:46;;;25362:25:51;;:::i;:::-;1356:14:80;;:::i;1355:21::-;1640:7;;:::i;:::-;633:8;55760:42:51;;:::i;:::-;260:29856:46;;;:::i;:::-;;25513:135:51;260:29856:46;;;;;;;;;25622:16:51;260:29856:46;25513:135:51;;:::i;:::-;25672:32;;;;;;;:::i;:::-;50773:224;;;;260:29856:46;25718:28:51;;;25714:93;;25905:16;;;25901:61;;260:29856:46;26388:61:51;260:29856:46;;;;;;;;;26363:14:51;260:29856:46;26602:8:51;260:29856:46;;;;;;;;25977:325:51;260:29856:46;;;;;25977:325:51;260:29856:46;;;;;;;;;;;;;;50773:224:51;26192:18;;260:29856:46;26224:24:51;50773:224;260:29856:46;26224:24:51;;260:29856:46;26262:30:51;;260:29856:46;;;;25977:325:51;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25977:325:51;;;;260:29856:46;;;;;;26363:14:51;;:::i;:::-;260:29856:46;;;;;;26388:61:51;;:::i;25714:93::-;260:29856:46;;;;;25755:52:51;;;;;;260:29856:46;25755:52:51;;260:29856:46;;;;;25755:52:51;25184:83;260:29856:46;;;;;25222:45:51;;;;;;260:29856:46;25222:45:51;;260:29856:46;;;;;25222:45:51;260:29856:46;;;;;;;;;;;;;;26788:24:49;23468:27;23439:12;;:::i;23468:27::-;26788:24;;:::i;:::-;26837:8;260:29856:46;-1:-1:-1;26829:16:49;260:29856:46;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;;39574:177:51;;260:29856:46;;;;;;39574:177:51;;39663:10;;260:29856:46;;39574:177:51;;;39663:10;;260:29856:46;;39574:177:51;;;260:29856:46;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;633:8:80;1640:7;12054:33:51;12418:25;12259:7;5863:17:53;;:::i;:::-;12054:33:51;;;;:::i;:::-;260:29856:46;;;;;;;12259:7:51;:::i;:::-;260:29856:46;;12418:25:51;;:::i;1640:7:80:-;633:8;12542:21:51;;12538:66;;12883:32;260:29856:46;;;:::i;:::-;;;;;;;;12729:130:51;260:29856:46;;;;;;;;;12838:11:51;260:29856:46;12729:130:51;;:::i;260:29856:46:-;;;;;;;;;;;;;7050:32:49;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;;25945:230;;260:29856;;;;;25945:230;;260:29856;;;;;;25945:230;;26056:9;260:29856;;25945:230;;;26087:10;260:29856;;25945:230;;;26087:10;;260:29856;;25945:230;;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;;;;;33145:17:51;;;;:::i;:::-;260:29856:46;;;;;33201:5:51;;;;:::i;:::-;33428:33;;;;:::i;:::-;260:29856:46;;;;;33633:7:51;;;;:::i;:::-;260:29856:46;;633:8:80;;33792:25:51;;;;;;:::i;:::-;1640:7:80;;;:::i;:::-;633:8;33914:21:51;;;33910:66;;260:29856:46;34413:7:51;260:29856:46;;;34166:61:51;260:29856:46;;34166:53:51;34165:71;260:29856:46;;34181:37:51;260:29856:46;24770:16:49;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;34165:71:51:-;633:8:80;260:29856:46;;;;34413:7:51;:::i;:::-;260:29856:46;34435:26:51;;;34431:89;;260:29856:46;;;:::i;:::-;;34615:133:51;260:29856:46;;;;;;;;;;;;;;;34724:14:51;260:29856:46;34615:133:51;;:::i;:::-;260:29856:46;;;;;;;34762:30:51;;;34758:95;;260:29856:46;;;35236:61:51;260:29856:46;;;;;;;;;;;35176:50:51;35580:8;260:29856:46;;;;;;3146:20;260:29856;;;;;;;;34868:297:51;260:29856:46;;;;;;;;;;34868:297:51;260:29856:46;;;;;35055:18:51;260:29856:46;35055:18:51;;260:29856:46;;;35087:24:51;;260:29856:46;35125:30:51;;260:29856:46;;;;34868:297:51;;;;;:::i;:::-;;;;260:29856:46;;;;35176:50:51;;:::i;:::-;260:29856:46;;;;35236:61:51;;:::i;34431:89::-;260:29856:46;;;;;34470:50:51;;;;;;260:29856:46;34470:50:51;;260:29856:46;;;;;34470:50:51;260:29856:46;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;3290:14:7;3336:34;;;;;;260:29856:46;3335:108:7;;;;260:29856:46;;;;-1:-1:-1;;260:29856:46;;3540:1:7;260:29856:46;;;;3551:65:7;;260:29856:46;;;;;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;6518:38:51;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;;;6499:57:51;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;-1:-1:-1;;;;;6587:37:51;260:29856:46;;;;;;;;;;6626:35:51;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;3540:1:7;260:29856:46;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;;260:29856:46;;;;;5355:69:7;:::i;:::-;;260:29856:46;;;;;5355:69:7;:::i;:::-;;260:29856:46;;;;;5355:69:7;:::i;:::-;-1:-1:-1;;;;;260:29856:46;;1591:38:56;260:29856:46;;;1591:38:56;260:29856:46;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;1729:22:58;260:29856:46;;;;;;;;;;;;;;;;;;;;;1729:22:58;260:29856:46;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;633:8:80;10569:37:49;260:29856:46;10569:43:49;10565:70;;10663:39;;260:29856:46;10663:39:49;:::i;:::-;10731:37;;260:29856:46;10731:37:49;:::i;:::-;10797:39;;260:29856:46;10797:39:49;:::i;:::-;10865:42;;260:29856:46;10865:42:49;:::i;:::-;10936;;260:29856:46;10936:42:49;:::i;:::-;11007;;260:29856:46;11007:42:49;:::i;:::-;11078:44;;260:29856:46;11078:44:49;:::i;:::-;11151:42;;260:29856:46;11151:42:49;:::i;:::-;11222:39;;260:29856:46;11222:39:49;:::i;:::-;11290:87;;11331:46;260:29856:46;11290:38:49;260:29856:46;11290:87:49;:::i;:::-;;:::i;:::-;260:29856:46;;-1:-1:-1;;;;;260:29856:46;;;;;;11388:62:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;11499:56:49;260:29856:46;;;;;;;;11460:96:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;11582:42:49;260:29856:46;;;;;;;;11566:59:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;11655:45:49;260:29856:46;;;;;;;;11635:65:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;11746:61:49;260:29856:46;;;;;;;;11710:97:49;260:29856:46;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;10569:37:49;260:29856:46;11817:49:49;260:29856:46;11887:36:49;260:29856:46;11876:47:49;260:29856:46;10663:39:49;260:29856:46;11933:53:49;260:29856:46;10731:37:49;260:29856:46;11996:49:49;260:29856:46;10797:39:49;260:29856:46;12055:53:49;260:29856:46;10865:42:49;260:29856:46;12118:59:49;260:29856:46;10936:42:49;260:29856:46;12187:59:49;260:29856:46;11007:42:49;260:29856:46;12256:59:49;260:29856:46;11078:44:49;260:29856:46;12325:63:49;260:29856:46;11151:42:49;260:29856:46;12398:59:49;260:29856:46;11222:39:49;260:29856:46;12467:53:49;260:29856:46;11290:38:49;260:29856:46;12530:51:49;260:29856:46;11331:46:49;260:29856:46;12591:67:49;260:29856:46;12721:46:49;12674:31;260:29856:46;;12668:37:49;260:29856:46;12721:12:49;:46;:::i;:::-;12715:52;260:29856:46;12777:18:49;260:29856:46;;;;;;;6786:45:51;260:29856:46;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;2102:29:53;;2098:56;;2164:50;260:29856:46;;;12721:12:49;260:29856:46;2604:60:53;260:29856:46;6870:32:51;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;;;5355:69:7;260:29856:46;;;;;5355:69:7;:::i;:::-;4367:36:50;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;3636:99:7;;260:29856:46;;;;3636:99:7;260:29856:46;;;;;3710:14:7;11499:56:49;260:29856:46;;3540:1:7;260:29856:46;;3710:14:7;3636:99;;;2098:56:53;260:29856:46;;-1:-1:-1;;;2140:14:53;;260:29856:46;;2140:14:53;3551:65:7;-1:-1:-1;;260:29856:46;;;;;3551:65:7;;;260:29856:46;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;3335:108:7;3415:4;;1476:19:17;:23;3376:66:7;;3335:108;3376:66;260:29856:46;3441:1:7;260:29856:46;;;3425:17:7;3335:108;;3336:34;260:29856:46;3369:1:7;260:29856:46;;;3354:16:7;3336:34;;260:29856:46;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;15650:31:51;;260:29856:46;;;;:::i;:::-;;;;;;9365:196;;260:29856;;;;;;9365:196;;9442:9;;260:29856;;;9365:196;;9473:10;;260:29856;;9365:196;;;260:29856;;;;9365:196;;260:29856;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;53017:49:51;53043:10;;260:29856:46;;53017:49:51;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;7443:23:49;260:29856:46;;;;;;;;;;;;;;;;;;;;898:66:58;;:::i;:::-;2323:6;260:29856:46;;;;;-1:-1:-1;;;;;260:29856:46;2309:10:58;:20;2305:45;;260:29856:46;;;2364:10:58;2360:36;;260:29856:46;;;;;;2323:6:58;260:29856:46;2435:18:58;260:29856:46;;;2309:10:58;260:29856:46;;2435:18:58;260:29856:46;;;2360:36:58;260:29856:46;;-1:-1:-1;;;2383:13:58;;260:29856:46;;2383:13:58;2305:45;260:29856:46;;-1:-1:-1;;;2338:12:58;;260:29856:46;;2338:12:58;260:29856:46;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;15650:31:51;260:29856:46;7409:196;;260:29856;;;;;;7409:196;;7486:9;;260:29856;;7409:196;;;7517:10;;260:29856;;7409:196;;;7517:10;;260:29856;;7409:196;;;260:29856;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;1355:21:80;15193:7:51;5863:17:53;;:::i;:::-;260:29856:46;;14994:33:51;14713:17;260:29856:46;;14713:17:51;;:::i;:::-;260:29856:46;;14769:5:51;260:29856:46;;;14769:5:51;:::i;14994:33::-;260:29856:46;;;;;;15193:7:51;;:::i;:::-;1356:14:80;633:8;260:29856:46;;1356:14:80;:::i;1355:21::-;260:29856:46;;;:::i;:::-;;;;;;;;15485:138:51;260:29856:46;;;;;;;;;15593:20:51;260:29856:46;;15593:9:51;:20;:::i;260:29856:46:-;;;;;;;;;;;;;;62019:24:51;23468:27:49;23439:12;;:::i;260:29856:46:-;;;;;;;;;;;;;2502:28:50;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;28143:230;;;260:29856;;;;28143:230;;260:29856;28143:230;;;28254:9;260:29856;;28143:230;;;28285:10;260:29856;;28143:230;;;260:29856;;;;;;;;;;;;28143:230;;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;5680:23:53;;:::i;:::-;5863:17;;:::i;:::-;260:29856:46;;;;33145:17:51;;;;:::i;:::-;260:29856:46;;;;;33201:5:51;;;;:::i;:::-;33428:33;;;;:::i;:::-;260:29856:46;;;;;33633:7:51;;;;:::i;:::-;260:29856:46;;633:8:80;;33792:25:51;;;;;;:::i;:::-;1640:7:80;;;:::i;:::-;633:8;33914:21:51;;;33910:66;;260:29856:46;34413:7:51;260:29856:46;;;34166:61:51;260:29856:46;;34166:53:51;34165:71;260:29856:46;;34181:37:51;260:29856:46;24770:16:49;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;34413:7:51:-;260:29856:46;28143:230;;260:29856;34435:26:51;;;34431:89;;260:29856:46;34615:133:51;260:29856:46;;;:::i;:::-;;;;;;;;;;;34724:14:51;260:29856:46;34615:133:51;;:::i;34431:89::-;260:29856:46;;;;;34470:50:51;;;;;;260:29856:46;34470:50:51;;260:29856:46;;;;;34470:50:51;260:29856:46;;;;;;;-1:-1:-1;;260:29856:46;;;;;;7289:24:49;;260:29856:46;;;7289:24:49;;;;;260:29856:46;7289:24:49;;;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;34157:22:49;260:29856:46;;;;;;;;;;;24257:5:51;260:29856:46;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;49316:221:51;;;260:29856:46;;;;49316:221:51;;260:29856:46;;;49316:221:51;;;260:29856:46;49452:10:51;49316:221;;;260:29856:46;;;49316:221:51;;;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;49316:221:51;;;260:29856:46;;;49316:221:51;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;31012:32:49;260:29856:46;;;;;;;28340:55:51;260:29856:46;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;20484:258;;;260:29856;;;;20484:258;;260:29856;;;20484:258;;;260:29856;;;20484:258;;;20626:9;;260:29856;;20484:258;;;20657:10;;260:29856;;20484:258;;;260:29856;;;;;;;;;;;;;20484:258;;;;260:29856;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;;;;;;;;1066:38:53;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;31423:36:49;260:29856:46;;;;;;;;;;;;;;;;;;4411:20:49;260:29856:46;;;;;;;;;;;;;;;;;;;;;6414:29:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;29188:26:49;260:29856:46;;;;;;;;;;;;;;;;;;4935:25:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;12935:198;;260:29856;;;;;12935:198;;13017:9;;260:29856;;;12935:198;;13048:10;;260:29856;;12935:198;;;13048:10;;260:29856;;;12935:198;;260:29856;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;30236:32:49;260:29856:46;;;;;;;;;;;;;;;;;;7368:24:49;260:29856:46;;;;;;;;;;;;;;;;;;;;986:87:56;;:::i;:::-;3320:4:58;260:29856:46;;3308:16:58;260:29856:46;;;3308:16:58;260:29856:46;;;;;;;;;;;;;;;;;;6280:17:53;;:::i;:::-;260:29856:46;;;;;;;;;;;;;;;;;;;;3792:22:49;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;4339:20:49;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;18403:32:51;260:29856:46;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;44353:193:51;;;260:29856:46;;;;44353:193:51;;260:29856:46;;;44461:10:51;44353:193;;;260:29856:46;;;44353:193:51;;;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;44353:193:51;;;260:29856:46;;;44353:193:51;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;898:66:58;260:29856:46;53531:10:51;;260:29856:46;;898:66:58;:::i;260:29856:46:-;;;;;;;;;;;;;;;2082:7:58;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;898:66:58;;:::i;:::-;58446:3:51;260:29856:46;;58431:12:51;:18;58427:58;;58501:18;58516:3;260:29856:46;58431:12:51;58501:18;:::i;:::-;260:29856:46;;58534:20:51;260:29856:46;;;58534:20:51;56946:19;56995:12;260:29856:46;57052:24:51;;;:::i;:::-;57091:13;;57106;;;;;;57715:12;;;57711:301;;57086:616;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58026:40:51;;;;;;;260:29856:46;;;;;;;;;;;;;;;;1081:1:80;260:29856:46;;;57711:301:51;260:29856:46;1640:7:80;633:8;260:29856:46;57814:10:51;260:29856:46;1640:7:80;;:::i;:::-;633:8;57878:16:51;;;260:29856:46;;;57878:16:51;:::i;:::-;260:29856:46;;57974:17:51;260:29856:46;2712:7:10;260:29856:46;;2712:7:10;;-1:-1:-1;;;;;260:29856:46;;1830:1:10;2712:19;1830:1;;;260:29856:46;;2192:11;2188:265;;57711:301:51;260:29856:46;1081:1:80;260:29856:46;;57711:301:51;;2188:265:46;2223:17;;2219:46;;260:29856;;;;;;;2361:30;;;;;:::i;:::-;;2409:8;2405:37;;2188:265;;;2405:37;260:29856;;-1:-1:-1;;;2426:16:46;;260:29856;;2426:16;2219:46;260:29856;;-1:-1:-1;;;2249:16:46;;260:29856;;2249:16;1830:1:10;260:29856:46;;-1:-1:-1;;;1830:1:10;;;260:29856:46;1830:1:10;;;;;;;260:29856:46;1830:1:10;260:29856:46;;;1830:1:10;;;;57121:20:51;57173:11;;;:::i;:::-;57219:5;;;;:::i;:::-;57252;;:8;;;;;:::i;:::-;260:29856:46;;;;;;57278:7:51;;;;57274:418;;57121:20;;;;;1081:1:80;260:29856:46;57091:13:51;;57274:418;633:8:80;57500:23:51;633:8:80;1081:1;633:8;;;1640:7;;260:29856:46;633:8:80;57576::51;633::80;;260:29856:46;;;57406:18:51;260:29856:46;1640:7:80;:::i;:::-;633:8;1640:7;:::i;:::-;633:8;57374:73:51;;;;:::i;:::-;260:29856:46;57500:23:51;:::i;:::-;57576:8;;:::i;:::-;260:29856:46;;;;;;;633:8:80;;260:29856:46;;;;;;;;;;;;;;;;57606:71:51;57627:11;;;;:::i;:::-;260:29856:46;;;;;;;57643:33:51;260:29856:46;;57606:71:51;;;:::i;:::-;57274:418;;;;;;58427:58;260:29856:46;;-1:-1:-1;;;58458:27:51;;260:29856:46;;58458:27:51;260:29856:46;;;;;18403:32:51;260:29856:46;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;45330:196:51;;;260:29856:46;;;;45330:196:51;;260:29856:46;;;45438:10:51;45330:196;;;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;45330:196:51;;;260:29856:46;;;;45330:196:51;;260:29856:46;;;45330:196:51;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;32335:26:49;260:29856:46;;;;;;;;;;;;;;;;;2333:6:8;-1:-1:-1;;;;;260:29856:46;2324:4:8;2316:23;260:29856:46;;;;;1292:66:5;260:29856:46;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;6936:28:49;;260:29856:46;;;6936:28:49;;;;;260:29856:46;6936:28:49;;;;:::i;260:29856:46:-;;;;;;;;;;;;;986:87:56;;:::i;:::-;260:29856:46;;2972:17:58;260:29856:46;;2972:17:58;260:29856:46;;;;;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;3973:4:8;260:29856:46;;;1963:87:8;260:29856:46;;;;;;;;;;;;;1898:6:8;;260:29856:46;1889:4:8;1873:80;1889:4;;1881:23;;1873:80;:::i;:::-;1292:66:5;260:29856:46;;1971:30:8;1963:87;:::i;:::-;986::56;;:::i;:::-;3973:4:8;:::i;260:29856:46:-;;;;;;;;;;;;;;;;;;;;;;;5290:26:49;260:29856:46;;;;;;;;;;;;;;;;;;;;7132:48:49;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;7734:18:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;4624:38:49;;260:29856:46;;;4624:38:49;;;;;260:29856:46;4624:38:49;;;;:::i;:::-;-1:-1:-1;260:29856:46;;;4624:38:49;;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;:::i;:::-;;;;;;40522:174:51;;260:29856:46;;;;;;40522:174:51;;40611:10;;260:29856:46;;;40522:174:51;;40611:10;;260:29856:46;;40522:174:51;;;260:29856:46;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;;;;;;;;5731:29:49;260:29856:46;;;;;;;;;;;;;;;;;;;;;18533:46:49;62625:27:51;18552::49;18432:51;62563:17:51;;:::i;:::-;62625:27;;;;:::i;:::-;18432:51:49;;;;;;:::i;:::-;18552:27;;:::i;:::-;18533:46;;:::i;260:29856:46:-;;;;;;;;;;;;;1108:7:58;260:29856:46;;;;;;1107:8:58;1103:38;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;2606:10:58;:20;2602:45;;260:29856:46;;;1108:7:58;260:29856:46;2687:20:58;260:29856:46;;;2606:10:58;260:29856:46;;2687:20:58;260:29856:46;;;1103:38:58;260:29856:46;;-1:-1:-1;;;1124:17:58;;260:29856:46;;1124:17:58;260:29856:46;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;42489:174:51;;;260:29856:46;;;;42489:174:51;;42578:10;;260:29856:46;;42489:174:51;;;260:29856:46;;;;;;;;;;;42489:174:51;;;;260:29856:46;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;7238:36:53;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;3501:5:8;1898:6;1963:87;1898:6;;;;260:29856:46;1889:4:8;1873:80;1889:4;;1881:23;;1873:80;:::i;1963:87::-;986::56;;:::i;:::-;260:29856:46;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;260:29856:46;;;:::i;:::-;;;;;;;3501:5:8;:::i;260:29856:46:-;;;;;;;;;;;;;898:66:58;;:::i;:::-;27156:10:49;260:29856:46;;;;;27156:25:49;;;260:29856:46;27156:51:49;;;260:29856:46;27152:269:49;;260:29856:46;;;;;27152:269:49;-1:-1:-1;;260:29856:46;;;;;;;27259:20:49;;260:29856:46;27259:20:49;27293:7;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;27293:15:49;;;;;951:66:5;260:29856:46;951:66:5;;;;;;;27293:15:49;;;;;;;;;;27152:269;27293:15;;;;:::i;:::-;27152:269;;;;27293:15;;;;:::i;:::-;;;;;;260:29856:46;;;951:66:5;;;;;;;;27156:51:49;23439:12;26788:24;23468:27;23439:12;;:::i;26788:24::-;26837:8;260:29856:46;-1:-1:-1;26829:16:49;27156:51;;:25;260:29856:46;;;;;;27170:11:49;27156:25;;260:29856:46;;;;;;;;;;;;;;5893:29:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;9834:31:51;260:29856:46;3755:177;;3813:9;260:29856;;;3755:177;;3844:10;;260:29856;;3755:177;;;3844:10;;260:29856;;3755:177;;;260:29856;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;633:8:80;1640:7;9529:25:51;9343:32;9180:12;;:::i;9343:32::-;260:29856:46;;;;9529:25:51;:::i;1640:7:80:-;633:8;260:29856:46;;;:::i;:::-;;;;;;;9680:127:51;260:29856:46;;;;;;;;;9788:9:51;260:29856:46;9680:127:51;;:::i;260:29856:46:-;;;;;;;;;;;;;;6663:26:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;986:87:56;;:::i;:::-;3662:19:58;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;34403:20:49;260:29856:46;;;;;;;;;;;;;;;;;;6055:29:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;33071:70:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;7618:22:49;260:29856:46;;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;31828:32:49;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;;;;986:87:56;;:::i;:::-;34643:24:49;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;61756:25:51;23468:27:49;23439:12;;:::i;260:29856:46:-;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;14209:201;;260:29856;;;;;14209:201;;14291:9;;260:29856;;;14209:201;;14322:10;260:29856;;14209:201;;;260:29856;;;;14209:201;;260:29856;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;;;;;;;;;;;;7787:18:49;260:29856:46;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;;;;;:::i;:::-;;;;;18403:32:51;260:29856:46;43328:196:51;;260:29856:46;;;;;43328:196:51;;260:29856:46;;;;;;43328:196:51;;43436:10;;260:29856:46;;43328:196:51;;;43436:10;;260:29856:46;;43328:196:51;;;260:29856:46;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;1355:21:80;17706:12:51;;:::i;:::-;17924:32;17744:17;260:29856:46;;17744:17:51;;:::i;:::-;260:29856:46;;17800:5:51;260:29856:46;;;17800:5:51;:::i;17924:32::-;260:29856:46;;1356:14:80;633:8;260:29856:46;;1356:14:80;:::i;1355:21::-;260:29856:46;;;:::i;:::-;;;;;;;;18238:141:51;260:29856:46;;;;;;;;;18347:22:51;260:29856:46;;18347:11:51;:22;:::i;260:29856:46:-;;;;;;24498:31:51;260:29856:46;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;47795:224:51;;;260:29856:46;;;;47795:224:51;;260:29856:46;;;47795:224:51;;;260:29856:46;;;47795:224:51;;;47931:10;;260:29856:46;;47795:224:51;;;47931:10;;260:29856:46;;47795:224:51;;;260:29856:46;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;25123:37:51;24163:12;;:::i;:::-;25124:19;:27;24201:17;260:29856:46;;24201:17:51;;:::i;:::-;260:29856:46;;;;24257:5:51;260:29856:46;;;24257:5:51;:::i;25123:37::-;633:8:80;260:29856:46;;25188:25:51;;;25184:83;;260:29856:46;;1640:7:80;260:29856:46;1355:21:80;25672:32:51;260:29856:46;;;;;1356:14:80;260:29856:46;25362:25:51;55760:42;260:29856:46;;;25362:25:51;;:::i;55760:42::-;260:29856:46;;;:::i;:::-;;;;;;;;25513:135:51;260:29856:46;;;;;;;;;25622:16:51;260:29856:46;25513:135:51;;:::i;:::-;25672:32;;;;;;;:::i;:::-;260:29856:46;;25718:28:51;;;25714:93;;25905:16;;;25901:61;;260:29856:46;26388:61:51;260:29856:46;;;;;;;;;26363:14:51;260:29856:46;26602:8:51;260:29856:46;;;;;;;;25977:325:51;260:29856:46;;;;;25977:325:51;260:29856:46;;;;;;;;;;;;;;47795:224:51;26192:18;;260:29856:46;26224:24:51;47795:224;260:29856:46;26224:24:51;;260:29856:46;26262:30:51;;260:29856:46;;;;25977:325:51;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24257:5:51;260:29856:46;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;52397:221:51;;;260:29856:46;;;;52397:221:51;;260:29856:46;;;52397:221:51;;;260:29856:46;52397:221:51;;;52533:10;;260:29856:46;;52397:221:51;;;260:29856:46;;;;;;;;;;;52397:221:51;;;;260:29856:46;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;16674:261;;;260:29856;;;;16674:261;;260:29856;;;16674:261;;;260:29856;;;28340:55:51;16674:261:46;;;16816:9;;260:29856;;16674:261;;;16847:10;;260:29856;;16674:261;;;16847:10;;260:29856;;16674:261;;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;260:29856:46;;:::i;:::-;-1:-1:-1;260:29856:46;;-1:-1:-1;;;16674:261:46;28170:75:51;;;260:29856:46;;28170:75:51;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;;;;28170:75:51;;;260:29856:46;;28170:75:51;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;33832:72:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;30624:32:49;260:29856:46;;;;;;-1:-1:-1;260:29856:46;;-1:-1:-1;;260:29856:46;;;;;;;;;;:::i;:::-;;;;;;21493:230;;260:29856;;;;;;21493:230;;260:29856;;;;;;21493:230;;21604:9;;260:29856;;21493:230;;;21635:10;260:29856;;21493:230;;;;21635:10;;260:29856;;21493:230;;;260:29856;;;;8300:71:49;;:::i;:::-;898:66:58;;:::i;:::-;1355:21:80;30516:37:51;1356:14:80;29856:12:51;30515:47;29856:12;30107:32;29856:12;;:::i;30107:32::-;633:8:80;;24770:16:49;30494:19:51;1355:21:80;633:8;1356:14;633:8;260:29856:46;;;1356:14:80;:::i;1355:21::-;260:29856:46;;30508:5:51;260:29856:46;30494:19:51;;:::i;1355:21:80:-;260:29856:46;;30577:26:51;;;:44;;;;260:29856:46;30573:107:51;;260:29856:46;;;:::i;:::-;;30775:133:51;260:29856:46;;;;;;;;;;;;;;;30884:14:51;260:29856:46;30775:133:51;;:::i;30573:107::-;260:29856:46;;;;;30630:50:51;;;;;;260:29856:46;30630:50:51;;260:29856:46;;;;;30630:50:51;30577:44;30607:14;;;30577:44;;260:29856:46;;;;;;;-1:-1:-1;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;986:87:56;;:::i;:::-;32659:38:49;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;970:33:53;260:29856:46;;;;;;;;;;;;;;;;;;;;747:25:56;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;28340:55:51;260:29856:46;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;19121:261;;;260:29856;;;;19121:261;;260:29856;;;19121:261;;;260:29856;;;19121:261;;;19263:9;;260:29856;;19121:261;;;19294:10;;260:29856;;19121:261;;;260:29856;;;;;;;;;;;;;19121:261;;;260:29856;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;23725:230;;;260:29856;;;;23725:230;;260:29856;;;23725:230;;;23836:9;;260:29856;;23725:230;;;23867:10;;260:29856;;23725:230;;;260:29856;;;;;;;;;;;23725:230;;;260:29856;;;;8300:71:49;;:::i;260:29856:46:-;;;;-1:-1:-1;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;15650:31:51;260:29856:46;;;;;;:::i;:::-;;;;;;8419:193;;260:29856;;;;;8419:193;;8496:9;;260:29856;;;8419:193;;8527:10;260:29856;;8419:193;;;8527:10;;260:29856;;;8419:193;;260:29856;;;8300:71:49;;:::i;260:29856:46:-;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;24979:227;;;260:29856;;;;24979:227;;260:29856;;;24979:227;;;25090:9;;260:29856;;24979:227;;;25121:10;;260:29856;;24979:227;;;260:29856;;;;;;;;;;;24979:227;;;;260:29856;;;;8300:71:49;;:::i;260:29856:46:-;;;;;;;-1:-1:-1;;260:29856:46;;;;;;4477:26:49;;260:29856:46;;;4477:26:49;;;;;260:29856:46;4477:26:49;;;;:::i;:::-;260:29856:46;;;;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;986:87:56;;:::i;:::-;260:29856:46;;35365:40:49;260:29856:46;;;;;;;;;;;;-1:-1:-1;260:29856:46;;-1:-1:-1;260:29856:46;;;-1:-1:-1;260:29856:46;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;260:29856:46;;-1:-1:-1;260:29856:46;;;;;;-1:-1:-1;260:29856:46;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;2938:974:5;;260:29856:46;951:66:5;260:29856:46;;3380:526:5;260:29856:46;;;3478:17:5;;;;;:::i;:::-;2938:974::o;3380:526::-;260:29856:46;;-1:-1:-1;;;3531:63:5;;;;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;3531:63:5;260:29856:46;3531:63:5;260:29856:46;;3531:63:5;;-1:-1:-1;;3531:63:5;;;3380:526;-1:-1:-1;3527:302:5;;260:29856:46;;-1:-1:-1;;;3758:56:5;;3531:63;3758:56;;951:66;;;;;;;260:29856:46;951:66:5;260:29856:46;;;951:66:5;-1:-1:-1;;;951:66:5;;;;;;3758:56;3527:302;3644:28;;;;;;951:66;;2277:17;;;:::i;:::-;260:29856:46;;2310:27:5;;-1:-1:-1;2310:27:5;;260:29856:46;;2659:15:5;;;;:28;;;3527:302;2655:105;;;3527:302;3380:526;;;;2938:974::o;2655:105::-;1476:19:17;;:23;260:29856:46;;7395:25:5;;-1:-1:-1;7395:25:5;;;7437:99;7395:25;;;;;;;;;:::i;:::-;260:29856:46;;:::i;:::-;7437:99:5;;:::i;:::-;;2655:105;;;;;;260:29856:46;;;;;;;;3531:63:5;260:29856:46;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;2659:28:5;;;;;;951:66;260:29856:46;;-1:-1:-1;;;951:66:5;;3531:63;951:66;;;;;;;;;260:29856:46;951:66:5;260:29856:46;;;951:66:5;-1:-1:-1;;;951:66:5;;;;;;;3531:63;;;;;;;;;;;;;;;;:::i;:::-;;;951:66;;;;;;3531:63;;;;;;;;;1805:281;1476:19:17;;:23;260:29856:46;;1292:66:5;260:29856:46;;-1:-1:-1;;;;;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;;;;;;;;1805:281:5:o;260:29856:46:-;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;260:29856:46;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;:::o;7438:295:17:-;;;260:29856:46;;7608:119:17;;;7635:17;;;:::o;7608:119::-;7703:12;;;;7739:540;260:29856:46;;7739:540:17;;-1:-1:-1;7898:21:17;:17;;8070:142;;;;;;;7894:379;260:29856:46;;;;;;8242:20:17;;260:29856:46;;8242:20:17;;;;260:29856:46;;;;;;;;;7918:1:17;260:29856:46;;;;;;;;;;;;7918:1:17;260:29856:46;;;;;;;;;;;;;;8242:20:17;;;;260:29856:46;;;;;;;;;;;;;;;;;;;-1:-1:-1;260:29856:46;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;23801:628:49:-;;260:29856:46;23894:15:49;260:29856:46;23941:12:49;;260:29856:46;;23975:13:49;260:29856:46;23970:332:49;23990:13;;;;;;260:29856:46;;;;1640:7:80;633:8;260:29856:46;24378:10:49;260:29856:46;1640:7:80;;:::i;:::-;633:8;23801:628:49;:::o;24005:20::-;24057:10;;;;;24271:20;24057:10;24203:54;1081:1:80;24057:10:49;1355:21:80;24057:10:49;;;;:::i;:::-;260:29856:46;1356:14:80;633:8;24221:28:49;24119:19;24221:15;24119:19;;;;:::i;:::-;24221:15;;;;:::i;:::-;260:29856:46;;24221:28:49;:::i;24203:54::-;24271:20;;:::i;:::-;24005;260:29856:46;23975:13:49;;;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;:::o;22622:478:49:-;;;260:29856:46;22708:17:49;22786:37;22708:17;260:29856:46;22786:9:49;22798:25;22786:9;;:5;:9;:::i;:::-;260:29856:46;;;22798:25:49;;:::i;:::-;260:29856:46;;;;22786:37:49;:::i;:::-;260:29856:46;22837:16:49;;22833:225;;22622:478;23067:26;;;22622:478;:::o;22833:225::-;1640:7:80;22869:33:49;;;1640:7:80;22869:33:49;;;633:8:80;;260:29856:46;;;23008:18:49;260:29856:46;1640:7:80;:::i;:::-;633:8;22833:225:49;;;;633:8:80;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;260:29856:46;;;633:8:80;;;;;;;;22013:306:49;;22299:12;22013:306;22268:20;22274:14;22161:32;633:8:80;22161:16:49;;:12;:16;:::i;:::-;260:29856:46;;22161:32:49;:::i;:::-;22274:14;:10;:14;:::i;:::-;260:29856:46;;;;;;22268:20:49;;:::i;:::-;22299:12;;:::i;:::-;633:8:80;-1:-1:-1;633:8:80;;;;;;;;;;;;;;;;;;;22013:306:49;:::o;26121:246::-;26225:11;;26221:35;;1356:14:80;633:8;24770:16:49;1355:21:80;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;26221:35::-;633:8:80;;;;26238:18:49;:::o;260:29856:46:-;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;20524:980:49:-;20660:5;260:29856:46;20679:21:49;;20675:34;;20738:12;260:29856:46;;;20893:13:49;-1:-1:-1;20983:24:49;;;;:::i;:::-;21101:13;;21096:211;21116:13;;;;;;21321;;-1:-1:-1;21336:13:49;;;;;;20524:980;;;;;:::o;21351:20::-;21448:38;21449:9;:17;:9;;;;;:::i;:::-;260:29856:46;21449:17:49;:::i;21448:38::-;21431:11;;260:29856:46;;;;;;;;;;;1081:1:80;260:29856:46;;;;;;;;:::i;:::-;;;;21321:13:49;;21131:20;21179:11;;21247:49;1081:1:80;21179:11:49;;;;:::i;:::-;21167:23;;;;:::i;:::-;260:29856:46;1355:21:80;21265:15:49;;;;:::i;:::-;260:29856:46;;1356:14:80;633:8;21286:9:49;;;;:::i;:::-;260:29856:46;1356:14:80;;:::i;21247:49:49:-;21131:20;260:29856:46;21101:13:49;;;20675:34;20702:7;:::o;27579:302::-;27688:16;27579:302;27688:12;:16;:::i;:::-;-1:-1:-1;260:29856:46;27688:30:49;260:29856:46;-1:-1:-1;;;;;260:29856:46;27756:25:49;260:29856:46;27756:25:49;:::i;:::-;27795:4;;;;27791:61;;27862:12;27579:302;:::o;27791:61::-;260:29856:46;;;;27808:44:49;;;;;;;;;260:29856:46;27808:44:49;260:29856:46;;;;;;;;;;:::o;28202:193:49:-;260:29856:46;;;-1:-1:-1;;;28329:21:49;;260:29856:46;28202:193:49;260:29856:46;;;;28329:21:49;;260:29856:46;;-1:-1:-1;;;;;260:29856:46;28329:21:49;;;;;;;;;;;;;28360:28;;;28202:193;:::o;28329:21::-;;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;951:66:5;260:29856:46;;951:66:5;;260:29856:46;;;:::i;:::-;28329:21:49;;;;;;;;;;;260:29856:46;;951:66:5;28329:21:49;951:66:5;;;;;28495:283:49;28595:12;260:29856:46;28633:24:49;;;;:::i;:::-;28672:13;28684:1;28687:13;;;;;;28495:283;;:::o;28702:20::-;28750:11;;1081:1:80;28750:11:49;;:::i;:::-;28738:23;;;;:::i;:::-;260:29856:46;;28672:13:49;;260:29856:46;;;;:::o;:::-;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;260:29856:46;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12933:94:49:-;260:29856:46;12989:10:49;260:29856:46;;;;12985:35:49;;12933:94::o;12985:35::-;260:29856:46;;-1:-1:-1;;;13008:12:49;;;;;16088:233;16284:30;16088:233;16284:30;16088:233;13493:13;;260:29856:46;;;13493:13:49;:::i;:::-;260:29856:46;;13206:13:49;;260:29856:46;;;13206:13:49;:::i;:::-;260:29856:46;;16284:7:49;260:29856:46;;;-1:-1:-1;;;16284:30:49;;-1:-1:-1;;;;;260:29856:46;;;16284:30:49;;;260:29856:46;;;;;;;;;;;;;;;;;;-1:-1:-1;;260:29856:46;;;;;;;16284:30:49;;;;;;;;;;;16088:233;:::o;16284:30::-;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;;;;:::i;16284:30:49:-;;;-1:-1:-1;16284:30:49;;;260:29856:46;;951:66:5;-1:-1:-1;951:66:5;;;;;19968:378:49;;;20140:28;19968:378;20140:28;:::i;:::-;20121:47;;;20193:24;20121:47;;20193:24;:::i;:::-;20289:15;;;;;20285:54;;19968:378;;:::o;20285:54::-;260:29856:46;;;;;20313:26:49;;;;;;;;;260:29856:46;;;;;20313:26:49;25050:257;;25155:5;260:29856:46;25155:10:49;;;25151:26;;633:8:80;25252:39:49;1355:21:80;260:29856:46;24770:16:49;1356:14:80;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;25151:26::-;25167:10;;;633:8:80;25167:10:49;:::o;5459:2518:50:-;;;;;260:29856:46;5607:21:50;260:29856:46;5630:28:50;;260:29856:46;;;:::i;:::-;5696:17:50;-1:-1:-1;;;;;260:29856:46;5696:17:50;;260:29856:46;;;5723:140:50;;5459:2518;260:29856:46;;5898:8:50;260:29856:46;;;;;951:66:5;;;;5898:42:50;;260:29856:46;5898:42:50;;;;260:29856:46;5934:4:50;260:29856:46;;;;5898:42:50;;;;260:29856:46;5898:42:50;;;;;;;;;;;;;5459:2518;5954:19;;5950:1249;;5459:2518;7384:18;;;;;;;260:29856:46;7384:23:50;7380:527;;5459:2518;7916:54;;;;;5459:2518;:::o;7380:527::-;633:8:80;;;;1640:7;633:8;1640:7;;;;:::i;:::-;633:8;260:29856:46;;;633:8:80;7579:13:50;;;;7770:42;633:8:80;;7653:24:50;;260:29856:46;7653:24:50;;260:29856:46;7770:42:50;:::i;:::-;7380:527;;;;;7575:322;7851:31;;;7575:322;;5950:1249;6038:33;260:29856:46;6049:21:50;260:29856:46;;6038:33:50;:::i;:::-;6085:1104;;;;5950:1249;6085:1104;6373:17;;;;;;;;6364:56;6373:17;633:8:80;1640:7;6373:17:50;;;;:::i;:::-;6392:11;260:29856:46;1640:7:80;;:::i;:::-;633:8;6364:56:50;:::i;:::-;6343:18;;;260:29856:46;;;6343:18:50;;6442:13;;;;6563:25;6672:51;6563:25;;6530:30;6563:25;;;:::i;:::-;6530:30;;;;260:29856:46;;;6672:51:50;:::i;:::-;6438:392;;;6916:38;:92;;;;;6438:392;6912:263;;;;;6438:392;6085:1104;;;5950:1249;;6912:263;260:29856:46;;;;;7076:30:50;;;;260:29856:46;6912:263:50;;;;;6916:92;260:29856:46;;;;;;;951:66:5;;;;;;;6958:27:50;;5898:42;6958:27;;260:29856:46;6958:27:50;;;;;;;;;;;;;;6916:92;6958:50;;6916:92;;;;;6958:27;;;;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;;;;6958:27:50;;;;;;;;;260:29856:46;;951:66:5;260:29856:46;;951:66:5;;;;6438:392:50;6770:41;;;6438:392;;;;5898:42;;;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;;5898:42:50;;;;260:29856:46;;;;5898:42:50;;;;;;260:29856:46;;951:66:5;260:29856:46;;951:66:5;;;;5723:140:50;260:29856:46;;;5820:32:50;260:29856:46;5820:10:50;260:29856:46;;;;;;951:66:5;;;;;;;5820:32:50;;;;;260:29856:46;5820:32:50;;;;;;;;;;5723:140;5813:39;;;;;:::i;:::-;5723:140;;;;5820:32;;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;5813:39:50;260:29856:46;;5820:32:50;;;;;-1:-1:-1;5820:32:50;;;260:29856:46;;951:66:5;260:29856:46;;951:66:5;;;;14940:262:49;15160:35;14940:262;15160:12;-1:-1:-1;14940:262:49;15160:35;14940:262;14174:16;;:12;:16;:::i;:::-;260:29856:46;14174:28:49;260:29856:46;;;14174:28:49;:::i;:::-;260:29856:46;;13206:13:49;;260:29856:46;;;13206:13:49;:::i;:::-;260:29856:46;;15160:8:49;:12;:::i;:::-;260:29856:46;;;;-1:-1:-1;;;15160:35:49;;-1:-1:-1;;;;;260:29856:46;;;15160:35:49;;;260:29856:46;;;;;;;;;;;;;;;;;;;;;;;;15160:35:49;;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;15160:35:49;;;;;;;;14940:262;:::o;21674:152::-;21796:14;260:29856:46;21674:152:49;21761:25;;;;:::i;:::-;260:29856:46;21748:9:49;;:5;:9;:::i;:::-;:38;260:29856:46;;;;;;;;;;21748:38:49;:::i;:::-;260:29856:46;;;;633:8:80;;260:29856:46;;;;;;;;;;;;;;;;21796:10:49;:14;:::i;260:29856:46:-;;;21674:152:49:o;8518:521:50:-;;8746:26;8518:521;8810:72;8518:521;;;;;8746:26;:::i;8810:72::-;8954:24;;;8950:82;;8518:521;;:::o;8950:82::-;260:29856:46;;;;;8987:45:50;;;;;;;;;260:29856:46;;;;;8987:45:50;19161:394:49;;19452:60;19161:394;19452:51;19161:394;;19452:51;:::i;:60::-;-1:-1:-1;;260:29856:46;;;;;;;633:8:80;19451:84:49;;;;:::i;17324:474::-;;;17610:26;;;;;:::i;:::-;:41;;17606:55;;17726:65;260:29856:46;17726:42:49;633:8:80;24770:16:49;17771:20;260:29856:46;24770:5:49;260:29856:46;24770:16:49;:::i;17771:20::-;17726:65;;:::i;17606:55::-;17653:8;;;17660:1;17653:8;:::o;6469:198:41:-;;7102:69;6469:198;-1:-1:-1;260:29856:46;;;:::i;:::-;7060:25:41;;;;;;;;;;;:::i;:::-;7466:628;260:29856:46;;7670:418:41;;;260:29856:46;;;;7701:22:41;7697:286;;7996:17;;:::o;7697:286::-;1476:19:17;:23;260:29856:46;;7996:17:41;:::o;260:29856:46:-;;;-1:-1:-1;;;260:29856:46;;;;;;;;;;;;;;;;;;;;7670:418:41;8064:12;;;;;;;:::i;15544:269:49:-;15770:12;15544:269;;;14560:16;;:12;:16;:::i;:::-;260:29856:46;14560:28:49;260:29856:46;;;14560:28:49;:::i;:::-;260:29856:46;;14598:13:49;;260:29856:46;;;14598:13:49;:::i;15770:12::-;260:29856:46;;;;;;;;-1:-1:-1;;;;;260:29856:46;;15770:36:49;;;;;260:29856:46;;-1:-1:-1;;;15770:36:49;;-1:-1:-1;;;;;260:29856:46;;;15770:36:49;;;260:29856:46;;;;;;-1:-1:-1;;260:29856:46;;;-1:-1:-1;260:29856:46;;;;15770:36:49;;;;;;;;;;;15544:269;:::o;15770:36::-;-1:-1:-1;15770:36:49;;;:::i;16613:248::-;;;13824:13;;260:29856:46;;;13824:13:49;:::i;:::-;260:29856:46;;13847:13:49;;260:29856:46;;;13847:13:49;:::i;:::-;260:29856:46;;16823:7:49;260:29856:46;-1:-1:-1;;;;;260:29856:46;;16823:31:49;;;;;260:29856:46;;-1:-1:-1;;;16823:31:49;;-1:-1:-1;;;;;260:29856:46;;;16823:31:49;;;260:29856:46;;;;;;-1:-1:-1;;260:29856:46;;;-1:-1:-1;260:29856:46;;;;16823:31:49;260:29856:46;37318:1121:51;260:29856:46;;37318:1121:51;;;;;-1:-1:-1;;37318:1121:51;37522:20;;;260:29856:46;633:8:80;1640:7;37635:11:51;260:29856:46;;;1640:7:80;;:::i;:::-;633:8;37735:23:51;;;260:29856:46;;;37735:23:51;:::i;:::-;260:29856:46;;37831:17:51;260:29856:46;;;-1:-1:-1;;;;;260:29856:46;;;;;37850:33:51;;;:::i;:::-;2712:7:10;260:29856:46;1830:1:10;260:29856:46;;2712:19:10;1830:1;;;260:29856:46;;2192:11;2188:265;;37518:825:51;37963:25;;;;260:29856:46;1830:1:10;260:29856:46;1830:1:10;260:29856:46;;2192:11;2188:265;;37518:825:51;260:29856:46;;;;;;37518:825:51;2712:7:10;260:29856:46;1830:1:10;260:29856:46;;2712:19:10;1830:1;;;260:29856:46;;2192:11;2188:265;;37518:825:51;260:29856:46;;;1787:1:10;260:29856:46;;37318:1121:51:o;2188:265:46:-;-1:-1:-1;;;;;260:29856:46;;2223:17;2219:46;;260:29856;;;;;;2361:30;;;;;:::i;:::-;;2409:8;2405:37;;2188:265;;;;;;260:29856;;2223:17;2219:46;;-1:-1:-1;260:29856:46;;;;;37963:25:51;260:29856:46;2361:30;;;;;:::i;:::-;;2409:8;2405:37;;2188:265;;;;;;2223:17;;2219:46;;260:29856;;;;;;;;2361:30;;;;;:::i;:::-;;2409:8;2405:37;;2188:265;;;;37518:825:51;38167:17;260:29856:46;38186:19:51;;;260:29856:46;;;38300:31:51;;260:29856:46;;38300:31:51;;38186:19;;260:29856:46;-1:-1:-1;;;;;260:29856:46;;38186:19:51;:::i;:::-;38300:31;260:29856:46;38300:31:51;;:::i;:::-;37518:825;;38819:172;;;;38914:11;38910:74;;38819:172;;;:::o;38910:74::-;5330:69:41;260:29856:46;38924:1:51;260:29856:46;;;;;;;;38954:8:51;260:29856:46;;;;;1139:68:36;;;;;;;951:66:5;;;;1139:68:36;;260:29856:46;1139:68:36;;;260:29856:46;;;;;;;;;;;1139:68:36;;;260:29856:46;1139:68:36;;:::i;:::-;260:29856:46;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;5282:31:41;;;;;;;;:::i;5330:69::-;260:29856:46;;4275:21:36;4271:176;;38819:172:51;;;:::o;4271:176:36:-;4359:30;;;;;260:29856:46;;;;4359:30:36;260:29856:46;4359:30:36;;260:29856:46;:::i;:::-;;;;38819:172:51;:::o;260:29856:46:-;;;;;;;;;;;;;;;;1139:68:36;260:29856:46;;;;;;;;-1:-1:-1;;;260:29856:46;;;;;898:66:58;36450:55:51;898:66:58;;;:::i;:::-;260:29856:46;;-1:-1:-1;;;36262:153:51;;;;;;;260:29856:46;;;;-1:-1:-1;;;;;260:29856:46;;;;;;;;;;;;;;;;2612:15;260:29856;;;;;;;;36262:153:51;;260:29856:46;36262:153:51;260:29856:46;;36262:153:51;:::i;:::-;36479:16;260:29856:46;;36450:55:51;:::i;:::-;36262:153;260:29856:46;;;36439:78:51;;260:29856:46;;;;36262:153:51;36439:78;260:29856:46;2712:7:10;;260:29856:46;1830:1:10;260:29856:46;;2712:19:10;1830:1;;;260:29856:46;;2192:11;2188:265;;898:66:58;260:29856:46;;;;;898:66:58;:::o;2188:265:46:-;2223:17;2219:46;;-1:-1:-1;260:29856:46;;;;;;2361:30;;;;;:::i;:::-;;2409:8;2405:37;;2188:265;;;;56365:414:51;;;18432:51:49;18552:27;56365:414:51;;18533:46:49;56365:414:51;;18432:51:49;:::i;18533:46::-;56688:26:51;;;56684:88;;56365:414;;:::o;56684:88::-;260:29856:46;;;;;56723:49:51;;;;;;;;;260:29856:46;;;;;56723:49:51;260:29856:46;;;;;;;;;;-1:-1:-1;;;;;260:29856:46;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;64173:135:51:-;64253:3;260:29856:46;64237:12:51;;:19;;64233:33;;64283:18;64237:12;;64283:18;;:::i;64233:33::-;64258:8;-1:-1:-1;64258:8:51;:::o;260:29856:46:-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;2916:409:53:-;3042:11;;:7;:11;:::i;:::-;260:29856:46;;;;;;3082:5:53;;:9;;;;;:::i;:::-;260:29856:46;;;6513:18:53;260:29856:46;6497:12:53;:34;;3105:68;;2916:409;3187:18;;;;;;3183:41;;3287:19;;3286:32;3287:19;;:::i;3183:41::-;3207:17;;;:::o;3105:68::-;3155:9;;;;3142:31;3155:9;;260:29856:46;3155:9:53;;:::i;:::-;260:29856:46;;:::i;:::-;3142:31:53;:::i;:::-;3105:68;;;;;1398:409;1599:16;260:29856:46;;1599:16:53;;260:29856:46;;633:8:80;;260:29856:46;;;;;;;;;1572:44:53;1680:25;1572:44;1774:13;1572:44;;:::i;:::-;260:29856:46;;1680:25:53;:::i;4253:983::-;260:29856:46;4379:11:53;4420:12;260:29856:46;;;4458:24:53;;;;:::i;:::-;4497:13;;4492:485;4512:13;;;;;;;5051:8;;;;;;5047:111;;5220:9;;;;:::i;:::-;4253:983;:::o;5047:111::-;-1:-1:-1;;5111:9:53;260:29856:46;1081:1:80;260:29856:46;;5103:30:53:o;4527:20::-;4881:24;4874:37;4579:11;;;4881:30;4604:17;1355:21:80;4579:11:53;1356:14:80;4579:11:53;4768:42;4769:15;4579:11;1081:1:80;4579:11:53;;;;;4956:10;4579:11;;:::i;:::-;4604:17;;;;;;:::i;:::-;260:29856:46;4656:19:53;;;;:::i;:::-;4769:15;;;:::i;:::-;633:8:80;4769:28:53;633:8:80;260:29856:46;;;;4769:28:53;:::i;1355:21:80:-;4881:24:53;;;;;:::i;4874:37::-;4956:10;;:::i;:::-;4527:20;260:29856:46;4497:13:53;;;;6716:316;6513:18;260:29856:46;;6497:12:53;:34;;6755:271;;6716:316;:::o;6755:271::-;6815:12;260:29856:46;-1:-1:-1;6868:13:53;;;;;;260:29856:46;;6991:23:53;260:29856:46;6497:12:53;260:29856:46;;;6716:316:53:o;6883:20::-;3545:5;;3740:42;1081:1:80;3545:5:53;;260:29856:46;3545:9:53;;;;:::i;260:29856:46:-;3580:12:53;3703:9;3619:33;3580:12;;;:::i;:::-;3619:33;;:::i;:::-;3703:9;;;;:::i;:::-;260:29856:46;;;;;;;;;;;;;;3740:42:53;260:29856:46;6853:13:53;;2016:143:56;2081:8;260:29856:46;;;-1:-1:-1;;;2081:40:56;;2110:10;2081:40;;;260:29856:46;;2081:40:56;;260:29856:46;;;;;;-1:-1:-1;;;;;260:29856:46;2081:40:56;;;;;;;-1:-1:-1;2081:40:56;;;2016:143;2080:41;;2076:76;;2016:143::o;2076:76::-;260:29856:46;;-1:-1:-1;;;2130:22:56;;2081:40;;2130:22;2081:40;;;;;;;;;;;;;;;;:::i;:::-;;;260:29856:46;;;;;;;;:::i;:::-;2081:40:56;;;;;;-1:-1:-1;2081:40:56;;1865:93:58;260:29856:46;1920:7:58;260:29856:46;;;;1916:35:58;;1865:93::o;1916:35::-;260:29856:46;;-1:-1:-1;;;1936:15:58;;;;;1791:113:80;633:8;-1:-1:-1;1858:39:80;;1791:113::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "4670200",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "appreciationFactor()": "4859",
        "bes()": "3098",
        "bns()": "2614",
        "calcCtargemaCA()": "infinite",
        "changeGovernor(address)": "infinite",
        "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "emaCalculationBlockSpan()": "3648",
        "evalLiquidation()": "infinite",
        "execSettlement()": "infinite",
        "feeRetainer()": "3142",
        "feeToken()": "3430",
        "feeTokenPct()": "2834",
        "feeTokenPriceProvider()": "4750",
        "getBts()": "4799",
        "getCglb()": "infinite",
        "getLeverageTC()": "infinite",
        "getPACtp(uint256)": "infinite",
        "getPTCac()": "infinite",
        "getTCAvailableToRedeem()": "infinite",
        "getTPAvailableToMint(uint256)": "infinite",
        "getTotalACavailable()": "infinite",
        "governor()": "2418",
        "initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))": "infinite",
        "isLiquidationReached()": "infinite",
        "liqEnabled()": "4672",
        "liqRedeemTP(uint256)": "infinite",
        "liqRedeemTPto(uint256,address)": "infinite",
        "liqThrld()": "3890",
        "liquidated()": "2742",
        "makeStoppable()": "infinite",
        "makeUnstoppable()": "infinite",
        "mintTC(uint256)": "infinite",
        "mintTCViaVendor(uint256,address)": "infinite",
        "mintTCandTP(uint256,uint256)": "infinite",
        "mintTCandTPFee()": "3582",
        "mintTCandTPViaVendor(uint256,uint256,address)": "infinite",
        "mintTCandTPto(uint256,uint256,address)": "infinite",
        "mintTCandTPtoViaVendor(uint256,uint256,address,address)": "infinite",
        "mintTCto(uint256,address)": "infinite",
        "mintTCtoViaVendor(uint256,address,address)": "infinite",
        "mintTP(uint256,uint256)": "infinite",
        "mintTPViaVendor(uint256,uint256,address)": "infinite",
        "mintTPto(uint256,uint256,address)": "infinite",
        "mintTPtoViaVendor(uint256,uint256,address,address)": "infinite",
        "mocAppreciationBeneficiaryAddress()": "3144",
        "mocFeeFlowAddress()": "4046",
        "mocVendors()": "3826",
        "nACcb()": "4792",
        "nTCcb()": "3604",
        "nextEmaCalculation()": "2416",
        "pause()": "29228",
        "paused()": "3336",
        "pauser()": "4165",
        "pegContainer(uint256)": "9587",
        "peggedTokenIndex(address)": "6364",
        "protThrld()": "3472",
        "proxiableUUID()": "infinite",
        "redeemTC(uint256,uint256)": "infinite",
        "redeemTCViaVendor(uint256,uint256,address)": "infinite",
        "redeemTCandTP(uint256,uint256,uint256,uint256)": "infinite",
        "redeemTCandTPFee()": "4814",
        "redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)": "infinite",
        "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": "infinite",
        "redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": "infinite",
        "redeemTCto(uint256,uint256,address)": "infinite",
        "redeemTCtoViaVendor(uint256,uint256,address,address)": "infinite",
        "redeemTP(uint256,uint256,uint256)": "infinite",
        "redeemTPViaVendor(uint256,uint256,uint256,address)": "infinite",
        "redeemTPto(uint256,uint256,uint256,address)": "infinite",
        "redeemTPtoViaVendor(uint256,uint256,uint256,address,address)": "infinite",
        "setAppreciationFactor(uint256)": "infinite",
        "setBes(uint256)": "infinite",
        "setEmaCalculationBlockSpan(uint256)": "infinite",
        "setFeeRetainer(uint256)": "infinite",
        "setFeeTokenAddress(address)": "infinite",
        "setFeeTokenPct(uint256)": "infinite",
        "setFeeTokenPriceProviderAddress(address)": "infinite",
        "setLiqEnabled(bool)": "infinite",
        "setLiqThrld(uint256)": "infinite",
        "setMintTCandTPFee(uint256)": "infinite",
        "setMocAppreciationBeneficiaryAddress(address)": "infinite",
        "setMocCoreExpansion(address)": "infinite",
        "setMocFeeFlowAddress(address)": "infinite",
        "setPauser(address)": "infinite",
        "setProtThrld(uint256)": "infinite",
        "setRedeemTCandTPFee(uint256)": "infinite",
        "setSuccessFee(uint256)": "infinite",
        "setSwapTCforTPFee(uint256)": "infinite",
        "setSwapTPforTCFee(uint256)": "infinite",
        "setSwapTPforTPFee(uint256)": "infinite",
        "setTcMintFee(uint256)": "infinite",
        "setTcRedeemFee(uint256)": "infinite",
        "shouldCalculateEma()": "4162",
        "stoppable()": "4298",
        "successFee()": "3538",
        "swapTCforTP(uint256,uint256,uint256)": "infinite",
        "swapTCforTPFee()": "2768",
        "swapTCforTPViaVendor(uint256,uint256,uint256,address)": "infinite",
        "swapTCforTPto(uint256,uint256,uint256,address)": "infinite",
        "swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)": "infinite",
        "swapTPforTC(uint256,uint256,uint256)": "infinite",
        "swapTPforTCFee()": "2878",
        "swapTPforTCViaVendor(uint256,uint256,uint256,address)": "infinite",
        "swapTPforTCto(uint256,uint256,uint256,address)": "infinite",
        "swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)": "infinite",
        "swapTPforTP(uint256,uint256,uint256,uint256)": "infinite",
        "swapTPforTPFee()": "3032",
        "swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)": "infinite",
        "swapTPforTPto(uint256,uint256,uint256,uint256,address)": "infinite",
        "swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": "infinite",
        "tcMintFee()": "4942",
        "tcRedeemFee()": "4198",
        "tcToken()": "3408",
        "tpCtarg(uint256)": "8122",
        "tpEma(uint256)": "11128",
        "tpMintFee(uint256)": "8892",
        "tpRedeemFee(uint256)": "7572",
        "tpTokens(uint256)": "6672",
        "unpause()": "26193",
        "updateEmas()": "infinite",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite"
      },
      "internal": {
        "_onACNeededOperation(uint256,uint256)": "infinite",
        "acBalanceOf(address)": "infinite",
        "acTransfer(address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "db796072",
      "appreciationFactor()": "fa6e83bd",
      "bes()": "4d977e78",
      "bns()": "1867e2f5",
      "calcCtargemaCA()": "662013f4",
      "changeGovernor(address)": "e4c0aaf4",
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "f26114aa",
      "emaCalculationBlockSpan()": "7a727fe8",
      "evalLiquidation()": "33421c38",
      "execSettlement()": "5c616a73",
      "feeRetainer()": "4f0f27ee",
      "feeToken()": "647846a5",
      "feeTokenPct()": "2ded50f0",
      "feeTokenPriceProvider()": "f13f4054",
      "getBts()": "e8859a15",
      "getCglb()": "826fcd58",
      "getLeverageTC()": "c039cc69",
      "getPACtp(uint256)": "904aa85b",
      "getPTCac()": "1fb0dda0",
      "getTCAvailableToRedeem()": "4017936a",
      "getTPAvailableToMint(uint256)": "fa79589e",
      "getTotalACavailable()": "de8d520a",
      "governor()": "0c340a24",
      "initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))": "979d9a88",
      "isLiquidationReached()": "9ad6659d",
      "liqEnabled()": "e7c25978",
      "liqRedeemTP(uint256)": "9195c85b",
      "liqRedeemTPto(uint256,address)": "5d65d045",
      "liqThrld()": "8cfa4241",
      "liquidated()": "23b98cde",
      "makeStoppable()": "68274357",
      "makeUnstoppable()": "5210570c",
      "mintTC(uint256)": "31f64ec2",
      "mintTCViaVendor(uint256,address)": "d8233ecc",
      "mintTCandTP(uint256,uint256)": "ac4fc1a8",
      "mintTCandTPFee()": "79f9a91c",
      "mintTCandTPViaVendor(uint256,uint256,address)": "71820f12",
      "mintTCandTPto(uint256,uint256,address)": "1f79da55",
      "mintTCandTPtoViaVendor(uint256,uint256,address,address)": "ec629679",
      "mintTCto(uint256,address)": "b3903b39",
      "mintTCtoViaVendor(uint256,address,address)": "fb3bfcea",
      "mintTP(uint256,uint256)": "82a5792c",
      "mintTPViaVendor(uint256,uint256,address)": "0ad8c234",
      "mintTPto(uint256,uint256,address)": "91f388d8",
      "mintTPtoViaVendor(uint256,uint256,address,address)": "fcf207d4",
      "mocAppreciationBeneficiaryAddress()": "4e1f907a",
      "mocFeeFlowAddress()": "9853c35a",
      "mocVendors()": "7f01c715",
      "nACcb()": "f30b5614",
      "nTCcb()": "7a193c31",
      "nextEmaCalculation()": "0c36d897",
      "pause()": "8456cb59",
      "paused()": "5c975abb",
      "pauser()": "9fd0506d",
      "pegContainer(uint256)": "4b746001",
      "peggedTokenIndex(address)": "9cabfc00",
      "protThrld()": "6b5488df",
      "proxiableUUID()": "52d1902d",
      "redeemTC(uint256,uint256)": "9abb14c9",
      "redeemTCViaVendor(uint256,uint256,address)": "471a80e3",
      "redeemTCandTP(uint256,uint256,uint256,uint256)": "17574bc5",
      "redeemTCandTPFee()": "f375cfba",
      "redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)": "7c287999",
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": "9bdd7cce",
      "redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": "102fefac",
      "redeemTCto(uint256,uint256,address)": "e4012945",
      "redeemTCtoViaVendor(uint256,uint256,address,address)": "3dbc50a9",
      "redeemTP(uint256,uint256,uint256)": "17df0ab8",
      "redeemTPViaVendor(uint256,uint256,uint256,address)": "5e1e8928",
      "redeemTPto(uint256,uint256,uint256,address)": "54a73c62",
      "redeemTPtoViaVendor(uint256,uint256,uint256,address,address)": "bad25a21",
      "setAppreciationFactor(uint256)": "01dde6ef",
      "setBes(uint256)": "c84353c9",
      "setEmaCalculationBlockSpan(uint256)": "3bc4ac0a",
      "setFeeRetainer(uint256)": "7750ba0c",
      "setFeeTokenAddress(address)": "cf351c1d",
      "setFeeTokenPct(uint256)": "543aeb48",
      "setFeeTokenPriceProviderAddress(address)": "0f1e5e2b",
      "setLiqEnabled(bool)": "1fe6a7ad",
      "setLiqThrld(uint256)": "2c43bd3b",
      "setMintTCandTPFee(uint256)": "2069f753",
      "setMocAppreciationBeneficiaryAddress(address)": "27eab2a1",
      "setMocCoreExpansion(address)": "e6a683e0",
      "setMocFeeFlowAddress(address)": "0d6ac463",
      "setPauser(address)": "2d88af4a",
      "setProtThrld(uint256)": "7cba2383",
      "setRedeemTCandTPFee(uint256)": "7a4ff1d9",
      "setSuccessFee(uint256)": "becaca6b",
      "setSwapTCforTPFee(uint256)": "7af5758c",
      "setSwapTPforTCFee(uint256)": "0e0a8fd2",
      "setSwapTPforTPFee(uint256)": "70713468",
      "setTcMintFee(uint256)": "f2808778",
      "setTcRedeemFee(uint256)": "c00f538d",
      "shouldCalculateEma()": "a8e9ac30",
      "stoppable()": "bb4872de",
      "successFee()": "7554fffd",
      "swapTCforTP(uint256,uint256,uint256)": "9839ee85",
      "swapTCforTPFee()": "2a20d57d",
      "swapTCforTPViaVendor(uint256,uint256,uint256,address)": "be22b4e1",
      "swapTCforTPto(uint256,uint256,uint256,address)": "7dc4e77f",
      "swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)": "f5319cc8",
      "swapTPforTC(uint256,uint256,uint256)": "0df12a8b",
      "swapTPforTCFee()": "333431fd",
      "swapTPforTCViaVendor(uint256,uint256,uint256,address)": "c6e06d89",
      "swapTPforTCto(uint256,uint256,uint256,address)": "0aed4f88",
      "swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)": "04856e41",
      "swapTPforTP(uint256,uint256,uint256,uint256)": "0f60f396",
      "swapTPforTPFee()": "407f0e34",
      "swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)": "b7aef837",
      "swapTPforTPto(uint256,uint256,uint256,uint256,address)": "0be9482d",
      "swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": "7ad2819c",
      "tcMintFee()": "fda70f8b",
      "tcRedeemFee()": "aea038dc",
      "tcToken()": "60009e0b",
      "tpCtarg(uint256)": "7d8e0314",
      "tpEma(uint256)": "e6b1627c",
      "tpMintFee(uint256)": "de08160f",
      "tpRedeemFee(uint256)": "5241271c",
      "tpTokens(uint256)": "01f1b684",
      "unpause()": "3f4ba83a",
      "updateEmas()": "d1a0faa0",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQacSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQtpSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTCtoRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToMint_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cglb_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"covThrld_\",\"type\":\"uint256\"}],\"name\":\"LowCoverage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingBlocksToSettlement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProviderAddress_\",\"type\":\"address\"}],\"name\":\"MissingProviderPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedChanger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhenLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhilePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeggedTokenAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACtoRedeem_\",\"type\":\"uint256\"}],\"name\":\"QacBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QacNeededMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"}],\"name\":\"QtcBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"QtpBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unstoppable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"PeggedTokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SettlementExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mocGain_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tpGain_\",\"type\":\"uint256[]\"}],\"name\":\"SuccessFeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TCMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TCRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TCSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TCandTPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TCandTPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPfrom_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPto_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTPema_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTPema_\",\"type\":\"uint256\"}],\"name\":\"TPemaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"addPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appreciationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcCtargemaCA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ctargemaCA\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"editPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emaCalculationBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evalLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRetainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenPriceProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCglb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cglob\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeverageTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageTC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"getPACtp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTCac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pTCac\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTCAvailableToRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tcAvailableToRedeem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"getTPAvailableToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tpAvailableToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalACavailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalACavailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenPriceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocFeeFlowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocAppreciationBeneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protThrld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqThrld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRetainer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTCFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTCforTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTCandTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appreciationFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bes\",\"type\":\"uint256\"}],\"internalType\":\"struct MocBaseBucket.InitializeBaseBucketParams\",\"name\":\"initializeBaseBucketParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"governorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocCoreExpansion\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emaCalculationBlockSpan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mocVendors\",\"type\":\"address\"}],\"internalType\":\"struct MocCore.InitializeCoreParams\",\"name\":\"initializeCoreParams_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidationReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"liqRedeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"liqRedeemTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeStoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnstoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"}],\"name\":\"mintTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTCViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"mintTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTCandTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTCandTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTCtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"mintTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"mintTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocAppreciationBeneficiaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocFeeFlowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocVendors\",\"outputs\":[{\"internalType\":\"contract MocVendors\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nACcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTCcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEmaCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pegContainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nTP\",\"type\":\"uint256\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peggedTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTCViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTCandTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTCandTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTCtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"redeemTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appreciationFactor_\",\"type\":\"uint256\"}],\"name\":\"setAppreciationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bes_\",\"type\":\"uint256\"}],\"name\":\"setBes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockSpan_\",\"type\":\"uint256\"}],\"name\":\"setEmaCalculationBlockSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRetainer_\",\"type\":\"uint256\"}],\"name\":\"setFeeRetainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeTokenAddress_\",\"type\":\"address\"}],\"name\":\"setFeeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTokenPct_\",\"type\":\"uint256\"}],\"name\":\"setFeeTokenPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeTokenPriceProviderAddress_\",\"type\":\"address\"}],\"name\":\"setFeeTokenPriceProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"liqEnabled_\",\"type\":\"bool\"}],\"name\":\"setLiqEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqThrld_\",\"type\":\"uint256\"}],\"name\":\"setLiqThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setMintTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocAppreciationBeneficiaryAddress_\",\"type\":\"address\"}],\"name\":\"setMocAppreciationBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocCoreExpansion_\",\"type\":\"address\"}],\"name\":\"setMocCoreExpansion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeFlowAddress_\",\"type\":\"address\"}],\"name\":\"setMocFeeFlowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser_\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protThrld_\",\"type\":\"uint256\"}],\"name\":\"setProtThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setRedeemTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"successFee_\",\"type\":\"uint256\"}],\"name\":\"setSuccessFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTCforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTCforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTCFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTCFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcMintFee_\",\"type\":\"uint256\"}],\"name\":\"setTcMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcRedeemFee_\",\"type\":\"uint256\"}],\"name\":\"setTcRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldCalculateEma\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoppable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"}],\"name\":\"swapTCforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTCforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTCforTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTCforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTCforTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"}],\"name\":\"swapTPforTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTCFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTPforTCViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTPforTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTPforTCtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"}],\"name\":\"swapTPforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTPforTPViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTPforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"}],\"name\":\"swapTPforTPtoViaVendor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qFeeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcToken\",\"outputs\":[{\"internalType\":\"contract MocTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpCtarg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpEma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpTokens\",\"outputs\":[{\"internalType\":\"contract IMocRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEmas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`  This function is implemented in MocCoreExpansion but with this contract contexttpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"calcCtargemaCA()\":{\"details\":\"qAC = nTP / pACtp      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\",\"returns\":{\"ctargemaCA\":\"[PREC]\"}},\"changeGovernor(address)\":{\"params\":{\"newGovernor_\":\"New governor address\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`  This function is implemented in MocCoreExpansion but with this contract contexttpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - the tpTokenAddress must exists\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"getCglb()\":{\"returns\":{\"cglob\":\"[PREC]\"}},\"getLeverageTC()\":{\"returns\":{\"leverageTC\":\"[PREC]\"}},\"getPACtp(uint256)\":{\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"_0\":\"price [PREC]\"}},\"getPTCac()\":{\"returns\":{\"pTCac\":\"[PREC]\"}},\"getTCAvailableToRedeem()\":{\"details\":\"because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TC available to redeem. Consider it an approximation.\",\"returns\":{\"tcAvailableToRedeem\":\"[N]\"}},\"getTPAvailableToMint(uint256)\":{\"details\":\"because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TP available to mint. Consider it an approximation.\",\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"tpAvailableToMint\":\"[N]\"}},\"getTotalACavailable()\":{\"returns\":{\"totalACavailable\":\"[N]\"}},\"initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))\":{\"details\":\"governorAddress The address that will define when a change contract is authorized      pauserAddress The address that is authorized to pause this contract      tcTokenAddress Collateral Token contract address      mocFeeFlowAddress Moc Fee Flow contract address      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address      protThrld protected state threshold [PREC]      liqThrld liquidation coverage threshold [PREC]      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]      successFee pct of the gain because Pegged Tokens devaluation that is transferred        in Collateral Asset to Moc Fee Flow during the settlement [PREC]      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation      bes number of blocks between settlements\",\"params\":{\"initializeCoreParams_\":\"contract initializer params\"}},\"isLiquidationReached()\":{\"returns\":{\"_0\":\"true if liquidation state is reached, false otherwise\"}},\"liqRedeemTP(uint256)\":{\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\"}},\"liqRedeemTPto(uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"recipient_\":\"address who receives the AC\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to `recipient_`\"}},\"makeStoppable()\":{\"details\":\"Should be called through governance\"},\"makeUnstoppable()\":{\"details\":\"Should be called through governance\"},\"mintTC(uint256)\":{\"details\":\"any extra value, not spent on TC nor fees, will be return to sender\",\"params\":{\"qTC_\":\"amount of Collateral Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTCViaVendor(uint256,address)\":{\"details\":\"any extra value, not spent on TC nor fees, will be return to sender\",\"params\":{\"qTC_\":\"amount of Collateral Token to mint\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTCandTP(uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTP_\":\"amount of Pegged Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCandTPViaVendor(uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTP_\":\"amount of Pegged Token to mint\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCandTPto(uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Collateral Token and Pegged Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCandTPtoViaVendor(uint256,uint256,address,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Collateral Token and Pegged Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCto(uint256,address)\":{\"details\":\"any extra value, not spent on TC nor fees, will be return to sender\",\"params\":{\"qTC_\":\"amount of Collateral Token to mint\",\"recipient_\":\"address who receives the Collateral Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTCtoViaVendor(uint256,address,address)\":{\"details\":\"any extra value, not spent on TC nor fees, will be return to sender\",\"params\":{\"qTC_\":\"amount of Collateral Token to mint\",\"recipient_\":\"address who receives the Collateral Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTP(uint256,uint256)\":{\"details\":\"any extra value, not spent on TP nor fees, will be return to sender\",\"params\":{\"i_\":\"Pegged Token index to mint\",\"qTP_\":\"amount of Pegged Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTPViaVendor(uint256,uint256,address)\":{\"details\":\"any extra value, not spent on TP nor fees, will be return to sender\",\"params\":{\"i_\":\"Pegged Token index to mint\",\"qTP_\":\"amount of Pegged Token to mint\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTPto(uint256,uint256,address)\":{\"details\":\"any extra value, not spent on TP nor fees, will be return to sender\",\"params\":{\"i_\":\"Pegged Token index to mint\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Pegged Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"mintTPtoViaVendor(uint256,uint256,address,address)\":{\"details\":\"any extra value, not spent on TP nor fees, will be return to sender\",\"params\":{\"i_\":\"Pegged Token index to mint\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Pegged Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"pause()\":{\"details\":\"Should only be called by the pauser and when it is stoppable\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemTC(uint256,uint256)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTCViaVendor(uint256,uint256,address)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTCandTP(uint256,uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that the sender expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that the sender expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCandTPto(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the `recipient_`\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the `recipient_`\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCto(uint256,uint256,address)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTCtoViaVendor(uint256,uint256,address,address)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTP(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTPViaVendor(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTPto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"redeemTPtoViaVendor(uint256,uint256,uint256,address,address)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\"}},\"setAppreciationFactor(uint256)\":{\"details\":\"sets appreciation Factor value.\",\"params\":{\"appreciationFactor_\":\"pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\"}},\"setBes(uint256)\":{\"params\":{\"bes_\":\"number of blocks between settlements*\"}},\"setEmaCalculationBlockSpan(uint256)\":{\"params\":{\"blockSpan_\":\"Defines how many blocks should pass between BMA calculations*\"}},\"setFeeRetainer(uint256)\":{\"details\":\"sets the fee pct to be retainer on AC fees payments as AC re-injection.\",\"params\":{\"feeRetainer_\":\"pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setFeeTokenAddress(address)\":{\"details\":\"sets Fee Token contract address\",\"params\":{\"mocFeeTokenAddress_\":\"Fee Token new contract address\"}},\"setFeeTokenPct(uint256)\":{\"details\":\"sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.\",\"params\":{\"feeTokenPct_\":\"pct applied on the top of the operation`s fee when using Fee Token  as fee payment method [PREC]  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setFeeTokenPriceProviderAddress(address)\":{\"details\":\"sets Fee Token price provider contract address\",\"params\":{\"mocFeeTokenPriceProviderAddress_\":\"Fee Token price provider new contract address\"}},\"setLiqEnabled(bool)\":{\"details\":\"enables and disables the liquidation mechanism.\",\"params\":{\"liqEnabled_\":\"is liquidation enabled\"}},\"setLiqThrld(uint256)\":{\"details\":\"sets the value of the liq threshold configuration param\",\"params\":{\"liqThrld_\":\"liquidation threshold\"}},\"setMintTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when mint Collateral Token and Pegged Token in one operation.\",\"params\":{\"mintTCandTPFee_\":\"additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setMocAppreciationBeneficiaryAddress(address)\":{\"details\":\"sets Moc Appreciation Beneficiary Address\",\"params\":{\"mocAppreciationBeneficiaryAddress_\":\"moc Appreciation Beneficiary new address\"}},\"setMocCoreExpansion(address)\":{\"details\":\"sets Moc Core Expansion contract address\",\"params\":{\"mocCoreExpansion_\":\"moc core expansion new contract address\"}},\"setMocFeeFlowAddress(address)\":{\"details\":\"sets Moc Fee Flow contract address\",\"params\":{\"mocFeeFlowAddress_\":\"moc Fee Flow new contract address\"}},\"setPauser(address)\":{\"details\":\"Should be called through governance\",\"params\":{\"newPauser_\":\"Address of the new pauser\"}},\"setProtThrld(uint256)\":{\"details\":\"sets the value of the protected threshold configuration param\",\"params\":{\"protThrld_\":\"coverage protected state threshold [PREC]\"}},\"setRedeemTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\",\"params\":{\"redeemTCandTPFee_\":\"additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSuccessFee(uint256)\":{\"details\":\"sets success Fee value.\",\"params\":{\"successFee_\":\"pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\"}},\"setSwapTCforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap Collateral Token for a Pegged Token.\",\"params\":{\"swapTCforTPFee_\":\"additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTCFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for Collateral Token.\",\"params\":{\"swapTPforTCFee_\":\"additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for another Pegged Token.\",\"params\":{\"swapTPforTPFee_\":\"additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTcMintFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral mint.\",\"params\":{\"tcMintFee_\":\"addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTcRedeemFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral redeem.\",\"params\":{\"tcRedeemFee_\":\"addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"swapTCforTP(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTC_\":\"amount of Collateral Token to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that the sender expects to receive\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTCforTPViaVendor(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTC_\":\"amount of Collateral Token to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that the sender expects to receive\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTCforTPto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTC_\":\"amount of Collateral to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the Pegged Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTC_\":\"amount of Collateral to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the Pegged Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTC(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTCmin_\":\"minimum amount of Collateral Token that the sender expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTCViaVendor(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTCmin_\":\"minimum amount of Collateral Token that the sender expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTCto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTCmin_\":\"minimum amount of Collateral Token that `recipient_` expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"recipient_\":\"address who receives the Collateral Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTCmin_\":\"minimum amount of Collateral Token that `recipient_` expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"recipient_\":\"address who receives the Collateral Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTCMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTP(uint256,uint256,uint256,uint256)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that the sender expects to receive\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that the sender expects to receive\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTPto(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the target Pegged Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the target Pegged Token\",\"vendor_\":\"address who receives a markup\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qFeeToken\":\"amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"updateEmas()\":{\"details\":\"All price provider prices must be available, fails if not\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"MocCACoinbase: Moc Collateral Asset Coinbase\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"add a Pegged Token to the protocol\"},\"calcCtargemaCA()\":{\"notice\":\"calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\"},\"changeGovernor(address)\":{\"notice\":\"Change the contract's governor. Should be called through the old governance system\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"modifies a Pegged Token of the protocol\"},\"evalLiquidation()\":{\"notice\":\"evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event.\"},\"execSettlement()\":{\"notice\":\"this function is executed during settlement.  stores amount of locked AC by Pegged Tokens at this moment and distribute success fee\"},\"getBts()\":{\"notice\":\"get the number of blocks remaining for settlement\"},\"getCglb()\":{\"notice\":\"get bucket global coverage\"},\"getLeverageTC()\":{\"notice\":\"get Collateral Token leverage\"},\"getPACtp(uint256)\":{\"notice\":\"get how many Pegged Token equal 1 Collateral Asset\"},\"getPTCac()\":{\"notice\":\"get Collateral Token price\"},\"getTCAvailableToRedeem()\":{\"notice\":\"get amount of Collateral Token available to redeem\"},\"getTPAvailableToMint(uint256)\":{\"notice\":\"get amount of Pegged Token available to mint\"},\"getTotalACavailable()\":{\"notice\":\"get total Collateral Asset available\"},\"governor()\":{\"notice\":\"The address of the contract which governs this one\"},\"initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))\":{\"notice\":\"contract initializer\"},\"isLiquidationReached()\":{\"notice\":\"If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation\"},\"liqRedeemTP(uint256)\":{\"notice\":\"Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price.\"},\"liqRedeemTPto(uint256,address)\":{\"notice\":\"Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price.\"},\"makeStoppable()\":{\"notice\":\"Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function\"},\"makeUnstoppable()\":{\"notice\":\"Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so\"},\"mintTC(uint256)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Collateral Token\"},\"mintTCViaVendor(uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"mintTCandTP(uint256,uint256)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCandTPViaVendor(uint256,uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCandTPto(uint256,uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCandTPtoViaVendor(uint256,uint256,address,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCto(uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Collateral Token\"},\"mintTCtoViaVendor(uint256,address,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"mintTP(uint256,uint256)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Pegged Token\"},\"mintTPViaVendor(uint256,uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"mintTPto(uint256,uint256,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Pegged Token\"},\"mintTPtoViaVendor(uint256,uint256,address,address)\":{\"notice\":\"caller sends coinbase as Collateral Asset and recipient receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"pause()\":{\"notice\":\"Called by the owner to pause, triggers stopped state\"},\"paused()\":{\"notice\":\"Returns true if paused\"},\"redeemTC(uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and receives Collateral Asset\"},\"redeemTCViaVendor(uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"redeemTCandTP(uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCandTPto(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCto(uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Collateral Asset\"},\"redeemTCtoViaVendor(uint256,uint256,address,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"redeemTP(uint256,uint256,uint256)\":{\"notice\":\"caller sends Pegged Token and receives Collateral Asset\"},\"redeemTPViaVendor(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Pegged Token and receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"redeemTPto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Pegged Token and recipient receives Collateral Asset\"},\"redeemTPtoViaVendor(uint256,uint256,uint256,address,address)\":{\"notice\":\"caller sends Pegged Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"setPauser(address)\":{\"notice\":\"Changes the address which is enable to pause this contract\"},\"shouldCalculateEma()\":{\"notice\":\"true if the necessary span has pass since last ema update\"},\"swapTCforTP(uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and receives Pegged Token\"},\"swapTCforTPViaVendor(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"swapTCforTPto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Pegged Token\"},\"swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"swapTPforTC(uint256,uint256,uint256)\":{\"notice\":\"caller sends a Pegged Token and receives Collateral Token\"},\"swapTPforTCViaVendor(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"swapTPforTCto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives Collateral Token\"},\"swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"swapTPforTP(uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends a Pegged Token and receives another one\"},\"swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and receives another one  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"swapTPforTPto(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives another one\"},\"swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives another one  `vendor_` receives a markup in Fee Token if possible or in qAC if not\"},\"unpause()\":{\"notice\":\"Called by the owner to unpause, returns to normal state\"},\"updateEmas()\":{\"notice\":\"If time, calculates the EMA for all the Pegged Token prices.\"}},\"notice\":\"Moc protocol implementation using network Coinbase as Collateral Asset\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collateral/coinbase/MocCACoinbase.sol\":\"MocCACoinbase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5bba367c6c5b9bc3ffb2a87f6aa7437955f0697ab8fcd8e38d2a4985be6469fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/collateral/coinbase/MocCACoinbase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocCore } from \\\"../../core/MocCore.sol\\\";\\n\\n/**\\n * @title MocCACoinbase: Moc Collateral Asset Coinbase\\n * @notice Moc protocol implementation using network Coinbase as Collateral Asset\\n */\\ncontract MocCACoinbase is MocCore {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeCoreParams_ contract initializer params\\n     * @dev governorAddress The address that will define when a change contract is authorized\\n     *      pauserAddress The address that is authorized to pause this contract\\n     *      tcTokenAddress Collateral Token contract address\\n     *      mocFeeFlowAddress Moc Fee Flow contract address\\n     *      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *      protThrld protected state threshold [PREC]\\n     *      liqThrld liquidation coverage threshold [PREC]\\n     *      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *      successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *        in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *      bes number of blocks between settlements\\n     */\\n    function initialize(InitializeCoreParams calldata initializeCoreParams_) external initializer {\\n        __MocCore_init(initializeCoreParams_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal override nonReentrant {\\n        if (amount_ > 0) {\\n            if (to_ == address(0)) revert InvalidAddress();\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to_.call{ value: amount_ }(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acBalanceOf(address account) internal view override returns (uint256 balance) {\\n        return account.balance;\\n    }\\n\\n    /**\\n     * @notice hook before any AC reception involving operation, as dealing with an RC20 Token\\n     * we need to transfer the AC amount from the user, to the contract\\n     * @param qACMax_ max amount of AC available\\n     * @param qACNeeded_ amount of AC needed\\n     * @return change amount needed to be return to the sender after the operation is complete\\n     */\\n    function _onACNeededOperation(uint256 qACMax_, uint256 qACNeeded_) internal pure override returns (uint256 change) {\\n        change = qACMax_ - qACNeeded_;\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Collateral Token\\n     * @dev any extra value, not spent on TC nor fees, will be return to sender\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTC(uint256 qTC_) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTCParams memory params = MintTCParams({\\n            qTC: qTC_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _mintTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TC nor fees, will be return to sender\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCViaVendor(\\n        uint256 qTC_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTCParams memory params = MintTCParams({\\n            qTC: qTC_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _mintTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token\\n     * @dev any extra value, not spent on TC nor fees, will be return to sender\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param recipient_ address who receives the Collateral Token\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCto(\\n        uint256 qTC_,\\n        address recipient_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTCParams memory params = MintTCParams({\\n            qTC: qTC_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _mintTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TC nor fees, will be return to sender\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCtoViaVendor(\\n        uint256 qTC_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTCParams memory params = MintTCParams({\\n            qTC: qTC_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _mintTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Pegged Token\\n     * @dev any extra value, not spent on TP nor fees, will be return to sender\\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTP(uint256 i_, uint256 qTP_) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTPParams memory params = MintTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _mintTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TP nor fees, will be return to sender\\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTPViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTPParams memory params = MintTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _mintTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Pegged Token\\n     * @dev any extra value, not spent on TP nor fees, will be return to sender\\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address recipient_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTPParams memory params = MintTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _mintTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TP nor fees, will be return to sender\\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTPtoViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qFeeToken) {\\n        MintTPParams memory params = MintTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _mintTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCandTP(\\n        uint256 i_,\\n        uint256 qTP_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeToken) {\\n        MintTCandTPParams memory params = MintTCandTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _mintTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCandTPViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeToken) {\\n        MintTCandTPParams memory params = MintTCandTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _mintTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCandTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address recipient_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeToken) {\\n        MintTCandTPParams memory params = MintTCandTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _mintTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function mintTCandTPtoViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeToken) {\\n        MintTCandTPParams memory params = MintTCandTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _mintTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives another one\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that the sender expects to receive\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTP(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTPforTPParams memory params = SwapTPforTPParams({\\n            iFrom: iFrom_,\\n            iTo: iTo_,\\n            qTP: qTP_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _swapTPforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives another one\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that the sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTPViaVendor(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTPforTPParams memory params = SwapTPforTPParams({\\n            iFrom: iFrom_,\\n            iTo: iTo_,\\n            qTP: qTP_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _swapTPforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTPto(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        address recipient_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTPforTPParams memory params = SwapTPforTPParams({\\n            iFrom: iFrom_,\\n            iTo: iTo_,\\n            qTP: qTP_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _swapTPforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTPtoViaVendor(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTPforTPParams memory params = SwapTPforTPParams({\\n            iFrom: iFrom_,\\n            iTo: iTo_,\\n            qTP: qTP_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _swapTPforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives Collateral Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that the sender expects to receive\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTCMinted amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTC(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_\\n    ) external payable returns (uint256 qACFee, uint256 qTCMinted, uint256 qFeeToken) {\\n        SwapTPforTCParams memory params = SwapTPforTCParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qTCmin: qTCmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _swapTPforTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that the sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTCMinted amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTCViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTCMinted, uint256 qFeeToken) {\\n        SwapTPforTCParams memory params = SwapTPforTCParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qTCmin: qTCmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _swapTPforTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTCMinted amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTCto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        address recipient_\\n    ) external payable returns (uint256 qACFee, uint256 qTCMinted, uint256 qFeeToken) {\\n        SwapTPforTCParams memory params = SwapTPforTCParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qTCmin: qTCmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _swapTPforTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTCMinted amount of Collateral Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTPforTCtoViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTCMinted, uint256 qFeeToken) {\\n        SwapTPforTCParams memory params = SwapTPforTCParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qTCmin: qTCmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _swapTPforTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that the sender expects to receive\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTCforTP(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTCforTPParams memory params = SwapTCforTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _swapTCforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that the sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTCforTPViaVendor(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTCforTPParams memory params = SwapTCforTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _swapTCforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTCforTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        address recipient_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTCforTPParams memory params = SwapTCforTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _swapTCforTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function swapTCforTPtoViaVendor(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 qACFee, uint256 qTPMinted, uint256 qFeeToken) {\\n        SwapTCforTPParams memory params = SwapTCforTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTPmin: qTPmin_,\\n            qACmax: msg.value,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _swapTCforTPto(params);\\n    }\\n\\n    /**\\n     * @notice allow to send Coinbase to increment the Collateral Asset in the protocol\\n     */\\n    receive() external payable {\\n        _depositAC(msg.value);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x41db62dabfcada33f2a3be3475d0fd989dd615f481ca70890beebdfb7d69c028\",\"license\":\"UNLICENSED\"},\"contracts/core/MocBaseBucket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { MocTC } from \\\"../tokens/MocTC.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MocBaseBucket: Moc Collateral Bag\\n * @notice MocBaseBucket holds Bucket Zero state, both for the Collateral Bag and PeggedTokens Items.\\n * @dev Abstracts all rw operations on the main bucket and expose all calculations relative to its state.\\n */\\nabstract contract MocBaseBucket is MocUpgradable, ReentrancyGuardUpgradeable {\\n    // ------- Events -------\\n\\n    event ContractLiquidated();\\n\\n    // ------- Custom Errors -------\\n    error MissingProviderPrice(address priceProviderAddress_);\\n    error Liquidated();\\n    error LowCoverage(uint256 cglb_, uint256 covThrld_);\\n\\n    // ------- Structs -------\\n    struct PegContainerItem {\\n        // total supply of Pegged Token\\n        uint256 nTP;\\n        // PegToken PriceFeed address\\n        IPriceProvider priceProvider;\\n    }\\n\\n    struct PeggedTokenIndex {\\n        // Pegged Token index\\n        uint256 index;\\n        // true if Pegged Token exists\\n        bool exists;\\n    }\\n\\n    struct InitializeBaseBucketParams {\\n        // Fee Token contract address\\n        address feeTokenAddress;\\n        // Fee Token price provider address\\n        address feeTokenPriceProviderAddress;\\n        // Collateral Token contract address\\n        address tcTokenAddress;\\n        // Moc Fee Flow contract address\\n        address mocFeeFlowAddress;\\n        // moc appreciation beneficiary Address\\n        address mocAppreciationBeneficiaryAddress;\\n        // protected state threshold [PREC]\\n        uint256 protThrld;\\n        // liquidation coverage threshold [PREC]\\n        uint256 liqThrld;\\n        // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n        uint256 feeRetainer;\\n        // additional fee pct applied on mint Collateral Tokens operations [PREC]\\n        uint256 tcMintFee;\\n        // additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n        uint256 tcRedeemFee;\\n        // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n        uint256 swapTPforTPFee;\\n        // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n        uint256 swapTPforTCFee;\\n        // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n        uint256 swapTCforTPFee;\\n        // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n        uint256 redeemTCandTPFee;\\n        // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n        uint256 mintTCandTPFee;\\n        // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n        // e.g. if tcMintFee = 1%, feeTokenPct = 50% => qFeeToken = 0.5%\\n        uint256 feeTokenPct;\\n        // pct of the gain because Pegged Tokens devaluation that is transferred\\n        // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n        uint256 successFee;\\n        // pct of the gain because Pegged Tokens devaluation that is returned\\n        // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n        uint256 appreciationFactor;\\n        // number of blocks between settlements\\n        uint256 bes;\\n    }\\n\\n    // ------- Storage -------\\n\\n    // Fee Token\\n    IERC20 public feeToken;\\n    // Fee Token price provider\\n    IPriceProvider public feeTokenPriceProvider;\\n    // total amount of Collateral Asset held in the Collateral Bag\\n    // WARN: On RC20 implementation, this correlates with contract acBalance\\n    uint256 public nACcb;\\n    // amount of Collateral Asset that the Vaults owe to the Collateral Bag\\n    // this variable is not used and is reserved for a future upgrade of the protocol\\n    // slither-disable-next-line constable-states\\n    uint256 internal nACioucb;\\n\\n    // Collateral Token\\n    MocTC public tcToken;\\n    // Collateral Token in the Collateral Bag\\n    uint256 public nTCcb;\\n\\n    // Pegged Tokens MocRC20 addresses\\n    IMocRC20[] public tpTokens;\\n    // Pegged Token indexes\\n    mapping(address => PeggedTokenIndex) public peggedTokenIndex;\\n    // peg container\\n    PegContainerItem[] public pegContainer;\\n    // Pegged Token prices, at which they can be redeemed after liquidation event\\n    uint256[] internal tpLiqPrices;\\n    // pct of the gain because Pegged Tokens devaluation that is transferred\\n    // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n    uint256 public successFee;\\n    // pct of the gain because Pegged Tokens devaluation that is returned\\n    // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n    uint256 public appreciationFactor;\\n\\n    // ------- Storage Fees -------\\n\\n    // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n    uint256 public feeRetainer; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Collateral Tokens mint [PREC]\\n    uint256 public tcMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Collateral Tokens redeem [PREC]\\n    uint256 public tcRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n    uint256 public swapTPforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n    uint256 public swapTPforTCFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n    uint256 public swapTCforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n    uint256 public redeemTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n    uint256 public mintTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n    // e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n    uint256 public feeTokenPct; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // addition fee pct applied on Pegged Tokens mint [PREC]\\n    uint256[] public tpMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Pegged Tokens redeem [PREC]\\n    uint256[] public tpRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Moc Fee Flow contract address\\n    address public mocFeeFlowAddress;\\n    // Moc appreciation beneficiary address\\n    address public mocAppreciationBeneficiaryAddress;\\n\\n    // ------- Storage Coverage Tracking -------\\n\\n    // Target coverage for each Pegged Token [PREC]\\n    uint256[] public tpCtarg;\\n    // Coverage protected state threshold [PREC]\\n    uint256 public protThrld;\\n    // Coverage liquidation threshold [PREC]\\n    uint256 public liqThrld;\\n    // Liquidation enabled\\n    bool public liqEnabled;\\n    // Irreversible state, peg lost, contract is terminated and all funds can be withdrawn\\n    bool public liquidated;\\n\\n    // ------- Storage Settlement -------\\n\\n    // number of blocks between settlements\\n    uint256 public bes;\\n    // next settlement block\\n    uint256 public bns;\\n\\n    // ------- Storage Success Fee Tracking -------\\n\\n    // profit and loss in collateral asset for each Pegged Token because its devaluation [N]\\n    // if it is positive it is a profit that will be distributed and reset during settlement\\n    int256[] internal tpiou;\\n    // Pegged Token price used at last operation(redeem or mint) [PREC]\\n    uint256[] internal pACtpLstop;\\n\\n    // ------- Modifiers -------\\n    /// @notice functions with this modifier reverts being in liquidated state\\n    modifier notLiquidated() {\\n        _checkLiquidated();\\n        _;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeBaseBucketParams_ contract initializer params\\n     * @dev   feeTokenAddress Fee Token contract address\\n     *        feeTokenPriceProviderAddress Fee Token price provider contract address\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected coverage threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        feeTokenPct pct applied on the top of the operation`s fee when using\\n     *          Fee Token as fee payment method [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *        bes number of blocks between settlements\\n     */\\n    function __MocBaseBucket_init_unchained(\\n        InitializeBaseBucketParams calldata initializeBaseBucketParams_\\n    ) internal onlyInitializing {\\n        if (initializeBaseBucketParams_.protThrld < ONE) revert InvalidValue();\\n        _checkLessThanOne(initializeBaseBucketParams_.feeRetainer);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcMintFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcRedeemFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTCFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTCforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.redeemTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.mintTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.feeTokenPct);\\n        _checkLessThanOne(initializeBaseBucketParams_.successFee + initializeBaseBucketParams_.appreciationFactor);\\n        feeToken = IERC20(initializeBaseBucketParams_.feeTokenAddress);\\n        feeTokenPriceProvider = IPriceProvider(initializeBaseBucketParams_.feeTokenPriceProviderAddress);\\n        tcToken = MocTC(initializeBaseBucketParams_.tcTokenAddress);\\n        mocFeeFlowAddress = initializeBaseBucketParams_.mocFeeFlowAddress;\\n        mocAppreciationBeneficiaryAddress = initializeBaseBucketParams_.mocAppreciationBeneficiaryAddress;\\n        protThrld = initializeBaseBucketParams_.protThrld;\\n        liqThrld = initializeBaseBucketParams_.liqThrld;\\n        feeRetainer = initializeBaseBucketParams_.feeRetainer;\\n        tcMintFee = initializeBaseBucketParams_.tcMintFee;\\n        tcRedeemFee = initializeBaseBucketParams_.tcRedeemFee;\\n        swapTPforTPFee = initializeBaseBucketParams_.swapTPforTPFee;\\n        swapTPforTCFee = initializeBaseBucketParams_.swapTPforTCFee;\\n        swapTCforTPFee = initializeBaseBucketParams_.swapTCforTPFee;\\n        redeemTCandTPFee = initializeBaseBucketParams_.redeemTCandTPFee;\\n        mintTCandTPFee = initializeBaseBucketParams_.mintTCandTPFee;\\n        feeTokenPct = initializeBaseBucketParams_.feeTokenPct;\\n        successFee = initializeBaseBucketParams_.successFee;\\n        appreciationFactor = initializeBaseBucketParams_.appreciationFactor;\\n        bes = initializeBaseBucketParams_.bes;\\n        bns = block.number + initializeBaseBucketParams_.bes;\\n        liquidated = false;\\n        liqEnabled = false;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * reverts if in liquidated state\\n     */\\n    function _checkLiquidated() internal view {\\n        if (liquidated) revert Liquidated();\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Asset to the Bucket\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositAC(uint256 qAC_) internal {\\n        nACcb += qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb += qTC_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb -= qTC_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP += qTP_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Pegged Token and Collateral Asset from the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP -= qTP_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket and mints `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTP(uint256 i_, uint256 qTP_, uint256 qAC_, address recipient_) internal {\\n        // add qTP and qAC to the Bucket\\n        _depositTP(i_, qTP_, qAC_);\\n        // mint qTP to the recipient\\n        tpTokens[i_].mint(recipient_, qTP_);\\n    }\\n\\n    /**\\n     * @notice subtracts Pegged Token and Collateral Asset from the Bucket and burns `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     * @param toBurnFrom_ the account to burn tokens from\\n     */\\n    function _withdrawAndBurnTP(uint256 i_, uint256 qTP_, uint256 qAC_, address toBurnFrom_) internal {\\n        // sub qTP and qAC from the Bucket\\n        _withdrawTP(i_, qTP_, qAC_);\\n        // burn qTP from this address\\n        tpTokens[i_].burn(toBurnFrom_, qTP_);\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket and mints qTCtoMint\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTC(uint256 qTC_, uint256 qAC_, address recipient_) internal {\\n        // add qTC to the Bucket\\n        _depositTC(qTC_, qAC_);\\n        // mint qTC to the recipient\\n        tcToken.mint(recipient_, qTC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket and burns `qTC_`\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     * @param toBurnFrom_ the account to burn tokens from\\n     */\\n    function _withdrawAndBurnTC(uint256 qTC_, uint256 qAC_, address toBurnFrom_) internal {\\n        // sub qTC and qAC from the Bucket\\n        _withdrawTC(qTC_, qAC_);\\n        // burn qTC from this address\\n        tcToken.burn(toBurnFrom_, qTC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset available considering how many are locked by Pegged Token adjusted by EMA\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return lckACemaAdjusted [PREC]\\n     */\\n    function _getLckACemaAdjusted(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 lckACemaAdjusted) {\\n        // if coverage <= ctargemaCA, we force that there be 0 AC available due to possible rounding errors\\n        if (_getCglb(lckAC_, nACgain_) <= ctargemaCA_) return 0;\\n        // [PREC] = [N] * [PREC] - [PREC] * [N]\\n        return _getTotalACavailable(nACgain_) * PRECISION - ctargemaCA_ * lckAC_;\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function _getTCAvailableToRedeem(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 tcAvailableToRedeem) {\\n        // [PREC]\\n        uint256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        // [N] = [PREC] / [PREC]\\n        return lckACemaAdjusted / _getPTCac(lckAC_, nACgain_);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMint(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 tpAvailableToMint) {\\n        // [N] = ([PREC] * [PREC] / [PREC]) / [PREC]\\n        return ((_getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_) * pACtp_) / (ctargemaTP_ - ONE)) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice evaluates whether or not the coverage is over the cThrld_, reverts if below\\n     * @param cThrld_ coverage threshold to check for [PREC]\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC amount of Collateral Asset locked by Pegged Tokens [PREC]\\n     * @return nACgain amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalCoverage(\\n        uint256 cThrld_,\\n        uint256[] memory pACtps_\\n    ) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        (lckAC, nACgain) = _calcLckACandACgain(pACtps_);\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        // check if coverage is above the given threshold\\n        if (cglb <= cThrld_) revert LowCoverage(cglb, cThrld_);\\n    }\\n\\n    /**\\n     * @dev Calculates price at liquidation event as a relation between Pegs total supply\\n     * and the amount of Asset Collateral available to distribute\\n     */\\n    function settleLiquidationPrices() internal {\\n        // Total amount of AC available to be redeemed\\n        uint256 totalACAvailable = nACcb;\\n        if (totalACAvailable == 0) return;\\n        uint256 pegAmount = pegContainer.length;\\n        // this could be get by getLckAC(), but given the prices are needed after,\\n        // it's better to cache them here.\\n        uint256 lckAC;\\n        // Auxiliary cache of pegs pACtp\\n        uint256[] memory pACtps = new uint256[](pegAmount);\\n        // for each peg, calculates the proportion of AC reserves it's locked\\n\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = getPACtp(i);\\n            // [N] = [N] * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP, pACtps[i]);\\n        }\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            // [PREC] = [PREC] * [N] / [N];\\n            tpLiqPrices.push((pACtps[i] * lckAC) / totalACAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice updates Pegged Token P&L and last operation price\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     */\\n    function _updateTPtracking(uint256 i_, uint256 pACtp_) internal {\\n        tpiou[i_] += _calcOtfPnLTP(i_, pACtp_);\\n        pACtpLstop[i_] = pACtp_;\\n    }\\n\\n    /**\\n     * @notice calculates on the fly Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return otfPnLtp [N]\\n     */\\n    function _calcOtfPnLTP(uint256 i_, uint256 pACtp_) internal view returns (int256 otfPnLtp) {\\n        // [PREC] = [N] * [PREC]\\n        uint256 nTP = pegContainer[i_].nTP * PRECISION;\\n        // [N] = [PREC] / [PREC] - [PREC] / [PREC]\\n        return int256(nTP / pACtpLstop[i_]) - int256(nTP / pACtp_);\\n    }\\n\\n    /**\\n     * @notice gets accumulated Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return tpGain amount of Pegged Token to be minted during settlement [N]\\n     * @return adjPnLtpi total amount of P&L in Collateral Asset [N]\\n     */\\n    function _getPnLTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 tpGain, uint256 adjPnLtpi) {\\n        // [N] = [N] + [N]\\n        int256 adjPnLtpiAux = tpiou[i_] + _calcOtfPnLTP(i_, pACtp_);\\n        if (adjPnLtpiAux > 0) {\\n            adjPnLtpi = uint256(adjPnLtpiAux);\\n            // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n            tpGain = _mulPrec(_mulPrec(appreciationFactor, pACtp_), adjPnLtpi);\\n        }\\n        return (tpGain, adjPnLtpi);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _getLckACandACgain() internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256[] memory pACtps = _getPACtps();\\n        return _calcLckACandACgain(pACtps);\\n    }\\n\\n    /**\\n     * @notice calculates the amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _calcLckACandACgain(uint256[] memory pACtps_) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256 pegAmount = pegContainer.length;\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = pACtps_[i];\\n            (uint256 tpGain, uint256 adjPnLtpi) = _getPnLTP(i, pACtp);\\n            // [N] = ([N] + [N]) * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP + tpGain, pACtp);\\n            nACgain += adjPnLtpi;\\n        }\\n        // [N] = [N] * [PREC] / [PREC]\\n        nACgain = _mulPrec(nACgain, successFee);\\n        return (lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return totalACavailable [N]\\n     */\\n    function _getTotalACavailable(uint256 nACgain_) internal view returns (uint256 totalACavailable) {\\n        // [N] = [N] - [N]\\n        return nACcb - nACgain_;\\n    }\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return pTCac [PREC]\\n     */\\n    function _getPTCac(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 pTCac) {\\n        if (nTCcb == 0) return ONE;\\n        // [PREC] = ([N] - [N]) * [PREC]) / [N]\\n        return _divPrec((_getTotalACavailable(nACgain_) - lckAC_), nTCcb);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return leverageTC [PREC]\\n     */\\n    function _getLeverageTC(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 leverageTC) {\\n        uint256 totalACavailable = _getTotalACavailable(nACgain_);\\n        // [PREC] = [N] * [PREC] / ([N] - [N])\\n        return _divPrec(totalACavailable, totalACavailable - lckAC_);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return cglob [PREC]\\n     */\\n    function _getCglb(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 cglob) {\\n        if (lckAC_ == 0) return UINT256_MAX;\\n        // [PREC] = [N] * [PREC] / [N]\\n        return _divPrec(_getTotalACavailable(nACgain_), lckAC_);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice If liquidation is enabled, verifies if forced liquidation has been\\n     * reached, checking if globalCoverage <= liquidation\\n     * @return true if liquidation state is reached, false otherwise\\n     */\\n    function isLiquidationReached() public view returns (bool) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        return cglb <= liqThrld;\\n    }\\n\\n    /**\\n     * @notice evaluates if liquidation threshold has been reached and liq is Enabled.\\n     * If so forces contracts liquidation, blocking all mint & redeem operations.\\n     *\\n     * May emit a {ContractLiquidated} event.\\n     */\\n    function evalLiquidation() external notPaused {\\n        if (liqEnabled && !liquidated && isLiquidationReached()) {\\n            liquidated = true;\\n            emit ContractLiquidated();\\n            tcToken.pause();\\n            // Freeze current Peg Price given the AC available\\n            settleLiquidationPrices();\\n        }\\n    }\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param i_ Pegged Token index\\n     * @return price [PREC]\\n     */\\n    function getPACtp(uint256 i_) public view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[i_].priceProvider;\\n        (uint256 price, bool has) = _peekPrice(priceProvider);\\n        if (!has) revert MissingProviderPrice(address(priceProvider));\\n        return price;\\n    }\\n\\n    /**\\n     * @notice ask to a price provider for its token price\\n     * @dev saves some contract size by using this function instead of calling the external directly\\n     * @param priceProvider_ Pegged Token index\\n     * @return price casted to uint256 [PREC]\\n     * @return has true if has a valid price\\n     */\\n    function _peekPrice(IPriceProvider priceProvider_) internal view returns (uint256, bool) {\\n        (bytes32 price, bool has) = priceProvider_.peek();\\n        return (uint256(price), has);\\n    }\\n\\n    /**\\n     * @notice gets all TP prices\\n     * @return pACtps All tps prices [PREC]\\n     */\\n    function _getPACtps() internal view returns (uint256[] memory pACtps) {\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = getPACtp(i);\\n        }\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets the fee pct to be retainer on AC fees payments as AC re-injection.\\n     * @param feeRetainer_  pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeRetainer(uint256 feeRetainer_) external onlyAuthorizedChanger {\\n        feeRetainer = feeRetainer_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral mint.\\n     * @param tcMintFee_ addition fee pct applied on Collateral Tokens mint [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcMintFee(uint256 tcMintFee_) external onlyAuthorizedChanger {\\n        tcMintFee = tcMintFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral redeem.\\n     * @param tcRedeemFee_ addition fee pct applied on Collateral Tokens redeem [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcRedeemFee(uint256 tcRedeemFee_) external onlyAuthorizedChanger {\\n        tcRedeemFee = tcRedeemFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for another Pegged Token.\\n     * @param swapTPforTPFee_ additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTPFee(uint256 swapTPforTPFee_) external onlyAuthorizedChanger {\\n        swapTPforTPFee = swapTPforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for Collateral Token.\\n     * @param swapTPforTCFee_ additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTCFee(uint256 swapTPforTCFee_) external onlyAuthorizedChanger {\\n        swapTPforTCFee = swapTPforTCFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap Collateral Token for a Pegged Token.\\n     * @param swapTCforTPFee_ additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTCforTPFee(uint256 swapTCforTPFee_) external onlyAuthorizedChanger {\\n        swapTCforTPFee = swapTCforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\\n     * @param redeemTCandTPFee_ additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setRedeemTCandTPFee(uint256 redeemTCandTPFee_) external onlyAuthorizedChanger {\\n        redeemTCandTPFee = redeemTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when mint Collateral Token and Pegged Token in one operation.\\n     * @param mintTCandTPFee_ additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setMintTCandTPFee(uint256 mintTCandTPFee_) external onlyAuthorizedChanger {\\n        mintTCandTPFee = mintTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.\\n     * @param feeTokenPct_ pct applied on the top of the operation`s fee when using Fee Token\\n     *  as fee payment method [PREC]\\n     *  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n     *  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeTokenPct(uint256 feeTokenPct_) external onlyAuthorizedChanger {\\n        feeTokenPct = feeTokenPct_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Fee Flow contract address\\n     * @param mocFeeFlowAddress_ moc Fee Flow new contract address\\n     */\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocFeeFlowAddress = mocFeeFlowAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Appreciation Beneficiary Address\\n     * @param mocAppreciationBeneficiaryAddress_ moc Appreciation Beneficiary new address\\n     */\\n    function setMocAppreciationBeneficiaryAddress(\\n        address mocAppreciationBeneficiaryAddress_\\n    ) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocAppreciationBeneficiaryAddress = mocAppreciationBeneficiaryAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Fee Token contract address\\n     * @param mocFeeTokenAddress_ Fee Token new contract address\\n     */\\n    function setFeeTokenAddress(address mocFeeTokenAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeToken = IERC20(mocFeeTokenAddress_);\\n    }\\n\\n    /**\\n     * @dev sets Fee Token price provider contract address\\n     * @param mocFeeTokenPriceProviderAddress_ Fee Token price provider new contract address\\n     */\\n    function setFeeTokenPriceProviderAddress(address mocFeeTokenPriceProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeTokenPriceProvider = IPriceProvider(mocFeeTokenPriceProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets the value of the protected threshold configuration param\\n     * @param protThrld_ coverage protected state threshold [PREC]\\n     */\\n    function setProtThrld(uint256 protThrld_) external onlyAuthorizedChanger {\\n        protThrld = protThrld_;\\n    }\\n\\n    /**\\n     * @dev sets the value of the liq threshold configuration param\\n     * @param liqThrld_ liquidation threshold\\n     */\\n    function setLiqThrld(uint256 liqThrld_) external onlyAuthorizedChanger {\\n        liqThrld = liqThrld_;\\n    }\\n\\n    /**\\n     * @dev enables and disables the liquidation mechanism.\\n     * @param liqEnabled_ is liquidation enabled\\n     */\\n    function setLiqEnabled(bool liqEnabled_) external onlyAuthorizedChanger {\\n        liqEnabled = liqEnabled_;\\n    }\\n\\n    /**\\n     * @dev sets success Fee value.\\n     * @param successFee_ pct of the gain because Pegged Tokens devaluation that is\\n     * transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     */\\n    function setSuccessFee(uint256 successFee_) external onlyAuthorizedChanger {\\n        successFee = successFee_;\\n    }\\n\\n    /**\\n     * @dev sets appreciation Factor value.\\n     * @param appreciationFactor_ pct of the gain because Pegged Tokens devaluation that is returned\\n     * in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     */\\n    function setAppreciationFactor(uint256 appreciationFactor_) external onlyAuthorizedChanger {\\n        appreciationFactor = appreciationFactor_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xac04a409254f2906a8f346d8c8c935de173f93339aea189ac2ea85ed00de8d29\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCommons.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocVendors } from \\\"../vendors/MocVendors.sol\\\";\\nimport { MocEma } from \\\"./MocEma.sol\\\";\\n\\n// ------- External Structs -------\\n\\nstruct PeggedTokenParams {\\n    // Pegged Token contract address to add\\n    address tpTokenAddress;\\n    // priceProviderAddress Pegged Token price provider contract address\\n    address priceProviderAddress;\\n    // Pegged Token target coverage [PREC]\\n    uint256 tpCtarg;\\n    // additional fee pct applied on mint [PREC]\\n    uint256 tpMintFee;\\n    // additional fee pct applied on redeem [PREC]\\n    uint256 tpRedeemFee;\\n    // initial Pegged Token exponential moving average [PREC]\\n    uint256 tpEma;\\n    // Pegged Token smoothing factor [PREC]\\n    uint256 tpEmaSf;\\n}\\n\\n//    +-----------------+\\n//    |  MocBaseBucket  |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+\\n//    |    MocEma       |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+ contains  +-----------------+\\n//    |    MocCommons   | ------>   |    MocVendors   |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+ contains  +-----------------+\\n//    |     MocCore     | ------>   |MocCoreExpansion |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+           +-----------------+\\n//    |  MocCACoinbase  |           |    MocCARC20    |\\n//    +-----------------+           +-----------------+\\n/**\\n * @title MocCommons\\n * @dev To bypass the 24kb size limitation on MocCore we use MocCoreExpansion contract. Some functions\\n *  are implemented there and MocCore delegates calls to it. To achieve that, we need both to have the\\n *  exact same storage layout and be able to access the same common functions.\\n *  MocCommons contract serves as the last shared ancestor in the line of inheritance for them,\\n *  and all storage variables must be either declared here or in a parent contract.\\n *  Declaring variables after this point could result in storage collisions.\\n */\\nabstract contract MocCommons is MocEma {\\n    // ------- Storage -------\\n\\n    // Address for MocVendors contract, provides fee markup information\\n    MocVendors public mocVendors;\\n\\n    // ------- Internal Structs -------\\n\\n    struct SwapTPforTPParams {\\n        uint256 iFrom;\\n        uint256 iTo;\\n        uint256 qTP;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct FeeCalcs {\\n        uint256 qACFee;\\n        uint256 qFeeToken;\\n        uint256 qACVendorMarkup;\\n        uint256 qFeeTokenVendorMarkup;\\n    }\\n\\n    // ------- Custom Errors -------\\n\\n    error PeggedTokenAlreadyAdded();\\n    error InsufficientTPtoRedeem(uint256 qTP_, uint256 tpAvailableToRedeem_);\\n    error TransferFailed();\\n    error OnlyWhenLiquidated();\\n    error InsufficientQacSent(uint256 qACsent_, uint256 qACNeeded_);\\n    error InsufficientTPtoMint(uint256 qTP_, uint256 tpAvailableToMint_);\\n    error QtpBelowMinimumRequired(uint256 qTPmin_, uint256 qTP_);\\n\\n    // ------- Events -------\\n\\n    event TPRedeemed(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event PeggedTokenChange(uint256 indexed i_, PeggedTokenParams peggedTokenParams_);\\n    event TPSwappedForTP(\\n        uint256 indexed iFrom_,\\n        uint256 iTo_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTPfrom_,\\n        uint256 qTPto_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n\\n    // ------- Initializer -------\\n\\n    /**\\n     * @notice contract initializer\\n     * @param mocVendors_ address for MocVendors contract.\\n     */\\n    function __MocCommons_init_unchained(address mocVendors_) internal onlyInitializing {\\n        mocVendors = MocVendors(mocVendors_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice calc fees amount in qAC or Fee Token\\n     *  If `sender_` has enough Fee Token to pay fees, will be used. In another case will use qAC\\n     * @dev if qFeeToken > 0, qACFee = 0. If qACFee > 0, qFeeToken = 0.\\n     * @param sender_ address who executes the operation\\n     * @param qAC_ amount of AC involved in the operation, could be sent form sender for mint or\\n     *  sent to recipient for redeem [N]\\n     * @param qACFeePct_ additional fee pct applied on operation\\n     * @return qACSurcharges amount of AC needed to pay fees and markup. 0 if pays with Fee Token\\n     * @return qFeeTokenTotalNeeded amount of Fee Token needed to pay fees and markup. 0 if pays with AC\\n     * @return feeCalcs\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function _calcFees(\\n        address sender_,\\n        address vendor_,\\n        uint256 qAC_,\\n        uint256 qACFeePct_\\n    ) internal view returns (uint256 qACSurcharges, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        uint256 qACmarked;\\n        if (vendor_ != address(0)) {\\n            // [PREC] = [N] * [PREC]\\n            qACmarked = qAC_ * mocVendors.vendorMarkup(vendor_);\\n        }\\n        uint256 senderAllowance = feeToken.allowance(sender_, address(this));\\n        if (senderAllowance > 0) {\\n            (uint256 feeTokenPrice, bool hasFeeTokenPrice) = _peekPrice(feeTokenPriceProvider);\\n            if (hasFeeTokenPrice) {\\n                // calculates Fee Token to be charged as fee\\n                // [N] = ([N] * [PREC] * [PREC] / [PREC]) / [PREC]\\n                // TODO: define if will not be necessary a feeTokenPct for each operation\\n                feeCalcs.qFeeToken = _mulPrec(qAC_ * qACFeePct_, feeTokenPct) / feeTokenPrice;\\n                if (qACmarked > 0) {\\n                    // [N] = [N] * [PREC] / [PREC]\\n                    feeCalcs.qFeeTokenVendorMarkup = qACmarked / feeTokenPrice;\\n                    // [N] = [N] + [N]\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken + feeCalcs.qFeeTokenVendorMarkup;\\n                } else {\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken;\\n                }\\n                // TODO: if feeTokenPct == 0 should use qAC too?\\n                if (senderAllowance < qFeeTokenTotalNeeded || feeToken.balanceOf(sender_) < qFeeTokenTotalNeeded) {\\n                    feeCalcs.qFeeToken = 0;\\n                    feeCalcs.qFeeTokenVendorMarkup = 0;\\n                    qFeeTokenTotalNeeded = 0;\\n                }\\n            }\\n        }\\n        // if sender hasn't got enough feeToken balance or allowance or price provider hasn't got a valid price\\n        // then qFeeToken == 0 and sender pays fees with AC\\n        if (feeCalcs.qFeeToken == 0) {\\n            // calculates qAC to be charged as fee\\n            // [N] = [N] * [PREC] / [PREC]\\n            feeCalcs.qACFee = _mulPrec(qAC_, qACFeePct_);\\n            if (qACmarked > 0) {\\n                // [N] = [PREC] / [PREC]\\n                feeCalcs.qACVendorMarkup = qACmarked / PRECISION;\\n                // [N] = [N] + [N]\\n                qACSurcharges = feeCalcs.qACFee + feeCalcs.qACVendorMarkup;\\n            } else {\\n                qACSurcharges = feeCalcs.qACFee;\\n            }\\n        }\\n        return (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice evaluates if there are enough Pegged Token available to mint, reverts if it`s not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint [N]\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalTPavailableToMint(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 ctargemaTP = _getCtargemaTP(i_, pACtp_);\\n        uint256 tpAvailableToMint = _getTPAvailableToMint(ctargemaCA_, ctargemaTP, pACtp_, lckAC_, nACgain_);\\n        // check if there are enough TP available to mint\\n        if (tpAvailableToMint < qTP_) revert InsufficientTPtoMint(qTP_, tpAvailableToMint);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52c80a26ecdf79ddcfa4d62436cb7854a9f8ecaf75208578e2333c0e4d717375\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocCommons, PeggedTokenParams } from \\\"./MocCommons.sol\\\";\\nimport { MocCoreExpansion } from \\\"./MocCoreExpansion.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title MocCore\\n * @notice MocCore nucleates all the basic MoC functionality and tool set. It allows Collateral\\n * asset aware contracts to implement the main mint/redeem operations.\\n */\\nabstract contract MocCore is MocCommons {\\n    // ------- Events -------\\n    event TCMinted(\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TCRedeemed(\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TPMinted(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TPSwappedForTC(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qTC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TCSwappedForTP(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TCandTPRedeemed(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event TCandTPMinted(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_\\n    );\\n    event SuccessFeeDistributed(uint256 mocGain_, uint256[] tpGain_);\\n    event SettlementExecuted();\\n    // ------- Custom Errors -------\\n    error QacBelowMinimumRequired(uint256 qACmin_, uint256 qACtoRedeem_);\\n    error InsufficientTCtoRedeem(uint256 qTC_, uint256 tcAvailableToRedeem_);\\n    error QacNeededMustBeGreaterThanZero();\\n    error QtcBelowMinimumRequired(uint256 qTCmin_, uint256 qTC_);\\n    error InsufficientQtpSent(uint256 qTPsent_, uint256 qTPNeeded_);\\n    error MissingBlocksToSettlement();\\n    // ------- Structs -------\\n\\n    struct InitializeCoreParams {\\n        InitializeBaseBucketParams initializeBaseBucketParams;\\n        // The address that will define when a change contract is authorized\\n        address governorAddress;\\n        // The address that is authorized to pause this contract\\n        address pauserAddress;\\n        // Moc Core Expansion contract address\\n        address mocCoreExpansion;\\n        // amount of blocks to wait between Pegged ema calculation\\n        uint256 emaCalculationBlockSpan;\\n        // address for MocVendors\\n        address mocVendors;\\n    }\\n\\n    // ------- Storage -------\\n    // Moc Core Expansion contract address, used to expand 24kb size limit\\n    address internal mocCoreExpansion;\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @dev this function must be execute by the AC implementation at initialization\\n     * @param initializeCoreParams_ contract initializer params\\n     *        governorAddress The address that will define when a change contract is authorized\\n     *        pauserAddress_ The address that is authorized to pause this contract\\n     *        mocCoreExpansion Moc Core Expansion contract address\\n     *        feeTokenAddress Fee Token contract address\\n     *        feeTokenPriceProviderAddress Fee Token price provider contract address\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected state threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        feeTokenPct pct applied on the top of the operation`s fee when using\\n     *          Fee Token as fee payment method [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]]\\n     *        emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *        mocVendors address for MocVendors contract.\\n     */\\n    function __MocCore_init(InitializeCoreParams calldata initializeCoreParams_) internal onlyInitializing {\\n        mocCoreExpansion = initializeCoreParams_.mocCoreExpansion;\\n        __MocUpgradable_init(initializeCoreParams_.governorAddress, initializeCoreParams_.pauserAddress);\\n        __MocBaseBucket_init_unchained(initializeCoreParams_.initializeBaseBucketParams);\\n        __MocEma_init_unchained(initializeCoreParams_.emaCalculationBlockSpan);\\n        __MocCommons_init_unchained(initializeCoreParams_.mocVendors);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice transfer Collateral Asset\\n     * @dev this function must be overridden by the AC implementation\\n     *  and revert if transfer fails.\\n     * @param to_ address who receives the Collateral Asset\\n     * @param amount_ amount of Collateral Asset to transfer\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal virtual;\\n\\n    /**\\n     * @notice Collateral Asset balance\\n     * @dev this function must be overridden by the AC implementation\\n     * @param account address who's Collateral Asset balance we want to know of\\n     * @return balance `account`'s total amount of Collateral Asset\\n     */\\n    function acBalanceOf(address account) internal view virtual returns (uint256 balance);\\n\\n    /**\\n     * @notice hook before any AC reception involving operation\\n     * @dev this function must be overridden by the AC implementation\\n     * @param qACMax_ max amount of AC available\\n     * @param qACNeeded_ amount of AC needed\\n     * @return change amount needed to be return to the sender after the operation is complete\\n     */\\n    function _onACNeededOperation(uint256 qACMax_, uint256 qACNeeded_) internal virtual returns (uint256 change);\\n\\n    struct MintTCParams {\\n        uint256 qTC;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token in exchange for Collateral Asset\\n     * @param params_ mintTCto function params\\n     * @dev\\n     *      qTC_ amount of Collateral Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     *      recipient_ address who receives the Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n\\n    function _mintTCto(\\n        MintTCParams memory params_\\n    ) internal notLiquidated notPaused returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded) {\\n        uint256[] memory pACtps = _getPACtps();\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        // calculates how many qAC are needed to mint TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACNeededToMint = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededToMint,\\n            tcMintFee\\n        );\\n        qACtotalNeeded = qACNeededToMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TCMinted(\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qACtotalNeeded,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n        _depositAndMintTC(params_.qTC, qACNeededToMint, params_.recipient);\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACtotalNeeded);\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    struct RedeemTCParams {\\n        uint256 qTC;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token\\n     * @param params_ redeemTCto function params\\n     * @dev\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n\\n    function _redeemTCto(\\n        RedeemTCParams memory params_\\n    ) internal notLiquidated notPaused returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(params_.qTC, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            tcRedeemFee\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        emit TCRedeemed(\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qACtoRedeem,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n        _withdrawAndBurnTC(params_.qTC, qACtotalToRedeem, params_.sender);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    struct MintTPParams {\\n        uint256 i;\\n        uint256 qTP;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice mint Pegged Token in exchange for Collateral Asset\\n     * @param params_ mint TP function params\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _mintTPto(\\n        MintTPParams memory params_\\n    ) internal notLiquidated notPaused returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TP\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(params_.i, params_.qTP, pACtp, ctargemaCA, lckAC, nACgain);\\n        // calculate how many qAC are needed to mint TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACNeededtoMint = _divPrec(params_.qTP, pACtp);\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededtoMint,\\n            tpMintFee[params_.i]\\n        );\\n        qACtotalNeeded = qACNeededtoMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TPMinted(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qACtotalNeeded,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n        // update bucket and mint\\n        _depositAndMintTP(params_.i, params_.qTP, qACNeededtoMint, params_.recipient);\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACtotalNeeded);\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    struct RedeemTPParams {\\n        uint256 i;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Pegged Token\\n     * @param params_ redeem CA function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _redeemTPto(\\n        RedeemTPParams memory params_\\n    ) internal notLiquidated notPaused returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded) {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TP, reverts if it's not\\n        _evalCoverage(protThrld, pACtps);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtp);\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            tpRedeemFee[params_.i]\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        emit TPRedeemed(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qACtoRedeem,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n        _withdrawAndBurnTP(params_.i, params_.qTP, qACtotalToRedeem, params_.sender);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    struct MintTCandTPParams {\\n        uint256 i;\\n        uint256 qTP;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token and Pegged Token in exchange for Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param params_ mint TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends Collateral Asset\\n     *      recipient_ address who receives the Collateral Token and Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _mintTCandTPto(\\n        MintTCandTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded)\\n    {\\n        uint256 qACNeededtoMint;\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        _evalCoverage(liqThrld, pACtps);\\n        (qTCtoMint, qACNeededtoMint) = _calcQACforMintTCandTP(params_.qTP, pACtp, ctargemaCA, pACtps);\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededtoMint,\\n            mintTCandTPFee\\n        );\\n        qACtotalNeeded = qACNeededtoMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TCandTPMinted(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            qTCtoMint,\\n            params_.qTP,\\n            qACtotalNeeded,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n        _depositAndMintTC(qTCtoMint, qACNeededtoMint, params_.recipient);\\n        _depositAndMintTP(params_.i, params_.qTP, 0, params_.recipient);\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACtotalNeeded);\\n        // transfers qAC to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    struct RedeemTCandTPParams {\\n        uint256 i;\\n        uint256 qTC;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param params_ redeem TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qTP_ maximum amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends Collateral Token and Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qTPtoRedeem amount of Pegged Token redeemed\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _redeemTCandTPto(\\n        RedeemTCandTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtoRedeem, uint256 qTPtoRedeem, uint256 qFeeTokenTotalNeeded)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(liqThrld, pACtps);\\n        // calculate how many TP are needed to redeem TC and not change coverage\\n        // qTPtoRedeem = (qTC * pACtp * pTCac) / (cglb - 1)\\n        // pTCac = (totalACavailable - lckAC) / nTCcb\\n        // cglb = totalACavailable / lckAC => cglb - 1 = (totalACavailable - lckAC) / lckAC\\n        // qTPtoRedeem = (qTC * pACtp * (totalACavailable - lckAC) / nTCcb) / ((totalACavailable - lckAC) / lckAC)\\n        // So, we can simplify (totalACavailable - lckAC)\\n        // qTPtoRedeem = (qTC * pACtp * lckAC) / nTCcb\\n        // [N] = ([N] * [N] * [PREC] / [N]) /  [PREC]\\n        qTPtoRedeem = ((params_.qTC * lckAC * pACtp) / nTCcb) / PRECISION;\\n\\n        if (qTPtoRedeem > params_.qTP) revert InsufficientQtpSent(params_.qTP, qTPtoRedeem);\\n        uint256 qACtotalToRedeem = _calcQACforRedeemTCandTP(params_.qTC, qTPtoRedeem, pACtp, _getPTCac(lckAC, nACgain));\\n        FeeCalcs memory feeCalcs;\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            redeemTCandTPFee\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtoRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TCandTPRedeemed(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qTPtoRedeem,\\n            qACtoRedeem,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n\\n        _withdrawAndBurnTC(params_.qTC, qACtotalToRedeem, params_.sender);\\n        _withdrawAndBurnTP(params_.i, qTPtoRedeem, 0, params_.sender);\\n\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    struct SwapTPforTCParams {\\n        uint256 i;\\n        uint256 qTP;\\n        uint256 qTCmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @param params_ swap TP for TP function parameters\\n     * @dev\\n     *      iFrom_ owned Pegged Token index\\n     *      iTo_ target Pegged Token index\\n     *      qTP_ amount of owned Pegged Token to swap\\n     *      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the target Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _swapTPforTPto(\\n        SwapTPforTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded)\\n    {\\n        FeeCalcs memory feeCalcs;\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).swapTPforTPto, (params_));\\n        (qACSurcharges, qTPtoMint, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n\\n        // AC is only used to pay fees and markup\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACSurcharges);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to Collateral Token\\n     * @param params_ swap TP for TC function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount Pegged Token to swap\\n     *      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _swapTPforTCto(\\n        SwapTPforTCParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        // calculate how many total qAC are redeemed TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtp);\\n        // calculate how many qTC can mint with the given qAC\\n        // qTCtoMint = qTP / pTCac / pACtp\\n        // [N] = [N] * [N] * [PREC] / ([N] - [N]) * [PREC]\\n        qTCtoMint = _divPrec(params_.qTP * nTCcb, (_getTotalACavailable(nACgain) - lckAC) * pACtp);\\n        if (qTCtoMint < params_.qTCmin || qTCtoMint == 0) revert QtcBelowMinimumRequired(params_.qTCmin, qTCtoMint);\\n\\n        FeeCalcs memory feeCalcs;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTCFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        emit TPSwappedForTC(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qTCtoMint,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n\\n        _withdrawAndBurnTP(params_.i, params_.qTP, 0, params_.sender);\\n        _depositAndMintTC(qTCtoMint, 0, params_.recipient);\\n\\n        // AC is only used to pay fees and markup\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACSurcharges);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    struct SwapTCforTPParams {\\n        uint256 i;\\n        uint256 qTC;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice swap Collateral Token to Pegged Token\\n     * @param params_ swap TC for TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to swap\\n     *      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     */\\n    function _swapTCforTPto(\\n        SwapTCforTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 pACtp = pACtps[params_.i];\\n        _updateTPtracking(params_.i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(params_.qTC, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        // if is 0 reverts because it is trying to swap an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qTP can mint with the given qAC\\n        // qTPtoMint = qTC * pTCac * pACtp\\n        // [N] = ([N] * ([N] - [N]) * [PREC] / [N]) / [PREC]\\n        qTPtoMint = ((params_.qTC * (_getTotalACavailable(nACgain) - lckAC) * pACtp) / nTCcb) / PRECISION;\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(params_.i, qTPtoMint, pACtp, ctargemaCA, lckAC, nACgain);\\n        if (qTPtoMint < params_.qTPmin) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        FeeCalcs memory feeCalcs;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTCforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        emit TCSwappedForTP(\\n            params_.i,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qTPtoMint,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n\\n        _withdrawAndBurnTC(params_.qTC, 0, params_.sender);\\n        _depositAndMintTP(params_.i, qTPtoMint, 0, params_.recipient);\\n\\n        // AC is only used to pay fees and markup\\n        uint256 acChange = _onACNeededOperation(params_.qACmax, qACSurcharges);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(params_.sender, params_.sender, acChange, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @dev This function is implemented in MocCoreExpansion but with this contract context\\n     * @param i_ Pegged Token index\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function _liqRedeemTPTo(\\n        uint256 i_,\\n        address sender_,\\n        address recipient_\\n    ) internal notPaused returns (uint256 qACRedeemed) {\\n        bytes memory payload = abi.encodeCall(\\n            MocCoreExpansion(mocCoreExpansion).liqRedeemTPTo,\\n            (i_, sender_, recipient_, acBalanceOf(address(this)))\\n        );\\n        qACRedeemed = abi.decode(Address.functionDelegateCall(mocCoreExpansion, payload), (uint256));\\n        // transfer qAC to the recipient, reverts if fail\\n        acTransfer(recipient_, qACRedeemed);\\n        return qACRedeemed;\\n    }\\n\\n    /**\\n     * @notice Distributes Operation results to the different recipients\\n     * @param sender_ address who executes the operation\\n     * @param operatorsAddress_ operator's address to receive `operatorsQAC_`\\n     * @param operatorsQAC_ amount of AC to transfer operator [N]\\n     * @param vendor_ vendors address to pay markup to\\n     * @param feeCalcs_ struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function _distOpResults(\\n        address sender_,\\n        address operatorsAddress_,\\n        uint256 operatorsQAC_,\\n        address vendor_,\\n        FeeCalcs memory feeCalcs_\\n    ) internal {\\n        if (feeCalcs_.qACFee > 0) {\\n            // [N] = [PREC] * [N] / [PREC]\\n            uint256 qACFeeRetained = _mulPrec(feeRetainer, feeCalcs_.qACFee);\\n            // Increase collateral in the retain amount\\n            nACcb += qACFeeRetained;\\n            // transfer qAC fee to Moc Fee Flow\\n            acTransfer(mocFeeFlowAddress, feeCalcs_.qACFee - qACFeeRetained);\\n            // transfer qAC markup to vendor\\n            acTransfer(vendor_, feeCalcs_.qACVendorMarkup);\\n        }\\n        // if qACFee == 0 then the fees are paid in Fee Token\\n        else {\\n            // transfer Fee Token to Moc Fee Flow\\n            _feeTokenTransfer(sender_, mocFeeFlowAddress, feeCalcs_.qFeeToken);\\n            // transfer Fee Token to vendor\\n            _feeTokenTransfer(sender_, vendor_, feeCalcs_.qFeeTokenVendorMarkup);\\n        }\\n        // transfer qAC to operator\\n        acTransfer(operatorsAddress_, operatorsQAC_);\\n    }\\n\\n    /**\\n     * @notice transfer Fee Tokens from an address to another\\n     * @dev this function could revert during safeTransfer call.\\n     *  safeTransfer will revert if token transfer reverts or returns 0\\n     * @param from_ address who sends the Fee Token\\n     * @param to_ address who receives the Fee Token\\n     * @param amount_ amount of Fee Token to transfer\\n     */\\n    function _feeTokenTransfer(address from_, address to_, uint256 amount_) internal {\\n        if (amount_ > 0) SafeERC20.safeTransferFrom(feeToken, from_, to_, amount_);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Collateral Asset\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @return qACRedeemed amount of AC sent to sender\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTC(uint256 qTC_, uint256 qACmin_) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTCParams memory params = RedeemTCParams({\\n            qTC: qTC_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _redeemTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to sender\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCViaVendor(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTCParams memory params = RedeemTCParams({\\n            qTC: qTC_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _redeemTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Collateral Asset\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCto(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address recipient_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTCParams memory params = RedeemTCParams({\\n            qTC: qTC_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _redeemTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCtoViaVendor(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTCParams memory params = RedeemTCParams({\\n            qTC: qTC_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _redeemTCto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and receives Collateral Asset\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @return qACRedeemed amount of AC sent to sender\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTP(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTPParams memory params = RedeemTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _redeemTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to sender\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTPViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTPParams memory params = RedeemTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _redeemTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and recipient receives Collateral Asset\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTPParams memory params = RedeemTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _redeemTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTPtoViaVendor(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qFeeToken) {\\n        RedeemTPParams memory params = RedeemTPParams({\\n            i: i_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _redeemTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that the sender expects to receive\\n     * @return qACRedeemed amount of AC sent to the sender\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCandTP(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed, uint256 qFeeToken) {\\n        RedeemTCandTPParams memory params = RedeemTCandTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: address(0)\\n        });\\n        return _redeemTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that the sender expects to receive\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to the sender\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCandTPViaVendor(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed, uint256 qFeeToken) {\\n        RedeemTCandTPParams memory params = RedeemTCandTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: msg.sender,\\n            vendor: vendor_\\n        });\\n        return _redeemTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to the `recipient_`\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCandTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed, uint256 qFeeToken) {\\n        RedeemTCandTPParams memory params = RedeemTCandTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: address(0)\\n        });\\n        return _redeemTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup\\n     * @return qACRedeemed amount of AC sent to the `recipient_`\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     * @return qFeeToken amount of Fee Token used by sender to pay fees. 0 if qAC is used instead\\n     */\\n    function redeemTCandTPtoViaVendor(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed, uint256 qFeeToken) {\\n        RedeemTCandTPParams memory params = RedeemTCandTPParams({\\n            i: i_,\\n            qTC: qTC_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        return _redeemTCandTPto(params);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param i_ Pegged Token index\\n     * @return qACRedeemed amount of AC sent to sender\\n     */\\n    function liqRedeemTP(uint256 i_) external returns (uint256 qACRedeemed) {\\n        return _liqRedeemTPTo(i_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param i_ Pegged Token index\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTPto(uint256 i_, address recipient_) external returns (uint256 qACRedeemed) {\\n        return _liqRedeemTPTo(i_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return qTCtoMint amount of Collateral Token to mint [N]\\n     * @return qACNeededtoMint amount of Collateral Asset needed to mint [N]\\n     */\\n    function _calcQACforMintTCandTP(\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaCA_,\\n        uint256[] memory pACtps_\\n    ) internal view returns (uint256 qTCtoMint, uint256 qACNeededtoMint) {\\n        (uint256 lckAC, uint256 nACgain) = _calcLckACandACgain(pACtps_);\\n        uint256 pTCac = _getPTCac(lckAC, nACgain);\\n        // calculate how many TC are needed to mint TP and total qAC used for mint both\\n        // [N] = [N] * ([PREC] - [PREC]) / [PREC]\\n        qACNeededtoMint = (qTP_ * (ctargemaCA_ - ONE)) / pACtp_;\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qTCtoMint = _divPrec(qACNeededtoMint, pTCac);\\n        // [N] = [N] + [N] *  [PREC] / [PREC]\\n        qACNeededtoMint = qACNeededtoMint + _divPrec(qTP_, pACtp_);\\n        return (qTCtoMint, qACNeededtoMint);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qACtotalToRedeem amount of Collateral Asset needed to redeem, including fees [N]\\n     */\\n    function _calcQACforRedeemTCandTP(\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 pTCac_\\n    ) internal pure returns (uint256 qACtotalToRedeem) {\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtotalToRedeem = _divPrec(qTP_, pACtp_);\\n        // calculate how many qAC are redeemed because TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        // TODO: rounding error could be avoid replacing here with qTC_ * totalACavailable / nTCcb\\n        qACtotalToRedeem += _mulPrec(qTC_, pTCac_);\\n        return qACtotalToRedeem;\\n    }\\n\\n    /**\\n     * @notice evaluates if there is enough Collateral Token available to redeem, reverts if there's not\\n     * @param qTC_ amount of Collateral Token to redeem [N]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of Collateral Asset that will be distributed at\\n     *         settlement because Pegged Token devaluation [N]\\n     */\\n    function _evalTCAvailableToRedeem(\\n        uint256 qTC_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 tcAvailableToRedeem = _getTCAvailableToRedeem(ctargemaCA_, lckAC_, nACgain_);\\n        // check if there are enough TC available to redeem\\n        if (tcAvailableToRedeem < qTC_) revert InsufficientTCtoRedeem(qTC_, tcAvailableToRedeem);\\n    }\\n\\n    /**\\n     * @notice distribute appreciation factor to beneficiary and success fee to Moc Fee Flow\\n     */\\n    function _distributeSuccessFee() internal {\\n        uint256 mocGain = 0;\\n        uint256 pegAmount = pegContainer.length;\\n        uint256[] memory tpToMint = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = getPACtp(i);\\n            _updateTPtracking(i, pACtp);\\n            int256 iou = tpiou[i];\\n            if (iou > 0) {\\n                // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n                tpToMint[i] = _mulPrec(_mulPrec(appreciationFactor, pACtp), uint256(iou));\\n                // [N] = [N] + [N]\\n                mocGain += uint256(iou);\\n                // reset TP profit\\n                tpiou[i] = 0;\\n                _depositAndMintTP(i, tpToMint[i], 0, mocAppreciationBeneficiaryAddress);\\n            }\\n        }\\n        if (mocGain != 0) {\\n            // [N] = [N] * [PREC] / [PREC]\\n            mocGain = _mulPrec(mocGain, successFee);\\n            // sub qAC from the Bucket\\n            nACcb -= mocGain;\\n            // transfer the mocGain AC to Moc Fee Flow\\n            acTransfer(mocFeeFlowAddress, mocGain);\\n        }\\n        emit SuccessFeeDistributed(mocGain, tpToMint);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice this function is executed during settlement.\\n     *  stores amount of locked AC by Pegged Tokens at this moment and distribute success fee\\n     */\\n\\n    function execSettlement() external notPaused {\\n        // check if it is in the corresponding block to execute the settlement\\n        if (block.number < bns) revert MissingBlocksToSettlement();\\n        bns = block.number + bes;\\n        emit SettlementExecuted();\\n        _distributeSuccessFee();\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets Moc Core Expansion contract address\\n     * @param mocCoreExpansion_ moc core expansion new contract address\\n     */\\n    function setMocCoreExpansion(address mocCoreExpansion_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocCoreExpansion = mocCoreExpansion_;\\n    }\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is implemented in MocCoreExpansion but with this contract context\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev\\n     *      tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).addPeggedToken, (peggedTokenParams_));\\n        Address.functionDelegateCall(mocCoreExpansion, payload);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is implemented in MocCoreExpansion but with this contract context\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev\\n     *      tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).editPeggedToken, (peggedTokenParams_));\\n        Address.functionDelegateCall(mocCoreExpansion, payload);\\n    }\\n\\n    // ------- Getters Functions -------\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @return pTCac [PREC]\\n     */\\n    function getPTCac() external view returns (uint256 pTCac) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getPTCac(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @return cglob [PREC]\\n     */\\n    function getCglb() external view returns (uint256 cglob) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getCglb(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TC available to redeem. Consider it an approximation.\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function getTCAvailableToRedeem() external view returns (uint256 tcAvailableToRedeem) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _calcCtargemaCA();\\n        (uint256 lckAC, uint256 nACgain) = _calcLckACandACgain(pACtps);\\n        return _getTCAvailableToRedeem(ctargemaCA, lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TP available to mint. Consider it an approximation.\\n     * @param i_ Pegged Token index\\n     * @return tpAvailableToMint [N]\\n     */\\n    function getTPAvailableToMint(uint256 i_) external view returns (uint256 tpAvailableToMint) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _calcCtargemaCA();\\n        uint256 pACtp = pACtps[i_];\\n        (uint256 lckAC, uint256 nACgain) = _calcLckACandACgain(pACtps);\\n        return _getTPAvailableToMint(ctargemaCA, _getCtargemaTP(i_, pACtp), pACtp, lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @return totalACavailable [N]\\n     */\\n    function getTotalACavailable() external view returns (uint256 totalACavailable) {\\n        (, uint256 nACgain) = _getLckACandACgain();\\n        return _getTotalACavailable(nACgain);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @return leverageTC [PREC]\\n     */\\n    function getLeverageTC() external view returns (uint256 leverageTC) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getLeverageTC(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get the number of blocks remaining for settlement\\n     */\\n    function getBts() external view returns (uint256) {\\n        if (block.number >= bns) return 0;\\n        return bns - block.number;\\n    }\\n\\n    /**\\n     * @param bes_ number of blocks between settlements\\n     **/\\n    function setBes(uint256 bes_) external onlyAuthorizedChanger {\\n        bes = bes_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x913330b7fd9a35c85469fa81420dea16491ceea682e8b529a80ac2f98b58f7d7\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCoreExpansion.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocCommons, PeggedTokenParams } from \\\"./MocCommons.sol\\\";\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\n\\n/**\\n * @title MocCoreExpansion\\n * @notice This contract is used as an expansion of MocCore because 24kb size limitation\\n *  MocCore delegate some function calls to it.\\n * @dev IMPORTANT NOTES:\\n *  1. MocCore and MocCoreExpansion must have always the same storage layout to avoid collisions\\n *  2. Because MocCore is upgradeable and delegates calls to MocCoreExpansion, it cannot be upgradeable because\\n *      a proxy contract cannot delegate calls to another proxy contract. So, for any MocCoreExpansion upgrade\\n *      you must deploy a new implementation and set it to MocCore.\\n */\\ncontract MocCoreExpansion is MocCommons {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     *  - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        IMocRC20 tpToken = IMocRC20(peggedTokenParams_.tpTokenAddress);\\n\\n        IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n        if (peggedTokenIndex[address(tpToken)].exists) revert PeggedTokenAlreadyAdded();\\n        uint256 newTPindex = uint256(tpTokens.length);\\n        peggedTokenIndex[address(tpToken)] = PeggedTokenIndex({ index: newTPindex, exists: true });\\n\\n        // set Pegged Token address\\n        tpTokens.push(tpToken);\\n        // set peg container item\\n        pegContainer.push(PegContainerItem({ nTP: 0, priceProvider: priceProvider }));\\n        // set target coverage\\n        tpCtarg.push(peggedTokenParams_.tpCtarg);\\n        // set mint fee pct\\n        tpMintFee.push(peggedTokenParams_.tpMintFee);\\n        // set redeem fee pct\\n        tpRedeemFee.push(peggedTokenParams_.tpRedeemFee);\\n        // set EMA initial value and smoothing factor\\n        tpEma.push(EmaItem({ ema: peggedTokenParams_.tpEma, sf: peggedTokenParams_.tpEmaSf }));\\n        tpiou.push();\\n        // reverts if price provider is invalid\\n        pACtpLstop.push(getPACtp(newTPindex));\\n        // emit the event\\n        emit PeggedTokenChange(newTPindex, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        PeggedTokenIndex memory ptIndex = peggedTokenIndex[peggedTokenParams_.tpTokenAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        uint256 i = ptIndex.index;\\n        // if being edited, verifies it is a valid priceProvider\\n        if (peggedTokenParams_.priceProviderAddress != address(pegContainer[i].priceProvider)) {\\n            IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n            (, bool has) = priceProvider.peek();\\n            if (!has) revert InvalidAddress();\\n            pegContainer[i].priceProvider = priceProvider;\\n        }\\n        // set target coverage\\n        tpCtarg[i] = peggedTokenParams_.tpCtarg;\\n        // set mint fee pct\\n        tpMintFee[i] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFee[i] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma[i].sf = peggedTokenParams_.tpEmaSf;\\n        // emit the event\\n        emit PeggedTokenChange(i, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     *  The equivalent AC given the liquidation frozen price(qACRedeemed) is transferred\\n     *  to the `recipient_` by MocCore contract\\n     *  Checks done there:\\n     *  -  notPaused: the contract must be unpaused\\n     * @param i_ Pegged Token index\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTPTo(\\n        uint256 i_,\\n        address sender_,\\n        address recipient_,\\n        uint256 mocACBalance\\n    ) external returns (uint256 qACRedeemed) {\\n        if (!liquidated) revert OnlyWhenLiquidated();\\n        uint256 qTP = tpTokens[i_].balanceOf(sender_);\\n        if (qTP == 0) revert InsufficientTPtoRedeem(qTP, qTP);\\n        // [PREC]\\n        uint256 liqPACtp = tpLiqPrices[i_];\\n        // [PREC] = [N] * [PREC] / [PREC]\\n        qACRedeemed = _divPrec(qTP, liqPACtp);\\n        // Given rounding errors, the last redeemer might receive a little less\\n        if (mocACBalance < qACRedeemed) qACRedeemed = mocACBalance;\\n        // in liquidation doesn't pay fees or markup\\n        // qACfee, qFeeToken, qACVendorMarkup, qFeeTokenVendorMarkup  = (0, 0, 0, 0)\\n        emit TPRedeemed(i_, sender_, recipient_, qTP, qACRedeemed, 0, 0, 0, 0);\\n        // burn qTP from the sender\\n        tpTokens[i_].burn(sender_, qTP);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @param params_ swap TP for TP function parameters\\n     * @dev\\n     *      iFrom_ owned Pegged Token index\\n     *      iTo_ target Pegged Token index\\n     *      qTP_ amount of owned Pegged Token to swap\\n     *      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the target Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTPforTPto(\\n        SwapTPforTPParams memory params_\\n    )\\n        external\\n        payable\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        if (params_.iFrom == params_.iTo) revert InvalidValue();\\n        uint256 pACtpFrom = getPACtp(params_.iFrom);\\n        uint256 pACtpTo = getPACtp(params_.iTo);\\n        _updateTPtracking(params_.iFrom, pACtpFrom);\\n        _updateTPtracking(params_.iTo, pACtpTo);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtpFrom);\\n        // calculate how many qTP can mint with the given qAC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qTPtoMint = (params_.qTP * pACtpTo) / pACtpFrom;\\n        if (qTPtoMint < params_.qTPmin || qTPtoMint == 0) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        // if ctargemaTPto > ctargemaTPfrom we need to check coverage\\n        if (_getCtargemaTP(params_.iTo, pACtpTo) > _getCtargemaTP(params_.iFrom, pACtpFrom)) {\\n            (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n            // evaluates whether or not the system coverage is healthy enough to mint TP\\n            // given the target coverage adjusted by the moving average, reverts if it's not\\n            (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n            // evaluates if there are enough TP available to mint, reverts if it's not\\n            _evalTPavailableToMint(params_.iTo, qTPtoMint, pACtpTo, ctargemaCA, lckAC, nACgain);\\n        }\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        emit TPSwappedForTP(\\n            params_.iFrom,\\n            params_.iTo,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qTPtoMint,\\n            feeCalcs.qACFee,\\n            feeCalcs.qFeeToken,\\n            feeCalcs.qACVendorMarkup,\\n            feeCalcs.qFeeTokenVendorMarkup\\n        );\\n\\n        _depositAndMintTP(params_.iTo, qTPtoMint, 0, params_.recipient);\\n        _withdrawAndBurnTP(params_.iFrom, params_.qTP, 0, params_.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xdb9d278b656d19d16586887cd5ac2acc1fbd851ff22b199a830775fa860b01d3\",\"license\":\"UNLICENSED\"},\"contracts/core/MocEma.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { MocBaseBucket } from \\\"./MocBaseBucket.sol\\\";\\n\\n/**\\n * @title MocEma: Exponential Moving Average\\n * @notice Moc Ema, provides a set of methods that allows to calculate and track\\n * Exponential Moving Average for each of the pegged Tokens.\\n * @dev More information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n */\\nabstract contract MocEma is MocBaseBucket {\\n    // ------- Events -------\\n    event TPemaUpdated(uint256 indexed i_, uint256 oldTPema_, uint256 newTPema_);\\n\\n    // ------- Structs -------\\n    struct EmaItem {\\n        // exponential moving average\\n        uint256 ema;\\n        // smoothing factor\\n        uint256 sf;\\n    }\\n\\n    // ------- Storage -------\\n    // TP EMA items, indexes are in sync with PeggedTokens across Moc solution\\n    EmaItem[] public tpEma;\\n    // next Ema Calculation Block number\\n    uint256 public nextEmaCalculation;\\n    // amount of blocks to wait for next ema calculation\\n    uint256 public emaCalculationBlockSpan;\\n\\n    /**\\n     * @notice calculates exponential moving average of the value of a Pegged Token\\n     * @dev more information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n     * @param currentTPema_ current Ema value\\n     * @param pACtp_ current tp AC price\\n     */\\n    function __calcNewEma(EmaItem memory currentTPema_, uint256 pACtp_) private pure returns (uint256) {\\n        // [PREC\\u00b2] = [PREC] * ([PREC] - [PREC])\\n        uint256 term1 = currentTPema_.ema * (ONE - currentTPema_.sf);\\n        // [PREC\\u00b2] = [PREC] * [PREC]\\n        uint256 term2 = currentTPema_.sf * pACtp_;\\n        // [PREC] = ([PREC\\u00b2] + [PREC\\u00b2]) / [PREC]\\n        return (term1 + term2) / PRECISION;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function __MocEma_init_unchained(uint256 emaCalculationBlockSpan_) internal onlyInitializing {\\n        if (emaCalculationBlockSpan_ == 0) revert InvalidValue();\\n        emaCalculationBlockSpan = emaCalculationBlockSpan_;\\n        _updateNextEmaCalculation(emaCalculationBlockSpan_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice updates next EMA block calculation\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function _updateNextEmaCalculation(uint256 emaCalculationBlockSpan_) internal {\\n        unchecked {\\n            nextEmaCalculation = block.number + emaCalculationBlockSpan_;\\n        }\\n    }\\n\\n    /**\\n     * @notice get target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return ctargemaTP [PREC]\\n     */\\n    function _getCtargemaTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 ctargemaTP) {\\n        uint256 auxTPctarg = tpCtarg[i_];\\n        uint256 auxTpEma = tpEma[i_].ema;\\n        if (shouldCalculateEma()) auxTpEma = __calcNewEma(tpEma[i_], pACtp_);\\n        if (auxTpEma >= pACtp_) return auxTPctarg;\\n        // [PREC] = [PREC] * [PREC] / [PREC]\\n        return (auxTPctarg * pACtp_) / auxTpEma;\\n    }\\n\\n    /**\\n     * @notice update exponential moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     */\\n    function updateTPema(uint256 i_) internal {\\n        EmaItem memory currentTPema = tpEma[i_];\\n        uint256 pACtp = getPACtp(i_);\\n        uint256 newEma = __calcNewEma(currentTPema, pACtp);\\n        // save new ema value to storage\\n        tpEma[i_].ema = newEma;\\n        emit TPemaUpdated(i_, currentTPema.ema, newEma);\\n    }\\n\\n    /**\\n     * @notice calculates CA target coverage, adjusted by all Pegged Token's to\\n     *  Collateral Asset last stored moving average price\\n     * @dev WARN: if EMA are not up to date, the resulting coverage might not reflect real spot value\\n     *      qAC = (nTP + tpGain) / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _calcCtargemaCA() internal view returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        uint256 num;\\n        uint256 den;\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = getPACtp(i);\\n            pACtps[i] = pACtp;\\n            (uint256 tpGain, ) = _getPnLTP(i, pACtp);\\n            // [PREC] = [N] * [PREC] * [PREC]  / [PREC]\\n            uint256 qAC = _divPrec((pegContainer[i].nTP + tpGain) * PRECISION, pACtp);\\n            // [PREC]^2 = [PREC] * [PREC]\\n            num += _getCtargemaTP(i, pACtp) * qAC;\\n            // [PREC] = [PREC]\\n            den += qAC;\\n        }\\n        // we must return a default value when all nTP are 0\\n        if (den == 0) {\\n            unchecked {\\n                return (protThrld * 2, pACtps);\\n            }\\n        }\\n        // [PREC] = ([PREC]^2) / [PREC]\\n        ctargemaCA = num / den;\\n    }\\n\\n    /**\\n     * @notice make sure Ema is up to date, and calculates target coverage adjusted by all Pegged Token's\\n     * to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _updateEmasAndCalcCtargemaCA() internal returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        // Make sure EMAs are up to date for all the pegs, in the, unlikely, scenario they hadn't been updated already\\n        updateEmas();\\n        return _calcCtargemaCA();\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     */\\n    function calcCtargemaCA() external view returns (uint256 ctargemaCA) {\\n        (ctargemaCA, ) = _calcCtargemaCA();\\n    }\\n\\n    /**\\n     * @notice true if the necessary span has pass since last ema update\\n     */\\n    function shouldCalculateEma() public view returns (bool) {\\n        unchecked {\\n            return block.number >= nextEmaCalculation;\\n        }\\n    }\\n\\n    /**\\n     * @notice If time, calculates the EMA for all the Pegged Token prices.\\n     * @dev All price provider prices must be available, fails if not\\n     */\\n    function updateEmas() public {\\n        if (shouldCalculateEma()) {\\n            uint256 pegAmount = pegContainer.length;\\n            for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n                updateTPema(i);\\n            }\\n            _updateNextEmaCalculation(emaCalculationBlockSpan);\\n        }\\n    }\\n\\n    /**\\n     * @param blockSpan_ Defines how many blocks should pass between BMA calculations\\n     **/\\n    function setEmaCalculationBlockSpan(uint256 blockSpan_) external onlyAuthorizedChanger {\\n        emaCalculationBlockSpan = blockSpan_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2fb6151ff412f865d3ff72b5430ed0c201bc341090fa15a1afea308ffc2b5577\",\"license\":\"UNLICENSED\"},\"contracts/governance/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IGovernor } from \\\"../interfaces/IGovernor.sol\\\";\\nimport { MocHelper } from \\\"../utils/MocHelper.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n  @title Governed\\n  @notice Base contract to be inherited by governed contracts\\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behavior\\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\\n  governance aspect of the child contract\\n  */\\nabstract contract Governed is Initializable, MocHelper {\\n    /**\\n    @notice The address of the contract which governs this one\\n   */\\n    IGovernor public governor;\\n\\n    error NotAuthorizedChanger();\\n\\n    /**\\n    @notice Modifier that protects the function\\n    @dev You should use this modifier in any function that should be called through\\n    the governance system\\n   */\\n    modifier onlyAuthorizedChanger() {\\n        checkIfAuthorizedChanger();\\n        _;\\n    }\\n\\n    /**\\n    @notice Initialize the contract with the basic settings\\n    @dev This initialize replaces the constructor but it is not called automatically.\\n    It is necessary because of the upgradeability of the contracts\\n    @param governorAddress_ Governor address\\n   */\\n    function __Governed_init(address governorAddress_) internal onlyInitializing {\\n        __Governed_init_unchained(governorAddress_);\\n    }\\n\\n    function __Governed_init_unchained(address governorAddress_) internal onlyInitializing {\\n        governor = IGovernor(governorAddress_);\\n    }\\n\\n    /**\\n    @notice Change the contract's governor. Should be called through the old governance system\\n    @param newGovernor_ New governor address\\n   */\\n    function changeGovernor(IGovernor newGovernor_) external onlyAuthorizedChanger {\\n        governor = newGovernor_;\\n    }\\n\\n    /**\\n    @notice Checks if the msg sender is an authorized changer, reverts otherwise\\n   */\\n    function checkIfAuthorizedChanger() internal view {\\n        if (!governor.isAuthorizedChanger(msg.sender)) revert NotAuthorizedChanger();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xde85048a4cd3a3a2fa861ab5e5d47d641e1d5aeca77e21c6f48032e09b4791bd\",\"license\":\"UNLICENSED\"},\"contracts/governance/MocUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { Stoppable } from \\\"../governance/Stoppable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// Import to allow compilation and deploy of ERC1967Proxy\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nabstract contract MocUpgradable is UUPSUpgradeable, Stoppable {\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function __MocUpgradable_init(address governorAddress_, address pauserAddress_) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        __Governed_init(governorAddress_);\\n        __Stoppable_init_unchained(pauserAddress_, true);\\n    }\\n\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xfcb09b596829d7fbf3b457442302a3af8bd0ac9374eb1ee43f9eec16d4ca4e41\",\"license\":\"UNLICENSED\"},\"contracts/governance/Stoppable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { Governed } from \\\"./Governed.sol\\\";\\n\\n/**\\n * @title Stoppable\\n * @notice Allow a contract to be paused through the stopper subsystem. This contracts\\n * is able to disable the stoppability feature through governance.\\n * @dev This contract was heavily based on the _Pausable_ contract of openzeppelin-eth but\\n * it was modified in order to being able to turn on and off its stoppability\\n */\\ncontract Stoppable is Governed {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool public stoppable;\\n    bool private _paused;\\n    address public pauser;\\n\\n    // ------- Custom Errors -------\\n    error Unstoppable();\\n    error OnlyWhilePaused();\\n    error NotWhenPaused();\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is not paused\\n     */\\n    modifier notPaused() {\\n        _checkNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is paused\\n     */\\n    modifier onlyPaused() {\\n        if (!_paused) revert OnlyWhilePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the basic settings\\n     * @dev This initialize replaces the constructor but it is not called automatically.\\n     * It is necessary because of the upgradeability of the contracts. Either this function or the previous can be used\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     * @param stoppable_ Define if the contract starts being unstoppable or not\\n     */\\n    function __Stoppable_init_unchained(address pauserAddress_, bool stoppable_) internal onlyInitializing {\\n        stoppable = stoppable_;\\n        pauser = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev reverts with NotWhenPaused when _paused\\n     */\\n    function _checkNotPaused() internal view {\\n        if (_paused) revert NotWhenPaused();\\n    }\\n\\n    /**\\n     * @notice Returns true if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Called by the owner to pause, triggers stopped state\\n     * @dev Should only be called by the pauser and when it is stoppable\\n     */\\n    function pause() external notPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        if (!stoppable) revert Unstoppable();\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Switches OFF the stoppability of the contract; if the contract was paused\\n     * it will no longer be so\\n     * @dev Should be called through governance\\n     */\\n    function makeUnstoppable() external onlyAuthorizedChanger {\\n        stoppable = false;\\n    }\\n\\n    /**\\n     * @notice Switches ON the stoppability of the contract; if the contract was paused\\n     * before making it unstoppable it will be paused again after calling this function\\n     * @dev Should be called through governance\\n     */\\n    function makeStoppable() external onlyAuthorizedChanger {\\n        stoppable = true;\\n    }\\n\\n    /**\\n     * @notice Changes the address which is enable to pause this contract\\n     * @param newPauser_ Address of the new pauser\\n     * @dev Should be called through governance\\n     */\\n    function setPauser(address newPauser_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        pauser = newPauser_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb57847679d72b359be2d70942a5c2df6fc0a0d93f3f9485d230696bdadd8c7f7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x3b0a782858c710e8535349b809717bd1960049d8557507cb4c423d9b5c043449\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IChangeContract } from \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91c4baaa22f2907672ddef66b268c360f7eb9f758d203662510c8fb1df4d3d5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IMocRC20\\n * @notice Base Moc ERC20 Token Interface: burn, mint. It can be both Pegs and Collateral Tokens.\\n */\\ninterface IMocRC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     */\\n    function burn(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0430bbf0673088723bad80a3ae106a0dc902471d60922610daee8e769ea6820e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n/**\\n * @title IPriceFeed\\n * @notice Amphiraos-Oracle Interface for peeking the price of a given asset\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IPriceProvider {\\n    /**\\n     * @notice returns the given `price` for the asset if `valid`\\n     * @param price assetPrice\\n     * @param valid true if the price is valid\\n     */\\n    function peek() external view returns (bytes32 price, bool valid);\\n}\\n\",\"keccak256\":\"0xac60fc67c5e9e81c630146ef2e916084ccbca8e392e33f8ff84f0e65de21a89a\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { IGovernor, Governed } from \\\"../governance/Governed.sol\\\";\\n\\n/**\\n * @title MocRC20\\n * @notice Base Moc ERC20 Token: burn, mint. It can be both Pegs and Collateral Tokens.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocRC20 is IMocRC20, AccessControlEnumerableUpgradeable, ERC20Upgradeable, UUPSUpgradeable, Governed {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * See {__MocRC20_init}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external virtual initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n    }\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` & `BURNER_ROLE` to `admin` address.\\n     *\\n     * See {ERC20_init}.\\n     */\\n    function __MocRC20_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) internal onlyInitializing {\\n        __ERC20_init(name_, symbol_);\\n        __AccessControlEnumerable_init();\\n        __UUPSUpgradeable_init();\\n        __Governed_init(address(governor_));\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _setupRole(MINTER_ROLE, admin_);\\n        _setupRole(BURNER_ROLE, admin_);\\n    }\\n\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) returns (bool) {\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     * Requirements:\\n     *\\n     * - the caller must have the `BURNER_ROLE`.\\n     */\\n    function burn(address to, uint256 amount) external virtual onlyRole(BURNER_ROLE) {\\n        _burn(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe389dac056a05665ac2bb7f0bbb5086f77dc61222cd198d291f32fc8abc112b9\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocTC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocRC20, IGovernor, IMocRC20 } from \\\"./MocRC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { ERC20PausableUpgradeable, ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title MocTC\\n * @notice Base Moc  ERC20 Collateral Tokens: Allows burn, mint and pause.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocTC is MocRC20, ERC20PausableUpgradeable {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Grants `PAUSER_ROLE` to `admin` address.\\n     *\\n     * See {MocRC20-constructor}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external override initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n        __ERC20Pausable_init();\\n        _setupRole(PAUSER_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @dev override only to satisfy compiler\\n     * @inheritdoc ERC20PausableUpgradeable\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        ERC20PausableUpgradeable._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract.\\n     * See {ERC20PausableUpgradeable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n}\\n\",\"keccak256\":\"0x14e9ba70d8104258b39bf76c93f1bb2230645289fc762f8290585deab6d29c22\",\"license\":\"UNLICENSED\"},\"contracts/utils/MocHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nabstract contract MocHelper {\\n    error InvalidAddress();\\n    error InvalidValue();\\n    // Constants may not be used in child contracts and that is fine as they are\\n    // not using any space in storage, so we disable the check\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant PRECISION = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant ONE = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant UINT256_MAX = ~uint256(0);\\n\\n    // Saves gas\\n    // https://github.com/KadenZipfel/gas-optimizations/blob/main/gas-saving-patterns/unchecked-arithmetic.md\\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice add precision and div two number\\n     * @param a_ numerator\\n     * @param b_ denominator\\n     * @return `a_` * PRECISION / `b_`\\n     */\\n    function _divPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * PRECISION) / b_;\\n    }\\n\\n    /**\\n     * @notice multiply two number and remove precision\\n     * @param a_ term 1\\n     * @param b_ term 2\\n     * @return `a_` * `b_` / PRECISION\\n     */\\n    function _mulPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * b_) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice reverts if value if less than PRECISION ONE\\n     * @param value_ value to check [PREC]\\n     */\\n    function _checkLessThanOne(uint256 value_) internal pure {\\n        if (value_ > ONE) revert InvalidValue();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa5fd0183950d302d8d0ffda5d6d8b92f42674d56723997c239ba1cbdc63447e4\",\"license\":\"UNLICENSED\"},\"contracts/vendors/MocVendors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\n\\n/**\\n * @title MocVendors\\n * @notice MocVendors allows a third-party to add a markup to all operations\\n *  A vendor can set a markup themselves or ask vendors guardian to do it on their behalf.\\n *  Considerations:\\n *  - Theres is not a markup limit or restriction\\n *  - The currency that the vendor receives is always the same that is used to pay fees(AC or Fee Token)\\n *  - A malicious vendor front running an operation increasing the markup is protected in some way\\n *      by the maximum (AC or Fee Token) that the user expect to spend(or de minimum that expect to receive)\\n */\\ncontract MocVendors is MocUpgradable {\\n    // ------- Events -------\\n    event VendorMarkupChanged(address indexed vendorAddress_, uint256 newMarkup_);\\n    // ------- Custom Errors -------\\n    error NotVendorsGuardian(address sender_);\\n\\n    // ------- Storage -------\\n\\n    // address authorized to change a vendor's markup\\n    address public vendorsGuardianAddress;\\n    // addition markup pct applied on each operation when operating through a vendor [PREC]\\n    mapping(address => uint256) public vendorMarkup; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // ------- Initializer -------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice contract initializer\\n     * @param vendorsGuardianAddress_ The address authorized to change a vendor's markup\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function initialize(\\n        address vendorsGuardianAddress_,\\n        address governorAddress_,\\n        address pauserAddress_\\n    ) external initializer {\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n        __MocUpgradable_init(governorAddress_, pauserAddress_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function _setMarkup(address vendorAddress_, uint256 newMarkup_) internal {\\n        vendorMarkup[vendorAddress_] = newMarkup_;\\n        emit VendorMarkupChanged(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice vendor sets its own markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setMarkup(uint256 newMarkup_) external {\\n        _setMarkup(msg.sender, newMarkup_);\\n    }\\n\\n    /**\\n     * @notice guardian sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setVendorMarkup(address vendorAddress_, uint256 newMarkup_) external {\\n        if (msg.sender != vendorsGuardianAddress) revert NotVendorsGuardian(msg.sender);\\n        _setMarkup(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev Sets the address which will be authorized to set a vendor markup.\\n     * @param vendorsGuardianAddress_ Address which will be authorized to set a vendor markup.\\n     */\\n    function setVendorsGuardianAddress(address vendorsGuardianAddress_) public onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb49a142d2afd96b7392043006604bac786a712236875b6d3043bcb9032b4a711\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 956,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24925,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22812,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "governor",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IGovernor)23597"
      },
      {
        "astId": 22883,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22951,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "stoppable",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 22953,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "_paused",
        "offset": 1,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 22955,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "pauser",
        "offset": 2,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 23114,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22933,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1413,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "_status",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 1471,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14508,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "feeToken",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IERC20)5864"
      },
      {
        "astId": 14511,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "feeTokenPriceProvider",
        "offset": 0,
        "slot": "354",
        "type": "t_contract(IPriceProvider)23635"
      },
      {
        "astId": 14513,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "nACcb",
        "offset": 0,
        "slot": "355",
        "type": "t_uint256"
      },
      {
        "astId": 14515,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "nACioucb",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 14518,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tcToken",
        "offset": 0,
        "slot": "357",
        "type": "t_contract(MocTC)24830"
      },
      {
        "astId": 14520,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "nTCcb",
        "offset": 0,
        "slot": "358",
        "type": "t_uint256"
      },
      {
        "astId": 14524,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpTokens",
        "offset": 0,
        "slot": "359",
        "type": "t_array(t_contract(IMocRC20)23623)dyn_storage"
      },
      {
        "astId": 14529,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "peggedTokenIndex",
        "offset": 0,
        "slot": "360",
        "type": "t_mapping(t_address,t_struct(PeggedTokenIndex)14466_storage)"
      },
      {
        "astId": 14533,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "pegContainer",
        "offset": 0,
        "slot": "361",
        "type": "t_array(t_struct(PegContainerItem)14461_storage)dyn_storage"
      },
      {
        "astId": 14536,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpLiqPrices",
        "offset": 0,
        "slot": "362",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14538,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "successFee",
        "offset": 0,
        "slot": "363",
        "type": "t_uint256"
      },
      {
        "astId": 14540,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "appreciationFactor",
        "offset": 0,
        "slot": "364",
        "type": "t_uint256"
      },
      {
        "astId": 14542,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "feeRetainer",
        "offset": 0,
        "slot": "365",
        "type": "t_uint256"
      },
      {
        "astId": 14544,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tcMintFee",
        "offset": 0,
        "slot": "366",
        "type": "t_uint256"
      },
      {
        "astId": 14546,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tcRedeemFee",
        "offset": 0,
        "slot": "367",
        "type": "t_uint256"
      },
      {
        "astId": 14548,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "swapTPforTPFee",
        "offset": 0,
        "slot": "368",
        "type": "t_uint256"
      },
      {
        "astId": 14550,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "swapTPforTCFee",
        "offset": 0,
        "slot": "369",
        "type": "t_uint256"
      },
      {
        "astId": 14552,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "swapTCforTPFee",
        "offset": 0,
        "slot": "370",
        "type": "t_uint256"
      },
      {
        "astId": 14554,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "redeemTCandTPFee",
        "offset": 0,
        "slot": "371",
        "type": "t_uint256"
      },
      {
        "astId": 14556,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "mintTCandTPFee",
        "offset": 0,
        "slot": "372",
        "type": "t_uint256"
      },
      {
        "astId": 14558,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "feeTokenPct",
        "offset": 0,
        "slot": "373",
        "type": "t_uint256"
      },
      {
        "astId": 14561,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpMintFee",
        "offset": 0,
        "slot": "374",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14564,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpRedeemFee",
        "offset": 0,
        "slot": "375",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14566,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "mocFeeFlowAddress",
        "offset": 0,
        "slot": "376",
        "type": "t_address"
      },
      {
        "astId": 14568,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "mocAppreciationBeneficiaryAddress",
        "offset": 0,
        "slot": "377",
        "type": "t_address"
      },
      {
        "astId": 14571,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpCtarg",
        "offset": 0,
        "slot": "378",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14573,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "protThrld",
        "offset": 0,
        "slot": "379",
        "type": "t_uint256"
      },
      {
        "astId": 14575,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "liqThrld",
        "offset": 0,
        "slot": "380",
        "type": "t_uint256"
      },
      {
        "astId": 14577,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "liqEnabled",
        "offset": 0,
        "slot": "381",
        "type": "t_bool"
      },
      {
        "astId": 14579,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "liquidated",
        "offset": 1,
        "slot": "381",
        "type": "t_bool"
      },
      {
        "astId": 14581,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "bes",
        "offset": 0,
        "slot": "382",
        "type": "t_uint256"
      },
      {
        "astId": 14583,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "bns",
        "offset": 0,
        "slot": "383",
        "type": "t_uint256"
      },
      {
        "astId": 14586,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpiou",
        "offset": 0,
        "slot": "384",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 14589,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "pACtpLstop",
        "offset": 0,
        "slot": "385",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15912,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "386",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19728,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "tpEma",
        "offset": 0,
        "slot": "436",
        "type": "t_array(t_struct(EmaItem)19724_storage)dyn_storage"
      },
      {
        "astId": 19730,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "nextEmaCalculation",
        "offset": 0,
        "slot": "437",
        "type": "t_uint256"
      },
      {
        "astId": 19732,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "emaCalculationBlockSpan",
        "offset": 0,
        "slot": "438",
        "type": "t_uint256"
      },
      {
        "astId": 20104,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "439",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15940,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "mocVendors",
        "offset": 0,
        "slot": "489",
        "type": "t_contract(MocVendors)25146"
      },
      {
        "astId": 16290,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "490",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16498,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "mocCoreExpansion",
        "offset": 0,
        "slot": "540",
        "type": "t_address"
      },
      {
        "astId": 19183,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "541",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9936,
        "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
        "label": "__gap",
        "offset": 0,
        "slot": "591",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IMocRC20)23623)dyn_storage": {
        "base": "t_contract(IMocRC20)23623",
        "encoding": "dynamic_array",
        "label": "contract IMocRC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmaItem)19724_storage)dyn_storage": {
        "base": "t_struct(EmaItem)19724_storage",
        "encoding": "dynamic_array",
        "label": "struct MocEma.EmaItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PegContainerItem)14461_storage)dyn_storage": {
        "base": "t_struct(PegContainerItem)14461_storage",
        "encoding": "dynamic_array",
        "label": "struct MocBaseBucket.PegContainerItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)5864": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernor)23597": {
        "encoding": "inplace",
        "label": "contract IGovernor",
        "numberOfBytes": "20"
      },
      "t_contract(IMocRC20)23623": {
        "encoding": "inplace",
        "label": "contract IMocRC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)23635": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_contract(MocTC)24830": {
        "encoding": "inplace",
        "label": "contract MocTC",
        "numberOfBytes": "20"
      },
      "t_contract(MocVendors)25146": {
        "encoding": "inplace",
        "label": "contract MocVendors",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(PeggedTokenIndex)14466_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MocBaseBucket.PeggedTokenIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(PeggedTokenIndex)14466_storage"
      },
      "t_struct(EmaItem)19724_storage": {
        "encoding": "inplace",
        "label": "struct MocEma.EmaItem",
        "members": [
          {
            "astId": 19721,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "ema",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19723,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "sf",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PegContainerItem)14461_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PegContainerItem",
        "members": [
          {
            "astId": 14457,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "nTP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14460,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "priceProvider",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceProvider)23635"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PeggedTokenIndex)14466_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PeggedTokenIndex",
        "members": [
          {
            "astId": 14463,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14465,
            "contract": "contracts/collateral/coinbase/MocCACoinbase.sol:MocCACoinbase",
            "label": "exists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "add a Pegged Token to the protocol"
      },
      "calcCtargemaCA()": {
        "notice": "calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average"
      },
      "changeGovernor(address)": {
        "notice": "Change the contract's governor. Should be called through the old governance system"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "modifies a Pegged Token of the protocol"
      },
      "evalLiquidation()": {
        "notice": "evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event."
      },
      "execSettlement()": {
        "notice": "this function is executed during settlement.  stores amount of locked AC by Pegged Tokens at this moment and distribute success fee"
      },
      "getBts()": {
        "notice": "get the number of blocks remaining for settlement"
      },
      "getCglb()": {
        "notice": "get bucket global coverage"
      },
      "getLeverageTC()": {
        "notice": "get Collateral Token leverage"
      },
      "getPACtp(uint256)": {
        "notice": "get how many Pegged Token equal 1 Collateral Asset"
      },
      "getPTCac()": {
        "notice": "get Collateral Token price"
      },
      "getTCAvailableToRedeem()": {
        "notice": "get amount of Collateral Token available to redeem"
      },
      "getTPAvailableToMint(uint256)": {
        "notice": "get amount of Pegged Token available to mint"
      },
      "getTotalACavailable()": {
        "notice": "get total Collateral Asset available"
      },
      "governor()": {
        "notice": "The address of the contract which governs this one"
      },
      "initialize(((address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,address,uint256,address))": {
        "notice": "contract initializer"
      },
      "isLiquidationReached()": {
        "notice": "If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation"
      },
      "liqRedeemTP(uint256)": {
        "notice": "Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price."
      },
      "liqRedeemTPto(uint256,address)": {
        "notice": "Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price."
      },
      "makeStoppable()": {
        "notice": "Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function"
      },
      "makeUnstoppable()": {
        "notice": "Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so"
      },
      "mintTC(uint256)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Collateral Token"
      },
      "mintTCViaVendor(uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "mintTCandTP(uint256,uint256)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCandTPViaVendor(uint256,uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Collateral Token and Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCandTPto(uint256,uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCandTPtoViaVendor(uint256,uint256,address,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCto(uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Collateral Token"
      },
      "mintTCtoViaVendor(uint256,address,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "mintTP(uint256,uint256)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Pegged Token"
      },
      "mintTPViaVendor(uint256,uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "mintTPto(uint256,uint256,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Pegged Token"
      },
      "mintTPtoViaVendor(uint256,uint256,address,address)": {
        "notice": "caller sends coinbase as Collateral Asset and recipient receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "pause()": {
        "notice": "Called by the owner to pause, triggers stopped state"
      },
      "paused()": {
        "notice": "Returns true if paused"
      },
      "redeemTC(uint256,uint256)": {
        "notice": "caller sends Collateral Token and receives Collateral Asset"
      },
      "redeemTCViaVendor(uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "redeemTCandTP(uint256,uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCandTPViaVendor(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCandTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": {
        "notice": "caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCto(uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and recipient receives Collateral Asset"
      },
      "redeemTCtoViaVendor(uint256,uint256,address,address)": {
        "notice": "caller sends Collateral Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "redeemTP(uint256,uint256,uint256)": {
        "notice": "caller sends Pegged Token and receives Collateral Asset"
      },
      "redeemTPViaVendor(uint256,uint256,uint256,address)": {
        "notice": "caller sends Pegged Token and receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "redeemTPto(uint256,uint256,uint256,address)": {
        "notice": "caller sends Pegged Token and recipient receives Collateral Asset"
      },
      "redeemTPtoViaVendor(uint256,uint256,uint256,address,address)": {
        "notice": "caller sends Pegged Token and recipient receives Collateral Asset  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "setPauser(address)": {
        "notice": "Changes the address which is enable to pause this contract"
      },
      "shouldCalculateEma()": {
        "notice": "true if the necessary span has pass since last ema update"
      },
      "swapTCforTP(uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Token and receives Pegged Token"
      },
      "swapTCforTPViaVendor(uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "swapTCforTPto(uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and recipient receives Pegged Token"
      },
      "swapTCforTPtoViaVendor(uint256,uint256,uint256,address,address)": {
        "notice": "caller sends Collateral Token and recipient receives Pegged Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "swapTPforTC(uint256,uint256,uint256)": {
        "notice": "caller sends a Pegged Token and receives Collateral Token"
      },
      "swapTPforTCViaVendor(uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "swapTPforTCto(uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and recipient receives Collateral Token"
      },
      "swapTPforTCtoViaVendor(uint256,uint256,uint256,address,address)": {
        "notice": "caller sends a Pegged Token and recipient receives Collateral Token  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "swapTPforTP(uint256,uint256,uint256,uint256)": {
        "notice": "caller sends a Pegged Token and receives another one"
      },
      "swapTPforTPViaVendor(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and receives another one  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "swapTPforTPto(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and recipient receives another one"
      },
      "swapTPforTPtoViaVendor(uint256,uint256,uint256,uint256,address,address)": {
        "notice": "caller sends a Pegged Token and recipient receives another one  `vendor_` receives a markup in Fee Token if possible or in qAC if not"
      },
      "unpause()": {
        "notice": "Called by the owner to unpause, returns to normal state"
      },
      "updateEmas()": {
        "notice": "If time, calculates the EMA for all the Pegged Token prices."
      }
    },
    "notice": "Moc protocol implementation using network Coinbase as Collateral Asset",
    "version": 1
  }
}