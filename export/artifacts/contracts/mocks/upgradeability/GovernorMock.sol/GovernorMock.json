{
  "contractName": "GovernorMock",
  "sourceName": "contracts/mocks/upgradeability/GovernorMock.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChangeContract",
          "name": "changeContract",
          "type": "address"
        }
      ],
      "name": "executeChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAuthorizedChanger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isAuthorized_",
          "type": "bool"
        }
      ],
      "name": "setIsAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080806040523461002357600160ff19600054161760005561019490816100298239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816357e6c2f41461013f575080638c777e82146100b45780639e0a8e09146100885763d994d6d51461004f57600080fd5b3461008457602036600319011261008457356001600160a01b038116036100805760ff602092541690519015158152f35b5080fd5b8280fd5b503461008457602036600319011261008457358015158091036100845760ff8019845416911617825551f35b508290346100805760203660031901126100805780356001600160a01b0381169081900361008457803b15610084579082809282865180958193631851865560e21b83525af180156101355761010957828451f35b67ffffffffffffffff8211610122575082528280828451f35b634e487b7160e01b835260419052602482fd5b84513d85823e3d90fd5b84903461008057816003193601126100805760ff602092541615158152f3fea2646970667358221220bc4fdae3f3bd79eea4f6b589f831ecbf914f3213f9e0ae823a4a30ff258d6a9f64736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816357e6c2f41461013f575080638c777e82146100b45780639e0a8e09146100885763d994d6d51461004f57600080fd5b3461008457602036600319011261008457356001600160a01b038116036100805760ff602092541690519015158152f35b5080fd5b8280fd5b503461008457602036600319011261008457358015158091036100845760ff8019845416911617825551f35b508290346100805760203660031901126100805780356001600160a01b0381169081900361008457803b15610084579082809282865180958193631851865560e21b83525af180156101355761010957828451f35b67ffffffffffffffff8211610122575082528280828451f35b634e487b7160e01b835260419052602482fd5b84513d85823e3d90fd5b84903461008057816003193601126100805760ff602092541615158152f3fea2646970667358221220bc4fdae3f3bd79eea4f6b589f831ecbf914f3213f9e0ae823a4a30ff258d6a9f64736f6c63430008100033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Test only contract to mock Governor behavior ",
    "kind": "dev",
    "methods": {
      "executeChange(address)": {
        "params": {
          "changeContract": "Address of the contract that will execute the changes"
        }
      }
    },
    "title": "GovernorMock",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x23 JUMPI PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE PUSH2 0x194 SWAP1 DUP2 PUSH2 0x29 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x57E6C2F4 EQ PUSH2 0x13F JUMPI POP DUP1 PUSH4 0x8C777E82 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x9E0A8E09 EQ PUSH2 0x88 JUMPI PUSH4 0xD994D6D5 EQ PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x84 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x84 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x80 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x84 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x84 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x84 JUMPI PUSH1 0xFF DUP1 NOT DUP5 SLOAD AND SWAP2 AND OR DUP3 SSTORE MLOAD RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x80 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x80 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x84 JUMPI DUP1 EXTCODESIZE ISZERO PUSH2 0x84 JUMPI SWAP1 DUP3 DUP1 SWAP3 DUP3 DUP7 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x18518655 PUSH1 0xE2 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x135 JUMPI PUSH2 0x109 JUMPI DUP3 DUP5 MLOAD RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x122 JUMPI POP DUP3 MSTORE DUP3 DUP1 DUP3 DUP5 MLOAD RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x80 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x80 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x4F 0xDA 0xE3 RETURN 0xBD PUSH26 0xEEA4F6B589F831ECBF914F3213F9E0AE823A4A30FF258D6A9F64 PUSH20 0x6F6C634300081000330000000000000000000000 ",
      "sourceMap": "279:573:74:-:0;;;;;;;347:4;279:573;;347:4;279:573;;;347:4;279:573;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x57E6C2F4 EQ PUSH2 0x13F JUMPI POP DUP1 PUSH4 0x8C777E82 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x9E0A8E09 EQ PUSH2 0x88 JUMPI PUSH4 0xD994D6D5 EQ PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x84 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x84 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x80 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x84 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x84 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x84 JUMPI PUSH1 0xFF DUP1 NOT DUP5 SLOAD AND SWAP2 AND OR DUP3 SSTORE MLOAD RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x80 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x80 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x84 JUMPI DUP1 EXTCODESIZE ISZERO PUSH2 0x84 JUMPI SWAP1 DUP3 DUP1 SWAP3 DUP3 DUP7 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x18518655 PUSH1 0xE2 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x135 JUMPI PUSH2 0x109 JUMPI DUP3 DUP5 MLOAD RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x122 JUMPI POP DUP3 MSTORE DUP3 DUP1 DUP3 DUP5 MLOAD RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x80 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x80 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x4F 0xDA 0xE3 RETURN 0xBD PUSH26 0xEEA4F6B589F831ECBF914F3213F9E0AE823A4A30FF258D6A9F64 PUSH20 0x6F6C634300081000330000000000000000000000 ",
      "sourceMap": "279:573:74:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:74;;;;;-1:-1:-1;;;;;279:573:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:74;;;;;;-1:-1:-1;;;;;279:573:74;;;;;;;;598:24;;;;;279:573;;;;;;;;;;;;;;598:24;;;;;;;;;;279:573;;;;598:24;279:573;;;;;;;;598:24;;279:573;;;;;-1:-1:-1;;;279:573:74;;;;;;;;598:24;279:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "80800",
        "executionCost": "24356",
        "totalCost": "105156"
      },
      "external": {
        "executeChange(address)": "infinite",
        "isAuthorized()": "2277",
        "isAuthorizedChanger(address)": "2385",
        "setIsAuthorized(bool)": "24453"
      }
    },
    "methodIdentifiers": {
      "executeChange(address)": "8c777e82",
      "isAuthorized()": "57e6c2f4",
      "isAuthorizedChanger(address)": "d994d6d5",
      "setIsAuthorized(bool)": "9e0a8e09"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChangeContract\",\"name\":\"changeContract\",\"type\":\"address\"}],\"name\":\"executeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorizedChanger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAuthorized_\",\"type\":\"bool\"}],\"name\":\"setIsAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Test only contract to mock Governor behavior \",\"kind\":\"dev\",\"methods\":{\"executeChange(address)\":{\"params\":{\"changeContract\":\"Address of the contract that will execute the changes\"}}},\"title\":\"GovernorMock\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeChange(address)\":{\"notice\":\"Function to be called to make the changes in changeContract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/upgradeability/GovernorMock.sol\":\"GovernorMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x3b0a782858c710e8535349b809717bd1960049d8557507cb4c423d9b5c043449\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IChangeContract } from \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd91c4baaa22f2907672ddef66b268c360f7eb9f758d203662510c8fb1df4d3d5\",\"license\":\"UNLICENSED\"},\"contracts/mocks/upgradeability/GovernorMock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport { IGovernor } from \\\"../../interfaces/IGovernor.sol\\\";\\nimport { IChangeContract } from \\\"../../interfaces/IChangeContract.sol\\\";\\n\\n/**\\n  @title GovernorMock\\n  @dev Test only contract to mock Governor behavior \\n*/\\ncontract GovernorMock is IGovernor {\\n    bool public isAuthorized = true;\\n\\n    /**\\n    @notice Function to be called to make the changes in changeContract\\n    @param changeContract Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract) external {\\n        changeContract.execute();\\n    }\\n\\n    function isAuthorizedChanger(address) external view override returns (bool) {\\n        return isAuthorized;\\n    }\\n\\n    function setIsAuthorized(bool isAuthorized_) public {\\n        isAuthorized = isAuthorized_;\\n    }\\n}\\n\",\"keccak256\":\"0xf0cad649f871941ee444160486df19d70d9da92841ff9232c6d2fc3a81f4fbba\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 24152,
        "contract": "contracts/mocks/upgradeability/GovernorMock.sol:GovernorMock",
        "label": "isAuthorized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeChange(address)": {
        "notice": "Function to be called to make the changes in changeContract"
      }
    },
    "version": 1
  }
}