{
  "contractName": "GovernorMock",
  "sourceName": "contracts/mocks/upgradeability/GovernorMock.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChangeContract",
          "name": "changeContract",
          "type": "address"
        }
      ],
      "name": "executeChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAuthorizedChanger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isAuthorized_",
          "type": "bool"
        }
      ],
      "name": "setIsAuthorized",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080806040523461002157600160ff195f5416175f5561019790816100268239f35b5f80fdfe608080604052600480361015610013575f80fd5b5f91823560e01c90816357e6c2f41461014257508281638c777e82146100b2575080639e0a8e09146100865763d994d6d51461004d575f80fd5b3461008257602036600319011261008257356001600160a01b0381160361007f5760ff60209154166040519015158152f35b80fd5b5080fd5b503461008257602036600319011261008257358015158091036100825760ff8019835416911617815580f35b80833461013f57602036600319011261013f5780356001600160a01b0381169081900361013b57803b1561013b5782908260405180958193631851865560e21b83525af1801561013057610104578280f35b67ffffffffffffffff821161011d575060405281808280f35b634e487b7160e01b835260419052602482fd5b6040513d85823e3d90fd5b5050fd5b50fd5b83903461008257816003193601126100825760ff602092541615158152f3fea26469706673582212204bf312122b7b606c57edd691e412a219d65b680f623ea94fd09e9aab19826dfe64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600480361015610013575f80fd5b5f91823560e01c90816357e6c2f41461014257508281638c777e82146100b2575080639e0a8e09146100865763d994d6d51461004d575f80fd5b3461008257602036600319011261008257356001600160a01b0381160361007f5760ff60209154166040519015158152f35b80fd5b5080fd5b503461008257602036600319011261008257358015158091036100825760ff8019835416911617815580f35b80833461013f57602036600319011261013f5780356001600160a01b0381169081900361013b57803b1561013b5782908260405180958193631851865560e21b83525af1801561013057610104578280f35b67ffffffffffffffff821161011d575060405281808280f35b634e487b7160e01b835260419052602482fd5b6040513d85823e3d90fd5b5050fd5b50fd5b83903461008257816003193601126100825760ff602092541615158152f3fea26469706673582212204bf312122b7b606c57edd691e412a219d65b680f623ea94fd09e9aab19826dfe64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Test only contract to mock Governor behavior ",
    "kind": "dev",
    "methods": {
      "executeChange(address)": {
        "params": {
          "changeContract": "Address of the contract that will execute the changes"
        }
      }
    },
    "title": "GovernorMock",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x21 JUMPI PUSH1 0x1 PUSH1 0xFF NOT PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH2 0x197 SWAP1 DUP2 PUSH2 0x26 DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x57E6C2F4 EQ PUSH2 0x142 JUMPI POP DUP3 DUP2 PUSH4 0x8C777E82 EQ PUSH2 0xB2 JUMPI POP DUP1 PUSH4 0x9E0A8E09 EQ PUSH2 0x86 JUMPI PUSH4 0xD994D6D5 EQ PUSH2 0x4D JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x82 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x82 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x7F JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x82 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x82 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x82 JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR DUP2 SSTORE DUP1 RETURN JUMPDEST DUP1 DUP4 CALLVALUE PUSH2 0x13F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13F JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x13B JUMPI DUP1 EXTCODESIZE ISZERO PUSH2 0x13B JUMPI DUP3 SWAP1 DUP3 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x18518655 PUSH1 0xE2 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x130 JUMPI PUSH2 0x104 JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x11D JUMPI POP PUSH1 0x40 MSTORE DUP2 DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP REVERT JUMPDEST POP REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x82 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x82 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B RETURN SLT SLT 0x2B PUSH28 0x606C57EDD691E412A219D65B680F623EA94FD09E9AAB19826DFE6473 PUSH16 0x6C634300081400330000000000000000 ",
      "sourceMap": "279:573:83:-:0;;;;;;;347:4;279:573;;347:4;279:573;;;347:4;279:573;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x57E6C2F4 EQ PUSH2 0x142 JUMPI POP DUP3 DUP2 PUSH4 0x8C777E82 EQ PUSH2 0xB2 JUMPI POP DUP1 PUSH4 0x9E0A8E09 EQ PUSH2 0x86 JUMPI PUSH4 0xD994D6D5 EQ PUSH2 0x4D JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x82 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x82 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x7F JUMPI PUSH1 0xFF PUSH1 0x20 SWAP2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x82 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x82 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x82 JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR DUP2 SSTORE DUP1 RETURN JUMPDEST DUP1 DUP4 CALLVALUE PUSH2 0x13F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x13F JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x13B JUMPI DUP1 EXTCODESIZE ISZERO PUSH2 0x13B JUMPI DUP3 SWAP1 DUP3 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x18518655 PUSH1 0xE2 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x130 JUMPI PUSH2 0x104 JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x11D JUMPI POP PUSH1 0x40 MSTORE DUP2 DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP REVERT JUMPDEST POP REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x82 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x82 JUMPI PUSH1 0xFF PUSH1 0x20 SWAP3 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B RETURN SLT SLT 0x2B PUSH28 0x606C57EDD691E412A219D65B680F623EA94FD09E9AAB19826DFE6473 PUSH16 0x6C634300081400330000000000000000 ",
      "sourceMap": "279:573:83:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:83;;;;;-1:-1:-1;;;;;279:573:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;279:573:83;;;;;;-1:-1:-1;;;;;279:573:83;;;;;;;;598:24;;;;;279:573;;;;;;;;;;;;598:24;;;;;;;;;;279:573;;;598:24;279:573;;;;;;;;598:24;;279:573;;;;-1:-1:-1;;;279:573:83;;;;;;;;598:24;279:573;;;;;;;;;598:24;279:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "81400",
        "executionCost": "24354",
        "totalCost": "105754"
      },
      "external": {
        "executeChange(address)": "infinite",
        "isAuthorized()": "2273",
        "isAuthorizedChanger(address)": "2386",
        "setIsAuthorized(bool)": "24454"
      }
    },
    "methodIdentifiers": {
      "executeChange(address)": "8c777e82",
      "isAuthorized()": "57e6c2f4",
      "isAuthorizedChanger(address)": "d994d6d5",
      "setIsAuthorized(bool)": "9e0a8e09"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChangeContract\",\"name\":\"changeContract\",\"type\":\"address\"}],\"name\":\"executeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorizedChanger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAuthorized_\",\"type\":\"bool\"}],\"name\":\"setIsAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Test only contract to mock Governor behavior \",\"kind\":\"dev\",\"methods\":{\"executeChange(address)\":{\"params\":{\"changeContract\":\"Address of the contract that will execute the changes\"}}},\"title\":\"GovernorMock\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeChange(address)\":{\"notice\":\"Function to be called to make the changes in changeContract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/upgradeability/GovernorMock.sol\":\"GovernorMock\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x22e20ac9596a6a4c4545b0c5cf307c2924987d6033ef75357850b0de4d1f0901\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangeContract } from \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0f8cd9de3ed9348e6a58cf4d971586f60f5542a20ecd3748194e4ba288f419c1\",\"license\":\"UNLICENSED\"},\"contracts/mocks/upgradeability/GovernorMock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IGovernor } from \\\"../../interfaces/IGovernor.sol\\\";\\nimport { IChangeContract } from \\\"../../interfaces/IChangeContract.sol\\\";\\n\\n/**\\n  @title GovernorMock\\n  @dev Test only contract to mock Governor behavior \\n*/\\ncontract GovernorMock is IGovernor {\\n    bool public isAuthorized = true;\\n\\n    /**\\n    @notice Function to be called to make the changes in changeContract\\n    @param changeContract Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract) external {\\n        changeContract.execute();\\n    }\\n\\n    function isAuthorizedChanger(address) external view override returns (bool) {\\n        return isAuthorized;\\n    }\\n\\n    function setIsAuthorized(bool isAuthorized_) public {\\n        isAuthorized = isAuthorized_;\\n    }\\n}\\n\",\"keccak256\":\"0x4c3d3f98f6557c1d830dc592929b49deaa881a60290335ed68729191b2d2aa50\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 26496,
        "contract": "contracts/mocks/upgradeability/GovernorMock.sol:GovernorMock",
        "label": "isAuthorized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeChange(address)": {
        "notice": "Function to be called to make the changes in changeContract"
      }
    },
    "version": 1
  }
}