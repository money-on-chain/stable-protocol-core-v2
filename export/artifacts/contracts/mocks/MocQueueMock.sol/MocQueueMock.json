{
  "contractName": "MocQueueMock",
  "sourceName": "contracts/mocks/MocQueueMock.sol",
  "abi": [
    {
      "inputs": [],
      "name": "BucketAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExecutionFeePaymentFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedChanger",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhenPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhilePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unstoppable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        }
      ],
      "name": "WrongExecutionFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "errorCode_",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "msg_",
          "type": "string"
        }
      ],
      "name": "OperationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "OperationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bucket_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum MocQueueExecFees.OperType",
          "name": "operType_",
          "type": "uint8"
        }
      ],
      "name": "OperationQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TCMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TCRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TCSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tp_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tpFrom_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tpTo_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPfrom_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPto_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeToken_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qFeeTokenVendorMarkup_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vendor_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "operId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason_",
          "type": "bytes"
        }
      ],
      "name": "UnhandledError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGovernor",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MocQueueExecFees.OperType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "execFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executionFeeRecipient",
          "type": "address"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstOperId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MocQueueExecFees.OperType",
          "name": "operType_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "getAndVerifyExecFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentExecFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCustomMockValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governor_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser_",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "minOperWaitingBlk_",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxOperPerBatch_",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tcMintExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tcRedeemExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTPforTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTPforTCExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTCforTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemTCandTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintTCandTPExecFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocQueueExecFees.InitializeMocQueueExecFeesParams",
          "name": "mocQueueExecFeesParams_",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeMock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeStoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeUnstoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOperPerBatch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minOperWaitingBlk",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocOperations",
      "outputs": [
        {
          "internalType": "contract MocOperations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operIdCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsMintTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qTC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsMintTCandTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsMintTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsRedeemTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qTC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsRedeemTCandTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsRedeemTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsSwapTCforTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsSwapTPforTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "tp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operationsSwapTPforTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "tpFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tpTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "qTP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vendor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "opersInfo",
      "outputs": [
        {
          "internalType": "enum MocQueueExecFees.OperType",
          "name": "operType",
          "type": "uint8"
        },
        {
          "internalType": "uint248",
          "name": "queuedBlk",
          "type": "uint248"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCore.MintTCParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueMintTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.MintTCandTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueMintTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCore.MintTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueMintTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCore.RedeemTCParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueRedeemTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.RedeemTCandTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueRedeemTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.RedeemTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueRedeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTPmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTCforTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueSwapTCforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tp",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTCmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTPforTCParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueSwapTPforTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpFrom",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tpTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "qTP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qTPmin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qACmax",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vendor",
              "type": "address"
            }
          ],
          "internalType": "struct MocCommons.SwapTPforTPParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "queueSwapTPforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "operId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readyToExecute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MocOperations",
          "name": "bucket_",
          "type": "address"
        }
      ],
      "name": "registerBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "maxOperPerBatch_",
          "type": "uint128"
        }
      ],
      "name": "setMaxOperPerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "minOperWaitingBlk_",
          "type": "uint128"
        }
      ],
      "name": "setMinOperWaitingBlk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser_",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stoppable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tcMintExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tcRedeemExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTPforTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTPforTCExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapTCforTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemTCandTPExecFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintTCandTPExecFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocQueueExecFees.InitializeMocQueueExecFeesParams",
          "name": "mocQueueExecFeesParams_",
          "type": "tuple"
        }
      ],
      "name": "updateExecutionFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x60a08060405234620000e157306080526000549060ff8260081c166200008f575060ff8082160362000053575b604051613c5d9081620000e782396080518181816111140152818161128301526126f80152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386200002c565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8062c6e88e14612be957806301ffc9a714612b935780630c340a2414612b6a5780631826ebf014612b065780631a0c544014612a9857806324524ea114612a42578063248a9ca314612a125780632b994849146129f35780632d88af4a1461299e5780632f2ff15d1461296557806334975a41146127f357806336568abe1461275f5780633659cfe6146126c65780633bb4b05c146126835780633cbcf4c41461265e5780633f4ba83a14612569578063435c7e37146124df57806347d8496a1461240e5780634981d04e146123675780634b5a9e3d146123335780634b64e492146112e65780634f1ef286146111fc5780635210570c146111d757806352d1902d1461110157806357271f4d146110b45780635c817aa3146110505780635c975abb1461102a5780635e2a6065146110115780635ee1d2bb14610fc7578063681fe70c14610fa35780636827435714610f7b5780636b59c22f14610eaa5780636b76333014610e4657806373e3d08614610e275780637c50b7e414610de35780637e81a82114610d125780638456cb5914610c7c5780638a4737ab14610c1d5780638b20076c14610bbe5780638d7a72f314610b9f5780638e7e818914610b7757806391d1485414610b245780639fd0506d14610af7578063a217fddf14610adb578063ad16c2de14610a6d578063bb4872de14610a4a578063bbe720d9146109d5578063c84d8bb614610904578063caeb12b6146108da578063d547741f146108a1578063db901477146105fb578063dbb0b684146105d9578063e4c0aaf414610593578063e4e1b729146104c2578063e97a4d63146103f1578063fa91a9a5146102fa5763fb8aafb80361000e57346102f55760203660031901126102f557600435600052610262602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b0390f35b600080fd5b60a03660031901126102f55761030e61335e565b610325600080516020613c0883398151915261372a565b61033b61033560026101f7612cfd565b54613b25565b61025d80546040519161034f604084612d15565b60028352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026183526103a7600460406000206136a8565b604051828152600284820152600080516020613be883398151915260403392a26103d1815461371b565b9055604051908152f35b634e487b7160e01b600052602160045260246000fd5b60a03660031901126102f55761040561335e565b61041c600080516020613c0883398151915261372a565b61042c61033560016101f7612cfd565b61025d805460405191610440604084612d15565b60018352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261025f8352610498600460406000206136a8565b604051828152600184820152600080516020613be883398151915260403392a26103d1815461371b565b60e03660031901126102f5576104d661335e565b6104ed600080516020613c0883398151915261372a565b6104fd61033560066101f7612cfd565b61025d805460405191610511604084612d15565b60068352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102648352610569600460406000206139c8565b604051828152600684820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f5576004356001600160a01b038116908190036102f5576105c16132eb565b6001600160601b0360a01b6097541617609755600080f35b346102f55760003660031901126102f55760206102695460801c604051908152f35b346102f5576101a03660031901126102f5576001600160a01b03600435818116908190036102f55760243591821682036102f5576044356001600160801b03928382168092036102f55760643593841684036102f5576101203660831901126102f5576000549260ff8460081c161593848095610894575b801561087d575b156108215761071192600191868360ff1983161760005561080f575b5060ff60005460081c16926106aa8461337f565b6106b38461337f565b6106bc8461337f565b6106c58461337f565b6106ce8461337f565b6001600160601b0360a01b60975416176097556106ea8361337f565b60ca5490620100008360b01b039060101b169061ff018360b01b031916171760ca5561337f565b6101f7608435610722600183612cfd565b5560a435610731600283612cfd565b5560c435610740600383612cfd565b5560e43561074f600483612cfd565b556101043561075f600983612cfd565b556101243561076f600883612cfd565b556101443561077f600783612cfd565b556101643561078f600683612cfd565b5561079f60056101843592612cfd565b55600054926107bc60ff8560081c166107b78161337f565b61337f565b600161022a5560801b6001600160801b03191617610269556107da57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005587610696565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561067a5750600160ff82161461067a565b50600160ff821610610673565b346102f55760403660031901126102f5576004356024356001600160a01b03811681036102f557816108d561001993613b2f565b612da3565b346102f55760003660031901126102f55761025c546040516001600160a01b039091168152602090f35b60c03660031901126102f55761091861335e565b61092f600080516020613c0883398151915261372a565b61093f61033560046101f7612cfd565b61025d805460405191610953604084612d15565b60048352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026283526109ab6004604060002061395d565b604051828152600484820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f5576001600160a01b03600435818116908190036102f557610a046132eb565b61025c8054928316610a385781610019936001600160601b0360a01b16179055600080516020613c08833981519152613aa3565b604051630a646b7760e41b8152600490fd5b346102f55760003660031901126102f557602060ff60ca54166040519015158152f35b346102f55760203660031901126102f5576004803560009081526102616020908152604091829020805460018201546002830154600384015493909601548551928352938201526001600160a01b03948516938101939093528316606083015291909116608082015260a090f35b346102f55760003660031901126102f557602060405160008152f35b346102f55760003660031901126102f55760ca5460405160109190911c6001600160a01b03168152602090f35b346102f55760403660031901126102f5576024356001600160a01b038116908190036102f557600435600052610193602052604060002090600052602052602060ff604060002054166040519015158152f35b346102f55760003660031901126102f55760206001600160801b036102695416604051908152f35b346102f55760003660031901126102f557602061029c54604051908152f35b346102f55760203660031901126102f557600435600052610263602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b346102f55760203660031901126102f557600435600052610260602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b346102f55760003660031901126102f557610c9561335e565b60ca54601081901c6001600160a01b03163303610d005760ff811615610cee576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b60c03660031901126102f557610d2661335e565b610d3d600080516020613c0883398151915261372a565b610d4d61033560036101f7612cfd565b61025d805460405191610d61604084612d15565b60038352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102608352610db96004604060002061395d565b604051828152600384820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f55760043560005261026860205260406000205460ff81169060405190600a8310156103db57604092825260081c6020820152f35b346102f55760003660031901126102f557602061025d54604051908152f35b346102f55760203660031901126102f557600435600052610264602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b60e03660031901126102f557610ebe61335e565b610ed5600080516020613c0883398151915261372a565b610ee561033560076101f7612cfd565b61025d805460405191610ef9604084612d15565b60078352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102658352610f51600460406000206139c8565b604051828152600784820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760003660031901126102f557610f946132eb565b60ca805460ff19166001179055005b346102f55760003660031901126102f557602061025e5461025d5414604051908152f35b346102f55760203660031901126102f5576001600160801b0360043581811681036102f557610ff46132eb565b610269805490921660809190911b6001600160801b031916179055005b346102f55760003660031901126102f557602a61029c55005b346102f55760003660031901126102f557602060ff60ca5460081c166040519015158152f35b346102f55760203660031901126102f557600435600052610266602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b346102f55760003660031901126102f55761029c546110d660016101f7612cfd565b5481018091116110eb57602090604051908152f35b634e487b7160e01b600052601160045260246000fd5b346102f55760003660031901126102f5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361116c5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b346102f55760003660031901126102f5576111f06132eb565b60ca805460ff19169055005b60403660031901126102f5576001600160a01b0360043581811681036102f55760243567ffffffffffffffff81116102f557366023820112156102f55780600401359161124883612d4d565b916112566040519384612d15565b83835236602485830101116102f55761001994600060208660019760246112d996018389013786010152807f000000000000000000000000000000000000000000000000000000000000000016906112b082301415612e22565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614612e83565b6112e16132eb565b612ee4565b346102f55760203660031901126102f5576004356001600160a01b03811690036102f55761131261335e565b600261022a54146122ee57600261022a5561025e54600061025d5461026954908160801c84018082106000146122e35750909291925b8183106113a4575b505061025e5580611364575b600161022a55005b47811161139d575b6000808080936004355af161137f6131bf565b501561138b578061135c565b604051638f58940960e01b8152600490fd5b504761136c565b9091600090600091816000526102686020526040600020604051906113ca604083612d15565b546113d860ff8216836133df565b60081c8060208301526001600160801b03861643031060001461145d575060009250829050805b611447575b156114405780600191337fb207e6b6b26274f3764b879e578b4539b8e37f41dff43932ddc87b3e04090974600080a30193019190929192611348565b9250611350565b8160005261026860205260006040812055611404565b8051600a8110156103db5760010361161a57505080915060005261025f8060205261148b60406000206133eb565b90826000526020526114b9604060002060046000918281558260018201558260028201558260038201550155565b61025c546040805163235e81cf60e01b81528351600482015260208401516024820152908301516001600160a01b039081166044830152606084015181166064830152608084015181166084830152909160c091839160a4918391600091165af190811561160e576000906000926115ba575b507f5090a820029acae4d47b64da9af62ce04a5a1bdb546934e5fcfe091ee1f780ee9060018060a01b036040850151169261159f86606060018060a01b03818901511697805194805192602082015190604083015192015192608060018060a01b03910151169360405198899889613611565b0390a3600190816115b360016101f7612cfd565b54926113ff565b7f5090a820029acae4d47b64da9af62ce04a5a1bdb546934e5fcfe091ee1f780ee92506115ff915060c03d60c011611607575b6115f78183612d15565b810190613477565b92905061152c565b503d6115ed565b6040513d6000823e3d90fd5b8051600a8110156103db576002036117b45750508091506000526102618060205261164860406000206133eb565b9082600052602052611676604060002060046000918281558260018201558260028201558260038201550155565b61025c546040805163bfe4262160e01b81528351600482015260208401516024820152908301516001600160a01b039081166044830152606084015181166064830152608084015181166084830152909160c091839160a4918391600091165af190811561160e57600090600092611770575b507f7e7043742f69701e6292386d468d710f2d6e44bf93232a1e52f1641e50a9de129060018060a01b036040850151169261175c86606060018060a01b03818901511697805194805192602082015190604083015192015192608060018060a01b03910151169360405198899889613611565b0390a3600190816115b360026101f7612cfd565b7f7e7043742f69701e6292386d468d710f2d6e44bf93232a1e52f1641e50a9de1292506117ac915060c03d60c011611607576115f78183612d15565b9290506116e9565b8051600a8110156103db57600303611911575050809150600052610260806020526117e2604060002061349a565b9082600052602052611816604060002060056000918281558260018201558260028201558260038201558260048201550155565b61025c54604051635a21a61960e11b81529060c090829060c49082906000906001600160a01b031661184b60048401896134f4565b5af190811561160e576000906000926118ed575b50825160608085015160808601516020808801518751918801516040808a0151999096015160a0909a015195516001600160a01b039485169a95851699978516987f125247fdf990b9b419d4b4f895b1bb75bc485e3f8b813cf5557a4a12a56d054d98919788976118d9978f979216959094929089613611565b0390a4600190816115b360036101f7612cfd565b9050611908915060c03d60c011611607576115f78183612d15565b9190508761185f565b8051600a8110156103db57600403611a6e5750508091506000526102628060205261193f604060002061349a565b9082600052602052611973604060002060056000918281558260018201558260028201558260038201558260048201550155565b61025c5460405163ad4e666d60e01b81529060c090829060c49082906000906001600160a01b03166119a860048401896134f4565b5af190811561160e57600090600092611a4a575b50825160608085015160808601516020808801518751918801516040808a0151999096015160a0909a015195516001600160a01b039485169a95851699978516987f625b9fc283a619f53beb817d79b8ab044d60e307fd2af4bb89fa5e9a24ce4ebc9891978897611a36978f979216959094929089613611565b0390a4600190816115b360046101f7612cfd565b9050611a65915060c03d60c011611607576115f78183612d15565b919050876119bc565b8051600a8110156103db57600503611c04575050809150600052600061026380602052611a9d6040832061349a565b90838352602052611acf6040832060056000918281558260018201558260028201558260038201558260048201550155565b61025c5460405163883d21cb60e01b81529260e091849160c4918391906001600160a01b0316611b0260048401886134f4565b5af191821561160e5760008091600094611bab575b507f03e9e02a94d7486426fcf2b05a27e911b8d1b61e2e1dcf103785512f46c847649060018060a01b0384511692611b978760609360018060a01b0385890151169760018060a01b0360808201511699602082015196815160208301519160408401519301519360a0600180821b039101511694604051998a998a613650565b0390a4600190816115b360056101f7612cfd565b90507f03e9e02a94d7486426fcf2b05a27e911b8d1b61e2e1dcf103785512f46c847649350611bf2915060e03d60e011611bfd575b611bea8183612d15565b810190613539565b949192919050611b17565b503d611be0565b8051600a8110156103db57600603611d9357505080915060005261026480602052611c32604060002061355d565b9082600052602052611c6c604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c54604051633631a6bb60e21b81529060e090829060e49082906000906001600160a01b0316611ca160048401896135c1565b5af1801561160e57600091600090600092611d4c575b507f4d33a2f9c4f66a101333f7ca2ab718582e763c941ff6fc304d2d4408d43a82849060018060a01b0385511692611d388760018060a01b036080890151169660018060a01b0360a08a015116986020810151948051602082015190606060408401519301519360c060018060a01b039101511694604051998a998a613650565b0390a4600190816115b360066101f7612cfd565b90507f4d33a2f9c4f66a101333f7ca2ab718582e763c941ff6fc304d2d4408d43a82849250611d8a915060e03d60e011611bfd57611bea8183612d15565b92905092611cb7565b8051600a8110156103db57600703611efb575050809150600052600061026580602052611dc26040832061355d565b90838352602052611dfa6040832060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c546040516312bce9bf60e21b81529260e091849160e4918391906001600160a01b0316611e2d60048401886135c1565b5af191821561160e57600090600093611ed5575b507ff8dcb57698d7067da58ab71c48cd2e3b329b69e7e9853f88630c2c69c2557c7860018060a01b038351169160018060a01b0360808501511693611ec18760018060a01b0360a084015116976020840151938151916020810151606060408301519201519260c060018060a01b03910151169360405198899889613611565b0390a4600190816115b360076101f7612cfd565b9050611ef191925060e03d60e011611bfd57611bea8183612d15565b9392505087611e41565b8051600a8110156103db57600803612063575050809150600052600061026680602052611f2a6040832061355d565b90838352602052611f626040832060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c54604051635e272ad960e11b81529260e091849160e4918391906001600160a01b0316611f9560048401886135c1565b5af191821561160e5760009060009361203d575b507f8ab42044ce8b230e021e5542eb53688d77443e50ee84cda7917f6bdd833c697f60018060a01b038351169160018060a01b03608085015116936120298760018060a01b0360a084015116976020840151938151916020810151606060408301519201519260c060018060a01b03910151169360405198899889613611565b0390a4600190816115b360086101f7612cfd565b905061205991925060e03d60e011611bfd57611bea8183612d15565b9392505087611fa9565b51600a8110156103db5760091461207b575b806113ff565b508091506000526102676020526000604081206040519061209e61010083612d15565b60018060a01b03815416825260018060a01b03600182015416602083015260028101546040830152600381015460608301526004810154608083015260018060a01b0360058201541660a083015260018060a01b0360068201541660c0830152600760018060a01b039101541660e082015282825261026760205281600760408220828155826001820155826002820155826003820155826004820155826005820155826006820155015560e060018060a01b0361025c54166101046040518095819363391bf6cf861b835260018060a01b03875116600484015260018060a01b03602088015116602484015260408701516044840152606087015160648401526080870151608484015260018060a01b0360a08801511660a484015260018060a01b0360c08801511660c484015260018060a01b03868801511660e48401525af191821561160e576000906000936122bd575b507ff86f4487d2c5541b78f06d2368e28e0f4052e182124def54d5855bf2a01d325861012060018060a01b038451169260018060a01b036020860151169060018060a01b0360a0870151169560018060a01b0360c082015116976040820151928151602083015191606060408501519401519460e060018060a01b039101511695604051978852602088015260408701526060860152608085015260a084015260c083015260e082015286610100820152a4600190816122b560096101f7612cfd565b549250612075565b90506122d991925060e03d60e011611bfd57611bea8183612d15565b93925050876121f2565b905090929192611348565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346102f55760203660031901126102f557600435600a8110156102f55761235e6020916101f7612cfd565b54604051908152f35b346102f5576101203660031901126102f5576123816132eb565b6101f7600435612392600183612cfd565b556024356123a1600283612cfd565b556044356123b0600383612cfd565b556064356123bf600483612cfd565b556084356123ce600983612cfd565b5560a4356123dd600883612cfd565b5560c4356123ec600783612cfd565b5560e4356123fb600683612cfd565b5561240b60056101043592612cfd565b55005b60c03660031901126102f55761242261335e565b612439600080516020613c0883398151915261372a565b61244961033560056101f7612cfd565b61025d80546040519161245d604084612d15565b60058352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026383526124b56004604060002061395d565b604051828152600584820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f557600435600052610267602052610100604060002060018060a01b03808254169181600182015416916002820154600383015460048401549183600586015416936007816006880154169601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b346102f55760003660031901126102f55760ca5460ff8160081c161561264c5760018060a01b03808260101c1633141590816125e2575b50610d005760ff811615610cee5761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60975460405163d994d6d560e01b8152336004820152925060209183916024918391165afa90811561160e5760009161261e575b5015826125a0565b61263f915060203d8111612645575b6126378183612d15565b8101906132d3565b82612616565b503d61262d565b604051637c7fd07960e01b8152600490fd5b346102f55760003660031901126102f5576020612679613a3e565b6040519015158152f35b346102f55760203660031901126102f5576004356001600160801b0381168091036102f5576126b06132eb565b61026980546001600160801b0319169091179055005b346102f55760203660031901126102f5576004356001600160a01b0380821682036102f55761001991612725826000937f000000000000000000000000000000000000000000000000000000000000000016906112b082301415612e22565b61272d6132eb565b61273682612d4d565b906127446040519283612d15565b828252601f1961275384612d4d565b01366020840137612ee4565b346102f55760403660031901126102f5576024356001600160a01b0381168082036102f55733036127965761001990600435612da3565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101003660031901126102f55761280861335e565b61281f600080516020613c0883398151915261372a565b61282f61033560096101f7612cfd565b61025d8054604051612842604082612d15565b600981526020810160018060f81b0343168152826000526102686020526040600020915190600a8210156103db575160ff9190911660089190911b60ff19161790556000818152610267602052604090206001600160a01b036004358181169492908590036102f5576001600160601b0360a01b9485825416178155600181016024358381168091036102f557868254161790556044356002820155606435600382015560843560048201556005810160a4358381168091036102f55786825416179055600681019060c435918383168093036102f55760079287825416179055019060e4359081168091036102f557602094825416179055604051828152600984820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760403660031901126102f5576004356024356001600160a01b03811681036102f5578161299961001993613b2f565b613aa3565b346102f55760203660031901126102f5576004356001600160a01b03811681036102f5576129ca6132eb565b60ca805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055005b346102f55760003660031901126102f557602061025e54604051908152f35b346102f55760203660031901126102f5576004356000526101936020526020600160406000200154604051908152f35b346102f55760403660031901126102f557600435600a8110156102f557612a6b906101f7612cfd565b546024358111612a8057602090604051908152f35b6024906040519063049e6f6960e41b82526004820152fd5b346102f55760203660031901126102f55760048035600090815261025f6020908152604091829020805460018201546002830154600384015493909601548551928352938201526001600160a01b03948516938101939093528316606083015291909116608082015260a090f35b346102f55760203660031901126102f557600435600052610265602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b346102f55760003660031901126102f5576097546040516001600160a01b039091168152602090f35b346102f55760203660031901126102f55760043563ffffffff60e01b81168091036102f557602090637965db0b60e01b8114908115612bd8575b506040519015158152f35b6301ffc9a760e01b14905082612bcd565b60e03660031901126102f557612bfd61335e565b612c14600080516020613c0883398151915261372a565b612c2461033560086101f7612cfd565b61025d805460405191612c38604084612d15565b60088352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102668352612c90600460406000206139c8565b604051828152600884820152600080516020613be883398151915260403392a26103d1815461371b565b6001600160a01b039182168152602081019290925260408201929092526060810192909252918216608082015291811660a083015290911660c082015260e00190565b90600a8110156103db57600052602052604060002090565b90601f8019910116810190811067ffffffffffffffff821117612d3757604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111612d3757601f01601f191660200190565b6001600160a01b0391821681526020810192909252604082019290925291811660608301529182166080820152911660a082015260c00190565b9060009180835261019380602052604084209260018060a01b03169283855260205260ff604085205416612dd8575b50505050565b818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a438808080612dd2565b15612e2957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e8a57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9060ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612f1e5750612f1c915061311d565b565b6040516352d1902d60e01b8152602093919291906001600160a01b038316908581600481855afa600091816130eb575b50612faf5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9394937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d4440161309457612fe18361311d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28351159081159161308c575b5061301c57505050565b6000806130899461302d6027612d4d565b9461303b6040519687612d15565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c81870152660819985a5b195960ca1b604087015281519101845af46130836131bf565b916131ef565b50565b905038613012565b60405162461bcd60e51b815260048101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311613116575b6131028183612d15565b810103126131135750519038612f4e565b80fd5b503d6130f8565b803b15613164577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d156131ea573d906131d082612d4d565b916131de6040519384612d15565b82523d6000602084013e565b606090565b919290156132515750815115613203575090565b3b1561320c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156132645750805190602001fd5b60405162461bcd60e51b815290819061328090600483016132a7565b0390fd5b60005b8381106132975750506000910152565b8181015183820152602001613287565b604091602082526132c78151809281602086015260208686019101613284565b601f01601f1916010190565b908160209103126102f5575180151581036102f55790565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa90811561160e57600091613340575b501561332e57565b604051631dd1b1b560e21b8152600490fd5b613358915060203d8111612645576126378183612d15565b38613326565b60ff60ca5460081c1661336d57565b60405163783bb6c960e11b8152600490fd5b1561338657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b600a8210156103db5752565b906040516133fa60a082612d15565b825481526001830154602082015260028301546001600160a01b0390811660408301526003840154811660608301526004909301549092166080830152565b91908260809103126102f557604051613453608082612d15565b60608082948051845260208101516020850152604081015160408501520151910152565b909160c0828403126102f557613497825193604060208501519401613439565b90565b906040516134a960c082612d15565b82546001600160a01b039081168252600184015460208301526002840154604083015260038401548116606083015260048401548116608083015260059093015490921660a0830152565b60a09081600180821b03918281511685526020810151602086015260408101516040860152826060820151166060860152826080820151166080860152015116910152565b60e0818303126102f557805192613497602083015193606060408501519401613439565b9060405161356c60e082612d15565b82546001600160a01b0390811682526001840154602083015260028401546040830152600384015460608301526004840154811660808301526005840154811660a083015260069093015490921660c0830152565b60c0908160018060a01b03918281511685526020810151602086015260408101516040860152606081015160608601528260808201511660808601528260a08201511660a0860152015116910152565b94919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260018060a01b031660c08201520152565b95926101009794919a9998959261012088019b8852602088015260408701526060860152608085015260a084015260c083015260018060a01b031660e08201520152565b356001600160a01b03811681036102f55790565b813581556020820135600182015560028101906001600160a01b039061371190608090600490846136db60408901613694565b16956001600160601b0360a01b9687825416179055600381018561370160608a01613694565b1687825416179055019401613694565b1690825416179055565b60001981146110eb5760010190565b8060005260206101938152604060002033600052815260ff6040600020541615613752575050565b6137ee604861328093836137746137df9561376e601433613806565b93613806565b906040519586937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000838601526137b38151809285603789019101613284565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015283519384918785019101613284565b01036028810184520182612d15565b60405162461bcd60e51b8152918291600483016132a7565b60019180831b91906001600160ff1b038116036110eb5760028201928383116110eb5761384b61383585612d4d565b946138436040519687612d15565b808652612d4d565b6020939085850190601f19013682378551156139475760309053845182101561394757607860218601538181018091116110eb57905b8082116138d5575050613892575090565b6064906040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613932578551841015613932576f181899199a1a9b1b9c1cb0b131b232b360811b901a85840185015360041c91801561391d576000190190613881565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0361371160a060058361397687613694565b16946001600160601b03831b9586825416178155602087013560018201556040870135600282015560038101856139af60608a01613694565b1687825416179055600481018561370160808a01613694565b6001600160a01b0361371160c06006836139e187613694565b16946001600160601b0360a01b95868254161781556020870135600182015560408701356002820155606087013560038201556004810185613a2560808a01613694565b1687825416179055600581018561370160a08a01613694565b61025e5461025d548114613a9d576000526102686020526020604060002060405190613a6b604083612d15565b54613a7960ff8216836133df565b60081c91829101526001600160801b0361026954164303904382116110eb57111590565b50600090565b9060009180835261019380602052604084209260018060a01b03169283855260205260ff60408520541615613ad85750505050565b8184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a438808080612dd2565b348103612a805750565b6097546040805163d994d6d560e01b8152336004820152909291602090829060249082906001600160a01b03165afa908115613bdc57600091613bbe575b50159081613b8e575b50613b7e5750565b51631dd1b1b560e21b8152600490fd5b90506000526101936020526001816000200154600052806000203360005260205260ff8160002054161538613b76565b613bd6915060203d8111612645576126378183612d15565b38613b6d565b83513d6000823e3d90fdfebfa5d40ab595fa613b17566ea5e38a5cac79a71f09ce1435246db2e6805816c27d5e686862ec2250829eb6dee4a7cb0834865072f135485c874d3bbbe39bdfdba2646970667358221220bc9b52e63fc7d88807360253eafb506ebc4f269bbac31fac5f319e77a83fe78c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8062c6e88e14612be957806301ffc9a714612b935780630c340a2414612b6a5780631826ebf014612b065780631a0c544014612a9857806324524ea114612a42578063248a9ca314612a125780632b994849146129f35780632d88af4a1461299e5780632f2ff15d1461296557806334975a41146127f357806336568abe1461275f5780633659cfe6146126c65780633bb4b05c146126835780633cbcf4c41461265e5780633f4ba83a14612569578063435c7e37146124df57806347d8496a1461240e5780634981d04e146123675780634b5a9e3d146123335780634b64e492146112e65780634f1ef286146111fc5780635210570c146111d757806352d1902d1461110157806357271f4d146110b45780635c817aa3146110505780635c975abb1461102a5780635e2a6065146110115780635ee1d2bb14610fc7578063681fe70c14610fa35780636827435714610f7b5780636b59c22f14610eaa5780636b76333014610e4657806373e3d08614610e275780637c50b7e414610de35780637e81a82114610d125780638456cb5914610c7c5780638a4737ab14610c1d5780638b20076c14610bbe5780638d7a72f314610b9f5780638e7e818914610b7757806391d1485414610b245780639fd0506d14610af7578063a217fddf14610adb578063ad16c2de14610a6d578063bb4872de14610a4a578063bbe720d9146109d5578063c84d8bb614610904578063caeb12b6146108da578063d547741f146108a1578063db901477146105fb578063dbb0b684146105d9578063e4c0aaf414610593578063e4e1b729146104c2578063e97a4d63146103f1578063fa91a9a5146102fa5763fb8aafb80361000e57346102f55760203660031901126102f557600435600052610262602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b0390f35b600080fd5b60a03660031901126102f55761030e61335e565b610325600080516020613c0883398151915261372a565b61033b61033560026101f7612cfd565b54613b25565b61025d80546040519161034f604084612d15565b60028352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026183526103a7600460406000206136a8565b604051828152600284820152600080516020613be883398151915260403392a26103d1815461371b565b9055604051908152f35b634e487b7160e01b600052602160045260246000fd5b60a03660031901126102f55761040561335e565b61041c600080516020613c0883398151915261372a565b61042c61033560016101f7612cfd565b61025d805460405191610440604084612d15565b60018352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261025f8352610498600460406000206136a8565b604051828152600184820152600080516020613be883398151915260403392a26103d1815461371b565b60e03660031901126102f5576104d661335e565b6104ed600080516020613c0883398151915261372a565b6104fd61033560066101f7612cfd565b61025d805460405191610511604084612d15565b60068352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102648352610569600460406000206139c8565b604051828152600684820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f5576004356001600160a01b038116908190036102f5576105c16132eb565b6001600160601b0360a01b6097541617609755600080f35b346102f55760003660031901126102f55760206102695460801c604051908152f35b346102f5576101a03660031901126102f5576001600160a01b03600435818116908190036102f55760243591821682036102f5576044356001600160801b03928382168092036102f55760643593841684036102f5576101203660831901126102f5576000549260ff8460081c161593848095610894575b801561087d575b156108215761071192600191868360ff1983161760005561080f575b5060ff60005460081c16926106aa8461337f565b6106b38461337f565b6106bc8461337f565b6106c58461337f565b6106ce8461337f565b6001600160601b0360a01b60975416176097556106ea8361337f565b60ca5490620100008360b01b039060101b169061ff018360b01b031916171760ca5561337f565b6101f7608435610722600183612cfd565b5560a435610731600283612cfd565b5560c435610740600383612cfd565b5560e43561074f600483612cfd565b556101043561075f600983612cfd565b556101243561076f600883612cfd565b556101443561077f600783612cfd565b556101643561078f600683612cfd565b5561079f60056101843592612cfd565b55600054926107bc60ff8560081c166107b78161337f565b61337f565b600161022a5560801b6001600160801b03191617610269556107da57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005587610696565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561067a5750600160ff82161461067a565b50600160ff821610610673565b346102f55760403660031901126102f5576004356024356001600160a01b03811681036102f557816108d561001993613b2f565b612da3565b346102f55760003660031901126102f55761025c546040516001600160a01b039091168152602090f35b60c03660031901126102f55761091861335e565b61092f600080516020613c0883398151915261372a565b61093f61033560046101f7612cfd565b61025d805460405191610953604084612d15565b60048352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026283526109ab6004604060002061395d565b604051828152600484820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f5576001600160a01b03600435818116908190036102f557610a046132eb565b61025c8054928316610a385781610019936001600160601b0360a01b16179055600080516020613c08833981519152613aa3565b604051630a646b7760e41b8152600490fd5b346102f55760003660031901126102f557602060ff60ca54166040519015158152f35b346102f55760203660031901126102f5576004803560009081526102616020908152604091829020805460018201546002830154600384015493909601548551928352938201526001600160a01b03948516938101939093528316606083015291909116608082015260a090f35b346102f55760003660031901126102f557602060405160008152f35b346102f55760003660031901126102f55760ca5460405160109190911c6001600160a01b03168152602090f35b346102f55760403660031901126102f5576024356001600160a01b038116908190036102f557600435600052610193602052604060002090600052602052602060ff604060002054166040519015158152f35b346102f55760003660031901126102f55760206001600160801b036102695416604051908152f35b346102f55760003660031901126102f557602061029c54604051908152f35b346102f55760203660031901126102f557600435600052610263602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b346102f55760203660031901126102f557600435600052610260602052604060002060018060a01b036102f181835416916001840154936002810154918060038301541690600581600485015416930154169260405196879687612d69565b346102f55760003660031901126102f557610c9561335e565b60ca54601081901c6001600160a01b03163303610d005760ff811615610cee576101009061ff0019161760ca557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b60405163866099c360e01b8152600490fd5b604051631d77d47760e21b8152600490fd5b60c03660031901126102f557610d2661335e565b610d3d600080516020613c0883398151915261372a565b610d4d61033560036101f7612cfd565b61025d805460405191610d61604084612d15565b60038352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102608352610db96004604060002061395d565b604051828152600384820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f55760043560005261026860205260406000205460ff81169060405190600a8310156103db57604092825260081c6020820152f35b346102f55760003660031901126102f557602061025d54604051908152f35b346102f55760203660031901126102f557600435600052610264602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b60e03660031901126102f557610ebe61335e565b610ed5600080516020613c0883398151915261372a565b610ee561033560076101f7612cfd565b61025d805460405191610ef9604084612d15565b60078352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102658352610f51600460406000206139c8565b604051828152600784820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760003660031901126102f557610f946132eb565b60ca805460ff19166001179055005b346102f55760003660031901126102f557602061025e5461025d5414604051908152f35b346102f55760203660031901126102f5576001600160801b0360043581811681036102f557610ff46132eb565b610269805490921660809190911b6001600160801b031916179055005b346102f55760003660031901126102f557602a61029c55005b346102f55760003660031901126102f557602060ff60ca5460081c166040519015158152f35b346102f55760203660031901126102f557600435600052610266602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b346102f55760003660031901126102f55761029c546110d660016101f7612cfd565b5481018091116110eb57602090604051908152f35b634e487b7160e01b600052601160045260246000fd5b346102f55760003660031901126102f5577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361116c5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b346102f55760003660031901126102f5576111f06132eb565b60ca805460ff19169055005b60403660031901126102f5576001600160a01b0360043581811681036102f55760243567ffffffffffffffff81116102f557366023820112156102f55780600401359161124883612d4d565b916112566040519384612d15565b83835236602485830101116102f55761001994600060208660019760246112d996018389013786010152807f000000000000000000000000000000000000000000000000000000000000000016906112b082301415612e22565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614612e83565b6112e16132eb565b612ee4565b346102f55760203660031901126102f5576004356001600160a01b03811690036102f55761131261335e565b600261022a54146122ee57600261022a5561025e54600061025d5461026954908160801c84018082106000146122e35750909291925b8183106113a4575b505061025e5580611364575b600161022a55005b47811161139d575b6000808080936004355af161137f6131bf565b501561138b578061135c565b604051638f58940960e01b8152600490fd5b504761136c565b9091600090600091816000526102686020526040600020604051906113ca604083612d15565b546113d860ff8216836133df565b60081c8060208301526001600160801b03861643031060001461145d575060009250829050805b611447575b156114405780600191337fb207e6b6b26274f3764b879e578b4539b8e37f41dff43932ddc87b3e04090974600080a30193019190929192611348565b9250611350565b8160005261026860205260006040812055611404565b8051600a8110156103db5760010361161a57505080915060005261025f8060205261148b60406000206133eb565b90826000526020526114b9604060002060046000918281558260018201558260028201558260038201550155565b61025c546040805163235e81cf60e01b81528351600482015260208401516024820152908301516001600160a01b039081166044830152606084015181166064830152608084015181166084830152909160c091839160a4918391600091165af190811561160e576000906000926115ba575b507f5090a820029acae4d47b64da9af62ce04a5a1bdb546934e5fcfe091ee1f780ee9060018060a01b036040850151169261159f86606060018060a01b03818901511697805194805192602082015190604083015192015192608060018060a01b03910151169360405198899889613611565b0390a3600190816115b360016101f7612cfd565b54926113ff565b7f5090a820029acae4d47b64da9af62ce04a5a1bdb546934e5fcfe091ee1f780ee92506115ff915060c03d60c011611607575b6115f78183612d15565b810190613477565b92905061152c565b503d6115ed565b6040513d6000823e3d90fd5b8051600a8110156103db576002036117b45750508091506000526102618060205261164860406000206133eb565b9082600052602052611676604060002060046000918281558260018201558260028201558260038201550155565b61025c546040805163bfe4262160e01b81528351600482015260208401516024820152908301516001600160a01b039081166044830152606084015181166064830152608084015181166084830152909160c091839160a4918391600091165af190811561160e57600090600092611770575b507f7e7043742f69701e6292386d468d710f2d6e44bf93232a1e52f1641e50a9de129060018060a01b036040850151169261175c86606060018060a01b03818901511697805194805192602082015190604083015192015192608060018060a01b03910151169360405198899889613611565b0390a3600190816115b360026101f7612cfd565b7f7e7043742f69701e6292386d468d710f2d6e44bf93232a1e52f1641e50a9de1292506117ac915060c03d60c011611607576115f78183612d15565b9290506116e9565b8051600a8110156103db57600303611911575050809150600052610260806020526117e2604060002061349a565b9082600052602052611816604060002060056000918281558260018201558260028201558260038201558260048201550155565b61025c54604051635a21a61960e11b81529060c090829060c49082906000906001600160a01b031661184b60048401896134f4565b5af190811561160e576000906000926118ed575b50825160608085015160808601516020808801518751918801516040808a0151999096015160a0909a015195516001600160a01b039485169a95851699978516987f125247fdf990b9b419d4b4f895b1bb75bc485e3f8b813cf5557a4a12a56d054d98919788976118d9978f979216959094929089613611565b0390a4600190816115b360036101f7612cfd565b9050611908915060c03d60c011611607576115f78183612d15565b9190508761185f565b8051600a8110156103db57600403611a6e5750508091506000526102628060205261193f604060002061349a565b9082600052602052611973604060002060056000918281558260018201558260028201558260038201558260048201550155565b61025c5460405163ad4e666d60e01b81529060c090829060c49082906000906001600160a01b03166119a860048401896134f4565b5af190811561160e57600090600092611a4a575b50825160608085015160808601516020808801518751918801516040808a0151999096015160a0909a015195516001600160a01b039485169a95851699978516987f625b9fc283a619f53beb817d79b8ab044d60e307fd2af4bb89fa5e9a24ce4ebc9891978897611a36978f979216959094929089613611565b0390a4600190816115b360046101f7612cfd565b9050611a65915060c03d60c011611607576115f78183612d15565b919050876119bc565b8051600a8110156103db57600503611c04575050809150600052600061026380602052611a9d6040832061349a565b90838352602052611acf6040832060056000918281558260018201558260028201558260038201558260048201550155565b61025c5460405163883d21cb60e01b81529260e091849160c4918391906001600160a01b0316611b0260048401886134f4565b5af191821561160e5760008091600094611bab575b507f03e9e02a94d7486426fcf2b05a27e911b8d1b61e2e1dcf103785512f46c847649060018060a01b0384511692611b978760609360018060a01b0385890151169760018060a01b0360808201511699602082015196815160208301519160408401519301519360a0600180821b039101511694604051998a998a613650565b0390a4600190816115b360056101f7612cfd565b90507f03e9e02a94d7486426fcf2b05a27e911b8d1b61e2e1dcf103785512f46c847649350611bf2915060e03d60e011611bfd575b611bea8183612d15565b810190613539565b949192919050611b17565b503d611be0565b8051600a8110156103db57600603611d9357505080915060005261026480602052611c32604060002061355d565b9082600052602052611c6c604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c54604051633631a6bb60e21b81529060e090829060e49082906000906001600160a01b0316611ca160048401896135c1565b5af1801561160e57600091600090600092611d4c575b507f4d33a2f9c4f66a101333f7ca2ab718582e763c941ff6fc304d2d4408d43a82849060018060a01b0385511692611d388760018060a01b036080890151169660018060a01b0360a08a015116986020810151948051602082015190606060408401519301519360c060018060a01b039101511694604051998a998a613650565b0390a4600190816115b360066101f7612cfd565b90507f4d33a2f9c4f66a101333f7ca2ab718582e763c941ff6fc304d2d4408d43a82849250611d8a915060e03d60e011611bfd57611bea8183612d15565b92905092611cb7565b8051600a8110156103db57600703611efb575050809150600052600061026580602052611dc26040832061355d565b90838352602052611dfa6040832060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c546040516312bce9bf60e21b81529260e091849160e4918391906001600160a01b0316611e2d60048401886135c1565b5af191821561160e57600090600093611ed5575b507ff8dcb57698d7067da58ab71c48cd2e3b329b69e7e9853f88630c2c69c2557c7860018060a01b038351169160018060a01b0360808501511693611ec18760018060a01b0360a084015116976020840151938151916020810151606060408301519201519260c060018060a01b03910151169360405198899889613611565b0390a4600190816115b360076101f7612cfd565b9050611ef191925060e03d60e011611bfd57611bea8183612d15565b9392505087611e41565b8051600a8110156103db57600803612063575050809150600052600061026680602052611f2a6040832061355d565b90838352602052611f626040832060066000918281558260018201558260028201558260038201558260048201558260058201550155565b61025c54604051635e272ad960e11b81529260e091849160e4918391906001600160a01b0316611f9560048401886135c1565b5af191821561160e5760009060009361203d575b507f8ab42044ce8b230e021e5542eb53688d77443e50ee84cda7917f6bdd833c697f60018060a01b038351169160018060a01b03608085015116936120298760018060a01b0360a084015116976020840151938151916020810151606060408301519201519260c060018060a01b03910151169360405198899889613611565b0390a4600190816115b360086101f7612cfd565b905061205991925060e03d60e011611bfd57611bea8183612d15565b9392505087611fa9565b51600a8110156103db5760091461207b575b806113ff565b508091506000526102676020526000604081206040519061209e61010083612d15565b60018060a01b03815416825260018060a01b03600182015416602083015260028101546040830152600381015460608301526004810154608083015260018060a01b0360058201541660a083015260018060a01b0360068201541660c0830152600760018060a01b039101541660e082015282825261026760205281600760408220828155826001820155826002820155826003820155826004820155826005820155826006820155015560e060018060a01b0361025c54166101046040518095819363391bf6cf861b835260018060a01b03875116600484015260018060a01b03602088015116602484015260408701516044840152606087015160648401526080870151608484015260018060a01b0360a08801511660a484015260018060a01b0360c08801511660c484015260018060a01b03868801511660e48401525af191821561160e576000906000936122bd575b507ff86f4487d2c5541b78f06d2368e28e0f4052e182124def54d5855bf2a01d325861012060018060a01b038451169260018060a01b036020860151169060018060a01b0360a0870151169560018060a01b0360c082015116976040820151928151602083015191606060408501519401519460e060018060a01b039101511695604051978852602088015260408701526060860152608085015260a084015260c083015260e082015286610100820152a4600190816122b560096101f7612cfd565b549250612075565b90506122d991925060e03d60e011611bfd57611bea8183612d15565b93925050876121f2565b905090929192611348565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346102f55760203660031901126102f557600435600a8110156102f55761235e6020916101f7612cfd565b54604051908152f35b346102f5576101203660031901126102f5576123816132eb565b6101f7600435612392600183612cfd565b556024356123a1600283612cfd565b556044356123b0600383612cfd565b556064356123bf600483612cfd565b556084356123ce600983612cfd565b5560a4356123dd600883612cfd565b5560c4356123ec600783612cfd565b5560e4356123fb600683612cfd565b5561240b60056101043592612cfd565b55005b60c03660031901126102f55761242261335e565b612439600080516020613c0883398151915261372a565b61244961033560056101f7612cfd565b61025d80546040519161245d604084612d15565b60058352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b1691161790558160005261026383526124b56004604060002061395d565b604051828152600584820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760203660031901126102f557600435600052610267602052610100604060002060018060a01b03808254169181600182015416916002820154600383015460048401549183600586015416936007816006880154169601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b346102f55760003660031901126102f55760ca5460ff8160081c161561264c5760018060a01b03808260101c1633141590816125e2575b50610d005760ff811615610cee5761ff00191660ca557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60975460405163d994d6d560e01b8152336004820152925060209183916024918391165afa90811561160e5760009161261e575b5015826125a0565b61263f915060203d8111612645575b6126378183612d15565b8101906132d3565b82612616565b503d61262d565b604051637c7fd07960e01b8152600490fd5b346102f55760003660031901126102f5576020612679613a3e565b6040519015158152f35b346102f55760203660031901126102f5576004356001600160801b0381168091036102f5576126b06132eb565b61026980546001600160801b0319169091179055005b346102f55760203660031901126102f5576004356001600160a01b0380821682036102f55761001991612725826000937f000000000000000000000000000000000000000000000000000000000000000016906112b082301415612e22565b61272d6132eb565b61273682612d4d565b906127446040519283612d15565b828252601f1961275384612d4d565b01366020840137612ee4565b346102f55760403660031901126102f5576024356001600160a01b0381168082036102f55733036127965761001990600435612da3565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b6101003660031901126102f55761280861335e565b61281f600080516020613c0883398151915261372a565b61282f61033560096101f7612cfd565b61025d8054604051612842604082612d15565b600981526020810160018060f81b0343168152826000526102686020526040600020915190600a8210156103db575160ff9190911660089190911b60ff19161790556000818152610267602052604090206001600160a01b036004358181169492908590036102f5576001600160601b0360a01b9485825416178155600181016024358381168091036102f557868254161790556044356002820155606435600382015560843560048201556005810160a4358381168091036102f55786825416179055600681019060c435918383168093036102f55760079287825416179055019060e4359081168091036102f557602094825416179055604051828152600984820152600080516020613be883398151915260403392a26103d1815461371b565b346102f55760403660031901126102f5576004356024356001600160a01b03811681036102f5578161299961001993613b2f565b613aa3565b346102f55760203660031901126102f5576004356001600160a01b03811681036102f5576129ca6132eb565b60ca805462010000600160b01b03191660109290921b62010000600160b01b0316919091179055005b346102f55760003660031901126102f557602061025e54604051908152f35b346102f55760203660031901126102f5576004356000526101936020526020600160406000200154604051908152f35b346102f55760403660031901126102f557600435600a8110156102f557612a6b906101f7612cfd565b546024358111612a8057602090604051908152f35b6024906040519063049e6f6960e41b82526004820152fd5b346102f55760203660031901126102f55760048035600090815261025f6020908152604091829020805460018201546002830154600384015493909601548551928352938201526001600160a01b03948516938101939093528316606083015291909116608082015260a090f35b346102f55760203660031901126102f557600435600052610265602052604060002060018060a01b036102f1818354169160018401549360028101549160038201548160048401541691600681600586015416940154169360405197889788612cba565b346102f55760003660031901126102f5576097546040516001600160a01b039091168152602090f35b346102f55760203660031901126102f55760043563ffffffff60e01b81168091036102f557602090637965db0b60e01b8114908115612bd8575b506040519015158152f35b6301ffc9a760e01b14905082612bcd565b60e03660031901126102f557612bfd61335e565b612c14600080516020613c0883398151915261372a565b612c2461033560086101f7612cfd565b61025d805460405191612c38604084612d15565b60088352602083019260018060f81b03431684528260005261026860205260406000209051600a8110156103db5760ff6020958119905160081b169116179055816000526102668352612c90600460406000206139c8565b604051828152600884820152600080516020613be883398151915260403392a26103d1815461371b565b6001600160a01b039182168152602081019290925260408201929092526060810192909252918216608082015291811660a083015290911660c082015260e00190565b90600a8110156103db57600052602052604060002090565b90601f8019910116810190811067ffffffffffffffff821117612d3757604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111612d3757601f01601f191660200190565b6001600160a01b0391821681526020810192909252604082019290925291811660608301529182166080820152911660a082015260c00190565b9060009180835261019380602052604084209260018060a01b03169283855260205260ff604085205416612dd8575b50505050565b818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a438808080612dd2565b15612e2957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612e8a57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b9060ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612f1e5750612f1c915061311d565b565b6040516352d1902d60e01b8152602093919291906001600160a01b038316908581600481855afa600091816130eb575b50612faf5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9394937fc9f76b5ec45e5cdef99837d7b6d2467235c1df8933c8ca56df5c35afa2c7d4440161309457612fe18361311d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28351159081159161308c575b5061301c57505050565b6000806130899461302d6027612d4d565b9461303b6040519687612d15565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c81870152660819985a5b195960ca1b604087015281519101845af46130836131bf565b916131ef565b50565b905038613012565b60405162461bcd60e51b815260048101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b90918782813d8311613116575b6131028183612d15565b810103126131135750519038612f4e565b80fd5b503d6130f8565b803b15613164577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b3d156131ea573d906131d082612d4d565b916131de6040519384612d15565b82523d6000602084013e565b606090565b919290156132515750815115613203575090565b3b1561320c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156132645750805190602001fd5b60405162461bcd60e51b815290819061328090600483016132a7565b0390fd5b60005b8381106132975750506000910152565b8181015183820152602001613287565b604091602082526132c78151809281602086015260208686019101613284565b601f01601f1916010190565b908160209103126102f5575180151581036102f55790565b60975460405163d994d6d560e01b815233600482015290602090829060249082906001600160a01b03165afa90811561160e57600091613340575b501561332e57565b604051631dd1b1b560e21b8152600490fd5b613358915060203d8111612645576126378183612d15565b38613326565b60ff60ca5460081c1661336d57565b60405163783bb6c960e11b8152600490fd5b1561338657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b600a8210156103db5752565b906040516133fa60a082612d15565b825481526001830154602082015260028301546001600160a01b0390811660408301526003840154811660608301526004909301549092166080830152565b91908260809103126102f557604051613453608082612d15565b60608082948051845260208101516020850152604081015160408501520151910152565b909160c0828403126102f557613497825193604060208501519401613439565b90565b906040516134a960c082612d15565b82546001600160a01b039081168252600184015460208301526002840154604083015260038401548116606083015260048401548116608083015260059093015490921660a0830152565b60a09081600180821b03918281511685526020810151602086015260408101516040860152826060820151166060860152826080820151166080860152015116910152565b60e0818303126102f557805192613497602083015193606060408501519401613439565b9060405161356c60e082612d15565b82546001600160a01b0390811682526001840154602083015260028401546040830152600384015460608301526004840154811660808301526005840154811660a083015260069093015490921660c0830152565b60c0908160018060a01b03918281511685526020810151602086015260408101516040860152606081015160608601528260808201511660808601528260a08201511660a0860152015116910152565b94919260e0969399989794919961010087019a8752602087015260408601526060850152608084015260a083015260018060a01b031660c08201520152565b95926101009794919a9998959261012088019b8852602088015260408701526060860152608085015260a084015260c083015260018060a01b031660e08201520152565b356001600160a01b03811681036102f55790565b813581556020820135600182015560028101906001600160a01b039061371190608090600490846136db60408901613694565b16956001600160601b0360a01b9687825416179055600381018561370160608a01613694565b1687825416179055019401613694565b1690825416179055565b60001981146110eb5760010190565b8060005260206101938152604060002033600052815260ff6040600020541615613752575050565b6137ee604861328093836137746137df9561376e601433613806565b93613806565b906040519586937f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000838601526137b38151809285603789019101613284565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015283519384918785019101613284565b01036028810184520182612d15565b60405162461bcd60e51b8152918291600483016132a7565b60019180831b91906001600160ff1b038116036110eb5760028201928383116110eb5761384b61383585612d4d565b946138436040519687612d15565b808652612d4d565b6020939085850190601f19013682378551156139475760309053845182101561394757607860218601538181018091116110eb57905b8082116138d5575050613892575090565b6064906040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613932578551841015613932576f181899199a1a9b1b9c1cb0b131b232b360811b901a85840185015360041c91801561391d576000190190613881565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0361371160a060058361397687613694565b16946001600160601b03831b9586825416178155602087013560018201556040870135600282015560038101856139af60608a01613694565b1687825416179055600481018561370160808a01613694565b6001600160a01b0361371160c06006836139e187613694565b16946001600160601b0360a01b95868254161781556020870135600182015560408701356002820155606087013560038201556004810185613a2560808a01613694565b1687825416179055600581018561370160a08a01613694565b61025e5461025d548114613a9d576000526102686020526020604060002060405190613a6b604083612d15565b54613a7960ff8216836133df565b60081c91829101526001600160801b0361026954164303904382116110eb57111590565b50600090565b9060009180835261019380602052604084209260018060a01b03169283855260205260ff60408520541615613ad85750505050565b8184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a438808080612dd2565b348103612a805750565b6097546040805163d994d6d560e01b8152336004820152909291602090829060249082906001600160a01b03165afa908115613bdc57600091613bbe575b50159081613b8e575b50613b7e5750565b51631dd1b1b560e21b8152600490fd5b90506000526101936020526001816000200154600052806000203360005260205260ff8160002054161538613b76565b613bd6915060203d8111612645576126378183612d15565b38613b6d565b83513d6000823e3d90fdfebfa5d40ab595fa613b17566ea5e38a5cac79a71f09ce1435246db2e6805816c27d5e686862ec2250829eb6dee4a7cb0834865072f135485c874d3bbbe39bdfdba2646970667358221220bc9b52e63fc7d88807360253eafb506ebc4f269bbac31fac5f319e77a83fe78c64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Intended to allow Deferral testing using behaviors, including error tests",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "changeGovernor(address)": {
        "params": {
          "newGovernor_": "New governor address"
        }
      },
      "execute(address)": {
        "details": "does not revert on Operation failure, throws Process and Error events according to the Oper type and result"
      },
      "getAndVerifyExecFee(uint8,uint256)": {
        "details": "only used for coinbase flavor",
        "params": {
          "operType_": "operation type registered",
          "value_": "value sent to pay execution fee"
        },
        "returns": {
          "currentExecFee": "execution fee required for the operation"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role  OR   the caller must have be an authorized Governance changer. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "makeStoppable()": {
        "details": "Should be called through governance"
      },
      "makeUnstoppable()": {
        "details": "Should be called through governance"
      },
      "pause()": {
        "details": "Should only be called by the pauser and when it is stoppable"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "queueMintTC((uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueMintTCandTP((address,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueMintTP((address,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueRedeemTC((uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueRedeemTP((address,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))": {
        "returns": {
          "operId": "Identifier to track the Operation lifecycle"
        }
      },
      "registerBucket(address)": {
        "details": "in order to operate, the queue needs to be whitelisted as ENQUEUER_ROLE on the bucket as well",
        "params": {
          "bucket_": "address of the mocOperations implementation to interact with May emit a {RoleGranted} event for ENQUEUER role"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role  OR   the caller must have be an authorized Governance changer. May emit a {RoleRevoked} event."
      },
      "setMaxOperPerBatch(uint128)": {
        "params": {
          "maxOperPerBatch_": "maximum amount of operations allowed on a batch to avoid going over the block gas limit"
        }
      },
      "setMinOperWaitingBlk(uint128)": {
        "params": {
          "minOperWaitingBlk_": "minimum amount of blocks an operation needs to remain in the queue before it can be executed"
        }
      },
      "setPauser(address)": {
        "details": "Should be called through governance",
        "params": {
          "newPauser_": "Address of the new pauser"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Should only be called by the pauser and when it is stoppable"
      },
      "updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "details": "When the changer is executed there could be pending operations on the queue, thats means that  users have already paid for those operations, so, two situations could occur:  1. If execution fees are decreased, the executor will receive all the new fees and the       remaining funds will stay in this contract  2. If execution fees are increased, the executor will receive less fees, unless this contract has funds       remaining from another execution fee update (1.) or previously sent by another address",
        "params": {
          "mocQueueExecFeesParams_": "new execution fees"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "MocQueueMock: Allows Deferral execution without error handling",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xE1 JUMPI ADDRESS PUSH1 0x80 MSTORE PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH3 0x8F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH3 0x53 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C5D SWAP1 DUP2 PUSH3 0xE7 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x1114 ADD MSTORE DUP2 DUP2 PUSH2 0x1283 ADD MSTORE PUSH2 0x26F8 ADD MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH3 0x2C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xC6E88E EQ PUSH2 0x2BE9 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2B93 JUMPI DUP1 PUSH4 0xC340A24 EQ PUSH2 0x2B6A JUMPI DUP1 PUSH4 0x1826EBF0 EQ PUSH2 0x2B06 JUMPI DUP1 PUSH4 0x1A0C5440 EQ PUSH2 0x2A98 JUMPI DUP1 PUSH4 0x24524EA1 EQ PUSH2 0x2A42 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2A12 JUMPI DUP1 PUSH4 0x2B994849 EQ PUSH2 0x29F3 JUMPI DUP1 PUSH4 0x2D88AF4A EQ PUSH2 0x299E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2965 JUMPI DUP1 PUSH4 0x34975A41 EQ PUSH2 0x27F3 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x275F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x26C6 JUMPI DUP1 PUSH4 0x3BB4B05C EQ PUSH2 0x2683 JUMPI DUP1 PUSH4 0x3CBCF4C4 EQ PUSH2 0x265E JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2569 JUMPI DUP1 PUSH4 0x435C7E37 EQ PUSH2 0x24DF JUMPI DUP1 PUSH4 0x47D8496A EQ PUSH2 0x240E JUMPI DUP1 PUSH4 0x4981D04E EQ PUSH2 0x2367 JUMPI DUP1 PUSH4 0x4B5A9E3D EQ PUSH2 0x2333 JUMPI DUP1 PUSH4 0x4B64E492 EQ PUSH2 0x12E6 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x11FC JUMPI DUP1 PUSH4 0x5210570C EQ PUSH2 0x11D7 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1101 JUMPI DUP1 PUSH4 0x57271F4D EQ PUSH2 0x10B4 JUMPI DUP1 PUSH4 0x5C817AA3 EQ PUSH2 0x1050 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x102A JUMPI DUP1 PUSH4 0x5E2A6065 EQ PUSH2 0x1011 JUMPI DUP1 PUSH4 0x5EE1D2BB EQ PUSH2 0xFC7 JUMPI DUP1 PUSH4 0x681FE70C EQ PUSH2 0xFA3 JUMPI DUP1 PUSH4 0x68274357 EQ PUSH2 0xF7B JUMPI DUP1 PUSH4 0x6B59C22F EQ PUSH2 0xEAA JUMPI DUP1 PUSH4 0x6B763330 EQ PUSH2 0xE46 JUMPI DUP1 PUSH4 0x73E3D086 EQ PUSH2 0xE27 JUMPI DUP1 PUSH4 0x7C50B7E4 EQ PUSH2 0xDE3 JUMPI DUP1 PUSH4 0x7E81A821 EQ PUSH2 0xD12 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xC7C JUMPI DUP1 PUSH4 0x8A4737AB EQ PUSH2 0xC1D JUMPI DUP1 PUSH4 0x8B20076C EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0x8D7A72F3 EQ PUSH2 0xB9F JUMPI DUP1 PUSH4 0x8E7E8189 EQ PUSH2 0xB77 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xB24 JUMPI DUP1 PUSH4 0x9FD0506D EQ PUSH2 0xAF7 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xADB JUMPI DUP1 PUSH4 0xAD16C2DE EQ PUSH2 0xA6D JUMPI DUP1 PUSH4 0xBB4872DE EQ PUSH2 0xA4A JUMPI DUP1 PUSH4 0xBBE720D9 EQ PUSH2 0x9D5 JUMPI DUP1 PUSH4 0xC84D8BB6 EQ PUSH2 0x904 JUMPI DUP1 PUSH4 0xCAEB12B6 EQ PUSH2 0x8DA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x8A1 JUMPI DUP1 PUSH4 0xDB901477 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xDBB0B684 EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xE4C0AAF4 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0xE4E1B729 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xE97A4D63 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xFA91A9A5 EQ PUSH2 0x2FA JUMPI PUSH4 0xFB8AAFB8 SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x262 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x30E PUSH2 0x335E JUMP JUMPDEST PUSH2 0x325 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x33B PUSH2 0x335 PUSH1 0x2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH2 0x3B25 JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34F PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x261 DUP4 MSTORE PUSH2 0x3A7 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x2 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x405 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x41C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x42C PUSH2 0x335 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x440 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x25F DUP4 MSTORE PUSH2 0x498 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x4D6 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x4ED PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x4FD PUSH2 0x335 PUSH1 0x6 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x511 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x6 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x264 DUP4 MSTORE PUSH2 0x569 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x6 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0x5C1 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x269 SLOAD PUSH1 0x80 SHR PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH2 0x1A0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x2F5 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 DUP4 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x2F5 JUMPI PUSH1 0x64 CALLDATALOAD SWAP4 DUP5 AND DUP5 SUB PUSH2 0x2F5 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x83 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x0 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND ISZERO SWAP4 DUP5 DUP1 SWAP6 PUSH2 0x894 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x87D JUMPI JUMPDEST ISZERO PUSH2 0x821 JUMPI PUSH2 0x711 SWAP3 PUSH1 0x1 SWAP2 DUP7 DUP4 PUSH1 0xFF NOT DUP4 AND OR PUSH1 0x0 SSTORE PUSH2 0x80F JUMPI JUMPDEST POP PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND SWAP3 PUSH2 0x6AA DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6B3 DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6BC DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6C5 DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6CE DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH2 0x6EA DUP4 PUSH2 0x337F JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 PUSH3 0x10000 DUP4 PUSH1 0xB0 SHL SUB SWAP1 PUSH1 0x10 SHL AND SWAP1 PUSH2 0xFF01 DUP4 PUSH1 0xB0 SHL SUB NOT AND OR OR PUSH1 0xCA SSTORE PUSH2 0x337F JUMP JUMPDEST PUSH2 0x1F7 PUSH1 0x84 CALLDATALOAD PUSH2 0x722 PUSH1 0x1 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x731 PUSH1 0x2 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x740 PUSH1 0x3 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x74F PUSH1 0x4 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x104 CALLDATALOAD PUSH2 0x75F PUSH1 0x9 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x76F PUSH1 0x8 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x144 CALLDATALOAD PUSH2 0x77F PUSH1 0x7 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x164 CALLDATALOAD PUSH2 0x78F PUSH1 0x6 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x79F PUSH1 0x5 PUSH2 0x184 CALLDATALOAD SWAP3 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x0 SLOAD SWAP3 PUSH2 0x7BC PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND PUSH2 0x7B7 DUP2 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x337F JUMP JUMPDEST PUSH1 0x1 PUSH2 0x22A SSTORE PUSH1 0x80 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND OR PUSH2 0x269 SSTORE PUSH2 0x7DA JUMPI STOP JUMPDEST PUSH2 0xFF00 NOT AND PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR PUSH1 0x0 SSTORE DUP8 PUSH2 0x696 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67A JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x67A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x673 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI DUP2 PUSH2 0x8D5 PUSH2 0x19 SWAP4 PUSH2 0x3B2F JUMP JUMPDEST PUSH2 0x2DA3 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x918 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x92F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x93F PUSH2 0x335 PUSH1 0x4 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x953 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x4 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x262 DUP4 MSTORE PUSH2 0x9AB PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x4 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0xA04 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x25C DUP1 SLOAD SWAP3 DUP4 AND PUSH2 0xA38 JUMPI DUP2 PUSH2 0x19 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x3AA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA646B77 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x261 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP4 SWAP1 SWAP7 ADD SLOAD DUP6 MLOAD SWAP3 DUP4 MSTORE SWAP4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH2 0x269 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x29C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x263 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x260 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xC95 PUSH2 0x335E JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xD00 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xCEE JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xD26 PUSH2 0x335E JUMP JUMPDEST PUSH2 0xD3D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0xD4D PUSH2 0x335 PUSH1 0x3 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xD61 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x260 DUP4 MSTORE PUSH2 0xDB9 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x3 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0xA DUP4 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x40 SWAP3 DUP3 MSTORE PUSH1 0x8 SHR PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x264 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xEBE PUSH2 0x335E JUMP JUMPDEST PUSH2 0xED5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0xEE5 PUSH2 0x335 PUSH1 0x7 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xEF9 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x265 DUP4 MSTORE PUSH2 0xF51 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x7 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xF94 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25E SLOAD PUSH2 0x25D SLOAD EQ PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0xFF4 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x269 DUP1 SLOAD SWAP1 SWAP3 AND PUSH1 0x80 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x2A PUSH2 0x29C SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x266 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x29C SLOAD PUSH2 0x10D6 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD DUP2 ADD DUP1 SWAP2 GT PUSH2 0x10EB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x116C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x11F0 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE STOP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F5 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x2F5 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x1248 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 PUSH2 0x1256 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2D15 JUMP JUMPDEST DUP4 DUP4 MSTORE CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x2F5 JUMPI PUSH2 0x19 SWAP5 PUSH1 0x0 PUSH1 0x20 DUP7 PUSH1 0x1 SWAP8 PUSH1 0x24 PUSH2 0x12D9 SWAP7 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x12B0 DUP3 ADDRESS EQ ISZERO PUSH2 0x2E22 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x2E83 JUMP JUMPDEST PUSH2 0x12E1 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x2EE4 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0x1312 PUSH2 0x335E JUMP JUMPDEST PUSH1 0x2 PUSH2 0x22A SLOAD EQ PUSH2 0x22EE JUMPI PUSH1 0x2 PUSH2 0x22A SSTORE PUSH2 0x25E SLOAD PUSH1 0x0 PUSH2 0x25D SLOAD PUSH2 0x269 SLOAD SWAP1 DUP2 PUSH1 0x80 SHR DUP5 ADD DUP1 DUP3 LT PUSH1 0x0 EQ PUSH2 0x22E3 JUMPI POP SWAP1 SWAP3 SWAP2 SWAP3 JUMPDEST DUP2 DUP4 LT PUSH2 0x13A4 JUMPI JUMPDEST POP POP PUSH2 0x25E SSTORE DUP1 PUSH2 0x1364 JUMPI JUMPDEST PUSH1 0x1 PUSH2 0x22A SSTORE STOP JUMPDEST SELFBALANCE DUP2 GT PUSH2 0x139D JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 SWAP4 PUSH1 0x4 CALLDATALOAD GAS CALL PUSH2 0x137F PUSH2 0x31BF JUMP JUMPDEST POP ISZERO PUSH2 0x138B JUMPI DUP1 PUSH2 0x135C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8F589409 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x136C JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13CA PUSH1 0x40 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SLOAD PUSH2 0x13D8 PUSH1 0xFF DUP3 AND DUP4 PUSH2 0x33DF JUMP JUMPDEST PUSH1 0x8 SHR DUP1 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP7 AND NUMBER SUB LT PUSH1 0x0 EQ PUSH2 0x145D JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP1 POP DUP1 JUMPDEST PUSH2 0x1447 JUMPI JUMPDEST ISZERO PUSH2 0x1440 JUMPI DUP1 PUSH1 0x1 SWAP2 CALLER PUSH32 0xB207E6B6B26274F3764B879E578B4539B8E37F41DFF43932DDC87B3E04090974 PUSH1 0x0 DUP1 LOG3 ADD SWAP4 ADD SWAP2 SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1348 JUMP JUMPDEST SWAP3 POP PUSH2 0x1350 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1404 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x1 SUB PUSH2 0x161A JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x25F DUP1 PUSH1 0x20 MSTORE PUSH2 0x148B PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x33EB JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x14B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x4 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x235E81CF PUSH1 0xE0 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD DUP2 AND PUSH1 0x84 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xC0 SWAP2 DUP4 SWAP2 PUSH1 0xA4 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x15BA JUMPI JUMPDEST POP PUSH32 0x5090A820029ACAE4D47B64DA9AF62CE04A5A1BDB546934E5FCFE091EE1F780EE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 ADD MLOAD AND SWAP3 PUSH2 0x159F DUP7 PUSH1 0x60 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 DUP10 ADD MLOAD AND SWAP8 DUP1 MLOAD SWAP5 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x80 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD SWAP3 PUSH2 0x13FF JUMP JUMPDEST PUSH32 0x5090A820029ACAE4D47B64DA9AF62CE04A5A1BDB546934E5FCFE091EE1F780EE SWAP3 POP PUSH2 0x15FF SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI JUMPDEST PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3477 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x152C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x15ED JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x2 SUB PUSH2 0x17B4 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x261 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1648 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x33EB JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1676 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x4 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xBFE42621 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD DUP2 AND PUSH1 0x84 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xC0 SWAP2 DUP4 SWAP2 PUSH1 0xA4 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1770 JUMPI JUMPDEST POP PUSH32 0x7E7043742F69701E6292386D468D710F2D6E44BF93232A1E52F1641E50A9DE12 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 ADD MLOAD AND SWAP3 PUSH2 0x175C DUP7 PUSH1 0x60 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 DUP10 ADD MLOAD AND SWAP8 DUP1 MLOAD SWAP5 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x80 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH32 0x7E7043742F69701E6292386D468D710F2D6E44BF93232A1E52F1641E50A9DE12 SWAP3 POP PUSH2 0x17AC SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x16E9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x3 SUB PUSH2 0x1911 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x260 DUP1 PUSH1 0x20 MSTORE PUSH2 0x17E2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1816 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x5A21A619 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0xC0 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x184B PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x18ED JUMPI JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x20 DUP1 DUP9 ADD MLOAD DUP8 MLOAD SWAP2 DUP9 ADD MLOAD PUSH1 0x40 DUP1 DUP11 ADD MLOAD SWAP10 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 SWAP1 SWAP11 ADD MLOAD SWAP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP11 SWAP6 DUP6 AND SWAP10 SWAP8 DUP6 AND SWAP9 PUSH32 0x125247FDF990B9B419D4B4F895B1BB75BC485E3F8B813CF5557A4A12A56D054D SWAP9 SWAP2 SWAP8 DUP9 SWAP8 PUSH2 0x18D9 SWAP8 DUP16 SWAP8 SWAP3 AND SWAP6 SWAP1 SWAP5 SWAP3 SWAP1 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x3 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1908 SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP2 SWAP1 POP DUP8 PUSH2 0x185F JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x4 SUB PUSH2 0x1A6E JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x262 DUP1 PUSH1 0x20 MSTORE PUSH2 0x193F PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1973 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0xAD4E666D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0xC0 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19A8 PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1A4A JUMPI JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x20 DUP1 DUP9 ADD MLOAD DUP8 MLOAD SWAP2 DUP9 ADD MLOAD PUSH1 0x40 DUP1 DUP11 ADD MLOAD SWAP10 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 SWAP1 SWAP11 ADD MLOAD SWAP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP11 SWAP6 DUP6 AND SWAP10 SWAP8 DUP6 AND SWAP9 PUSH32 0x625B9FC283A619F53BEB817D79B8AB044D60E307FD2AF4BB89FA5E9A24CE4EBC SWAP9 SWAP2 SWAP8 DUP9 SWAP8 PUSH2 0x1A36 SWAP8 DUP16 SWAP8 SWAP3 AND SWAP6 SWAP1 SWAP5 SWAP3 SWAP1 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x4 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1A65 SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP2 SWAP1 POP DUP8 PUSH2 0x19BC JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x5 SUB PUSH2 0x1C04 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x263 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1A9D PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1ACF PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x883D21CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xC4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B02 PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0x1BAB JUMPI JUMPDEST POP PUSH32 0x3E9E02A94D7486426FCF2B05A27E911B8D1B61E2E1DCF103785512F46C84764 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND SWAP3 PUSH2 0x1B97 DUP8 PUSH1 0x60 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP10 ADD MLOAD AND SWAP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP3 ADD MLOAD AND SWAP10 PUSH1 0x20 DUP3 ADD MLOAD SWAP7 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0xA0 PUSH1 0x1 DUP1 DUP3 SHL SUB SWAP2 ADD MLOAD AND SWAP5 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP10 DUP11 PUSH2 0x3650 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x5 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH32 0x3E9E02A94D7486426FCF2B05A27E911B8D1B61E2E1DCF103785512F46C84764 SWAP4 POP PUSH2 0x1BF2 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI JUMPDEST PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3539 JUMP JUMPDEST SWAP5 SWAP2 SWAP3 SWAP2 SWAP1 POP PUSH2 0x1B17 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BE0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x6 SUB PUSH2 0x1D93 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x264 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1C32 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1C6C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x3631A6BB PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 PUSH1 0xE0 SWAP1 DUP3 SWAP1 PUSH1 0xE4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CA1 PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL DUP1 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1D4C JUMPI JUMPDEST POP PUSH32 0x4D33A2F9C4F66A101333F7CA2AB718582E763C941FF6FC304D2D4408D43A8284 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 MLOAD AND SWAP3 PUSH2 0x1D38 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP10 ADD MLOAD AND SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP11 ADD MLOAD AND SWAP9 PUSH1 0x20 DUP2 ADD MLOAD SWAP5 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP5 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP10 DUP11 PUSH2 0x3650 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x6 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH32 0x4D33A2F9C4F66A101333F7CA2AB718582E763C941FF6FC304D2D4408D43A8284 SWAP3 POP PUSH2 0x1D8A SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP3 SWAP1 POP SWAP3 PUSH2 0x1CB7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x7 SUB PUSH2 0x1EFB JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x265 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1DC2 PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1DFA PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x12BCE9BF PUSH1 0xE2 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xE4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E2D PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x1ED5 JUMPI JUMPDEST POP PUSH32 0xF8DCB57698D7067DA58AB71C48CD2E3B329B69E7E9853F88630C2C69C2557C78 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND SWAP4 PUSH2 0x1EC1 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP5 ADD MLOAD AND SWAP8 PUSH1 0x20 DUP5 ADD MLOAD SWAP4 DUP2 MLOAD SWAP2 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x7 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF1 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x1E41 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x8 SUB PUSH2 0x2063 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x266 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1F2A PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1F62 PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x5E272AD9 PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xE4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F95 PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x203D JUMPI JUMPDEST POP PUSH32 0x8AB42044CE8B230E021E5542EB53688D77443E50EE84CDA7917F6BDD833C697F PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND SWAP4 PUSH2 0x2029 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP5 ADD MLOAD AND SWAP8 PUSH1 0x20 DUP5 ADD MLOAD SWAP4 DUP2 MLOAD SWAP2 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x8 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x2059 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x1FA9 JUMP JUMPDEST MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x9 EQ PUSH2 0x207B JUMPI JUMPDEST DUP1 PUSH2 0x13FF JUMP JUMPDEST POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x209E PUSH2 0x100 DUP4 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 SLOAD AND DUP3 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x5 DUP3 ADD SLOAD AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 DUP3 ADD SLOAD AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD SLOAD AND PUSH1 0xE0 DUP3 ADD MSTORE DUP3 DUP3 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE DUP2 PUSH1 0x7 PUSH1 0x40 DUP3 KECCAK256 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE DUP3 PUSH1 0x6 DUP3 ADD SSTORE ADD SSTORE PUSH1 0xE0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x25C SLOAD AND PUSH2 0x104 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x391BF6CF DUP7 SHL DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 MLOAD AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP9 ADD MLOAD AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP9 ADD MLOAD AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP9 ADD MLOAD AND PUSH1 0xC4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 DUP9 ADD MLOAD AND PUSH1 0xE4 DUP5 ADD MSTORE GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x22BD JUMPI JUMPDEST POP PUSH32 0xF86F4487D2C5541B78F06D2368E28E0F4052E182124DEF54D5855BF2A01D3258 PUSH2 0x120 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP7 ADD MLOAD AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP8 ADD MLOAD AND SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP3 ADD MLOAD AND SWAP8 PUSH1 0x40 DUP3 ADD MLOAD SWAP3 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 PUSH1 0x60 PUSH1 0x40 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH1 0xE0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE DUP7 PUSH2 0x100 DUP3 ADD MSTORE LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x22B5 PUSH1 0x9 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD SWAP3 POP PUSH2 0x2075 JUMP JUMPDEST SWAP1 POP PUSH2 0x22D9 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x21F2 JUMP JUMPDEST SWAP1 POP SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1348 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH2 0x235E PUSH1 0x20 SWAP2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2381 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x1F7 PUSH1 0x4 CALLDATALOAD PUSH2 0x2392 PUSH1 0x1 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0x23A1 PUSH1 0x2 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x44 CALLDATALOAD PUSH2 0x23B0 PUSH1 0x3 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x64 CALLDATALOAD PUSH2 0x23BF PUSH1 0x4 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x84 CALLDATALOAD PUSH2 0x23CE PUSH1 0x9 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x23DD PUSH1 0x8 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x23EC PUSH1 0x7 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x23FB PUSH1 0x6 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x240B PUSH1 0x5 PUSH2 0x104 CALLDATALOAD SWAP3 PUSH2 0x2CFD JUMP JUMPDEST SSTORE STOP JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2422 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x2439 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x2449 PUSH2 0x335 PUSH1 0x5 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x245D PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x5 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x263 DUP4 MSTORE PUSH2 0x24B5 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x5 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH2 0x100 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 SLOAD AND SWAP2 DUP2 PUSH1 0x1 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD SWAP2 DUP4 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP4 PUSH1 0x7 DUP2 PUSH1 0x6 DUP9 ADD SLOAD AND SWAP7 ADD SLOAD AND SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x264C JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 PUSH1 0x10 SHR AND CALLER EQ ISZERO SWAP1 DUP2 PUSH2 0x25E2 JUMPI JUMPDEST POP PUSH2 0xD00 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xCEE JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x261E JUMPI JUMPDEST POP ISZERO DUP3 PUSH2 0x25A0 JUMP JUMPDEST PUSH2 0x263F SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI JUMPDEST PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x32D3 JUMP JUMPDEST DUP3 PUSH2 0x2616 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x262D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x2679 PUSH2 0x3A3E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0x26B0 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x269 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x2F5 JUMPI PUSH2 0x19 SWAP2 PUSH2 0x2725 DUP3 PUSH1 0x0 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x12B0 DUP3 ADDRESS EQ ISZERO PUSH2 0x2E22 JUMP JUMPDEST PUSH2 0x272D PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x2736 DUP3 PUSH2 0x2D4D JUMP JUMPDEST SWAP1 PUSH2 0x2744 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x2753 DUP5 PUSH2 0x2D4D JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x2EE4 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x2F5 JUMPI CALLER SUB PUSH2 0x2796 JUMPI PUSH2 0x19 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x2DA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2808 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x281F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x282F PUSH2 0x335 PUSH1 0x9 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD PUSH2 0x2842 PUSH1 0x40 DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP2 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 MLOAD SWAP1 PUSH1 0xA DUP3 LT ISZERO PUSH2 0x3DB JUMPI MLOAD PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP5 SWAP3 SWAP1 DUP6 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP5 DUP6 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD PUSH1 0x24 CALLDATALOAD DUP4 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI DUP7 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x5 DUP2 ADD PUSH1 0xA4 CALLDATALOAD DUP4 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI DUP7 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 DUP2 ADD SWAP1 PUSH1 0xC4 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x2F5 JUMPI PUSH1 0x7 SWAP3 DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE ADD SWAP1 PUSH1 0xE4 CALLDATALOAD SWAP1 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x20 SWAP5 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x9 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI DUP2 PUSH2 0x2999 PUSH2 0x19 SWAP4 PUSH2 0x3B2F JUMP JUMPDEST PUSH2 0x3AA3 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0x29CA PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH2 0x2A6B SWAP1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH1 0x24 CALLDATALOAD DUP2 GT PUSH2 0x2A80 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x49E6F69 PUSH1 0xE4 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x25F PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP4 SWAP1 SWAP7 ADD SLOAD DUP6 MLOAD SWAP3 DUP4 MSTORE SWAP4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x265 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2BD8 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x2BCD JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2BFD PUSH2 0x335E JUMP JUMPDEST PUSH2 0x2C14 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x2C24 PUSH2 0x335 PUSH1 0x8 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2C38 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x8 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x266 DUP4 MSTORE PUSH2 0x2C90 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x8 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 AND PUSH1 0x80 DUP3 ADD MSTORE SWAP2 DUP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D37 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D37 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 DUP3 AND PUSH1 0x80 DUP3 ADD MSTORE SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH2 0x193 DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND PUSH2 0x2DD8 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2DD2 JUMP JUMPDEST ISZERO PUSH2 0x2E29 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2E8A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2F1E JUMPI POP PUSH2 0x2F1C SWAP2 POP PUSH2 0x311D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP2 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP6 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x30EB JUMPI JUMPDEST POP PUSH2 0x2FAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP5 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x3094 JUMPI PUSH2 0x2FE1 DUP4 PUSH2 0x311D JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP4 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x308C JUMPI JUMPDEST POP PUSH2 0x301C JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3089 SWAP5 PUSH2 0x302D PUSH1 0x27 PUSH2 0x2D4D JUMP JUMPDEST SWAP5 PUSH2 0x303B PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP2 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x3083 PUSH2 0x31BF JUMP JUMPDEST SWAP2 PUSH2 0x31EF JUMP JUMPDEST POP JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x3012 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3116 JUMPI JUMPDEST PUSH2 0x3102 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3113 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x2F4E JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x30F8 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x3164 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x31EA JUMPI RETURNDATASIZE SWAP1 PUSH2 0x31D0 DUP3 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 PUSH2 0x31DE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2D15 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x3251 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3203 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x320C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3264 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x3280 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x32A7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3297 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3287 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x32C7 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x2F5 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x2F5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3340 JUMPI JUMPDEST POP ISZERO PUSH2 0x332E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x3358 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST CODESIZE PUSH2 0x3326 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x336D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3386 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xA DUP3 LT ISZERO PUSH2 0x3DB JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x33FA PUSH1 0xA0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x2F5 JUMPI PUSH1 0x40 MLOAD PUSH2 0x3453 PUSH1 0x80 DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x2F5 JUMPI PUSH2 0x3497 DUP3 MLOAD SWAP4 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD PUSH2 0x3439 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x34A9 PUSH1 0xC0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP5 ADD SLOAD DUP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 SWAP1 DUP2 PUSH1 0x1 DUP1 DUP3 SHL SUB SWAP2 DUP3 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP7 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0xE0 DUP2 DUP4 SUB SLT PUSH2 0x2F5 JUMPI DUP1 MLOAD SWAP3 PUSH2 0x3497 PUSH1 0x20 DUP4 ADD MLOAD SWAP4 PUSH1 0x60 PUSH1 0x40 DUP6 ADD MLOAD SWAP5 ADD PUSH2 0x3439 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x356C PUSH1 0xE0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP5 ADD SLOAD DUP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 DUP5 ADD SLOAD DUP2 AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0xC0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MLOAD AND PUSH1 0xA0 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP5 SWAP2 SWAP3 PUSH1 0xE0 SWAP7 SWAP4 SWAP10 SWAP9 SWAP8 SWAP5 SWAP2 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP6 SWAP3 PUSH2 0x100 SWAP8 SWAP5 SWAP2 SWAP11 SWAP10 SWAP9 SWAP6 SWAP3 PUSH2 0x120 DUP9 ADD SWAP12 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 SSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x3711 SWAP1 PUSH1 0x80 SWAP1 PUSH1 0x4 SWAP1 DUP5 PUSH2 0x36DB PUSH1 0x40 DUP10 ADD PUSH2 0x3694 JUMP JUMPDEST AND SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP7 DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0x60 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE ADD SWAP5 ADD PUSH2 0x3694 JUMP JUMPDEST AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x10EB JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH2 0x193 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x3752 JUMPI POP POP JUMP JUMPDEST PUSH2 0x37EE PUSH1 0x48 PUSH2 0x3280 SWAP4 DUP4 PUSH2 0x3774 PUSH2 0x37DF SWAP6 PUSH2 0x376E PUSH1 0x14 CALLER PUSH2 0x3806 JUMP JUMPDEST SWAP4 PUSH2 0x3806 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP4 DUP7 ADD MSTORE PUSH2 0x37B3 DUP2 MLOAD DUP1 SWAP3 DUP6 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE DUP4 MLOAD SWAP4 DUP5 SWAP2 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP1 DUP4 SHL SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND SUB PUSH2 0x10EB JUMPI PUSH1 0x2 DUP3 ADD SWAP3 DUP4 DUP4 GT PUSH2 0x10EB JUMPI PUSH2 0x384B PUSH2 0x3835 DUP6 PUSH2 0x2D4D JUMP JUMPDEST SWAP5 PUSH2 0x3843 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x2D15 JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH2 0x2D4D JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 DUP6 DUP6 ADD SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP3 CALLDATACOPY DUP6 MLOAD ISZERO PUSH2 0x3947 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x3947 JUMPI PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 DUP2 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x10EB JUMPI SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x38D5 JUMPI POP POP PUSH2 0x3892 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3932 JUMPI DUP6 MLOAD DUP5 LT ISZERO PUSH2 0x3932 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE DUP6 DUP5 ADD DUP6 ADD MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x391D JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x3881 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3711 PUSH1 0xA0 PUSH1 0x5 DUP4 PUSH2 0x3976 DUP8 PUSH2 0x3694 JUMP JUMPDEST AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 SHL SWAP6 DUP7 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD DUP6 PUSH2 0x39AF PUSH1 0x60 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0x80 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3711 PUSH1 0xC0 PUSH1 0x6 DUP4 PUSH2 0x39E1 DUP8 PUSH2 0x3694 JUMP JUMPDEST AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP6 DUP7 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x4 DUP2 ADD DUP6 PUSH2 0x3A25 PUSH1 0x80 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0xA0 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST PUSH2 0x25E SLOAD PUSH2 0x25D SLOAD DUP2 EQ PUSH2 0x3A9D JUMPI PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A6B PUSH1 0x40 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SLOAD PUSH2 0x3A79 PUSH1 0xFF DUP3 AND DUP4 PUSH2 0x33DF JUMP JUMPDEST PUSH1 0x8 SHR SWAP2 DUP3 SWAP2 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH2 0x269 SLOAD AND NUMBER SUB SWAP1 NUMBER DUP3 GT PUSH2 0x10EB JUMPI GT ISZERO SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH2 0x193 DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND ISZERO PUSH2 0x3AD8 JUMPI POP POP POP POP JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2DD2 JUMP JUMPDEST CALLVALUE DUP2 SUB PUSH2 0x2A80 JUMPI POP JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3BDC JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3BBE JUMPI JUMPDEST POP ISZERO SWAP1 DUP2 PUSH2 0x3B8E JUMPI JUMPDEST POP PUSH2 0x3B7E JUMPI POP JUMP JUMPDEST MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x1 DUP2 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF DUP2 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO CODESIZE PUSH2 0x3B76 JUMP JUMPDEST PUSH2 0x3BD6 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST CODESIZE PUSH2 0x3B6D JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID 0xBF 0xA5 0xD4 EXP 0xB5 SWAP6 STATICCALL PUSH2 0x3B17 JUMP PUSH15 0xA5E38A5CAC79A71F09CE1435246DB2 0xE6 DUP1 PC AND 0xC2 PUSH30 0x5E686862EC2250829EB6DEE4A7CB0834865072F135485C874D3BBBE39BDF 0xDB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC SWAP12 MSTORE 0xE6 EXTCODEHASH 0xC7 0xD8 DUP9 SMOD CALLDATASIZE MUL MSTORE8 0xEA 0xFB POP PUSH15 0xBC4F269BBAC31FAC5F319E77A83FE7 DUP13 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
      "sourceMap": "358:4134:71:-:0;;;;;;;1332:4:9;1324:13;;6007::8;358:4134:71;;;;;;;;;;;;;;6078:31:8;6074:139;;-1:-1:-1;358:4134:71;;;;;;;;1324:13:9;358:4134:71;;;;;;;;;;;;;;;;6074:139:8;358:4134:71;;;;;;6007:13:8;358:4134:71;6174:28:8;358:4134:71;;;;;;6174:28:8;6074:139;;;358:4134:71;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "abi_decode_bool_fromMemory": {
          "entryPoint": 13011,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_struct_FeeCalcs_fromMemory": {
          "entryPoint": 13369,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_uint256t_uint256t_struct_FeeCalcs_fromMemory": {
          "entryPoint": 13431,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_uint256t_uint256t_uint256t_struct_FeeCalcs_fromMemory": {
          "entryPoint": 13625,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_encode_address_uint256_uint256_address_address_address": {
          "entryPoint": 11625,
          "id": null,
          "parameterSlots": 7,
          "returnSlots": 1
        },
        "abi_encode_address_uint256_uint256_uint256_address_address_address": {
          "entryPoint": 11450,
          "id": null,
          "parameterSlots": 8,
          "returnSlots": 1
        },
        "abi_encode_string": {
          "entryPoint": 12967,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_struct_MintTCParams": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_encode_struct_MintTPParams": {
          "entryPoint": 13556,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_encode_struct_RedeemTCandTPParams": {
          "entryPoint": 13761,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_encode_uint256_uint256_address_address_address": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_address_uint256": {
          "entryPoint": 13841,
          "id": null,
          "parameterSlots": 9,
          "returnSlots": 1
        },
        "abi_encode_uint256_uint256_uint256_uint256_uint256_uint256_uint256_address_uint256": {
          "entryPoint": 13904,
          "id": null,
          "parameterSlots": 10,
          "returnSlots": 1
        },
        "array_allocation_size_bytes": {
          "entryPoint": 11597,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "clear_struct_storage_struct_MintTCParams": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "clear_struct_storage_struct_MintTPParams": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "clear_struct_storage_struct_RedeemTCandTPParams": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 12932,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "copy_struct_to_storage_from_struct_MintTCParams_calldata_to_struct_MintTCParams": {
          "entryPoint": 13992,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "copy_struct_to_storage_from_struct_MintTPParams_calldata_to_struct_MintTPParams": {
          "entryPoint": 14685,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "copy_struct_to_storage_from_struct_RedeemTCandTPParams_calldata_to_struct_RedeemTCandTPParams": {
          "entryPoint": 14792,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "extract_returndata": {
          "entryPoint": 12735,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "finalize_allocation": {
          "entryPoint": 11541,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_checkIfAuthorizedChanger": {
          "entryPoint": 13035,
          "id": 19625,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_checkNotPaused": {
          "entryPoint": 13150,
          "id": 19759,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "fun_checkRole": {
          "entryPoint": 14122,
          "id": 252,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_grantRole": {
          "entryPoint": 15011,
          "id": 443,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_readyToExecute": {
          "entryPoint": 14910,
          "id": 25092,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "fun_revokeRole": {
          "entryPoint": 11683,
          "id": 474,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "fun_setImplementation": {
          "entryPoint": 12573,
          "id": 678,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_toHexString": {
          "entryPoint": 14342,
          "id": 3311,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "fun_upgradeToAndCallUUPS": {
          "entryPoint": 12004,
          "id": 776,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "fun_verifyCallResultFromTarget": {
          "entryPoint": 12783,
          "id": 2931,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "fun_verifyExecFee": {
          "entryPoint": 15141,
          "id": 25242,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "fun_verifyRoleManagementPrivilege": {
          "entryPoint": 15151,
          "id": 25821,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "increment_uint256": {
          "entryPoint": 14107,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "mapping_index_access_mapping_enum_OperType_uint256_of_enum_OperType": {
          "entryPoint": 11517,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "read_from_calldatat_address": {
          "entryPoint": 13972,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "read_from_storage_reference_type_struct_MintTCParams": {
          "entryPoint": 13291,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "read_from_storage_reference_type_struct_MintTPParams": {
          "entryPoint": 13466,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "read_from_storage_reference_type_struct_RedeemTCandTPParams": {
          "entryPoint": 13661,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "require_helper_stringliteral_36e1": {
          "entryPoint": 11810,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "require_helper_stringliteral_52f1": {
          "entryPoint": 11907,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "require_helper_stringliteral_d688": {
          "entryPoint": 13183,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "write_to_memory_enum_OperType": {
          "entryPoint": 13279,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        }
      },
      "generatedSources": [],
      "immutableReferences": {
        "1143": [
          {
            "length": 32,
            "start": 4372
          },
          {
            "length": 32,
            "start": 4739
          },
          {
            "length": 32,
            "start": 9976
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xC6E88E EQ PUSH2 0x2BE9 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2B93 JUMPI DUP1 PUSH4 0xC340A24 EQ PUSH2 0x2B6A JUMPI DUP1 PUSH4 0x1826EBF0 EQ PUSH2 0x2B06 JUMPI DUP1 PUSH4 0x1A0C5440 EQ PUSH2 0x2A98 JUMPI DUP1 PUSH4 0x24524EA1 EQ PUSH2 0x2A42 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2A12 JUMPI DUP1 PUSH4 0x2B994849 EQ PUSH2 0x29F3 JUMPI DUP1 PUSH4 0x2D88AF4A EQ PUSH2 0x299E JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2965 JUMPI DUP1 PUSH4 0x34975A41 EQ PUSH2 0x27F3 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x275F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x26C6 JUMPI DUP1 PUSH4 0x3BB4B05C EQ PUSH2 0x2683 JUMPI DUP1 PUSH4 0x3CBCF4C4 EQ PUSH2 0x265E JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x2569 JUMPI DUP1 PUSH4 0x435C7E37 EQ PUSH2 0x24DF JUMPI DUP1 PUSH4 0x47D8496A EQ PUSH2 0x240E JUMPI DUP1 PUSH4 0x4981D04E EQ PUSH2 0x2367 JUMPI DUP1 PUSH4 0x4B5A9E3D EQ PUSH2 0x2333 JUMPI DUP1 PUSH4 0x4B64E492 EQ PUSH2 0x12E6 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x11FC JUMPI DUP1 PUSH4 0x5210570C EQ PUSH2 0x11D7 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1101 JUMPI DUP1 PUSH4 0x57271F4D EQ PUSH2 0x10B4 JUMPI DUP1 PUSH4 0x5C817AA3 EQ PUSH2 0x1050 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x102A JUMPI DUP1 PUSH4 0x5E2A6065 EQ PUSH2 0x1011 JUMPI DUP1 PUSH4 0x5EE1D2BB EQ PUSH2 0xFC7 JUMPI DUP1 PUSH4 0x681FE70C EQ PUSH2 0xFA3 JUMPI DUP1 PUSH4 0x68274357 EQ PUSH2 0xF7B JUMPI DUP1 PUSH4 0x6B59C22F EQ PUSH2 0xEAA JUMPI DUP1 PUSH4 0x6B763330 EQ PUSH2 0xE46 JUMPI DUP1 PUSH4 0x73E3D086 EQ PUSH2 0xE27 JUMPI DUP1 PUSH4 0x7C50B7E4 EQ PUSH2 0xDE3 JUMPI DUP1 PUSH4 0x7E81A821 EQ PUSH2 0xD12 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xC7C JUMPI DUP1 PUSH4 0x8A4737AB EQ PUSH2 0xC1D JUMPI DUP1 PUSH4 0x8B20076C EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0x8D7A72F3 EQ PUSH2 0xB9F JUMPI DUP1 PUSH4 0x8E7E8189 EQ PUSH2 0xB77 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xB24 JUMPI DUP1 PUSH4 0x9FD0506D EQ PUSH2 0xAF7 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xADB JUMPI DUP1 PUSH4 0xAD16C2DE EQ PUSH2 0xA6D JUMPI DUP1 PUSH4 0xBB4872DE EQ PUSH2 0xA4A JUMPI DUP1 PUSH4 0xBBE720D9 EQ PUSH2 0x9D5 JUMPI DUP1 PUSH4 0xC84D8BB6 EQ PUSH2 0x904 JUMPI DUP1 PUSH4 0xCAEB12B6 EQ PUSH2 0x8DA JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x8A1 JUMPI DUP1 PUSH4 0xDB901477 EQ PUSH2 0x5FB JUMPI DUP1 PUSH4 0xDBB0B684 EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xE4C0AAF4 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0xE4E1B729 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xE97A4D63 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0xFA91A9A5 EQ PUSH2 0x2FA JUMPI PUSH4 0xFB8AAFB8 SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x262 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x30E PUSH2 0x335E JUMP JUMPDEST PUSH2 0x325 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x33B PUSH2 0x335 PUSH1 0x2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH2 0x3B25 JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x34F PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x261 DUP4 MSTORE PUSH2 0x3A7 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x2 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x405 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x41C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x42C PUSH2 0x335 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x440 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x25F DUP4 MSTORE PUSH2 0x498 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x36A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x4D6 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x4ED PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x4FD PUSH2 0x335 PUSH1 0x6 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x511 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x6 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x264 DUP4 MSTORE PUSH2 0x569 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x6 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0x5C1 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x269 SLOAD PUSH1 0x80 SHR PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH2 0x1A0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0x2F5 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 DUP4 DUP3 AND DUP1 SWAP3 SUB PUSH2 0x2F5 JUMPI PUSH1 0x64 CALLDATALOAD SWAP4 DUP5 AND DUP5 SUB PUSH2 0x2F5 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x83 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x0 SLOAD SWAP3 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND ISZERO SWAP4 DUP5 DUP1 SWAP6 PUSH2 0x894 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x87D JUMPI JUMPDEST ISZERO PUSH2 0x821 JUMPI PUSH2 0x711 SWAP3 PUSH1 0x1 SWAP2 DUP7 DUP4 PUSH1 0xFF NOT DUP4 AND OR PUSH1 0x0 SSTORE PUSH2 0x80F JUMPI JUMPDEST POP PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND SWAP3 PUSH2 0x6AA DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6B3 DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6BC DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6C5 DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x6CE DUP5 PUSH2 0x337F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x97 SLOAD AND OR PUSH1 0x97 SSTORE PUSH2 0x6EA DUP4 PUSH2 0x337F JUMP JUMPDEST PUSH1 0xCA SLOAD SWAP1 PUSH3 0x10000 DUP4 PUSH1 0xB0 SHL SUB SWAP1 PUSH1 0x10 SHL AND SWAP1 PUSH2 0xFF01 DUP4 PUSH1 0xB0 SHL SUB NOT AND OR OR PUSH1 0xCA SSTORE PUSH2 0x337F JUMP JUMPDEST PUSH2 0x1F7 PUSH1 0x84 CALLDATALOAD PUSH2 0x722 PUSH1 0x1 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x731 PUSH1 0x2 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x740 PUSH1 0x3 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x74F PUSH1 0x4 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x104 CALLDATALOAD PUSH2 0x75F PUSH1 0x9 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x124 CALLDATALOAD PUSH2 0x76F PUSH1 0x8 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x144 CALLDATALOAD PUSH2 0x77F PUSH1 0x7 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x164 CALLDATALOAD PUSH2 0x78F PUSH1 0x6 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x79F PUSH1 0x5 PUSH2 0x184 CALLDATALOAD SWAP3 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x0 SLOAD SWAP3 PUSH2 0x7BC PUSH1 0xFF DUP6 PUSH1 0x8 SHR AND PUSH2 0x7B7 DUP2 PUSH2 0x337F JUMP JUMPDEST PUSH2 0x337F JUMP JUMPDEST PUSH1 0x1 PUSH2 0x22A SSTORE PUSH1 0x80 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND OR PUSH2 0x269 SSTORE PUSH2 0x7DA JUMPI STOP JUMPDEST PUSH2 0xFF00 NOT AND PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR PUSH1 0x0 SSTORE DUP8 PUSH2 0x696 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67A JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x67A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x673 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI DUP2 PUSH2 0x8D5 PUSH2 0x19 SWAP4 PUSH2 0x3B2F JUMP JUMPDEST PUSH2 0x2DA3 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x918 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x92F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x93F PUSH2 0x335 PUSH1 0x4 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x953 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x4 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x262 DUP4 MSTORE PUSH2 0x9AB PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x4 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0xA04 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x25C DUP1 SLOAD SWAP3 DUP4 AND PUSH2 0xA38 JUMPI DUP2 PUSH2 0x19 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x3AA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA646B77 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x261 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP4 SWAP1 SWAP7 ADD SLOAD DUP6 MLOAD SWAP3 DUP4 MSTORE SWAP4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0xCA SLOAD PUSH1 0x40 MLOAD PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH2 0x269 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x29C SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x263 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x260 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x5 DUP2 PUSH1 0x4 DUP6 ADD SLOAD AND SWAP4 ADD SLOAD AND SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x2D69 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xC95 PUSH2 0x335E JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH1 0x10 DUP2 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xD00 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xCEE JUMPI PUSH2 0x100 SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0xCA SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xD26 PUSH2 0x335E JUMP JUMPDEST PUSH2 0xD3D PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0xD4D PUSH2 0x335 PUSH1 0x3 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xD61 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x260 DUP4 MSTORE PUSH2 0xDB9 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x3 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0xA DUP4 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x40 SWAP3 DUP3 MSTORE PUSH1 0x8 SHR PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25D SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x264 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xEBE PUSH2 0x335E JUMP JUMPDEST PUSH2 0xED5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0xEE5 PUSH2 0x335 PUSH1 0x7 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0xEF9 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x265 DUP4 MSTORE PUSH2 0xF51 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x7 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0xF94 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25E SLOAD PUSH2 0x25D SLOAD EQ PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0xFF4 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x269 DUP1 SLOAD SWAP1 SWAP3 AND PUSH1 0x80 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x2A PUSH2 0x29C SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x266 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x29C SLOAD PUSH2 0x10D6 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD DUP2 ADD DUP1 SWAP2 GT PUSH2 0x10EB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x116C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x11F0 PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE STOP JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F5 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x2F5 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x1248 DUP4 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 PUSH2 0x1256 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2D15 JUMP JUMPDEST DUP4 DUP4 MSTORE CALLDATASIZE PUSH1 0x24 DUP6 DUP4 ADD ADD GT PUSH2 0x2F5 JUMPI PUSH2 0x19 SWAP5 PUSH1 0x0 PUSH1 0x20 DUP7 PUSH1 0x1 SWAP8 PUSH1 0x24 PUSH2 0x12D9 SWAP7 ADD DUP4 DUP10 ADD CALLDATACOPY DUP7 ADD ADD MSTORE DUP1 PUSH32 0x0 AND SWAP1 PUSH2 0x12B0 DUP3 ADDRESS EQ ISZERO PUSH2 0x2E22 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD AND EQ PUSH2 0x2E83 JUMP JUMPDEST PUSH2 0x12E1 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x2EE4 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH2 0x1312 PUSH2 0x335E JUMP JUMPDEST PUSH1 0x2 PUSH2 0x22A SLOAD EQ PUSH2 0x22EE JUMPI PUSH1 0x2 PUSH2 0x22A SSTORE PUSH2 0x25E SLOAD PUSH1 0x0 PUSH2 0x25D SLOAD PUSH2 0x269 SLOAD SWAP1 DUP2 PUSH1 0x80 SHR DUP5 ADD DUP1 DUP3 LT PUSH1 0x0 EQ PUSH2 0x22E3 JUMPI POP SWAP1 SWAP3 SWAP2 SWAP3 JUMPDEST DUP2 DUP4 LT PUSH2 0x13A4 JUMPI JUMPDEST POP POP PUSH2 0x25E SSTORE DUP1 PUSH2 0x1364 JUMPI JUMPDEST PUSH1 0x1 PUSH2 0x22A SSTORE STOP JUMPDEST SELFBALANCE DUP2 GT PUSH2 0x139D JUMPI JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 SWAP4 PUSH1 0x4 CALLDATALOAD GAS CALL PUSH2 0x137F PUSH2 0x31BF JUMP JUMPDEST POP ISZERO PUSH2 0x138B JUMPI DUP1 PUSH2 0x135C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8F589409 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x136C JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x13CA PUSH1 0x40 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SLOAD PUSH2 0x13D8 PUSH1 0xFF DUP3 AND DUP4 PUSH2 0x33DF JUMP JUMPDEST PUSH1 0x8 SHR DUP1 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP7 AND NUMBER SUB LT PUSH1 0x0 EQ PUSH2 0x145D JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP1 POP DUP1 JUMPDEST PUSH2 0x1447 JUMPI JUMPDEST ISZERO PUSH2 0x1440 JUMPI DUP1 PUSH1 0x1 SWAP2 CALLER PUSH32 0xB207E6B6B26274F3764B879E578B4539B8E37F41DFF43932DDC87B3E04090974 PUSH1 0x0 DUP1 LOG3 ADD SWAP4 ADD SWAP2 SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1348 JUMP JUMPDEST SWAP3 POP PUSH2 0x1350 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x1404 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x1 SUB PUSH2 0x161A JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x25F DUP1 PUSH1 0x20 MSTORE PUSH2 0x148B PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x33EB JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x14B9 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x4 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x235E81CF PUSH1 0xE0 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD DUP2 AND PUSH1 0x84 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xC0 SWAP2 DUP4 SWAP2 PUSH1 0xA4 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x15BA JUMPI JUMPDEST POP PUSH32 0x5090A820029ACAE4D47B64DA9AF62CE04A5A1BDB546934E5FCFE091EE1F780EE SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 ADD MLOAD AND SWAP3 PUSH2 0x159F DUP7 PUSH1 0x60 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 DUP10 ADD MLOAD AND SWAP8 DUP1 MLOAD SWAP5 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x80 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD SWAP3 PUSH2 0x13FF JUMP JUMPDEST PUSH32 0x5090A820029ACAE4D47B64DA9AF62CE04A5A1BDB546934E5FCFE091EE1F780EE SWAP3 POP PUSH2 0x15FF SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI JUMPDEST PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3477 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x152C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x15ED JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x2 SUB PUSH2 0x17B4 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x261 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1648 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x33EB JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1676 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x4 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xBFE42621 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD DUP2 AND PUSH1 0x84 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0xC0 SWAP2 DUP4 SWAP2 PUSH1 0xA4 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1770 JUMPI JUMPDEST POP PUSH32 0x7E7043742F69701E6292386D468D710F2D6E44BF93232A1E52F1641E50A9DE12 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 ADD MLOAD AND SWAP3 PUSH2 0x175C DUP7 PUSH1 0x60 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 DUP10 ADD MLOAD AND SWAP8 DUP1 MLOAD SWAP5 DUP1 MLOAD SWAP3 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0x80 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH32 0x7E7043742F69701E6292386D468D710F2D6E44BF93232A1E52F1641E50A9DE12 SWAP3 POP PUSH2 0x17AC SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x16E9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x3 SUB PUSH2 0x1911 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x260 DUP1 PUSH1 0x20 MSTORE PUSH2 0x17E2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1816 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x5A21A619 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0xC0 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x184B PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x18ED JUMPI JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x20 DUP1 DUP9 ADD MLOAD DUP8 MLOAD SWAP2 DUP9 ADD MLOAD PUSH1 0x40 DUP1 DUP11 ADD MLOAD SWAP10 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 SWAP1 SWAP11 ADD MLOAD SWAP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP11 SWAP6 DUP6 AND SWAP10 SWAP8 DUP6 AND SWAP9 PUSH32 0x125247FDF990B9B419D4B4F895B1BB75BC485E3F8B813CF5557A4A12A56D054D SWAP9 SWAP2 SWAP8 DUP9 SWAP8 PUSH2 0x18D9 SWAP8 DUP16 SWAP8 SWAP3 AND SWAP6 SWAP1 SWAP5 SWAP3 SWAP1 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x3 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1908 SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP2 SWAP1 POP DUP8 PUSH2 0x185F JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x4 SUB PUSH2 0x1A6E JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x262 DUP1 PUSH1 0x20 MSTORE PUSH2 0x193F PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1973 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0xAD4E666D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0xC0 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19A8 PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1A4A JUMPI JUMPDEST POP DUP3 MLOAD PUSH1 0x60 DUP1 DUP6 ADD MLOAD PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x20 DUP1 DUP9 ADD MLOAD DUP8 MLOAD SWAP2 DUP9 ADD MLOAD PUSH1 0x40 DUP1 DUP11 ADD MLOAD SWAP10 SWAP1 SWAP7 ADD MLOAD PUSH1 0xA0 SWAP1 SWAP11 ADD MLOAD SWAP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP11 SWAP6 DUP6 AND SWAP10 SWAP8 DUP6 AND SWAP9 PUSH32 0x625B9FC283A619F53BEB817D79B8AB044D60E307FD2AF4BB89FA5E9A24CE4EBC SWAP9 SWAP2 SWAP8 DUP9 SWAP8 PUSH2 0x1A36 SWAP8 DUP16 SWAP8 SWAP3 AND SWAP6 SWAP1 SWAP5 SWAP3 SWAP1 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x4 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1A65 SWAP2 POP PUSH1 0xC0 RETURNDATASIZE PUSH1 0xC0 GT PUSH2 0x1607 JUMPI PUSH2 0x15F7 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP2 SWAP1 POP DUP8 PUSH2 0x19BC JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x5 SUB PUSH2 0x1C04 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x263 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1A9D PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x349A JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1ACF PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x5 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x883D21CB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xC4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1B02 PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x34F4 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0x1BAB JUMPI JUMPDEST POP PUSH32 0x3E9E02A94D7486426FCF2B05A27E911B8D1B61E2E1DCF103785512F46C84764 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND SWAP3 PUSH2 0x1B97 DUP8 PUSH1 0x60 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 DUP10 ADD MLOAD AND SWAP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP3 ADD MLOAD AND SWAP10 PUSH1 0x20 DUP3 ADD MLOAD SWAP7 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0xA0 PUSH1 0x1 DUP1 DUP3 SHL SUB SWAP2 ADD MLOAD AND SWAP5 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP10 DUP11 PUSH2 0x3650 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x5 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH32 0x3E9E02A94D7486426FCF2B05A27E911B8D1B61E2E1DCF103785512F46C84764 SWAP4 POP PUSH2 0x1BF2 SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI JUMPDEST PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3539 JUMP JUMPDEST SWAP5 SWAP2 SWAP3 SWAP2 SWAP1 POP PUSH2 0x1B17 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BE0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x6 SUB PUSH2 0x1D93 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x264 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1C32 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1C6C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x3631A6BB PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 PUSH1 0xE0 SWAP1 DUP3 SWAP1 PUSH1 0xE4 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1CA1 PUSH1 0x4 DUP5 ADD DUP10 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL DUP1 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x1D4C JUMPI JUMPDEST POP PUSH32 0x4D33A2F9C4F66A101333F7CA2AB718582E763C941FF6FC304D2D4408D43A8284 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 MLOAD AND SWAP3 PUSH2 0x1D38 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP10 ADD MLOAD AND SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP11 ADD MLOAD AND SWAP9 PUSH1 0x20 DUP2 ADD MLOAD SWAP5 DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD SWAP4 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP5 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP10 DUP11 PUSH2 0x3650 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x6 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH32 0x4D33A2F9C4F66A101333F7CA2AB718582E763C941FF6FC304D2D4408D43A8284 SWAP3 POP PUSH2 0x1D8A SWAP2 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP3 SWAP1 POP SWAP3 PUSH2 0x1CB7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x7 SUB PUSH2 0x1EFB JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x265 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1DC2 PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1DFA PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x12BCE9BF PUSH1 0xE2 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xE4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E2D PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x1ED5 JUMPI JUMPDEST POP PUSH32 0xF8DCB57698D7067DA58AB71C48CD2E3B329B69E7E9853F88630C2C69C2557C78 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND SWAP4 PUSH2 0x1EC1 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP5 ADD MLOAD AND SWAP8 PUSH1 0x20 DUP5 ADD MLOAD SWAP4 DUP2 MLOAD SWAP2 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x7 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x1EF1 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x1E41 JUMP JUMPDEST DUP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x8 SUB PUSH2 0x2063 JUMPI POP POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH2 0x266 DUP1 PUSH1 0x20 MSTORE PUSH2 0x1F2A PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x355D JUMP JUMPDEST SWAP1 DUP4 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1F62 PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x6 PUSH1 0x0 SWAP2 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE ADD SSTORE JUMP JUMPDEST PUSH2 0x25C SLOAD PUSH1 0x40 MLOAD PUSH4 0x5E272AD9 PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 PUSH1 0xE0 SWAP2 DUP5 SWAP2 PUSH1 0xE4 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1F95 PUSH1 0x4 DUP5 ADD DUP9 PUSH2 0x35C1 JUMP JUMPDEST GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x203D JUMPI JUMPDEST POP PUSH32 0x8AB42044CE8B230E021E5542EB53688D77443E50EE84CDA7917F6BDD833C697F PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 MLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP6 ADD MLOAD AND SWAP4 PUSH2 0x2029 DUP8 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP5 ADD MLOAD AND SWAP8 PUSH1 0x20 DUP5 ADD MLOAD SWAP4 DUP2 MLOAD SWAP2 PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 PUSH1 0xC0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 PUSH2 0x3611 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x15B3 PUSH1 0x8 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SWAP1 POP PUSH2 0x2059 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x1FA9 JUMP JUMPDEST MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x9 EQ PUSH2 0x207B JUMPI JUMPDEST DUP1 PUSH2 0x13FF JUMP JUMPDEST POP DUP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x209E PUSH2 0x100 DUP4 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 SLOAD AND DUP3 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x5 DUP3 ADD SLOAD AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 DUP3 ADD SLOAD AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD SLOAD AND PUSH1 0xE0 DUP3 ADD MSTORE DUP3 DUP3 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE DUP2 PUSH1 0x7 PUSH1 0x40 DUP3 KECCAK256 DUP3 DUP2 SSTORE DUP3 PUSH1 0x1 DUP3 ADD SSTORE DUP3 PUSH1 0x2 DUP3 ADD SSTORE DUP3 PUSH1 0x3 DUP3 ADD SSTORE DUP3 PUSH1 0x4 DUP3 ADD SSTORE DUP3 PUSH1 0x5 DUP3 ADD SSTORE DUP3 PUSH1 0x6 DUP3 ADD SSTORE ADD SSTORE PUSH1 0xE0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x25C SLOAD AND PUSH2 0x104 PUSH1 0x40 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x391BF6CF DUP7 SHL DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 MLOAD AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP9 ADD MLOAD AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP9 ADD MLOAD AND PUSH1 0xA4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP9 ADD MLOAD AND PUSH1 0xC4 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 DUP9 ADD MLOAD AND PUSH1 0xE4 DUP5 ADD MSTORE GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP1 PUSH1 0x0 SWAP4 PUSH2 0x22BD JUMPI JUMPDEST POP PUSH32 0xF86F4487D2C5541B78F06D2368E28E0F4052E182124DEF54D5855BF2A01D3258 PUSH2 0x120 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP7 ADD MLOAD AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP8 ADD MLOAD AND SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC0 DUP3 ADD MLOAD AND SWAP8 PUSH1 0x40 DUP3 ADD MLOAD SWAP3 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD SWAP2 PUSH1 0x60 PUSH1 0x40 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH1 0xE0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 ADD MLOAD AND SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE DUP7 PUSH2 0x100 DUP3 ADD MSTORE LOG4 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x22B5 PUSH1 0x9 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD SWAP3 POP PUSH2 0x2075 JUMP JUMPDEST SWAP1 POP PUSH2 0x22D9 SWAP2 SWAP3 POP PUSH1 0xE0 RETURNDATASIZE PUSH1 0xE0 GT PUSH2 0x1BFD JUMPI PUSH2 0x1BEA DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SWAP4 SWAP3 POP POP DUP8 PUSH2 0x21F2 JUMP JUMPDEST SWAP1 POP SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1348 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH2 0x235E PUSH1 0x20 SWAP2 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2381 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x1F7 PUSH1 0x4 CALLDATALOAD PUSH2 0x2392 PUSH1 0x1 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0x23A1 PUSH1 0x2 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x44 CALLDATALOAD PUSH2 0x23B0 PUSH1 0x3 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x64 CALLDATALOAD PUSH2 0x23BF PUSH1 0x4 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0x84 CALLDATALOAD PUSH2 0x23CE PUSH1 0x9 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xA4 CALLDATALOAD PUSH2 0x23DD PUSH1 0x8 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x23EC PUSH1 0x7 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x23FB PUSH1 0x6 DUP4 PUSH2 0x2CFD JUMP JUMPDEST SSTORE PUSH2 0x240B PUSH1 0x5 PUSH2 0x104 CALLDATALOAD SWAP3 PUSH2 0x2CFD JUMP JUMPDEST SSTORE STOP JUMPDEST PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2422 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x2439 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x2449 PUSH2 0x335 PUSH1 0x5 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x245D PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x5 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x263 DUP4 MSTORE PUSH2 0x24B5 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x395D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x5 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH2 0x100 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 SLOAD AND SWAP2 DUP2 PUSH1 0x1 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD SWAP2 DUP4 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP4 PUSH1 0x7 DUP2 PUSH1 0x6 DUP9 ADD SLOAD AND SWAP7 ADD SLOAD AND SWAP6 PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0xCA SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO PUSH2 0x264C JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 PUSH1 0x10 SHR AND CALLER EQ ISZERO SWAP1 DUP2 PUSH2 0x25E2 JUMPI JUMPDEST POP PUSH2 0xD00 JUMPI PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xCEE JUMPI PUSH2 0xFF00 NOT AND PUSH1 0xCA SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x261E JUMPI JUMPDEST POP ISZERO DUP3 PUSH2 0x25A0 JUMP JUMPDEST PUSH2 0x263F SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI JUMPDEST PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x32D3 JUMP JUMPDEST DUP3 PUSH2 0x2616 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x262D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x2679 PUSH2 0x3A3E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0x26B0 PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x269 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP3 SUB PUSH2 0x2F5 JUMPI PUSH2 0x19 SWAP2 PUSH2 0x2725 DUP3 PUSH1 0x0 SWAP4 PUSH32 0x0 AND SWAP1 PUSH2 0x12B0 DUP3 ADDRESS EQ ISZERO PUSH2 0x2E22 JUMP JUMPDEST PUSH2 0x272D PUSH2 0x32EB JUMP JUMPDEST PUSH2 0x2736 DUP3 PUSH2 0x2D4D JUMP JUMPDEST SWAP1 PUSH2 0x2744 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x1F NOT PUSH2 0x2753 DUP5 PUSH2 0x2D4D JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH2 0x2EE4 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x2F5 JUMPI CALLER SUB PUSH2 0x2796 JUMPI PUSH2 0x19 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x2DA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2808 PUSH2 0x335E JUMP JUMPDEST PUSH2 0x281F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x282F PUSH2 0x335 PUSH1 0x9 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD PUSH2 0x2842 PUSH1 0x40 DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP2 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 MLOAD SWAP1 PUSH1 0xA DUP3 LT ISZERO PUSH2 0x3DB JUMPI MLOAD PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x267 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SWAP5 SWAP3 SWAP1 DUP6 SWAP1 SUB PUSH2 0x2F5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP5 DUP6 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD PUSH1 0x24 CALLDATALOAD DUP4 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI DUP7 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x5 DUP2 ADD PUSH1 0xA4 CALLDATALOAD DUP4 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI DUP7 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 DUP2 ADD SWAP1 PUSH1 0xC4 CALLDATALOAD SWAP2 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x2F5 JUMPI PUSH1 0x7 SWAP3 DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE ADD SWAP1 PUSH1 0xE4 CALLDATALOAD SWAP1 DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x20 SWAP5 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x9 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI DUP2 PUSH2 0x2999 PUSH2 0x19 SWAP4 PUSH2 0x3B2F JUMP JUMPDEST PUSH2 0x3AA3 JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI PUSH2 0x29CA PUSH2 0x32EB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND PUSH1 0x10 SWAP3 SWAP1 SWAP3 SHL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x20 PUSH2 0x25E SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH2 0x2A6B SWAP1 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST SLOAD PUSH1 0x24 CALLDATALOAD DUP2 GT PUSH2 0x2A80 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x49E6F69 PUSH1 0xE4 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x25F PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP4 SWAP1 SWAP7 ADD SLOAD DUP6 MLOAD SWAP3 DUP4 MSTORE SWAP4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x265 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x2F1 DUP2 DUP4 SLOAD AND SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x3 DUP3 ADD SLOAD DUP2 PUSH1 0x4 DUP5 ADD SLOAD AND SWAP2 PUSH1 0x6 DUP2 PUSH1 0x5 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x2CBA JUMP JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x2F5 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2BD8 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x2BCD JUMP JUMPDEST PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F5 JUMPI PUSH2 0x2BFD PUSH2 0x335E JUMP JUMPDEST PUSH2 0x2C14 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3C08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x372A JUMP JUMPDEST PUSH2 0x2C24 PUSH2 0x335 PUSH1 0x8 PUSH2 0x1F7 PUSH2 0x2CFD JUMP JUMPDEST PUSH2 0x25D DUP1 SLOAD PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2C38 PUSH1 0x40 DUP5 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x8 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xF8 SHL SUB NUMBER AND DUP5 MSTORE DUP3 PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0xFF PUSH1 0x20 SWAP6 DUP2 NOT SWAP1 MLOAD PUSH1 0x8 SHL AND SWAP2 AND OR SWAP1 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH2 0x266 DUP4 MSTORE PUSH2 0x2C90 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x8 DUP5 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3BE8 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 CALLER SWAP3 LOG2 PUSH2 0x3D1 DUP2 SLOAD PUSH2 0x371B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 AND PUSH1 0x80 DUP3 ADD MSTORE SWAP2 DUP2 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xA DUP2 LT ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2D37 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D37 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 DUP3 AND PUSH1 0x80 DUP3 ADD MSTORE SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH2 0x193 DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND PUSH2 0x2DD8 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2DD2 JUMP JUMPDEST ISZERO PUSH2 0x2E29 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2E8A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0xFF PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD AND PUSH1 0x0 EQ PUSH2 0x2F1E JUMPI POP PUSH2 0x2F1C SWAP2 POP PUSH2 0x311D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x52D1902D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP2 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP6 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x30EB JUMPI JUMPDEST POP PUSH2 0x2FAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP4 SWAP5 SWAP4 PUSH32 0xC9F76B5EC45E5CDEF99837D7B6D2467235C1DF8933C8CA56DF5C35AFA2C7D444 ADD PUSH2 0x3094 JUMPI PUSH2 0x2FE1 DUP4 PUSH2 0x311D JUMP JUMPDEST PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x0 DUP1 LOG2 DUP4 MLOAD ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x308C JUMPI JUMPDEST POP PUSH2 0x301C JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3089 SWAP5 PUSH2 0x302D PUSH1 0x27 PUSH2 0x2D4D JUMP JUMPDEST SWAP5 PUSH2 0x303B PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x27 DUP7 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C DUP2 DUP8 ADD MSTORE PUSH7 0x819985A5B1959 PUSH1 0xCA SHL PUSH1 0x40 DUP8 ADD MSTORE DUP2 MLOAD SWAP2 ADD DUP5 GAS DELEGATECALL PUSH2 0x3083 PUSH2 0x31BF JUMP JUMPDEST SWAP2 PUSH2 0x31EF JUMP JUMPDEST POP JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x3012 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3116 JUMPI JUMPDEST PUSH2 0x3102 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3113 JUMPI POP MLOAD SWAP1 CODESIZE PUSH2 0x2F4E JUMP JUMPDEST DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x30F8 JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x3164 JUMPI PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x31EA JUMPI RETURNDATASIZE SWAP1 PUSH2 0x31D0 DUP3 PUSH2 0x2D4D JUMP JUMPDEST SWAP2 PUSH2 0x31DE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x2D15 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x3251 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3203 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x320C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3264 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x3280 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x32A7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x3297 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3287 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x32C7 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x2F5 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x2F5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x160E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3340 JUMPI JUMPDEST POP ISZERO PUSH2 0x332E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x3358 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST CODESIZE PUSH2 0x3326 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xCA SLOAD PUSH1 0x8 SHR AND PUSH2 0x336D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3386 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xA DUP3 LT ISZERO PUSH2 0x3DB JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x33FA PUSH1 0xA0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD DUP2 MSTORE PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0x80 DUP4 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x2F5 JUMPI PUSH1 0x40 MLOAD PUSH2 0x3453 PUSH1 0x80 DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 SWAP5 DUP1 MLOAD DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x2F5 JUMPI PUSH2 0x3497 DUP3 MLOAD SWAP4 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD PUSH2 0x3439 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x34A9 PUSH1 0xC0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP5 ADD SLOAD DUP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0xA0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xA0 SWAP1 DUP2 PUSH1 0x1 DUP1 DUP3 SHL SUB SWAP2 DUP3 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP7 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0xE0 DUP2 DUP4 SUB SLT PUSH2 0x2F5 JUMPI DUP1 MLOAD SWAP3 PUSH2 0x3497 PUSH1 0x20 DUP4 ADD MLOAD SWAP4 PUSH1 0x60 PUSH1 0x40 DUP6 ADD MLOAD SWAP5 ADD PUSH2 0x3439 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x356C PUSH1 0xE0 DUP3 PUSH2 0x2D15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP5 ADD SLOAD DUP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 DUP5 ADD SLOAD DUP2 AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP3 AND PUSH1 0xC0 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MLOAD AND PUSH1 0xA0 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP5 SWAP2 SWAP3 PUSH1 0xE0 SWAP7 SWAP4 SWAP10 SWAP9 SWAP8 SWAP5 SWAP2 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP6 SWAP3 PUSH2 0x100 SWAP8 SWAP5 SWAP2 SWAP11 SWAP10 SWAP9 SWAP6 SWAP3 PUSH2 0x120 DUP9 ADD SWAP12 DUP9 MSTORE PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x2F5 JUMPI SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 SSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x2 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x3711 SWAP1 PUSH1 0x80 SWAP1 PUSH1 0x4 SWAP1 DUP5 PUSH2 0x36DB PUSH1 0x40 DUP10 ADD PUSH2 0x3694 JUMP JUMPDEST AND SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP7 DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0x60 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE ADD SWAP5 ADD PUSH2 0x3694 JUMP JUMPDEST AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x10EB JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH2 0x193 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x3752 JUMPI POP POP JUMP JUMPDEST PUSH2 0x37EE PUSH1 0x48 PUSH2 0x3280 SWAP4 DUP4 PUSH2 0x3774 PUSH2 0x37DF SWAP6 PUSH2 0x376E PUSH1 0x14 CALLER PUSH2 0x3806 JUMP JUMPDEST SWAP4 PUSH2 0x3806 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP4 DUP7 ADD MSTORE PUSH2 0x37B3 DUP2 MLOAD DUP1 SWAP3 DUP6 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE DUP4 MLOAD SWAP4 DUP5 SWAP2 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x3284 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x32A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 DUP1 DUP4 SHL SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP2 AND SUB PUSH2 0x10EB JUMPI PUSH1 0x2 DUP3 ADD SWAP3 DUP4 DUP4 GT PUSH2 0x10EB JUMPI PUSH2 0x384B PUSH2 0x3835 DUP6 PUSH2 0x2D4D JUMP JUMPDEST SWAP5 PUSH2 0x3843 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x2D15 JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH2 0x2D4D JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 DUP6 DUP6 ADD SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP3 CALLDATACOPY DUP6 MLOAD ISZERO PUSH2 0x3947 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x3947 JUMPI PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 DUP2 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x10EB JUMPI SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x38D5 JUMPI POP POP PUSH2 0x3892 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3932 JUMPI DUP6 MLOAD DUP5 LT ISZERO PUSH2 0x3932 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE DUP6 DUP5 ADD DUP6 ADD MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x391D JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x3881 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3711 PUSH1 0xA0 PUSH1 0x5 DUP4 PUSH2 0x3976 DUP8 PUSH2 0x3694 JUMP JUMPDEST AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP4 SHL SWAP6 DUP7 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD DUP6 PUSH2 0x39AF PUSH1 0x60 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0x80 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3711 PUSH1 0xC0 PUSH1 0x6 DUP4 PUSH2 0x39E1 DUP8 PUSH2 0x3694 JUMP JUMPDEST AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP6 DUP7 DUP3 SLOAD AND OR DUP2 SSTORE PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x4 DUP2 ADD DUP6 PUSH2 0x3A25 PUSH1 0x80 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST AND DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP6 PUSH2 0x3701 PUSH1 0xA0 DUP11 ADD PUSH2 0x3694 JUMP JUMPDEST PUSH2 0x25E SLOAD PUSH2 0x25D SLOAD DUP2 EQ PUSH2 0x3A9D JUMPI PUSH1 0x0 MSTORE PUSH2 0x268 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x3A6B PUSH1 0x40 DUP4 PUSH2 0x2D15 JUMP JUMPDEST SLOAD PUSH2 0x3A79 PUSH1 0xFF DUP3 AND DUP4 PUSH2 0x33DF JUMP JUMPDEST PUSH1 0x8 SHR SWAP2 DUP3 SWAP2 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH2 0x269 SLOAD AND NUMBER SUB SWAP1 NUMBER DUP3 GT PUSH2 0x10EB JUMPI GT ISZERO SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH2 0x193 DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND ISZERO PUSH2 0x3AD8 JUMPI POP POP POP POP JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x2DD2 JUMP JUMPDEST CALLVALUE DUP2 SUB PUSH2 0x2A80 JUMPI POP JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x3BDC JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3BBE JUMPI JUMPDEST POP ISZERO SWAP1 DUP2 PUSH2 0x3B8E JUMPI JUMPDEST POP PUSH2 0x3B7E JUMPI POP JUMP JUMPDEST MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH2 0x193 PUSH1 0x20 MSTORE PUSH1 0x1 DUP2 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 MSTORE DUP1 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF DUP2 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO CODESIZE PUSH2 0x3B76 JUMP JUMPDEST PUSH2 0x3BD6 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2645 JUMPI PUSH2 0x2637 DUP2 DUP4 PUSH2 0x2D15 JUMP JUMPDEST CODESIZE PUSH2 0x3B6D JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID 0xBF 0xA5 0xD4 EXP 0xB5 SWAP6 STATICCALL PUSH2 0x3B17 JUMP PUSH15 0xA5E38A5CAC79A71F09CE1435246DB2 0xE6 DUP1 PC AND 0xC2 PUSH30 0x5E686862EC2250829EB6DEE4A7CB0834865072F135485C874D3BBBE39BDF 0xDB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC SWAP12 MSTORE 0xE6 EXTCODEHASH 0xC7 0xD8 DUP9 SMOD CALLDATASIZE MUL MSTORE8 0xEA 0xFB POP PUSH15 0xBC4F269BBAC31FAC5F319E77A83FE7 DUP13 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
      "sourceMap": "358:4134:71:-:0;;;;;;;;;-1:-1:-1;358:4134:71;;;;;;;;;;;;;;;;;;;42256:53:77;358:4134:71;42256:53:77;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42879:53:77;358:4134:71;42879:53:77;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40375:53:77;358:4134:71;40375:53:77;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41633:53:77;358:4134:71;41633:53:77;;;358:4134:71;;;;;;;;;;;;;;;39162:48:77;358:4134:71;39162:48:77;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39761:50:77;358:4134:71;39761:50:77;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;41004:55:77;358:4134:71;41004:55:77;;;37964:48;358:4134:71;37964:48:77;;;358:4134:71;38563:50:77;358:4134:71;38563:50:77;358:4134:71;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5203:68:77;358:4134:71;;;;;;;;;;;;;;;5203:68:77;358:4134:71;5203:68:77;;358:4134:71;5203:68:77;;;;358:4134:71;5203:68:77;;358:4134:71;5203:68:77;;358:4134:71;;5203:68:77;;;358:4134:71;5203:68:77;;358:4134:71;;5203:68:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;38476:26:77;;38484:17;38476:7;:26;:::i;:::-;358:4134:71;38476:26:77;:::i;:::-;38522:11;358:4134:71;;;;;;;;;:::i;:::-;38484:17:77;358:4134:71;;38563:50:77;;;358:4134:71;;;;;;38599:12:77;358:4134:71;;;;;;38543:9:77;38563:50;358:4134:71;;;;;;;;;;;;;38563:50:77;358:4134:71;;;;;;;;;;;;;;;;38623:18:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;38484:17:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;38689:10:77;38673:54;;38737:13;358:4134:71;;38737:13:77;:::i;:::-;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;37879:24:77;;37887:15;37879:7;:24;:::i;:::-;37923:11;358:4134:71;;;;;;;;;:::i;:::-;37887:15:77;358:4134:71;;37964:48:77;;;358:4134:71;;;;;;37998:12:77;358:4134:71;;;;;;37944:9:77;37964:48;358:4134:71;;;;;;;;;;;;;37964:48:77;358:4134:71;;;;;;;;;;;;;;;;38022:16:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;37887:15:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;38086:10:77;38070:52;;38132:13;358:4134:71;;38132:13:77;:::i;358:4134:71:-;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;40912:31:77;;40920:22;40912:7;:31;:::i;:::-;40963:11;358:4134:71;;;;;;;;;:::i;:::-;40920:22:77;358:4134:71;;41004:55:77;;;358:4134:71;;;;;;41045:12:77;358:4134:71;;;;;;40984:9:77;41004:55;358:4134:71;;;;;;;;;;;;;41004:55:77;358:4134:71;;;;;;;;;;;;;;;;41069:23:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;40920:22:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;41140:10:77;41124:59;;41193:13;358:4134:71;;41193:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;986:87:56;;:::i;:::-;-1:-1:-1;;;;;358:4134:71;;1885:23:56;358:4134:71;;;1885:23:56;358:4134:71;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;6043:30:77;358:4134:71;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;;3301:14:8;3347:34;;;;;;358:4134:71;3346:108:8;;;;358:4134:71;;;;5366:69:8;358:4134:71;;;;;;;;;;;;3562:65:8;;358:4134:71;;;;;;;;5366:69:8;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;358:4134:71;;1591:38:56;358:4134:71;;;1591:38:56;358:4134:71;5366:69:8;;;:::i;:::-;1729:22:58;358:4134:71;;;;;;;;;;;;;;;;;;;;;1729:22:58;358:4134:71;5366:69:8;:::i;:::-;3065:7:78;358:4134:71;;3065:24:78;358:4134:71;3065:24:78;;:::i;:::-;358:4134:71;3168:39:78;358:4134:71;3139:26:78;3147:17;3139:26;;:::i;:::-;358:4134:71;3244:37:78;358:4134:71;3217:24:78;358:4134:71;3217:24:78;;:::i;:::-;358:4134:71;3320:39:78;358:4134:71;3291:26:78;358:4134:71;3291:26:78;;:::i;:::-;358:4134:71;3401:42:78;358:4134:71;3369:29:78;3377:20;3369:29;;:::i;:::-;358:4134:71;3485:42:78;358:4134:71;3453:29:78;358:4134:71;3453:29:78;;:::i;:::-;358:4134:71;3569:42:78;358:4134:71;3537:29:78;3545:20;3537:29;;:::i;:::-;358:4134:71;3655:44:78;358:4134:71;3621:31:78;3629:22;3621:31;;:::i;:::-;358:4134:71;3709:29:78;3717:20;3741:42;358:4134:71;3709:29:78;;:::i;:::-;358:4134:71;;;;5366:69:8;358:4134:71;;;;;5366:69:8;;;:::i;:::-;;:::i;:::-;358:4134:71;2065:22:11;358:4134:71;;;-1:-1:-1;;;;;;358:4134:71;;6656:38:77;358:4134:71;3647:99:8;;358:4134:71;3647:99:8;358:4134:71;;;;;3721:14:8;358:4134:71;;;;;;3721:14:8;358:4134:71;3562:65:8;-1:-1:-1;;358:4134:71;;;;;3562:65:8;;;358:4134:71;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;3346:108:8;3426:4;;1713:19:18;:23;3387:66:8;;3346:108;3387:66;358:4134:71;;;;;3436:17:8;3346:108;;3347:34;358:4134:71;;;;;3365:16:8;3347:34;;358:4134:71;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;1612:4:81;;1645:7;1612:4;;:::i;:::-;1645:7;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;4810:34:77;358:4134:71;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;39674:26:77;;358:4134:71;39674:7:77;:26;:::i;:::-;39720:11;358:4134:71;;;;;;;;;:::i;:::-;;;;39761:50:77;;;358:4134:71;;;;;;39797:12:77;358:4134:71;;;;;;39741:9:77;39761:50;358:4134:71;;;;;;;;;;;;;39761:50:77;358:4134:71;;;;;;;;;;;;;;;;39821:18:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;39887:10:77;39871:54;;39935:13;358:4134:71;;39935:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;986:87:56;;:::i;:::-;44825:13:77;358:4134:71;;;;;44813:74:77;;358:4134:71;45039:16:77;358:4134:71;-1:-1:-1;;;;;358:4134:71;;;;;;-1:-1:-1;;;;;;;;;;;45039:16:77;:::i;44813:74::-;358:4134:71;;-1:-1:-1;;;44862:25:77;;358:4134:71;;44862:25:77;358:4134:71;;;;;;-1:-1:-1;;358:4134:71;;;;;;569:21:58;358:4134:71;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;5129:68:77;358:4134:71;;;;;;;;;;;;5129:68:77;;358:4134:71;5129:68:77;;;358:4134:71;;5129:68:77;;358:4134:71;5129:68:77;;;;358:4134:71;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;622:21:58;358:4134:71;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;3438:6:1;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;-1:-1:-1;;;;;5865:32:77;358:4134:71;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;699:26:76;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5277:74:77;358:4134:71;;;;;;;;;;;;;;;5277:74:77;358:4134:71;5277:74:77;;358:4134:71;5277:74:77;;;;358:4134:71;5277:74:77;;358:4134:71;5277:74:77;;358:4134:71;;5277:74:77;;;358:4134:71;5277:74:77;;358:4134:71;;5277:74:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5059:64:77;358:4134:71;;;;;;;;;;;;;;;5059:64:77;358:4134:71;5059:64:77;;358:4134:71;5059:64:77;;;;358:4134:71;5059:64:77;;358:4134:71;5059:64:77;;358:4134:71;;5059:64:77;;;358:4134:71;5059:64:77;;358:4134:71;;5059:64:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2323:6;358:4134:71;;;;;-1:-1:-1;;;;;358:4134:71;2309:10:58;:20;2305:45;;358:4134:71;;;2364:10:58;2360:36;;358:4134:71;;;;;;2323:6:58;358:4134:71;2435:18:58;358:4134:71;;;2309:10:58;358:4134:71;;2435:18:58;358:4134:71;2360:36:58;358:4134:71;;-1:-1:-1;;;2383:13:58;;358:4134:71;;2383:13:58;2305:45;358:4134:71;;-1:-1:-1;;;2338:12:58;;358:4134:71;;2338:12:58;358:4134:71;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;39077:24:77;;358:4134:71;39077:7:77;:24;:::i;:::-;39121:11;358:4134:71;;;;;;;;;:::i;:::-;;;;39162:48:77;;;358:4134:71;;;;;;39196:12:77;358:4134:71;;;;;;39142:9:77;39162:48;358:4134:71;;;;;;;;;;;;;39162:48:77;358:4134:71;;;;;;;;;;;;;;;;39220:16:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;39284:10:77;39268:52;;39330:13;358:4134:71;;39330:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5729:45:77;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;4886:26:77;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5357:78:77;358:4134:71;;;;;;;;;;;;;;;5357:78:77;358:4134:71;5357:78:77;;358:4134:71;5357:78:77;;;;358:4134:71;5357:78:77;358:4134:71;5357:78:77;;358:4134:71;5357:78:77;358:4134:71;5357:78:77;;358:4134:71;;5357:78:77;;;;;;358:4134:71;;5357:78:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;41543:29:77;;41551:20;41543:7;:29;:::i;:::-;41592:11;358:4134:71;;;;;;;;;:::i;:::-;41551:20:77;358:4134:71;;41633:53:77;;;358:4134:71;;;;;;41672:12:77;358:4134:71;;;;;;41613:9:77;41633:53;358:4134:71;;;;;;;;;;;;;41633:53:77;358:4134:71;;;;;;;;;;;;;;;;41696:21:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;41551:20:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;41765:10:77;41749:57;;41816:13;358:4134:71;;41816:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;986:87:56;;:::i;:::-;3553:16:58;358:4134:71;;-1:-1:-1;;358:4134:71;3565:4:58;358:4134:71;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;43218:11:77;358:4134:71;43233:11:77;358:4134:71;43218:26:77;358:4134:71;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;986:87:56;;:::i;:::-;44325:34:77;358:4134:71;;;;;;;;;;-1:-1:-1;;;;;;358:4134:71;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;791:2:76;777:16;358:4134:71;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;2082:7:58;358:4134:71;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5521:74:77;358:4134:71;;;;;;;;;;;;;;;5521:74:77;358:4134:71;5521:74:77;;358:4134:71;5521:74:77;;;;358:4134:71;5521:74:77;358:4134:71;5521:74:77;;358:4134:71;5521:74:77;358:4134:71;5521:74:77;;358:4134:71;;5521:74:77;;;;;;358:4134:71;;5521:74:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;358:4134:71;;;;4445:11;358:4134;4459:24;4467:15;4459:7;:24;:::i;:::-;358:4134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;2333:6:9;-1:-1:-1;;;;;358:4134:71;2324:4:9;2316:23;358:4134:71;;;;;1312:66:6;358:4134:71;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;986:87:56;;:::i;:::-;3206:17:58;358:4134:71;;-1:-1:-1;;358:4134:71;;;;;;;-1:-1:-1;;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;4109:4:9;358:4134:71;;;;;;;1963:87:9;358:4134:71;;;;;;;;;;1898:6:9;;358:4134:71;1889:4:9;1873:80;1889:4;;1881:23;;1873:80;:::i;:::-;1312:66:6;358:4134:71;;1971:30:9;1963:87;:::i;:::-;986::56;;:::i;:::-;4109:4:9;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;898:66:58;;:::i;:::-;1830:1:11;2712:7;358:4134:71;2712:19:11;1830:1;;;2712:7;358:4134:71;36174:11:77;358:4134:71;;36330:11:77;358:4134:71;36352:15:77;358:4134:71;;;;;;;672:5:43;;;:13;:5;;;:13;;;;;;36499:19:77;;;;;36492:413;358:4134:71;;36174:11:77;358:4134:71;36999:21:77;36995:558;;36492:413;358:4134:71;2712:7:11;358:4134:71;;36995:558:77;37262:21;37242:41;;37238:88;;36995:558;358:4134:71;;;;;;;37422:58:77;;;;:::i;:::-;;37498:8;37494:48;;36995:558;;;37494:48;358:4134:71;;-1:-1:-1;;;37515:27:77;;358:4134:71;;37515:27:77;37238:88;-1:-1:-1;37305:21:77;37238:88;;36492:413;36574:25;;358:4134:71;34004:20:77;358:4134:71;;;;;34063:9:77;358:4134:71;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;358:4134:71;;36393:12:77;358:4134:71;-1:-1:-1;34091:1639:77;358:4134:71;;;-1:-1:-1;358:4134:71;;-1:-1:-1;358:4134:71;;-1:-1:-1;358:4134:71;34091:1639:77;35739:39;;34091:1639;36613:282;;;36668:10;358:4134:71;36668:10:77;;36650:37;358:4134:71;36650:37:77;;358:4134:71;;;36613:282:77;36492:413;;;;;;36613:282;36875:5;;;;35739:39;358:4134:71;;;34063:9:77;358:4134:71;;;;;;;35739:39:77;;34091:1639;358:4134:71;;;;;;;;;34207:36:77;34228:15;;358:4134:71;;;;;;;544:16;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;686:13;358:4134;;;;-1:-1:-1;;;686:32:71;;358:4134;;;686:32;;358:4134;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;686:32;;358:4134;;;;;;;;;686:32;;;;;;;358:4134;;;686:32;;;34203:1527:77;358:4134:71;7312:327:77;358:4134:71;;;;;;;7334:14:77;;358:4134:71;;7362:17:77;7312:327;7362:17;;358:4134:71;;;;;7362:17:77;;;358:4134:71;;;;;;;;7477:19:77;358:4134:71;7477:19:77;;358:4134:71;7510:25:77;358:4134:71;7510:25:77;;358:4134:71;7549:31:77;;358:4134:71;;;;;;;;7594:14:77;;358:4134:71;;;;;7312:327:77;;;;;:::i;:::-;;;;358:4134:71;34322:24:77;;;358:4134:71;34322:7:77;:24;:::i;:::-;358:4134:71;34203:1527:77;34091:1639;;686:32:71;7312:327:77;686:32:71;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;-1:-1:-1;686:32:71;;;;;;;;358:4134;;971:66:6;358:4134:71;971:66:6;;;;;34203:1527:77;358:4134:71;;;;;;;;1830:1:11;34367:38:77;1830:1:11;;358:4134:71;;;;;;;960:18;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1103:13;358:4134;;;;-1:-1:-1;;;1103:34:71;;358:4134;;;1103:34;;358:4134;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1103:34;;358:4134;;;;;;;;;1103:34;;;;;;;358:4134;;;1103:34;;;34363:1367:77;358:4134:71;8173:326:77;358:4134:71;;;;;;;8197:14:77;;358:4134:71;;8225:17:77;8173:326;8225:17;;358:4134:71;;;;;8225:17:77;;;358:4134:71;;;;;;;;8337:19:77;358:4134:71;8337:19:77;;358:4134:71;8370:25:77;358:4134:71;8370:25:77;;358:4134:71;8409:31:77;;358:4134:71;;;;;;;;8454:14:77;;358:4134:71;;;;;8173:326:77;;;;;:::i;:::-;;;;358:4134:71;34486:26:77;;;1830:1:11;34486:7:77;:26;:::i;1103:34:71:-;8173:326:77;1103:34:71;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;1103:34:71;;34363:1367:77;358:4134:71;;;;;;;;;34533:36:77;34554:15;;358:4134:71;;;;;;;1374:16;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1516:13;358:4134;;;-1:-1:-1;;;1516:32:71;;358:4134;1516:32;;358:4134;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;1516:32;;358:4134;;:::i;:::-;1516:32;;;;;;;358:4134;;;1516:32;;;34529:1201:77;-1:-1:-1;358:4134:71;;9088:14:77;;;;358:4134:71;;9116:17:77;;358:4134:71;;9147:11:77;;;358:4134:71;;;9231:19:77;;;358:4134:71;;9264:25:77;;;358:4134:71;9303:31:77;;;;358:4134:71;;9348:14:77;;;358:4134:71;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;9042:351:77;;358:4134:71;;;;9042:351:77;;358:4134:71;;;;;;;;;;9042:351:77;:::i;:::-;;;;358:4134:71;34648:24:77;;;358:4134:71;34648:7:77;:24;:::i;1516:32:71:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;34529:1201:77;358:4134:71;;;;;;;;;34693:38:77;358:4134:71;;;;;;;;;1790:18;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1933:13;358:4134;;;-1:-1:-1;;;1933:34:71;;358:4134;1933:34;;358:4134;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;1933:34;;358:4134;;:::i;:::-;1933:34;;;;;;;358:4134;;;1933:34;;;34689:1041:77;-1:-1:-1;358:4134:71;;9943:14:77;;;;358:4134:71;;9971:17:77;;358:4134:71;;10002:11:77;;;358:4134:71;;;10083:19:77;;;358:4134:71;;10116:25:77;;;358:4134:71;10155:31:77;;;;358:4134:71;;10200:14:77;;;358:4134:71;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;9895:350:77;;358:4134:71;;;;9895:350:77;;358:4134:71;;;;;;;;;;9895:350:77;:::i;:::-;;;;358:4134:71;34812:26:77;;;358:4134:71;34812:7:77;:26;:::i;1933:34:71:-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;34689:1041:77;358:4134:71;;;;;;;;34880:20:77;34859:41;34880:20;;358:4134:71;;;;;;;;2214:21;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2386:13;358:4134;;;-1:-1:-1;;;2386:50:71;;358:4134;;;;;;;;;971:66:6;-1:-1:-1;;;;;358:4134:71;;;2386:50;;358:4134;;:::i;:::-;2386:50;;;;;;;358:4134;;;;2386:50;;;34855:875:77;358:4134:71;10884:380:77;358:4134:71;;;;;;;;;10935:14:77;10884:380;10935:14;;358:4134:71;;;;;;10935:14:77;;;358:4134:71;;;;;;;;;10963:17:77;;358:4134:71;;11018:11:77;358:4134:71;11018:11:77;;358:4134:71;;;;;11102:19:77;;358:4134:71;11135:25:77;358:4134:71;11135:25:77;;358:4134:71;11174:31:77;;358:4134:71;;;;;;;;11219:14:77;;358:4134:71;;;;;10884:380:77;;;;;:::i;:::-;;;;358:4134:71;34984:29:77;;;34880:20;34984:7;:29;:::i;2386:50:71:-;;;10884:380:77;2386:50:71;;;;;358:4134;2386:50;358:4134;2386:50;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;-1:-1:-1;2386:50:71;;;;;;;34855:875:77;358:4134:71;;;;;;;;35055:22:77;35034:43;35055:22;;358:4134:71;;;;;;;2705:23;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2880:13;358:4134;;;-1:-1:-1;;;2880:52:71;;358:4134;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;2880:52;;358:4134;;:::i;:::-;2880:52;;;;;;358:4134;;;;;2880:52;;;35030:700:77;358:4134:71;11880:381:77;358:4134:71;;;;;;;;;;11880:381:77;358:4134:71;;;;;;;11933:14:77;;358:4134:71;;;;;;;;;11961:17:77;;358:4134:71;;11992:11:77;358:4134:71;11992:11:77;;358:4134:71;;;;;12099:19:77;;358:4134:71;12132:25:77;12171:31;358:4134:71;12132:25:77;;358:4134:71;12171:31:77;;358:4134:71;;12216:14:77;358:4134:71;;;;;12216:14:77;;358:4134:71;;;;;11880:381:77;;;;;:::i;:::-;;;;358:4134:71;35163:31:77;;;35055:22;35163:7;:31;:::i;2880:52:71:-;;;11880:381:77;2880:52:71;;;;;358:4134;2880:52;358:4134;2880:52;;;;;;;:::i;:::-;;;;;;;35030:700:77;358:4134:71;;;;;;;;35236:20:77;35215:41;35236:20;;358:4134:71;;;;;;;;3198:21;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3346:13;358:4134;;;-1:-1:-1;;;3346:37:71;;358:4134;;;;;;;;;971:66:6;-1:-1:-1;;;;;358:4134:71;;;3346:37;;358:4134;;:::i;:::-;3346:37;;;;;;;358:4134;;;3346:37;;;35211:519:77;358:4134:71;12778:352:77;358:4134:71;;;;;;;;;;;;;;;12830:14:77;;358:4134:71;;;12778:352:77;358:4134:71;;;;;;;12858:17:77;;358:4134:71;;12889:11:77;358:4134:71;12889:11:77;;358:4134:71;;;;12968:19:77;358:4134:71;12968:19:77;;358:4134:71;13040:31:77;358:4134:71;13001:25:77;;358:4134:71;13040:31:77;;358:4134:71;;13085:14:77;358:4134:71;;;;;13085:14:77;;358:4134:71;;;;;12778:352:77;;;;;:::i;:::-;;;;358:4134:71;35340:29:77;;;35236:20;35340:7;:29;:::i;3346:37:71:-;;;;;;;358:4134;3346:37;358:4134;3346:37;;;;;;;:::i;:::-;;;;;;;;35211:519:77;358:4134:71;;;;;;;;;35390:41:77;358:4134:71;;;;;;;;;;3631:21;358:4134;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3779:13;358:4134;;;-1:-1:-1;;;3779:37:71;;358:4134;;;;;;;;;971:66:6;-1:-1:-1;;;;;358:4134:71;;;3779:37;;358:4134;;:::i;:::-;3779:37;;;;;;;358:4134;;;3779:37;;;35386:344:77;358:4134:71;13646:352:77;358:4134:71;;;;;;;;;;;;;;;13698:14:77;;358:4134:71;;;13646:352:77;358:4134:71;;;;;;;13726:17:77;;358:4134:71;;13757:11:77;358:4134:71;13757:11:77;;358:4134:71;;;;13836:19:77;358:4134:71;13836:19:77;;358:4134:71;13908:31:77;358:4134:71;13869:25:77;;358:4134:71;13908:31:77;;358:4134:71;;13953:14:77;358:4134:71;;;;;13953:14:77;;358:4134:71;;;;;13646:352:77;;;;;:::i;:::-;;;;358:4134:71;35515:29:77;;;358:4134:71;35515:7:77;:29;:::i;3779:37:71:-;;;;;;;358:4134;3779:37;358:4134;3779:37;;;;;;;:::i;:::-;;;;;;;;35386:344:77;358:4134:71;;;;;;;35586:20:77;35565:41;35561:169;;35386:344;;34091:1639;;35561:169;358:4134:71;;;;;;4064:21;358:4134;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1830:1:11;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;34880:20:77;358:4134:71;;;;;;;;;;;;;35055:22:77;358:4134:71;;;;;;;;35236:20:77;358:4134:71;;;;;;;;;;;;;;;;4064:21;358:4134;;;35236:20:77;358:4134:71;;;;;;;;;;;;1830:1:11;358:4134:71;;;;;;;;;;;;;;34880:20:77;358:4134:71;;;;35055:22:77;358:4134:71;;;;;;;;;;;4212:13;358:4134;;;;;971:66:6;;;;;;;4212:37:71;;358:4134;;;;;;;;;4212:37;;358:4134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4212:37;;;;;;;358:4134;;;4212:37;;;35561:169:77;358:4134:71;14528:382:77;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14748:19:77;;358:4134:71;14781:25:77;358:4134:71;;14781:25:77;;358:4134:71;14820:31:77;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14528:382:77;358:4134:71;35690:29:77;;;35586:20;35690:7;:29;:::i;:::-;358:4134:71;35561:169:77;;;;4212:37:71;;;;;;;358:4134;4212:37;358:4134;4212:37;;;;;;;:::i;:::-;;;;;;;;672:13:43;;;;;;;;;1830:1:11;358:4134:71;;-1:-1:-1;;;1830:1:11;;358:4134:71;;1830:1:11;;;;;;;358:4134:71;1830:1:11;358:4134:71;;;1830:1:11;;;;358:4134:71;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;;2046:43:78;358:4134:71;2046:43:78;;;:::i;:::-;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;986:87:56;;:::i;:::-;3065:7:78;358:4134:71;;3065:24:78;358:4134:71;3065:24:78;;:::i;:::-;358:4134:71;3168:39:78;358:4134:71;3139:26:78;3147:17;3139:26;;:::i;:::-;358:4134:71;3244:37:78;358:4134:71;3217:24:78;358:4134:71;3217:24:78;;:::i;:::-;358:4134:71;3320:39:78;358:4134:71;3291:26:78;358:4134:71;3291:26:78;;:::i;:::-;358:4134:71;3401:42:78;358:4134:71;3369:29:78;3377:20;3369:29;;:::i;:::-;358:4134:71;3485:42:78;358:4134:71;3453:29:78;3461:20;3453:29;;:::i;:::-;358:4134:71;3569:42:78;358:4134:71;3537:29:78;3545:20;3537:29;;:::i;:::-;358:4134:71;3655:44:78;358:4134:71;3621:31:78;3629:22;3621:31;;:::i;:::-;358:4134:71;3709:29:78;3717:20;3741:42;358:4134:71;3709:29:78;;:::i;:::-;358:4134:71;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;40285:29:77;;40293:20;40285:7;:29;:::i;:::-;40334:11;358:4134:71;;;;;;;;;:::i;:::-;40293:20:77;358:4134:71;;40375:53:77;;;358:4134:71;;;;;;40414:12:77;358:4134:71;;;;;;40355:9:77;40375:53;358:4134:71;;;;;;;;;;;;;40375:53:77;358:4134:71;;;;;;;;;;;;;;;;40438:21:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;40293:20:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;40507:10:77;40491:57;;40558:13;358:4134:71;;40558:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5601:74:77;358:4134:71;;;;;;;;;;;;;;;5601:74:77;;358:4134:71;5601:74:77;;358:4134:71;;5601:74:77;;;;358:4134:71;;5601:74:77;;358:4134:71;;5601:74:77;;358:4134:71;5601:74:77;;;;;358:4134:71;;5601:74:77;;;;;;358:4134:71;;5601:74:77;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;1108:7:58;358:4134:71;;;;;;1107:8:58;1103:38;;358:4134:71;;;;;;;;;;2679:10:58;:20;;:65;;;;358:4134:71;2675:90:58;;;358:4134:71;;;2779:10:58;2775:36;;358:4134:71;;;1108:7:58;358:4134:71;2851:20:58;358:4134:71;;;2679:10:58;358:4134:71;;2851:20:58;358:4134:71;2679:65:58;2704:8;358:4134:71;;;-1:-1:-1;;;2704:40:58;;2679:10;358:4134:71;2704:40:58;;358:4134:71;;-1:-1:-1;2704:40:58;;358:4134:71;;;;;;;2704:40:58;;;;;;;358:4134:71;2704:40:58;;;2679:65;2703:41;;2679:65;;;2704:40;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1103:38;358:4134:71;;-1:-1:-1;;;1124:17:58;;358:4134:71;;1124:17:58;358:4134:71;;;;;;-1:-1:-1;;358:4134:71;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;986:87:56;;:::i;:::-;43958:38:77;358:4134:71;;-1:-1:-1;;;;;;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;3569:5:9;1898:6;1963:87;1898:6;358:4134:71;1898:6:9;;358:4134:71;1889:4:9;1873:80;1889:4;;1881:23;;1873:80;:::i;1963:87::-;986::56;;:::i;:::-;358:4134:71;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;358:4134:71;;;:::i;:::-;;;;;;;3569:5:9;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;929:10:19;6463:23:1;358:4134:71;;6567:7:1;358:4134:71;;;6567:7:1;:::i;358:4134:71:-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;42789:29:77;;42797:20;42789:7;:29;:::i;:::-;42838:11;358:4134:71;;;;;;;;:::i;:::-;42797:20:77;358:4134:71;;42879:53:77;;;358:4134:71;;;;;42918:12:77;358:4134:71;;;;;;42859:9:77;42879:53;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;42942:21:77;42879:53;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42879:53:77;358:4134:71;;;;;;;;;;;;42797:20:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;43011:10:77;42995:57;;43062:13;358:4134:71;;43062:13:77;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;1100:4:81;;1132:7;1100:4;;:::i;:::-;1132:7;:::i;358:4134:71:-;;;;;;-1:-1:-1;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;986:87:56;;:::i;:::-;3907:19:58;358:4134:71;;-1:-1:-1;;;;;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;4956:26:77;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;4934:6:1;358:4134:71;;;;;;;4934:22:1;358:4134:71;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;;4340:18:78;;:7;:18;:::i;:::-;358:4134:71;;;4372:23:78;;4368:69;;358:4134:71;;;;;;;;4368:69:78;358:4134:71;;;;4404:33:78;;;;;;358:4134:71;4404:33:78;;358:4134:71;4404:33:78;358:4134:71;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;4989:64:77;358:4134:71;;;;;;;;;;;;4989:64:77;;358:4134:71;4989:64:77;;;358:4134:71;;4989:64:77;;358:4134:71;4989:64:77;;;;358:4134:71;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;5441:74:77;358:4134:71;;;;;;;;;;;;;;;5441:74:77;358:4134:71;5441:74:77;;358:4134:71;5441:74:77;;;;358:4134:71;5441:74:77;358:4134:71;5441:74:77;;358:4134:71;5441:74:77;358:4134:71;5441:74:77;;358:4134:71;;5441:74:77;;;;;;358:4134:71;;5441:74:77;;358:4134:71;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;358:4134:71;;;;747:25:56;358:4134:71;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3137:58:1;;;:98;;;;358:4134:71;;;;;;;;;;3137:98:1;-1:-1:-1;;;1168:51:22;;-1:-1:-1;3137:98:1;;;358:4134:71;;;-1:-1:-1;;358:4134:71;;;;898:66:58;;:::i;:::-;2939:4:1;-1:-1:-1;;;;;;;;;;;2939:4:1;:::i;:::-;42166:29:77;;42174:20;42166:7;:29;:::i;:::-;42215:11;358:4134:71;;;;;;;;;:::i;:::-;42174:20:77;358:4134:71;;42256:53:77;;;358:4134:71;;;;;;42295:12:77;358:4134:71;;;;;;42236:9:77;42256:53;358:4134:71;;;;;;;;;;;;;42256:53:77;358:4134:71;;;;;42174:20:77;358:4134:71;;;;;;;;;;42319:21:77;358:4134:71;;;;;;;;:::i;:::-;;;;;;42174:20:77;358:4134:71;;;;-1:-1:-1;;;;;;;;;;;358:4134:71;42388:10:77;42372:57;;42439:13;358:4134:71;;42439:13:77;:::i;358:4134:71:-;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;358:4134:71;;;;-1:-1:-1;358:4134:71;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;358:4134:71;;;;:::o;:::-;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8321:234:1:-;;-1:-1:-1;358:4134:71;;;;3438:6:1;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;8400:149:1;;8321:234;;;;;:::o;8400:149::-;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;8498:40:1;929:10:19;8498:40:1;;;8400:149;;;;;;358:4134:71;;;;:::o;:::-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;2820:944:6;;358:4134:71;971:66:6;358:4134:71;;3232:526:6;358:4134:71;;;3330:17:6;;;;;:::i;:::-;2820:944::o;3232:526::-;358:4134:71;;-1:-1:-1;;;3383:63:6;;;;358:4134:71;;;;-1:-1:-1;;;;;358:4134:71;;;3383:63:6;358:4134:71;3383:63:6;358:4134:71;;3383:63:6;;-1:-1:-1;;3383:63:6;;;3232:526;-1:-1:-1;3379:302:6;;358:4134:71;;-1:-1:-1;;;3610:56:6;;3383:63;3610:56;;971:66;;;;;;;358:4134:71;971:66:6;358:4134:71;;;971:66:6;-1:-1:-1;;;971:66:6;;;;;;3610:56;3379:302;3496:28;;;;;971:66;;2171:17;;;:::i;:::-;2204:27;-1:-1:-1;2204:27:6;;358:4134:71;;2523:15:6;;;;:28;;;3379:302;2519:123;;;3232:526;;;2820:944::o;2519:123::-;-1:-1:-1;358:4134:71;7318:69:18;358:4134:71;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;7276:25:18;;;;;;;;;:::i;:::-;7318:69;;:::i;:::-;;2820:944:6:o;2523:28::-;;;;;;971:66;358:4134:71;;-1:-1:-1;;;971:66:6;;3383:63;971:66;;;;;;;;;358:4134:71;971:66:6;358:4134:71;;;971:66:6;-1:-1:-1;;;971:66:6;;;;;;;3383:63;;;;;;;;;;;;;;;;:::i;:::-;;;971:66;;;;;;3383:63;;;;971:66;358:4134:71;;3383:63:6;;;;;1699:281;1713:19:18;;:23;358:4134:71;;1312:66:6;358:4134:71;;-1:-1:-1;;;;;;358:4134:71;-1:-1:-1;;;;;358:4134:71;;;;;;;;;1699:281:6:o;358:4134:71:-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;358:4134:71;;;;:::o;:::-;;;:::o;7682:628:18:-;;;;7886:418;;;358:4134:71;;;7917:22:18;7913:286;;8212:17;;:::o;7913:286::-;1713:19;:23;358:4134:71;;8212:17:18;:::o;358:4134:71:-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;;;;7886:418:18;358:4134:71;;;;-1:-1:-1;8991:21:18;:17;;9163:142;;;;;;;8987:379;358:4134:71;;-1:-1:-1;;;9335:20:18;;358:4134:71;;;9335:20:18;;;;;;:::i;:::-;;;;358:4134:71;;;;;;;;-1:-1:-1;;358:4134:71;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;358:4134:71;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;2016:143:56:-;2081:8;358:4134:71;;;-1:-1:-1;;;2081:40:56;;2110:10;2081:40;;;358:4134:71;;2081:40:56;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;2081:40:56;;;;;;;-1:-1:-1;2081:40:56;;;2016:143;2080:41;;2076:76;;2016:143::o;2076:76::-;358:4134:71;;-1:-1:-1;;;2130:22:56;;2081:40;;2130:22;2081:40;;;;;;;;;;;;;;:::i;:::-;;;;1865:93:58;358:4134:71;1920:7:58;358:4134:71;;;;1916:35:58;;1865:93::o;1916:35::-;358:4134:71;;-1:-1:-1;;;1936:15:58;;;;;358:4134:71;;;;:::o;:::-;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;358:4134:71;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;-1:-1:-1;;358:4134:71;;;;;;;:::o;3768:103:1:-;358:4134:71;-1:-1:-1;358:4134:71;;3438:6:1;358:4134:71;;;-1:-1:-1;358:4134:71;929:10:19;-1:-1:-1;358:4134:71;;;;;-1:-1:-1;358:4134:71;;;4239:23:1;4235:412;;3768:103;;:::o;4235:412::-;4330:274;358:4134:71;4278:358:1;929:10:19;;4533:49:1;358:4134:71;929:10:19;2563:52:21;376:2;929:10:19;2563:52:21;:::i;:::-;4533:49:1;;:::i;:::-;358:4134:71;;;4330:274:1;;;358:4134:71;4330:274:1;;;358:4134:71;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;358:4134:71;;;;;;;;;;;;;;;:::i;:::-;;4330:274:1;;;;;;;;;:::i;:::-;358:4134:71;;-1:-1:-1;;;4278:358:1;;358:4134:71;;;4278:358:1;;;;:::i;1884:437:21:-;358:4134:71;;;;;;1884:437:21;-1:-1:-1;;;;;358:4134:71;;;;;2016:1:21;358:4134:71;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;358:4134:71;;;;;;;;;2041:15:21;;;358:4134:71;;;;;;;2066:15:21;358:4134:71;;;2066:15:21;358:4134:71;;;;;;;;2091:128:21;2124:5;;;;;;2236:10;;311:18;;2293:21;1884:437;:::o;311:18::-;;358:4134:71;;;;;;;311:18:21;;;2207:1;311:18;;;;;;358:4134:71;311:18:21;358:4134:71;;;311:18:21;;2131:3;2171:11;;2179:3;2171:11;;2162:21;;;;;;358:4134:71;;;;;;;-1:-1:-1;;;2162:21:21;;358:4134:71;;;;;2150:33:21;2207:1;358:4134:71;2131:3:21;358:4134:71;;;;-1:-1:-1;;358:4134:71;;2096:26:21;;358:4134:71;;;;;;;;;2207:1:21;358:4134:71;;;;;;;;;;;2207:1:21;358:4134:71;;;;;;-1:-1:-1;358:4134:71;;;;;-1:-1:-1;358:4134:71;;-1:-1:-1;;;;;358:4134:71;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;358:4134:71;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;43354:229:77:-;43218:11;358:4134:71;43233:11:77;358:4134:71;43218:26:77;;43417:27;;-1:-1:-1;358:4134:71;43481:9:77;43521:18;358:4134:71;43521:18:77;358:4134:71;-1:-1:-1;358:4134:71;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;43558:17:77;358:4134:71;;43543:12:77;358:4134:71;43543:12:77;;358:4134:71;;;;43521:54:77;;43354:229;:::o;43417:27::-;43432:12;-1:-1:-1;43432:12:77;:::o;7917:233:1:-;;-1:-1:-1;358:4134:71;;;;3438:6:1;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;7999:23:1;7995:149;;7917:233;;;;:::o;7995:149::-;358:4134:71;;;;;;;;;;;;;;;;;;;;;;;;;8093:40:1;929:10:19;8093:40:1;;;7995:149;;;;;;2715:140:78;2799:9;2783:25;;2779:69;;2715:140;:::o;1709:215:81:-;1790:8;358:4134:71;;;;-1:-1:-1;;;1790:40:81;;1819:10;1790:40;;;358:4134:71;;;;1790:40:81;;358:4134:71;;;;;;-1:-1:-1;;;;;358:4134:71;1790:40:81;;;;;;;-1:-1:-1;1790:40:81;;;1709:215;1789:41;;:85;;;;1709:215;1785:132;;;1709:215;:::o;1785:132::-;358:4134:71;-1:-1:-1;;;1895:22:81;;1790:40;;1895:22;1789:85;358:4134:71;;-1:-1:-1;358:4134:71;4934:6:1;1790:40:81;358:4134:71;;;-1:-1:-1;358:4134:71;4934:22:1;358:4134:71;-1:-1:-1;358:4134:71;;-1:-1:-1;358:4134:71;1819:10:81;-1:-1:-1;358:4134:71;1790:40:81;358:4134:71;;;-1:-1:-1;358:4134:71;;;1834:40:81;1789:85;;;1790:40;;;;;;;;;;;;;;:::i;:::-;;;;;358:4134:71;;971:66:6;-1:-1:-1;971:66:6;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "3090600",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "DEFAULT_ADMIN_ROLE()": "1093",
        "changeGovernor(address)": "infinite",
        "execFee(uint8)": "2817",
        "execute(address)": "infinite",
        "firstOperId()": "2404",
        "getAndVerifyExecFee(uint8,uint256)": "2562",
        "getCustomMockValue()": "5034",
        "getRoleAdmin(bytes32)": "2454",
        "governor()": "2318",
        "grantRole(bytes32,address)": "infinite",
        "hasRole(bytes32,address)": "3345",
        "initialize(address,address,uint128,uint128,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "initializeMock()": "22823",
        "isEmpty()": "4994",
        "makeStoppable()": "infinite",
        "makeUnstoppable()": "infinite",
        "maxOperPerBatch()": "3378",
        "minOperWaitingBlk()": "3148",
        "mocOperations()": "3330",
        "newVariable()": "3108",
        "operIdCount()": "2976",
        "operationsMintTC(uint256)": "10981",
        "operationsMintTCandTP(uint256)": "13937",
        "operationsMintTP(uint256)": "13915",
        "operationsRedeemTC(uint256)": "11861",
        "operationsRedeemTCandTP(uint256)": "15941",
        "operationsRedeemTP(uint256)": "14329",
        "operationsSwapTCforTP(uint256)": "15303",
        "operationsSwapTPforTC(uint256)": "15787",
        "operationsSwapTPforTP(uint256)": "17596",
        "opersInfo(uint256)": "3125",
        "pause()": "28396",
        "paused()": "2840",
        "pauser()": "3207",
        "proxiableUUID()": "infinite",
        "queueMintTC((uint256,uint256,address,address,address))": "infinite",
        "queueMintTCandTP((address,uint256,uint256,address,address,address))": "infinite",
        "queueMintTP((address,uint256,uint256,address,address,address))": "infinite",
        "queueRedeemTC((uint256,uint256,address,address,address))": "infinite",
        "queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "queueRedeemTP((address,uint256,uint256,address,address,address))": "infinite",
        "queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))": "infinite",
        "queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))": "infinite",
        "readyToExecute()": "9232",
        "registerBucket(address)": "infinite",
        "renounceRole(bytes32,address)": "29008",
        "revokeRole(bytes32,address)": "infinite",
        "setMaxOperPerBatch(uint128)": "infinite",
        "setMinOperWaitingBlk(uint128)": "infinite",
        "setPauser(address)": "infinite",
        "stoppable()": "3252",
        "supportsInterface(bytes4)": "293",
        "unpause()": "infinite",
        "updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite"
      },
      "internal": {
        "_executeMintTC(uint256)": "infinite",
        "_executeMintTCandTP(uint256)": "infinite",
        "_executeMintTP(uint256)": "infinite",
        "_executeRedeemTC(uint256)": "infinite",
        "_executeRedeemTCandTP(uint256)": "infinite",
        "_executeRedeemTP(uint256)": "infinite",
        "_executeSwapTCforTP(uint256)": "infinite",
        "_executeSwapTPforTC(uint256)": "infinite",
        "_executeSwapTPforTP(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "DEFAULT_ADMIN_ROLE()": "a217fddf",
      "changeGovernor(address)": "e4c0aaf4",
      "execFee(uint8)": "4b5a9e3d",
      "execute(address)": "4b64e492",
      "firstOperId()": "2b994849",
      "getAndVerifyExecFee(uint8,uint256)": "24524ea1",
      "getCustomMockValue()": "57271f4d",
      "getRoleAdmin(bytes32)": "248a9ca3",
      "governor()": "0c340a24",
      "grantRole(bytes32,address)": "2f2ff15d",
      "hasRole(bytes32,address)": "91d14854",
      "initialize(address,address,uint128,uint128,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": "db901477",
      "initializeMock()": "5e2a6065",
      "isEmpty()": "681fe70c",
      "makeStoppable()": "68274357",
      "makeUnstoppable()": "5210570c",
      "maxOperPerBatch()": "dbb0b684",
      "minOperWaitingBlk()": "8e7e8189",
      "mocOperations()": "caeb12b6",
      "newVariable()": "8d7a72f3",
      "operIdCount()": "73e3d086",
      "operationsMintTC(uint256)": "1a0c5440",
      "operationsMintTCandTP(uint256)": "8b20076c",
      "operationsMintTP(uint256)": "8a4737ab",
      "operationsRedeemTC(uint256)": "ad16c2de",
      "operationsRedeemTCandTP(uint256)": "6b763330",
      "operationsRedeemTP(uint256)": "fb8aafb8",
      "operationsSwapTCforTP(uint256)": "1826ebf0",
      "operationsSwapTPforTC(uint256)": "5c817aa3",
      "operationsSwapTPforTP(uint256)": "435c7e37",
      "opersInfo(uint256)": "7c50b7e4",
      "pause()": "8456cb59",
      "paused()": "5c975abb",
      "pauser()": "9fd0506d",
      "proxiableUUID()": "52d1902d",
      "queueMintTC((uint256,uint256,address,address,address))": "e97a4d63",
      "queueMintTCandTP((address,uint256,uint256,address,address,address))": "47d8496a",
      "queueMintTP((address,uint256,uint256,address,address,address))": "7e81a821",
      "queueRedeemTC((uint256,uint256,address,address,address))": "fa91a9a5",
      "queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))": "e4e1b729",
      "queueRedeemTP((address,uint256,uint256,address,address,address))": "c84d8bb6",
      "queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))": "6b59c22f",
      "queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))": "00c6e88e",
      "queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))": "34975a41",
      "readyToExecute()": "3cbcf4c4",
      "registerBucket(address)": "bbe720d9",
      "renounceRole(bytes32,address)": "36568abe",
      "revokeRole(bytes32,address)": "d547741f",
      "setMaxOperPerBatch(uint128)": "5ee1d2bb",
      "setMinOperWaitingBlk(uint128)": "3bb4b05c",
      "setPauser(address)": "2d88af4a",
      "stoppable()": "bb4872de",
      "supportsInterface(bytes4)": "01ffc9a7",
      "unpause()": "3f4ba83a",
      "updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": "4981d04e",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BucketAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionFeePaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedChanger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhilePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unstoppable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"}],\"name\":\"WrongExecutionFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"errorCode_\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"msg_\",\"type\":\"string\"}],\"name\":\"OperationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"OperationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bucket_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MocQueueExecFees.OperType\",\"name\":\"operType_\",\"type\":\"uint8\"}],\"name\":\"OperationQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TCMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TCRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TCSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TCandTPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TCandTPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tp_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tpFrom_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tpTo_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPfrom_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPto_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeToken_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qFeeTokenVendorMarkup_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vendor_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason_\",\"type\":\"bytes\"}],\"name\":\"UnhandledError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MocQueueExecFees.OperType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"execFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionFeeRecipient\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstOperId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MocQueueExecFees.OperType\",\"name\":\"operType_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"getAndVerifyExecFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentExecFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCustomMockValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser_\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minOperWaitingBlk_\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxOperPerBatch_\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tcMintExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcRedeemExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTCExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTCforTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTCandTPExecFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MocQueueExecFees.InitializeMocQueueExecFeesParams\",\"name\":\"mocQueueExecFeesParams_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeStoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnstoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOperPerBatch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOperWaitingBlk\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocOperations\",\"outputs\":[{\"internalType\":\"contract MocOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsMintTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsMintTCandTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsMintTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsRedeemTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsRedeemTCandTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsRedeemTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsSwapTCforTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsSwapTPforTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operationsSwapTPforTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tpFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tpTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"opersInfo\",\"outputs\":[{\"internalType\":\"enum MocQueueExecFees.OperType\",\"name\":\"operType\",\"type\":\"uint8\"},{\"internalType\":\"uint248\",\"name\":\"queuedBlk\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCore.MintTCParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueMintTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.MintTCandTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueMintTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCore.MintTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueMintTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCore.RedeemTCParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueRedeemTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.RedeemTCandTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueRedeemTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.RedeemTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueRedeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTCforTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueSwapTCforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTPforTCParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueSwapTPforTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tpTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"qTP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vendor\",\"type\":\"address\"}],\"internalType\":\"struct MocCommons.SwapTPforTPParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"queueSwapTPforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyToExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MocOperations\",\"name\":\"bucket_\",\"type\":\"address\"}],\"name\":\"registerBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxOperPerBatch_\",\"type\":\"uint128\"}],\"name\":\"setMaxOperPerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"minOperWaitingBlk_\",\"type\":\"uint128\"}],\"name\":\"setMinOperWaitingBlk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser_\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoppable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tcMintExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcRedeemExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTCExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTCforTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTCandTPExecFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MocQueueExecFees.InitializeMocQueueExecFeesParams\",\"name\":\"mocQueueExecFeesParams_\",\"type\":\"tuple\"}],\"name\":\"updateExecutionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Intended to allow Deferral testing using behaviors, including error tests\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"changeGovernor(address)\":{\"params\":{\"newGovernor_\":\"New governor address\"}},\"execute(address)\":{\"details\":\"does not revert on Operation failure, throws Process and Error events according to the Oper type and result\"},\"getAndVerifyExecFee(uint8,uint256)\":{\"details\":\"only used for coinbase flavor\",\"params\":{\"operType_\":\"operation type registered\",\"value_\":\"value sent to pay execution fee\"},\"returns\":{\"currentExecFee\":\"execution fee required for the operation\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role  OR   the caller must have be an authorized Governance changer. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"makeStoppable()\":{\"details\":\"Should be called through governance\"},\"makeUnstoppable()\":{\"details\":\"Should be called through governance\"},\"pause()\":{\"details\":\"Should only be called by the pauser and when it is stoppable\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"queueMintTC((uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueMintTCandTP((address,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueMintTP((address,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueRedeemTC((uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueRedeemTP((address,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))\":{\"returns\":{\"operId\":\"Identifier to track the Operation lifecycle\"}},\"registerBucket(address)\":{\"details\":\"in order to operate, the queue needs to be whitelisted as ENQUEUER_ROLE on the bucket as well\",\"params\":{\"bucket_\":\"address of the mocOperations implementation to interact with May emit a {RoleGranted} event for ENQUEUER role\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role  OR   the caller must have be an authorized Governance changer. May emit a {RoleRevoked} event.\"},\"setMaxOperPerBatch(uint128)\":{\"params\":{\"maxOperPerBatch_\":\"maximum amount of operations allowed on a batch to avoid going over the block gas limit\"}},\"setMinOperWaitingBlk(uint128)\":{\"params\":{\"minOperWaitingBlk_\":\"minimum amount of blocks an operation needs to remain in the queue before it can be executed\"}},\"setPauser(address)\":{\"details\":\"Should be called through governance\",\"params\":{\"newPauser_\":\"Address of the new pauser\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Should only be called by the pauser and when it is stoppable\"},\"updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"When the changer is executed there could be pending operations on the queue, thats means that  users have already paid for those operations, so, two situations could occur:  1. If execution fees are decreased, the executor will receive all the new fees and the       remaining funds will stay in this contract  2. If execution fees are increased, the executor will receive less fees, unless this contract has funds       remaining from another execution fee update (1.) or previously sent by another address\",\"params\":{\"mocQueueExecFeesParams_\":\"new execution fees\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"MocQueueMock: Allows Deferral execution without error handling\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeGovernor(address)\":{\"notice\":\"Change the contract's governor. Should be called through the old governance system\"},\"execute(address)\":{\"notice\":\"Processes Operations in the queue\"},\"getAndVerifyExecFee(uint8,uint256)\":{\"notice\":\"get execution fee for the operation requested  reverts if value sent is not enough to pay the execution fee\"},\"governor()\":{\"notice\":\"The address of the contract which governs this one\"},\"isEmpty()\":{\"notice\":\"true if the queue is empty\"},\"makeStoppable()\":{\"notice\":\"Switches ON the stoppability of the contract. It can be paused or unpaused  Doesn't change the pause state, if the contract was already paused it cannot be operated\"},\"makeUnstoppable()\":{\"notice\":\"Switches OFF the stoppability of the contract. It cannot be paused or unpaused Doesn't change the pause state, if the contract was already paused it cannot be operated\"},\"pause()\":{\"notice\":\"Called by the owner to pause, triggers stopped state\"},\"paused()\":{\"notice\":\"Returns true if paused\"},\"queueMintTC((uint256,uint256,address,address,address))\":{\"notice\":\"registered enqueuer can queue an Operations\"},\"queueMintTCandTP((address,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"queueMintTP((address,uint256,uint256,address,address,address))\":{\"notice\":\"registered enqueuer can queue an Operations\"},\"queueRedeemTC((uint256,uint256,address,address,address))\":{\"notice\":\"registered enqueuer can queue an Operations\"},\"queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"queueRedeemTP((address,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))\":{\"notice\":\"Registered enqueuer can queue an Operations\"},\"readyToExecute()\":{\"notice\":\"true if the queue has at least one Operation ready to be executed\"},\"registerBucket(address)\":{\"notice\":\"registers the mocOperations bucket that would operate over this queue\"},\"setMaxOperPerBatch(uint128)\":{\"notice\":\"sets Moc Queue maximum amount of operations per execution batch\"},\"setMinOperWaitingBlk(uint128)\":{\"notice\":\"sets Moc Queue minimum operation waiting blocks\"},\"setPauser(address)\":{\"notice\":\"Changes the address which is enable to pause this contract\"},\"unpause()\":{\"notice\":\"Called by the owner to unpause, returns to normal state\"},\"updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Updates executions fees with absolute values for each operation type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MocQueueMock.sol\":\"MocQueueMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul[j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTOtfDnca[r]Iulc]jmul[jul]VcTOculjmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract unpausable.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf0bd7f71ffae5f0addd375e8511fbf2ad8ca0c9b2606c32d92bdda7d76a7a81c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/collateral/coinbase/MocCACoinbase.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCore } from \\\"../../core/MocCore.sol\\\";\\nimport { MocQueue } from \\\"../../queue/MocQueue.sol\\\";\\nimport { MocOperations } from \\\"../../core/MocOperations.sol\\\";\\nimport { MocQueueExecFees } from \\\"../../queue/MocQueueExecFees.sol\\\";\\n\\n/**\\n * @title MocCACoinbase: Moc Collateral Asset Coinbase\\n * @notice Moc protocol implementation using network Coinbase as Collateral Asset\\n */\\ncontract MocCACoinbase is MocOperations {\\n    // ------- Structs -------\\n    struct InitializeParams {\\n        InitializeCoreParams initializeCoreParams;\\n        // max amount of gas forwarded on AC transfer\\n        uint256 transferMaxGas;\\n        // when the coinbase unlock fails funds are sent to this address to don't revert the queue execution\\n        address coinbaseFailedTransferFallback;\\n    }\\n\\n    // ------- Storage -------\\n    // max amount of gas forwarded on AC transfer to avoid\\n    // using all the gas on the fallback function\\n    uint256 public transferMaxGas;\\n    // when the coinbase unlock fails funds are sent to this address to don't revert the queue execution\\n    address public coinbaseFailedTransferFallback;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeParams_ contract initializer params\\n     * @dev governorAddress The address that will define when a change contract is authorized\\n     *      pauserAddress The address that is authorized to pause this contract\\n     *      tcTokenAddress Collateral Token contract address\\n     *      mocFeeFlowAddress Moc Fee Flow contract address\\n     *      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *      protThrld protected state threshold [PREC]\\n     *      liqThrld liquidation coverage threshold [PREC]\\n     *      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *      successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *        in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *      bes number of blocks between settlements\\n     *      tcInterestCollectorAddress TC interest collector address\\n     *      tcInterestRate pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     *      tcInterestPaymentBlockSpan amount of blocks to wait for next TC interest payment\\n     *      maxAbsoluteOpProviderAddress max absolute operation provider address\\n     *      maxOpDiffProviderAddress max operation difference provider address\\n     *      decayBlockSpan number of blocks that have to elapse for the linear decay factor to be 0\\n     *      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *      mocVendors address for MocVendors contract\\n     *      mocQueueAddress address for MocQueue contract\\n     *      transferMaxGas max amount of gas forwarded on AC transfer\\n     *      coinbaseFailedTransferFallback address who receives the funds when the coinbase unlock fails\\n     */\\n    function initialize(InitializeParams calldata initializeParams_) external initializer {\\n        __MocCore_init(initializeParams_.initializeCoreParams);\\n        transferMaxGas = initializeParams_.transferMaxGas;\\n        coinbaseFailedTransferFallback = initializeParams_.coinbaseFailedTransferFallback;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal override {\\n        if (amount_ > 0) {\\n            if (to_ == address(0)) revert InvalidAddress();\\n            // this transfer is gas capped to avoid spent more than the fixed precalculated execution fees\\n            // by using the fallback function if `to_` is a contract\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to_.call{ value: amount_, gas: transferMaxGas }(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc MocOperations\\n     */\\n    function unlockACInPending(address owner_, uint256 qACToUnlock_) external override onlyMocQueue {\\n        unchecked {\\n            qACLockedInPending -= qACToUnlock_;\\n        }\\n        // this transfer is gas capped to avoid spent more than the fixed precalculated execution fees\\n        // by using the fallback function if `to_` is a contract\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = owner_.call{ value: qACToUnlock_, gas: transferMaxGas }(\\\"\\\");\\n        // if cannot receive the AC, it is transferred to another address to don't revert the queue execution\\n        if (!success) acTransfer(coinbaseFailedTransferFallback, qACToUnlock_);\\n    }\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acBalanceOf(address account) internal view override returns (uint256 balance) {\\n        return account.balance;\\n    }\\n\\n    /**\\n     * @inheritdoc MocOperations\\n     */\\n    function _getExecFeeSent(\\n        uint256 qACTotal_,\\n        MocQueueExecFees.OperType operType_\\n    ) internal view override returns (uint256 qACmax, uint256 execFee) {\\n        execFee = MocQueue(mocQueue).getAndVerifyExecFee(operType_, qACTotal_);\\n        unchecked {\\n            return (qACTotal_ - execFee, execFee);\\n        }\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TC nor fees, will be return to sender\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTC(uint256 qTC_, address recipient_, address vendor_) external payable returns (uint256 operId) {\\n        return _mintTCtoViaVendor(qTC_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @dev any extra value, not spent on TP nor fees, will be return to sender\\n     * @param tp_ Pegged Token address to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTP(\\n        address tp_,\\n        uint256 qTP_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _mintTPtoViaVendor(tp_, qTP_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends coinbase as Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTCandTP(\\n        address tp_,\\n        uint256 qTP_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _mintTCandTPtoViaVendor(tp_, qTP_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tpFrom_ owned Pegged Token address\\n     * @param tpTo_ target Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTPforTP(\\n        address tpFrom_,\\n        address tpTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTPforTPtoViaVendor(tpFrom_, tpTo_, qTP_, qTPmin_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTPforTC(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTPforTCtoViaVendor(tp_, qTP_, qTCmin_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address\\n     * @param qTC_ amount of Collateral to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTCforTP(\\n        address tp_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTCforTPtoViaVendor(tp_, qTC_, qTPmin_, msg.value, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice allow to send Coinbase to increment the Collateral Asset in the protocol\\n     */\\n    receive() external payable {\\n        _depositAC(msg.value);\\n    }\\n\\n    /**\\n     * @notice sets max amount of gas forwarded on AC transfer\\n     * @param transferMaxGas_ new max amount of gas forwarded on AC transfer\\n     */\\n    function setTransferMAxGas(uint256 transferMaxGas_) external onlyAuthorizedChanger {\\n        transferMaxGas = transferMaxGas_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7c54305a11c96ffc5528412c403a1390a247c52ece6cc7601a96f05437dc5a2\",\"license\":\"UNLICENSED\"},\"contracts/collateral/rc20/MocCARC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCore } from \\\"../../core/MocCore.sol\\\";\\nimport { MocOperations } from \\\"../../core/MocOperations.sol\\\";\\nimport { MocBaseBucket } from \\\"../../core/MocBaseBucket.sol\\\";\\nimport { MocQueueExecFees } from \\\"../../queue/MocQueueExecFees.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MocCARC20: Moc Collateral Asset RC20\\n * @notice Moc protocol implementation using a RC20 as Collateral Asset.\\n */\\ncontract MocCARC20 is MocOperations {\\n    // ------- Structs -------\\n    struct InitializeParams {\\n        InitializeCoreParams initializeCoreParams;\\n        // Collateral Asset Token contract address\\n        address acTokenAddress;\\n    }\\n\\n    // ------- Storage -------\\n    // Collateral Asset token\\n    IERC20 public acToken;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeParams_ contract initializer params\\n     * @dev governorAddress The address that will define when a change contract is authorized\\n     *      pauserAddress The address that is authorized to pause this contract\\n     *      acTokenAddress Collateral Asset Token contract address\\n     *      tcTokenAddress Collateral Token contract address\\n     *      mocFeeFlowAddress Moc Fee Flow contract address\\n     *      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *      protThrld protected state threshold [PREC]\\n     *      liqThrld liquidation coverage threshold [PREC]\\n     *      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *      successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *        in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *      bes number of blocks between settlements\\n     *      tcInterestCollectorAddress TC interest collector address\\n     *      tcInterestRate pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     *      tcInterestPaymentBlockSpan amount of blocks to wait for next TC interest payment\\n     *      maxAbsoluteOpProviderAddress max absolute operation provider address\\n     *      maxOpDiffProviderAddress max operation difference provider address\\n     *      decayBlockSpan number of blocks that have to elapse for the linear decay factor to be 0\\n     *      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *      mocVendors address for MocVendors contract\\n     *      mocQueueAddress address for MocQueue contract\\n     */\\n    function initialize(InitializeParams calldata initializeParams_) external initializer {\\n        __MocCore_init(initializeParams_.initializeCoreParams);\\n        acToken = IERC20(initializeParams_.acTokenAddress);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @inheritdoc MocCore\\n     * @dev this function could revert during safeTransfer call.\\n     *  safeTransfer will revert if token transfer reverts or returns 0\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal override {\\n        if (amount_ > 0) {\\n            SafeERC20.safeTransfer(acToken, to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc MocOperations\\n     */\\n    function unlockACInPending(address owner_, uint256 qACToUnlock_) external override onlyMocQueue {\\n        unchecked {\\n            qACLockedInPending -= qACToUnlock_;\\n        }\\n        acTransfer(owner_, qACToUnlock_);\\n    }\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acBalanceOf(address account) internal view override returns (uint256 balance) {\\n        return acToken.balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc MocOperations\\n     */\\n    function _lockACInPending(uint256 qACToLock_) internal override {\\n        super._lockACInPending(qACToLock_);\\n        SafeERC20.safeTransferFrom(acToken, msg.sender, address(this), qACToLock_);\\n    }\\n\\n    /**\\n     * @inheritdoc MocOperations\\n     */\\n    function _getExecFeeSent(\\n        uint256 qACmax_,\\n        MocQueueExecFees.OperType /*operType_*/\\n    ) internal override returns (uint256 qACmax, uint256 execFee) {\\n        // For RC20 solutions, msg.value should match exactly the execution Fee of the OperType\\n        return (qACmax_, msg.value);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *   Requires prior sender approval of Collateral Asset to this contract\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTC(\\n        uint256 qTC_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _mintTCtoViaVendor(qTC_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *   Requires prior sender approval of Collateral Asset to this contract\\n     * @param tp_ Pegged Token address to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTP(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _mintTPtoViaVendor(tp_, qTP_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  Requires prior sender approval of Collateral Asset to this contract\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function mintTCandTP(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _mintTCandTPtoViaVendor(tp_, qTP_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tpFrom_ owned Pegged Token address\\n     * @param tpTo_ target Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTPforTP(\\n        address tpFrom_,\\n        address tpTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTPforTPtoViaVendor(tpFrom_, tpTo_, qTP_, qTPmin_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTPforTC(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTPforTCtoViaVendor(tp_, qTP_, qTCmin_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice Caller sends a Collateral Token and recipient receives Pegged Token.\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not.\\n     * @param tp_ Pegged Token address\\n     * @param qTC_ Amount of owned Collateral Token to swap\\n     * @param qTPmin_ Minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ Maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ Address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function swapTCforTP(\\n        address tp_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _swapTCforTPtoViaVendor(tp_, qTC_, qTPmin_, qACmax_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice Refreshes the AC holdings for the Bucket\\n     * @dev Intended to be use as notification after an RC20 AC transfer to this contract\\n     */\\n    function refreshACBalance() public {\\n        uint256 unaccountedAcBalance = acBalanceOf(address(this)) - nACcb - qACLockedInPending;\\n        // On this implementation, AC token balance is nACcb plus AC locked on pending operations\\n        if (unaccountedAcBalance > 0) _depositAC(unaccountedAcBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc MocBaseBucket\\n     */\\n    function evalLiquidation() public virtual override {\\n        // Before evaluating Liquidation, we need to make sure injected collateral is accounted\\n        refreshACBalance();\\n        super.evalLiquidation();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x4c48e81948924fdc14ef2e2635b02e1f773e0bcb7f4878e9987d852af72a3aef\",\"license\":\"UNLICENSED\"},\"contracts/core/MocBaseBucket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocTC, IMocRC20 } from \\\"../tokens/MocTC.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title MocBaseBucket: Moc Collateral Bag\\n * @notice MocBaseBucket holds Bucket Zero state, both for the Collateral Bag and PeggedTokens Items.\\n * @dev Abstracts all rw operations on the main bucket and expose all calculations relative to its state.\\n */\\nabstract contract MocBaseBucket is MocUpgradable {\\n    // ------- Events -------\\n\\n    event ContractLiquidated();\\n\\n    // ------- Custom Errors -------\\n    error MissingProviderPrice(address priceProviderAddress_);\\n    error Liquidated();\\n    error LowCoverage(uint256 cglb_, uint256 covThrld_);\\n\\n    // ------- Structs -------\\n    struct PegContainerItem {\\n        // total supply of Pegged Token\\n        uint256 nTP;\\n        // PegToken PriceFeed address\\n        IPriceProvider priceProvider;\\n    }\\n\\n    struct PeggedTokenIndex {\\n        // Pegged Token index\\n        uint256 index;\\n        // true if Pegged Token exists\\n        bool exists;\\n    }\\n\\n    struct InitializeBaseBucketParams {\\n        // MocQueue contract address\\n        address payable mocQueueAddress;\\n        // Fee Token contract address\\n        address feeTokenAddress;\\n        // Fee Token price provider address\\n        address feeTokenPriceProviderAddress;\\n        // Collateral Token contract address\\n        address tcTokenAddress;\\n        // Moc Fee Flow contract address\\n        address mocFeeFlowAddress;\\n        // moc appreciation beneficiary Address\\n        address mocAppreciationBeneficiaryAddress;\\n        // protected state threshold [PREC]\\n        uint256 protThrld;\\n        // liquidation coverage threshold [PREC]\\n        uint256 liqThrld;\\n        // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n        uint256 feeRetainer;\\n        // additional fee pct applied on mint Collateral Tokens operations [PREC]\\n        uint256 tcMintFee;\\n        // additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n        uint256 tcRedeemFee;\\n        // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n        uint256 swapTPforTPFee;\\n        // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n        uint256 swapTPforTCFee;\\n        // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n        uint256 swapTCforTPFee;\\n        // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n        uint256 redeemTCandTPFee;\\n        // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n        uint256 mintTCandTPFee;\\n        // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n        // e.g. if tcMintFee = 1%, feeTokenPct = 50% => qFeeToken = 0.5%\\n        uint256 feeTokenPct;\\n        // pct of the gain because Pegged Tokens devaluation that is transferred\\n        // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n        uint256 successFee;\\n        // pct of the gain because Pegged Tokens devaluation that is returned\\n        // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n        uint256 appreciationFactor;\\n        // number of blocks between settlements\\n        uint256 bes;\\n        // TC interest collector address\\n        address tcInterestCollectorAddress;\\n        // pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n        uint256 tcInterestRate;\\n        // amount of blocks to wait for next TC interest payment\\n        uint256 tcInterestPaymentBlockSpan;\\n        // max absolute operation provider address:\\n        //  absolute maximum transaction allowed for a certain number of blocks\\n        //  if absoluteAccumulator is above the value provided the operation will be rejected\\n        address maxAbsoluteOpProviderAddress;\\n        // max operation difference provider address:\\n        //  differential maximum transaction allowed for a certain number of blocks\\n        //  if operationalDifference is above the value provided the operation will be rejected\\n        address maxOpDiffProviderAddress;\\n        // number of blocks that have to elapse for the linear decay factor to be 0\\n        uint256 decayBlockSpan;\\n    }\\n\\n    // ------- Storage -------\\n\\n    // Fee Token\\n    IERC20 public feeToken;\\n    // Fee Token price provider\\n    IPriceProvider public feeTokenPriceProvider;\\n    // total amount of Collateral Asset held in the Collateral Bag\\n    // WARN: On RC20 implementation, this correlates with contract acBalance\\n    uint256 public nACcb;\\n    // amount of Collateral Asset that the Vaults owe to the Collateral Bag\\n    // this variable is not used and is reserved for a future upgrade of the protocol\\n    // slither-disable-next-line constable-states\\n    uint256 internal nACioucb;\\n\\n    // Collateral Token\\n    MocTC public tcToken;\\n    // Collateral Token in the Collateral Bag\\n    uint256 public nTCcb;\\n\\n    // Pegged Tokens MocRC20 addresses\\n    IMocRC20[] public tpTokens;\\n    // Pegged Token indexes\\n    mapping(address => PeggedTokenIndex) public peggedTokenIndex;\\n    // peg container\\n    PegContainerItem[] public pegContainer;\\n    // Pegged Token prices, at which they can be redeemed after liquidation event\\n    uint256[] public tpLiqPrices;\\n    // pct of the gain because Pegged Tokens devaluation that is transferred\\n    // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n    uint256 public successFee;\\n    // pct of the gain because Pegged Tokens devaluation that is returned\\n    // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n    uint256 public appreciationFactor;\\n\\n    // ------- Storage Fees -------\\n\\n    // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n    uint256 public feeRetainer; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on Collateral Tokens mint [PREC]\\n    uint256 public tcMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on Collateral Tokens redeem [PREC]\\n    uint256 public tcRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n    uint256 public swapTPforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n    uint256 public swapTPforTCFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n    uint256 public swapTCforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n    uint256 public redeemTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n    uint256 public mintTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // pct applied on the top of the operation`s fee when using Fee Token as fee payment method [PREC]\\n    // e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n    uint256 public feeTokenPct; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Pegged Token => addition fee pct applied on TP mint [PREC]\\n    mapping(address => uint256) public tpMintFees; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // Pegged Token =>  addition fee pct applied on TP redeem [PREC]\\n    mapping(address => uint256) public tpRedeemFees; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Moc Fee Flow contract address\\n    address public mocFeeFlowAddress;\\n    // Moc appreciation beneficiary address\\n    address public mocAppreciationBeneficiaryAddress;\\n\\n    // ------- Storage Coverage Tracking -------\\n\\n    // Target coverage for each Pegged Token [PREC]\\n    uint256[] public tpCtarg;\\n    // Coverage protected state threshold [PREC]\\n    uint256 public protThrld;\\n    // Coverage liquidation threshold [PREC]\\n    uint256 public liqThrld;\\n    // Liquidation enabled\\n    bool public liqEnabled;\\n    // Irreversible state, peg lost, contract is terminated and all funds can be withdrawn\\n    bool public liquidated;\\n\\n    // ------- Storage Settlement -------\\n\\n    // number of blocks between settlements\\n    uint256 public bes;\\n    // next settlement block\\n    uint256 public bns;\\n\\n    // ------- Storage Queue -------\\n\\n    // amount of AC locked on MocQueue for pending operations\\n    uint256 public qACLockedInPending;\\n    // address for MocQueue contract\\n    address payable public mocQueue; // cannot used MocQueue, import failed due circular reference\\n\\n    // ------- Storage Success Fee Tracking -------\\n\\n    // profit and loss in collateral asset for each Pegged Token because its devaluation [N]\\n    // if it is positive it is a profit that will be distributed and reset during settlement\\n    int256[] internal tpiou;\\n    // Pegged Token price used at last operation(redeem or mint) [PREC]\\n    uint256[] internal pACtpLstop;\\n\\n    // ------- Storage Flux Capacitor -------\\n\\n    // max absolute operation provider:\\n    //  absolute maximum transaction allowed for a certain number of blocks\\n    //  if absoluteAccumulator is above the value provided the operation will be rejected\\n    IDataProvider public maxAbsoluteOpProvider;\\n    // max operation difference provider:\\n    //  differential maximum transaction allowed for a certain number of blocks\\n    //  if operationalDifference is above the value provided the operation will be rejected\\n    IDataProvider public maxOpDiffProvider;\\n    // number of blocks that have to elapse for the linear decay factor to be 0\\n    uint256 public decayBlockSpan;\\n    // accumulator increased by minting and redeeming TP operations\\n    uint256 public absoluteAccumulator;\\n    // accumulator increased by minting and decreased by redeeming TP operations\\n    int256 public differentialAccumulator;\\n    // last block number where an operation was submitted\\n    uint256 public lastOperationBlockNumber;\\n\\n    // ------- Storage TC Holders Interest Payment -------\\n\\n    // TC interest collector address\\n    address public tcInterestCollectorAddress;\\n    // pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n    uint256 public tcInterestRate;\\n    // amount of blocks to wait for next TC interest payment\\n    uint256 public tcInterestPaymentBlockSpan;\\n    // next TC interest payment block number\\n    uint256 public nextTCInterestPayment;\\n\\n    // ------- Modifiers -------\\n    /// @notice functions with this modifier reverts being in liquidated state\\n    modifier notLiquidated() {\\n        _checkLiquidated();\\n        _;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeBaseBucketParams_ contract initializer params\\n     * @dev   mocQueueAddress address for MocQueue contract\\n     *        feeTokenAddress Fee Token contract address\\n     *        feeTokenPriceProviderAddress Fee Token price provider contract address\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected coverage threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        feeTokenPct pct applied on the top of the operation`s fee when using\\n     *          Fee Token as fee payment method [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *        bes number of blocks between settlements\\n     *        tcInterestCollectorAddress TC interest collector address\\n     *        tcInterestRate pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     *        tcInterestPaymentBlockSpan amount of blocks to wait for next TC interest payment\\n     *        maxAbsoluteOpProviderAddress max absolute operation provider address\\n     *        maxOpDiffProviderAddress max operation difference provider address\\n     *        decayBlockSpan number of blocks that have to elapse for the linear decay factor to be 0\\n     */\\n    function __MocBaseBucket_init_unchained(\\n        InitializeBaseBucketParams calldata initializeBaseBucketParams_\\n    ) internal onlyInitializing {\\n        if (initializeBaseBucketParams_.protThrld <= ONE) revert InvalidValue();\\n        _checkLessThanOne(initializeBaseBucketParams_.feeRetainer);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcMintFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcRedeemFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTCFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTCforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.redeemTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.mintTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.feeTokenPct);\\n        _checkLessThanOne(initializeBaseBucketParams_.successFee + initializeBaseBucketParams_.appreciationFactor);\\n        mocQueue = initializeBaseBucketParams_.mocQueueAddress;\\n        feeToken = IERC20(initializeBaseBucketParams_.feeTokenAddress);\\n        feeTokenPriceProvider = IPriceProvider(initializeBaseBucketParams_.feeTokenPriceProviderAddress);\\n        tcToken = MocTC(initializeBaseBucketParams_.tcTokenAddress);\\n        mocFeeFlowAddress = initializeBaseBucketParams_.mocFeeFlowAddress;\\n        mocAppreciationBeneficiaryAddress = initializeBaseBucketParams_.mocAppreciationBeneficiaryAddress;\\n        protThrld = initializeBaseBucketParams_.protThrld;\\n        liqThrld = initializeBaseBucketParams_.liqThrld;\\n        feeRetainer = initializeBaseBucketParams_.feeRetainer;\\n        tcMintFee = initializeBaseBucketParams_.tcMintFee;\\n        tcRedeemFee = initializeBaseBucketParams_.tcRedeemFee;\\n        swapTPforTPFee = initializeBaseBucketParams_.swapTPforTPFee;\\n        swapTPforTCFee = initializeBaseBucketParams_.swapTPforTCFee;\\n        swapTCforTPFee = initializeBaseBucketParams_.swapTCforTPFee;\\n        redeemTCandTPFee = initializeBaseBucketParams_.redeemTCandTPFee;\\n        mintTCandTPFee = initializeBaseBucketParams_.mintTCandTPFee;\\n        feeTokenPct = initializeBaseBucketParams_.feeTokenPct;\\n        successFee = initializeBaseBucketParams_.successFee;\\n        appreciationFactor = initializeBaseBucketParams_.appreciationFactor;\\n        bes = initializeBaseBucketParams_.bes;\\n        tcInterestCollectorAddress = initializeBaseBucketParams_.tcInterestCollectorAddress;\\n        tcInterestRate = initializeBaseBucketParams_.tcInterestRate;\\n        tcInterestPaymentBlockSpan = initializeBaseBucketParams_.tcInterestPaymentBlockSpan;\\n        maxAbsoluteOpProvider = IDataProvider(initializeBaseBucketParams_.maxAbsoluteOpProviderAddress);\\n        maxOpDiffProvider = IDataProvider(initializeBaseBucketParams_.maxOpDiffProviderAddress);\\n        decayBlockSpan = initializeBaseBucketParams_.decayBlockSpan;\\n        lastOperationBlockNumber = block.number;\\n        unchecked {\\n            bns = block.number + initializeBaseBucketParams_.bes;\\n            nextTCInterestPayment = block.number + initializeBaseBucketParams_.tcInterestPaymentBlockSpan;\\n        }\\n        liquidated = false;\\n        liqEnabled = false;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * reverts if in liquidated state\\n     */\\n    function _checkLiquidated() internal view {\\n        if (liquidated) revert Liquidated();\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Asset to the Bucket\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositAC(uint256 qAC_) internal {\\n        nACcb += qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb += qTC_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb -= qTC_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP += qTP_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Pegged Token and Collateral Asset from the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP -= qTP_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket and mints `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTP(uint256 i_, uint256 qTP_, uint256 qAC_, address recipient_) internal {\\n        // add qTP and qAC to the Bucket\\n        _depositTP(i_, qTP_, qAC_);\\n        // mint qTP to the recipient\\n        // slither-disable-next-line unused-return\\n        tpTokens[i_].mint(recipient_, qTP_);\\n    }\\n\\n    /**\\n     * @notice subtracts Pegged Token and Collateral Asset from the Bucket and burns `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawAndBurnTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        // sub qTP and qAC from the Bucket\\n        _withdrawTP(i_, qTP_, qAC_);\\n        // burn the qTp previously locked from the user\\n        // slither-disable-next-line unused-return\\n        tpTokens[i_].burn(address(this), qTP_);\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket and mints qTCtoMint\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTC(uint256 qTC_, uint256 qAC_, address recipient_) internal {\\n        // add qTC to the Bucket\\n        _depositTC(qTC_, qAC_);\\n        // mint qTC to the recipient\\n        // slither-disable-next-line unused-return\\n        tcToken.mint(recipient_, qTC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket and burns `qTC_`\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawAndBurnTC(uint256 qTC_, uint256 qAC_) internal {\\n        // sub qTC and qAC from the Bucket\\n        _withdrawTC(qTC_, qAC_);\\n        // burn the qTC previously locked from the user\\n        tcToken.burn(address(this), qTC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset available considering how many are locked by Pegged Token adjusted by EMA\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return lckACemaAdjusted [PREC]\\n     */\\n    function _getLckACemaAdjusted(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (int256 lckACemaAdjusted) {\\n        // [PREC] = [N] * [PREC] - [PREC] * [N]\\n        return int256(_getTotalACavailable(nACgain_) * PRECISION) - int256(ctargemaCA_ * lckAC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function _getTCAvailableToRedeem(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view virtual returns (uint256 tcAvailableToRedeem) {\\n        // [PREC]\\n        int256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        if (lckACemaAdjusted <= 0) return 0;\\n        // [N] = [PREC] / [PREC]\\n        return uint256(lckACemaAdjusted) / _getPTCac(lckAC_, nACgain_);\\n    }\\n\\n    /**\\n     * @notice get signed amount of Pegged Token available to mint\\n     * @dev negative value is needed for multi collateral implementation\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMintSigned(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (int256 tpAvailableToMint) {\\n        int256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        // [N] = [PREC] * [PREC] / ([PREC]) * [PREC])\\n        return (lckACemaAdjusted * int256(pACtp_)) / int256((ctargemaTP_ - ONE) * PRECISION);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMint(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view virtual returns (uint256 tpAvailableToMint) {\\n        int256 tpAvailableToMintSigned = _getTPAvailableToMintSigned(\\n            ctargemaCA_,\\n            ctargemaTP_,\\n            pACtp_,\\n            lckAC_,\\n            nACgain_\\n        );\\n        if (tpAvailableToMintSigned < 0) return 0;\\n        return uint256(tpAvailableToMintSigned);\\n    }\\n\\n    /**\\n     * @notice evaluates whether or not the coverage is over the cThrld_, reverts if below\\n     * @param cThrld_ coverage threshold to check for [PREC]\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC amount of Collateral Asset locked by Pegged Tokens [PREC]\\n     * @return nACgain amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalCoverage(\\n        uint256 cThrld_,\\n        uint256[] memory pACtps_\\n    ) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        (lckAC, nACgain) = _calcLckACandACgain(pACtps_);\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        // check if coverage is above the given threshold\\n        if (cglb <= cThrld_) revert LowCoverage(cglb, cThrld_);\\n    }\\n\\n    /**\\n     * @dev Calculates price at liquidation event as a relation between Pegs total supply\\n     * and the amount of Asset Collateral available to distribute\\n     */\\n    function settleLiquidationPrices() internal {\\n        // Total amount of AC available to be redeemed\\n        uint256 totalACAvailable = nACcb;\\n        // slither-disable-next-line incorrect-equality\\n        if (totalACAvailable == 0) return;\\n        uint256 pegAmount = pegContainer.length;\\n        // this could be get by getLckAC(), but given the prices are needed after,\\n        // it's better to cache them here.\\n        uint256 lckAC;\\n        // Auxiliary cache of pegs pACtp\\n        uint256[] memory pACtps = new uint256[](pegAmount);\\n        // for each peg, calculates the proportion of AC reserves it's locked\\n\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = _getPACtp(i);\\n            // [N] = [N] * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP, pACtps[i]);\\n        }\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            // [PREC] = [PREC] * [N] / [N];\\n            tpLiqPrices.push((pACtps[i] * lckAC) / totalACAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice updates Pegged Token P&L and last operation price\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     */\\n    function _updateTPtracking(uint256 i_, uint256 pACtp_) internal {\\n        tpiou[i_] += _calcOtfPnLTP(i_, pACtp_);\\n        pACtpLstop[i_] = pACtp_;\\n    }\\n\\n    /**\\n     * @notice calculates on the fly Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return otfPnLtp [N]\\n     */\\n    function _calcOtfPnLTP(uint256 i_, uint256 pACtp_) internal view returns (int256 otfPnLtp) {\\n        // [PREC] = [N] * [PREC]\\n        uint256 nTP = pegContainer[i_].nTP * PRECISION;\\n        // [N] = [PREC] / [PREC] - [PREC] / [PREC]\\n        return int256(nTP / pACtpLstop[i_]) - int256(nTP / pACtp_);\\n    }\\n\\n    /**\\n     * @notice gets accumulated Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return tpGain amount of Pegged Token to be minted during settlement [N]\\n     * @return adjPnLtpi total amount of P&L in Collateral Asset [N]\\n     */\\n    function _getPnLTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 tpGain, uint256 adjPnLtpi) {\\n        // [N] = [N] + [N]\\n        int256 adjPnLtpiAux = tpiou[i_] + _calcOtfPnLTP(i_, pACtp_);\\n        if (adjPnLtpiAux > 0) {\\n            adjPnLtpi = uint256(adjPnLtpiAux);\\n            // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n            tpGain = _mulPrec(_mulPrec(appreciationFactor, pACtp_), adjPnLtpi);\\n        }\\n        return (tpGain, adjPnLtpi);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _getLckACandACgain() internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256[] memory pACtps = _getPACtps();\\n        return _calcLckACandACgain(pACtps);\\n    }\\n\\n    /**\\n     * @notice calculates the amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @param pACtps_ array of all AC prices for each TP, with [PREC]\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _calcLckACandACgain(uint256[] memory pACtps_) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256 pegAmount = pegContainer.length;\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = pACtps_[i];\\n            (uint256 tpGain, uint256 adjPnLtpi) = _getPnLTP(i, pACtp);\\n            // [N] = ([N] + [N]) * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP + tpGain, pACtp);\\n            nACgain += adjPnLtpi;\\n        }\\n        // [N] = [N] * [PREC] / [PREC]\\n        nACgain = _mulPrec(nACgain, successFee);\\n        return (lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return totalACavailable [N]\\n     */\\n    function _getTotalACavailable(uint256 nACgain_) internal view returns (uint256 totalACavailable) {\\n        // [N] = [N] - [N]\\n        return nACcb - nACgain_;\\n    }\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return pTCac [PREC]\\n     */\\n    function _getPTCac(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 pTCac) {\\n        // slither-disable-next-line incorrect-equality\\n        if (nTCcb == 0) return ONE;\\n        // [PREC] = ([N] - [N]) * [PREC]) / [N]\\n        return _divPrec((_getTotalACavailable(nACgain_) - lckAC_), nTCcb);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return leverageTC [PREC]\\n     */\\n    function _getLeverageTC(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 leverageTC) {\\n        uint256 totalACavailable = _getTotalACavailable(nACgain_);\\n        // [PREC] = [N] * [PREC] / ([N] - [N])\\n        return _divPrec(totalACavailable, totalACavailable - lckAC_);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return cglob [PREC]\\n     */\\n    function _getCglb(uint256 lckAC_, uint256 nACgain_) internal view virtual returns (uint256 cglob) {\\n        // slither-disable-next-line incorrect-equality\\n        if (lckAC_ == 0) return UINT256_MAX;\\n        // [PREC] = [N] * [PREC] / [N]\\n        return _divPrec(_getTotalACavailable(nACgain_), lckAC_);\\n    }\\n\\n    function _tpi(address tpAddress) internal view returns (uint256) {\\n        PeggedTokenIndex storage ptIndex = peggedTokenIndex[tpAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        return ptIndex.index;\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice If liquidation is enabled, verifies if forced liquidation has been\\n     * reached, checking if globalCoverage <= liquidation\\n     * @return true if liquidation state is reached, false otherwise\\n     */\\n    function isLiquidationReached() public view returns (bool) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        return cglb <= liqThrld;\\n    }\\n\\n    /**\\n     * @notice return current amount of Tps\\n     */\\n    function getTpAmount() external view returns (uint256) {\\n        return tpTokens.length;\\n    }\\n\\n    /**\\n     * @notice evaluates if liquidation threshold has been reached and liq is Enabled.\\n     * If so forces contracts liquidation, blocking all mint & redeem operations.\\n     *\\n     * May emit a {ContractLiquidated} event.\\n     */\\n    function evalLiquidation() public virtual notPaused {\\n        if (liqEnabled && !liquidated && isLiquidationReached()) {\\n            liquidated = true;\\n            emit ContractLiquidated();\\n            tcToken.pause();\\n            // Freeze current Peg Price given the AC available\\n            settleLiquidationPrices();\\n        }\\n    }\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param tp_ Pegged Token address\\n     * @return price [PREC]\\n     */\\n    function getPACtp(address tp_) public view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[_tpi(tp_)].priceProvider;\\n        (uint256 price, bool has) = _peekPrice(priceProvider);\\n        if (!has) revert MissingProviderPrice(address(priceProvider));\\n        return price;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param i_ Pegged Token index\\n     * @return price [PREC]\\n     */\\n    function _getPACtp(uint256 i_) internal view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[i_].priceProvider;\\n        (uint256 price, bool has) = _peekPrice(priceProvider);\\n        if (!has) revert MissingProviderPrice(address(priceProvider));\\n        return price;\\n    }\\n\\n    /**\\n     * @notice ask to a price provider for its token price\\n     * @dev saves some contract size by using this function instead of calling the external directly\\n     * @param priceProvider_ Pegged Token index\\n     * @return price casted to uint256 [PREC]\\n     * @return has true if has a valid price\\n     */\\n    function _peekPrice(IPriceProvider priceProvider_) internal view returns (uint256, bool) {\\n        (bytes32 price, bool has) = priceProvider_.peek();\\n        return (uint256(price), has);\\n    }\\n\\n    /**\\n     * @notice gets all TP prices\\n     * @return pACtps All tps prices [PREC]\\n     */\\n    function _getPACtps() internal view returns (uint256[] memory pACtps) {\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = _getPACtp(i);\\n        }\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets the fee pct to be retainer on AC fees payments as AC re-injection.\\n     * @param feeRetainer_  pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeRetainer(uint256 feeRetainer_) external onlyAuthorizedChanger {\\n        feeRetainer = feeRetainer_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral mint.\\n     * @param tcMintFee_ addition fee pct applied on Collateral Tokens mint [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcMintFee(uint256 tcMintFee_) external onlyAuthorizedChanger {\\n        tcMintFee = tcMintFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral redeem.\\n     * @param tcRedeemFee_ addition fee pct applied on Collateral Tokens redeem [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcRedeemFee(uint256 tcRedeemFee_) external onlyAuthorizedChanger {\\n        tcRedeemFee = tcRedeemFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for another Pegged Token.\\n     * @param swapTPforTPFee_ additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTPFee(uint256 swapTPforTPFee_) external onlyAuthorizedChanger {\\n        swapTPforTPFee = swapTPforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for Collateral Token.\\n     * @param swapTPforTCFee_ additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTCFee(uint256 swapTPforTCFee_) external onlyAuthorizedChanger {\\n        swapTPforTCFee = swapTPforTCFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap Collateral Token for a Pegged Token.\\n     * @param swapTCforTPFee_ additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTCforTPFee(uint256 swapTCforTPFee_) external onlyAuthorizedChanger {\\n        swapTCforTPFee = swapTCforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\\n     * @param redeemTCandTPFee_ additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setRedeemTCandTPFee(uint256 redeemTCandTPFee_) external onlyAuthorizedChanger {\\n        redeemTCandTPFee = redeemTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when mint Collateral Token and Pegged Token in one operation.\\n     * @param mintTCandTPFee_ additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setMintTCandTPFee(uint256 mintTCandTPFee_) external onlyAuthorizedChanger {\\n        mintTCandTPFee = mintTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee applied on the top of the operation`s fee when using Fee Token as fee payment method.\\n     * @param feeTokenPct_ pct applied on the top of the operation`s fee when using Fee Token\\n     *  as fee payment method [PREC]\\n     *  e.g. if tcMintFee = 1%, FeeTokenPct = 50% => qFeeToken = 0.5%\\n     *  0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeTokenPct(uint256 feeTokenPct_) external onlyAuthorizedChanger {\\n        feeTokenPct = feeTokenPct_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Fee Flow contract address\\n     * @param mocFeeFlowAddress_ moc Fee Flow new contract address\\n     */\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocFeeFlowAddress = mocFeeFlowAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Appreciation Beneficiary Address\\n     * @param mocAppreciationBeneficiaryAddress_ moc Appreciation Beneficiary new address\\n     */\\n    function setMocAppreciationBeneficiaryAddress(\\n        address mocAppreciationBeneficiaryAddress_\\n    ) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocAppreciationBeneficiaryAddress = mocAppreciationBeneficiaryAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Fee Token contract address\\n     * @param mocFeeTokenAddress_ Fee Token new contract address\\n     */\\n    function setFeeTokenAddress(address mocFeeTokenAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeToken = IERC20(mocFeeTokenAddress_);\\n    }\\n\\n    /**\\n     * @dev sets Fee Token price provider contract address\\n     * @param mocFeeTokenPriceProviderAddress_ Fee Token price provider new contract address\\n     */\\n    function setFeeTokenPriceProviderAddress(address mocFeeTokenPriceProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        feeTokenPriceProvider = IPriceProvider(mocFeeTokenPriceProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets the value of the protected threshold configuration param\\n     * @param protThrld_ coverage protected state threshold [PREC]\\n     */\\n    function setProtThrld(uint256 protThrld_) external onlyAuthorizedChanger {\\n        protThrld = protThrld_;\\n    }\\n\\n    /**\\n     * @dev sets the value of the liq threshold configuration param\\n     * @param liqThrld_ liquidation threshold\\n     */\\n    function setLiqThrld(uint256 liqThrld_) external onlyAuthorizedChanger {\\n        liqThrld = liqThrld_;\\n    }\\n\\n    /**\\n     * @dev enables and disables the liquidation mechanism.\\n     * @param liqEnabled_ is liquidation enabled\\n     */\\n    function setLiqEnabled(bool liqEnabled_) external onlyAuthorizedChanger {\\n        liqEnabled = liqEnabled_;\\n    }\\n\\n    /**\\n     * @dev sets success Fee value.\\n     * @param successFee_ pct of the gain because Pegged Tokens devaluation that is\\n     * transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     */\\n    function setSuccessFee(uint256 successFee_) external onlyAuthorizedChanger {\\n        successFee = successFee_;\\n    }\\n\\n    /**\\n     * @dev sets appreciation Factor value.\\n     * @param appreciationFactor_ pct of the gain because Pegged Tokens devaluation that is returned\\n     * in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     */\\n    function setAppreciationFactor(uint256 appreciationFactor_) external onlyAuthorizedChanger {\\n        appreciationFactor = appreciationFactor_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest collector address\\n     * @param tcInterestCollectorAddress_ TC interest collector address\\n     */\\n    function setTCInterestCollectorAddress(address tcInterestCollectorAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        tcInterestCollectorAddress = tcInterestCollectorAddress_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest rate\\n     * @param tcInterestRate_ pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     */\\n    function setTCInterestRate(uint256 tcInterestRate_) external onlyAuthorizedChanger {\\n        tcInterestRate = tcInterestRate_;\\n    }\\n\\n    /**\\n     * @dev sets TC interest payment block span\\n     * @param tcInterestPaymentBlockSpan_ amount of blocks to wait for next TC interest payment\\n     * @dev nextTCInterestPayment is not automatically updated, you have to wait until next\\n     *  interest payment to be made : nextTCInterestPayment = block.number + tcInterestPaymentBlockSpan\\n     */\\n    function setTCInterestPaymentBlockSpan(uint256 tcInterestPaymentBlockSpan_) external onlyAuthorizedChanger {\\n        tcInterestPaymentBlockSpan = tcInterestPaymentBlockSpan_;\\n    }\\n\\n    /**\\n     * @param bes_ number of blocks between settlements\\n     * @dev bns is not automatically updated, you have to wait until next\\n     * settlement to be made : bns = block.number + bes\\n     **/\\n    function setBes(uint256 bes_) external onlyAuthorizedChanger {\\n        bes = bes_;\\n    }\\n\\n    /**\\n     * @dev sets max absolute operation provider address\\n     * @param maxAbsoluteOpProviderAddress_ max absolute operation provider address\\n     */\\n    function setMaxAbsoluteOpProviderAddress(address maxAbsoluteOpProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        maxAbsoluteOpProvider = IDataProvider(maxAbsoluteOpProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets max operation difference provider address\\n     * @param maxOpDiffProviderAddress_ max operation difference provider address\\n     */\\n    function setMaxOpDiffProviderAddress(address maxOpDiffProviderAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        maxOpDiffProvider = IDataProvider(maxOpDiffProviderAddress_);\\n    }\\n\\n    /**\\n     * @dev sets flux capacitor decay block span\\n     * @param decayBlockSpan_ flux capacitor decay block span\\n     */\\n    function setDecayBlockSpan(uint256 decayBlockSpan_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        decayBlockSpan = decayBlockSpan_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Queue contract address\\n     * @param mocQueueAddress_ moc queue new contract address\\n     */\\n    function setMocQueue(address payable mocQueueAddress_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocQueue = mocQueueAddress_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x70ee228df2e2e59d95bf56e3512f1c1a059e44dc408fd2e4ce6c6b7e6a637ced\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCommons.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocVendors } from \\\"../vendors/MocVendors.sol\\\";\\nimport { MocEma } from \\\"./MocEma.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\nimport { SignedMath } from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n// ------- External Structs -------\\n\\nstruct PeggedTokenParams {\\n    // Pegged Token contract address to add\\n    address tpTokenAddress;\\n    // priceProviderAddress Pegged Token price provider contract address\\n    address priceProviderAddress;\\n    // Pegged Token target coverage [PREC]\\n    uint256 tpCtarg;\\n    // additional fee pct applied on mint [PREC]\\n    uint256 tpMintFee;\\n    // additional fee pct applied on redeem [PREC]\\n    uint256 tpRedeemFee;\\n    // initial Pegged Token exponential moving average [PREC]\\n    uint256 tpEma;\\n    // Pegged Token smoothing factor [PREC]\\n    uint256 tpEmaSf;\\n}\\n\\n//    +-----------------+\\n//    |  MocBaseBucket  |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+\\n//    |    MocEma       |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//    +-----------------+ contains  +-----------------+\\n//    |    MocCommons   | ------>   |    MocVendors   |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+ contains  +-----------------+\\n//    |     MocCore     | ------>   |MocCoreExpansion |\\n//    +-----------------+           +-----------------+\\n//            ^\\n//            | is\\n//            |\\n//            |\\n//    +-----------------+\\n//    |  MocOperations  |\\n//    +-----------------+\\n//            ^\\n//            | is\\n//            | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\\n//            |                              |\\n//    +-----------------+           +-----------------+\\n//    |  MocCACoinbase  |           |    MocCARC20    |\\n//    +-----------------+           +-----------------+\\n/**\\n * @title MocCommons\\n * @dev To bypass the 24kb size limitation on MocCore we use MocCoreExpansion contract. Some functions\\n *  are implemented there and MocCore delegates calls to it. To achieve that, we need both to have the\\n *  exact same storage layout and be able to access the same common functions.\\n *  MocCommons contract serves as the last shared ancestor in the line of inheritance for them,\\n *  and all storage variables must be either declared here or in a parent contract.\\n *  Declaring variables after this point could result in storage collisions.\\n */\\nabstract contract MocCommons is MocEma {\\n    // ------- Storage -------\\n\\n    // Address for MocVendors contract, provides fee markup information\\n    MocVendors public mocVendors;\\n\\n    // ------- Internal Structs -------\\n\\n    struct MintTCandTPParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct RedeemTCandTPParams {\\n        address tp;\\n        uint256 qTC;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTPforTPParams {\\n        address tpFrom;\\n        address tpTo;\\n        uint256 qTP;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTPforTCParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qTCmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct SwapTCforTPParams {\\n        address tp;\\n        uint256 qTC;\\n        uint256 qTPmin;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct RedeemTPParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    struct FeeCalcs {\\n        uint256 qACFee;\\n        uint256 qFeeToken;\\n        uint256 qACVendorMarkup;\\n        uint256 qFeeTokenVendorMarkup;\\n    }\\n\\n    // ------- Custom Errors -------\\n\\n    error PeggedTokenAlreadyAdded();\\n    error InsufficientTPtoRedeem(uint256 qTP_, uint256 tpAvailableToRedeem_);\\n    error TransferFailed();\\n    error OnlyWhenLiquidated();\\n    error InsufficientQacSent(uint256 qACsent_, uint256 qACNeeded_);\\n    error InsufficientTPtoMint(uint256 qTP_, uint256 tpAvailableToMint_);\\n    error QtpBelowMinimumRequired(uint256 qTPmin_, uint256 qTP_);\\n    error QtcBelowMinimumRequired(uint256 qTCmin_, uint256 qTC_);\\n    error QacNeededMustBeGreaterThanZero();\\n    error InsufficientTCtoRedeem(uint256 qTC_, uint256 tcAvailableToRedeem_);\\n    error MissingProviderData(address dataProviderAddress_);\\n    error MaxFluxCapacitorOperationReached(uint256 max_, uint256 new_);\\n    error InvalidFluxCapacitorOperation();\\n    error InsufficientQtpSent(uint256 qTPsent_, uint256 qTPNeeded_);\\n    error QacBelowMinimumRequired(uint256 qACmin_, uint256 qACtoRedeem_);\\n\\n    // ------- Events -------\\n\\n    event LiqTPRedeemed(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_\\n    );\\n    event PeggedTokenChange(uint256 i_, PeggedTokenParams peggedTokenParams_);\\n\\n    // ------- Initializer -------\\n\\n    /**\\n     * @notice contract initializer\\n     * @param mocVendors_ address for MocVendors contract.\\n     */\\n    function __MocCommons_init_unchained(address mocVendors_) internal onlyInitializing {\\n        mocVendors = MocVendors(mocVendors_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice calc fees amount in qAC or Fee Token\\n     *  If `sender_` has enough Fee Token to pay fees, will be used. In another case will use qAC\\n     * @dev if qFeeToken > 0, qACFee = 0. If qACFee > 0, qFeeToken = 0.\\n     * @param sender_ address who executes the operation\\n     * @param qAC_ amount of AC involved in the operation, could be sent form sender for mint or\\n     *  sent to recipient for redeem [N]\\n     * @param qACFeePct_ additional fee pct applied on operation\\n     * @return qACSurcharges amount of AC needed to pay fees and markup. 0 if pays with Fee Token\\n     * @return qFeeTokenTotalNeeded amount of Fee Token needed to pay fees and markup. 0 if pays with AC\\n     * @return feeCalcs\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function _calcFees(\\n        address sender_,\\n        address vendor_,\\n        uint256 qAC_,\\n        uint256 qACFeePct_\\n    ) internal view returns (uint256 qACSurcharges, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        uint256 qACmarked = 0;\\n        if (vendor_ != address(0)) {\\n            // [PREC] = [N] * [PREC]\\n            qACmarked = qAC_ * mocVendors.vendorMarkup(vendor_);\\n        }\\n        uint256 senderAllowance = feeToken.allowance(sender_, address(this));\\n        if (senderAllowance > 0) {\\n            (uint256 feeTokenPrice, bool hasFeeTokenPrice) = _peekPrice(feeTokenPriceProvider);\\n            if (hasFeeTokenPrice) {\\n                // calculates Fee Token to be charged as fee\\n                // [N] = ([N] * [PREC] * [PREC] / [PREC]) / [PREC]\\n                feeCalcs.qFeeToken = _mulPrec(qAC_ * qACFeePct_, feeTokenPct) / feeTokenPrice;\\n                if (qACmarked > 0) {\\n                    // [N] = [PREC] / [PREC]\\n                    feeCalcs.qFeeTokenVendorMarkup = qACmarked / feeTokenPrice;\\n                    // [N] = [N] + [N]\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken + feeCalcs.qFeeTokenVendorMarkup;\\n                } else {\\n                    qFeeTokenTotalNeeded = feeCalcs.qFeeToken;\\n                }\\n                if (senderAllowance < qFeeTokenTotalNeeded || feeToken.balanceOf(sender_) < qFeeTokenTotalNeeded) {\\n                    feeCalcs.qFeeToken = 0;\\n                    feeCalcs.qFeeTokenVendorMarkup = 0;\\n                    qFeeTokenTotalNeeded = 0;\\n                }\\n            }\\n        }\\n        // if sender hasn't got enough feeToken balance or allowance or price provider hasn't got a valid price\\n        // then qFeeToken == 0 and sender pays fees with AC\\n        // slither-disable-next-line incorrect-equality\\n        if (feeCalcs.qFeeToken == 0) {\\n            // calculates qAC to be charged as fee\\n            // [N] = [N] * [PREC] / [PREC]\\n            feeCalcs.qACFee = _mulPrec(qAC_, qACFeePct_);\\n            if (qACmarked > 0) {\\n                // [N] = [PREC] / [PREC]\\n                feeCalcs.qACVendorMarkup = qACmarked / PRECISION;\\n                // [N] = [N] + [N]\\n                qACSurcharges = feeCalcs.qACFee + feeCalcs.qACVendorMarkup;\\n            } else {\\n                qACSurcharges = feeCalcs.qACFee;\\n            }\\n        }\\n        return (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice evaluates if there are enough Pegged Token available to mint, reverts if it`s not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint [N]\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalTPavailableToMint(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 ctargemaTP = _getCtargemaTP(i_, pACtp_);\\n        uint256 tpAvailableToMint = _getTPAvailableToMint(ctargemaCA_, ctargemaTP, pACtp_, lckAC_, nACgain_);\\n        // check if there are enough TP available to mint\\n        if (tpAvailableToMint < qTP_) revert InsufficientTPtoMint(qTP_, tpAvailableToMint);\\n    }\\n\\n    /**\\n     * @notice evaluates if there is enough Collateral Token available to redeem, reverts if there's not\\n     * @param qTC_ amount of Collateral Token to redeem [N]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of Collateral Asset that will be distributed at\\n     *         settlement because Pegged Token devaluation [N]\\n     */\\n    function _evalTCAvailableToRedeem(\\n        uint256 qTC_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 tcAvailableToRedeem = _getTCAvailableToRedeem(ctargemaCA_, lckAC_, nACgain_);\\n        // check if there are enough TC available to redeem\\n        if (tcAvailableToRedeem < qTC_) revert InsufficientTCtoRedeem(qTC_, tcAvailableToRedeem);\\n    }\\n\\n    /**\\n     * @notice ask to oracles for flux capacitor settings\\n     * @return absolute maximum transaction allowed for a certain number of blocks\\n     * @return differential maximum transaction allowed for a certain number of blocks\\n     */\\n    function _peekFluxCapacitorSettings() internal view returns (uint256, uint256) {\\n        bytes32 maxAbsoluteOp;\\n        bytes32 maxOpDiff;\\n        bool has;\\n        // get max absolute operation\\n        IDataProvider dataProvider = maxAbsoluteOpProvider;\\n        (maxAbsoluteOp, has) = dataProvider.peek();\\n        if (!has) revert MissingProviderData(address(dataProvider));\\n        // get max operational difference\\n        dataProvider = maxOpDiffProvider;\\n        (maxOpDiff, has) = dataProvider.peek();\\n        if (!has) revert MissingProviderData(address(dataProvider));\\n        return (uint256(maxAbsoluteOp), uint256(maxOpDiff));\\n    }\\n\\n    /**\\n     * @notice returns lineal decay factor\\n     * @param blocksAmount_ amount of blocks to ask for the decay\\n     * @return newAbsoluteAccumulator absolute accumulator updated by lineal decay factor [N]\\n     * @return newDifferentialAccumulator differential accumulator updated by lineal decay factor [N]\\n     */\\n    function _calcAccWithDecayFactor(\\n        uint256 blocksAmount_\\n    ) internal view returns (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) {\\n        unchecked {\\n            // [N] = [N] - [N]\\n            uint256 blocksElapsed = block.number + blocksAmount_ - lastOperationBlockNumber;\\n            // [PREC] = [N] * [PREC] / [N]\\n            uint256 blocksRatio = (blocksElapsed * PRECISION) / decayBlockSpan;\\n            if (blocksRatio >= ONE) return (0, 0);\\n            uint256 decayFactor = ONE - blocksRatio;\\n            // [N] = [N] * [PREC] / [PREC]\\n            newAbsoluteAccumulator = (absoluteAccumulator * decayFactor) / PRECISION;\\n            // [N] = [N] * [PREC] / [PREC]\\n            newDifferentialAccumulator = (differentialAccumulator * int256(decayFactor)) / int256(PRECISION);\\n            return (newAbsoluteAccumulator, newDifferentialAccumulator);\\n        }\\n    }\\n\\n    /**\\n     * @notice common function used to update accumulators during a TP operation\\n     *  reverts if not allowed\\n     * @dev the only difference between a redeem and a mint operation is that in the first one,\\n     * the qAC is subtracted on newDifferentialAccumulator instead of added\\n     * @param qAC_ amount of Collateral Asset used to mint\\n     * @param redeemFlag_ true if it is a redeem TP operation\\n     */\\n    function _updateAccumulators(uint256 qAC_, bool redeemFlag_) internal {\\n        (uint256 maxAbsoluteOperation, uint256 maxOperationalDifference) = _peekFluxCapacitorSettings();\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(0);\\n        unchecked {\\n            newAbsoluteAccumulator += qAC_;\\n            int256 qACInt = int256(qAC_);\\n            if (redeemFlag_) qACInt = -qACInt;\\n            newDifferentialAccumulator += qACInt;\\n            // cannot underflow, always newDifferentialAccumulator <= newAbsoluteAccumulator\\n            uint256 operationalDifference = newAbsoluteAccumulator - SignedMath.abs(newDifferentialAccumulator);\\n            if (newAbsoluteAccumulator > maxAbsoluteOperation) {\\n                if (qAC_ > maxAbsoluteOperation) revert InvalidFluxCapacitorOperation();\\n                revert MaxFluxCapacitorOperationReached(maxAbsoluteOperation, newAbsoluteAccumulator);\\n            }\\n            if (operationalDifference > maxOperationalDifference)\\n                revert MaxFluxCapacitorOperationReached(maxOperationalDifference, operationalDifference);\\n            // update storage\\n            absoluteAccumulator = newAbsoluteAccumulator;\\n            differentialAccumulator = newDifferentialAccumulator;\\n            lastOperationBlockNumber = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice update accumulators during a mint TP operation\\n     *  reverts if not allowed\\n     * @param qAC_ amount of Collateral Asset used to mint\\n     */\\n    function _updateAccumulatorsOnMintTP(uint256 qAC_) internal {\\n        _updateAccumulators(qAC_, false);\\n    }\\n\\n    /**\\n     * @notice update accumulators during a redeem operation\\n     *  reverts if not allowed\\n     * @param qAC_ reserve amount used for redeem\\n     */\\n    function _updateAccumulatorsOnRedeemTP(uint256 qAC_) internal {\\n        _updateAccumulators(qAC_, true);\\n    }\\n\\n    /**\\n     * @notice internal common function used to calc max AC allowed to mint or redeem TP\\n     *  due to accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @param newAbsoluteAccumulator_ absolute accumulator updated by lineal decay factor [N]\\n     * @param a_ on mint = AA - DA ; on redeem = AA + DA\\n     * @param b_ on mint = AA + DA ; on redeem = AA - DA\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function _calcMaxQACToOperateTP(\\n        uint256 newAbsoluteAccumulator_,\\n        uint256 a_,\\n        uint256 b_\\n    ) internal view returns (uint256 maxQAC) {\\n        (uint256 maxAbsoluteOperation, uint256 maxOperationalDifference) = _peekFluxCapacitorSettings();\\n        if (newAbsoluteAccumulator_ >= maxAbsoluteOperation) return 0;\\n        uint256 absoluteAccAllowed = maxAbsoluteOperation - newAbsoluteAccumulator_;\\n\\n        if (a_ <= maxOperationalDifference) return absoluteAccAllowed;\\n        if (b_ >= maxOperationalDifference) return 0;\\n        uint256 differentialAccAllowed = (maxOperationalDifference - b_) / 2;\\n        return Math.min(absoluteAccAllowed, differentialAccAllowed);\\n    }\\n\\n    /**\\n     * @notice gets the max amount of AC allowed to operate to mint TP with, restricted by accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function maxQACToMintTP() external view returns (uint256 maxQAC) {\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(1);\\n        // X = mint amount\\n        // (AA + X) - |DA + X| <= MODA && X >= 0\\n        // 1) if DA + X >= 0 ---> AA + X - DA - X <= MODA ---> AA - DA <= MODA\\n        // 2) if DA + X < 0 ---> X <= (MODA - (AA + DA)) / 2\\n\\n        // AA >= |DA|\\n        uint256 a = uint256(int256(newAbsoluteAccumulator) - newDifferentialAccumulator);\\n        uint256 b = uint256(int256(newAbsoluteAccumulator) + newDifferentialAccumulator);\\n        return _calcMaxQACToOperateTP(newAbsoluteAccumulator, a, b);\\n    }\\n\\n    /**\\n     * @notice gets the max amount of AC allowed to operate to redeem TP with, restricted by accumulators\\n     * // TODO: move this function to a MocView contract\\n     * @return maxQAC minimum regarding maxAbsoluteOperation and maxOperationalDifference\\n     */\\n    function maxQACToRedeemTP() external view returns (uint256 maxQAC) {\\n        (uint256 newAbsoluteAccumulator, int256 newDifferentialAccumulator) = _calcAccWithDecayFactor(1);\\n        // X = redeem amount\\n        // (AA + X) - |DA - X| <= MODA && X >= 0\\n        // 1) if DA - X < 0 ---> AA + X + DA - X <= MODA ---> AA + DA <= MODA\\n        // 2) if DA - X >= 0 ---> X <= (MODA - (AA - DA)) / 2\\n\\n        // AA >= |DA|\\n        uint256 a = uint256(int256(newAbsoluteAccumulator) + newDifferentialAccumulator);\\n        uint256 b = uint256(int256(newAbsoluteAccumulator) - newDifferentialAccumulator);\\n        return _calcMaxQACToOperateTP(newAbsoluteAccumulator, a, b);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe85d77505b79a370c00d00a576feb5331533a3330bb3dbdeb427e2369bf872ec\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCommons, PeggedTokenParams, MocVendors } from \\\"./MocCommons.sol\\\";\\nimport { MocCoreExpansion } from \\\"./MocCoreExpansion.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title MocCore\\n * @notice MocCore nucleates all the basic MoC functionality and tool set. It allows Collateral\\n * asset aware contracts to implement the main mint/redeem operations.\\n */\\nabstract contract MocCore is MocCommons {\\n    // ------- Events -------\\n    event SuccessFeeDistributed(uint256 mocGain_, uint256[] tpGain_);\\n    event SettlementExecuted();\\n    event TCInterestPayment(uint256 interestAmount_);\\n    // ------- Custom Errors -------\\n    error MissingBlocksToSettlement();\\n    error MissingBlocksToTCInterestPayment();\\n    // ------- Structs -------\\n\\n    struct InitializeCoreParams {\\n        InitializeBaseBucketParams initializeBaseBucketParams;\\n        // The address that will define when a change contract is authorized\\n        address governorAddress;\\n        // The address that is authorized to pause this contract\\n        address pauserAddress;\\n        // Moc Core Expansion contract address\\n        address mocCoreExpansion;\\n        // amount of blocks to wait between Pegged ema calculation\\n        uint256 emaCalculationBlockSpan;\\n        // address for MocVendors\\n        address mocVendors;\\n    }\\n\\n    // ------- Storage -------\\n    // Moc Core Expansion contract address, used to expand 24kb size limit\\n    address internal mocCoreExpansion;\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @dev this function must be execute by the AC implementation at initialization\\n     * @param initializeCoreParams_ contract initializer params\\n     *        governorAddress The address that will define when a change contract is authorized\\n     *        pauserAddress_ The address that is authorized to pause this contract\\n     *        mocCoreExpansion Moc Core Expansion contract address\\n     *        feeTokenAddress Fee Token contract address\\n     *        feeTokenPriceProviderAddress Fee Token price provider contract address\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected state threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        feeTokenPct pct applied on the top of the operation`s fee when using\\n     *          Fee Token as fee payment method [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]]\\n     *        bes number of blocks between settlements\\n     *        tcInterestCollectorAddress TC interest collector address\\n     *        tcInterestRate pct interest charged to TC holders on the total collateral in the protocol [PREC]\\n     *        tcInterestPaymentBlockSpan amount of blocks to wait for next TC interest payment\\n     *        maxAbsoluteOpProviderAddress max absolute operation provider address\\n     *        maxOpDiffProviderAddress max operation difference provider address\\n     *        decayBlockSpan number of blocks that have to elapse for the linear decay factor to be 0\\n     *        emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *        mocVendors address for MocVendors contract.\\n     */\\n    function __MocCore_init(InitializeCoreParams calldata initializeCoreParams_) internal onlyInitializing {\\n        mocCoreExpansion = initializeCoreParams_.mocCoreExpansion;\\n        __MocUpgradable_init(initializeCoreParams_.governorAddress, initializeCoreParams_.pauserAddress);\\n        __MocBaseBucket_init_unchained(initializeCoreParams_.initializeBaseBucketParams);\\n        __MocEma_init_unchained(initializeCoreParams_.emaCalculationBlockSpan);\\n        __MocCommons_init_unchained(initializeCoreParams_.mocVendors);\\n    }\\n\\n    // ------- Internal abstract Functions -------\\n\\n    /**\\n     * @notice transfer Collateral Asset\\n     * @dev this function must be overridden by the AC implementation\\n     *  and revert if transfer fails.\\n     * IMPORTANT: if ac transfer could trigger custom gas consumption for the Collateral\\n     * used (like coinbase fallback or ERC777), gasLimit should be capped\\n     * @param to_ address who receives the Collateral Asset\\n     * @param amount_ amount of Collateral Asset to transfer\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal virtual;\\n\\n    /**\\n     * @notice Collateral Asset balance\\n     * @dev this function must be overridden by the AC implementation\\n     * @param account address who's Collateral Asset balance we want to know of\\n     * @return balance `account`'s total amount of Collateral Asset\\n     */\\n    function acBalanceOf(address account) internal view virtual returns (uint256 balance);\\n\\n    // ------- Internal Functions -------\\n\\n    struct MintTCParams {\\n        uint256 qTC;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token in exchange for Collateral Asset\\n     * @param params_ mintTCto function params\\n     * @dev\\n     *      qTC_ amount of Collateral Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     *      recipient_ address who receives the Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _mintTCto(\\n        MintTCParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        // calculates how many qAC are needed to mint TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACNeededToMint = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededToMint,\\n            tcMintFee\\n        );\\n        qACtotalNeeded = qACNeededToMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        _depositAndMintTC(params_.qTC, qACNeededToMint, params_.recipient);\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACtotalNeeded, params_.vendor, feeCalcs);\\n    }\\n\\n    struct RedeemTCParams {\\n        uint256 qTC;\\n        uint256 qACmin;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token\\n     * @param params_ redeemTCto function params\\n     * @dev\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n\\n    function _redeemTCto(\\n        RedeemTCParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(params_.qTC, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            tcRedeemFee\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        _withdrawAndBurnTC(params_.qTC, qACtotalToRedeem);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    struct MintTPParams {\\n        address tp;\\n        uint256 qTP;\\n        uint256 qACmax;\\n        address sender;\\n        address recipient;\\n        address vendor;\\n    }\\n\\n    /**\\n     * @notice mint Pegged Token in exchange for Collateral Asset\\n     * @param params_ mint TP function params\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _mintTPto(\\n        MintTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TP\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(i, params_.qTP, pACtp, ctargemaCA, lckAC, nACgain);\\n        // calculate how many qAC are needed to mint TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACNeededtoMint = _divPrec(params_.qTP, pACtp);\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededtoMint,\\n            tpMintFees[params_.tp]\\n        );\\n        qACtotalNeeded = qACNeededtoMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnMintTP(qACNeededtoMint);\\n        // update bucket and mint\\n        _depositAndMintTP(i, params_.qTP, qACNeededtoMint, params_.recipient);\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACtotalNeeded, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Pegged Token\\n     * @param params_ redeem CA function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _redeemTPto(\\n        RedeemTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TP, reverts if it's not\\n        _evalCoverage(protThrld, pACtps);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtp);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            tpRedeemFees[params_.tp]\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnRedeemTP(qACtoRedeem);\\n        _withdrawAndBurnTP(i, params_.qTP, qACtotalToRedeem);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token and Pegged Token in exchange for Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param params_ mint TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends Collateral Asset\\n     *      recipient_ address who receives the Collateral Token and Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _mintTCandTPto(\\n        MintTCandTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).mintTCandTPto, (params_));\\n        (qACtotalNeeded, qTCtoMint, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACtotalNeeded, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param params_ redeem TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qTP_ maximum amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends Collateral Token and Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qTPtoRedeem amount of Pegged Token redeemed\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _redeemTCandTPto(\\n        RedeemTCandTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACtoRedeem, uint256 qTPtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).redeemTCandTPto, (params_));\\n        (qACtoRedeem, qTPtoRedeem, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(params_.sender, params_.recipient, qACtoRedeem, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @param params_ swap TP for TP function parameters\\n     * @dev\\n     *      iFrom_ owned Pegged Token index\\n     *      iTo_ target Pegged Token index\\n     *      qTP_ amount of owned Pegged Token to swap\\n     *      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the target Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPMinted amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _swapTPforTPto(\\n        SwapTPforTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTPMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).swapTPforTPto, (params_));\\n        (qACSurcharges, qTPMinted, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACSurcharges, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to Collateral Token\\n     * @param params_ swap TP for TC function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount Pegged Token to swap\\n     *      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTCMinted amount of TC minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _swapTPforTCto(\\n        SwapTPforTCParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTCMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).swapTPforTCto, (params_));\\n        (qACSurcharges, qTCMinted, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACSurcharges, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice swap Collateral Token to Pegged Token\\n     * @param params_ swap TC for TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to swap\\n     *      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function _swapTCforTPto(\\n        SwapTCforTPParams memory params_\\n    )\\n        internal\\n        notLiquidated\\n        notPaused\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).swapTCforTPto, (params_));\\n        (qACSurcharges, qTPtoMint, qFeeTokenTotalNeeded, feeCalcs) = abi.decode(\\n            Address.functionDelegateCall(mocCoreExpansion, payload),\\n            (uint256, uint256, uint256, FeeCalcs)\\n        );\\n        // All locked AC is either unlock or returned, no longer on pending Operation\\n        qACLockedInPending -= params_.qACmax;\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(params_.sender, params_.sender, params_.qACmax - qACSurcharges, params_.vendor, feeCalcs);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @dev This function is implemented in MocCoreExpansion but with this contract context\\n     * @param tp_ Pegged Token address\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function _liqRedeemTPTo(\\n        address tp_,\\n        address sender_,\\n        address recipient_\\n    ) internal notPaused returns (uint256 qACRedeemed) {\\n        bytes memory payload = abi.encodeCall(\\n            MocCoreExpansion(mocCoreExpansion).liqRedeemTP,\\n            (tp_, sender_, recipient_, acBalanceOf(address(this)))\\n        );\\n        qACRedeemed = abi.decode(Address.functionDelegateCall(mocCoreExpansion, payload), (uint256));\\n        // transfer qAC to the recipient, reverts if fail\\n        acTransfer(recipient_, qACRedeemed);\\n        return qACRedeemed;\\n    }\\n\\n    /**\\n     * @notice Distributes Operation results to the different recipients\\n     * @param sender_ address who executes the operation\\n     * @param operatorsAddress_ operator's address to receive `operatorsQAC_`\\n     * @param operatorsQAC_ amount of AC to transfer operator [N]\\n     * @param vendor_ vendors address to pay markup to\\n     * @param feeCalcs_ struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function _distOpResults(\\n        address sender_,\\n        address operatorsAddress_,\\n        uint256 operatorsQAC_,\\n        address vendor_,\\n        FeeCalcs memory feeCalcs_\\n    ) internal {\\n        if (feeCalcs_.qACFee > 0) {\\n            // [N] = [PREC] * [N] / [PREC]\\n            uint256 qACFeeRetained = _mulPrec(feeRetainer, feeCalcs_.qACFee);\\n            // Increase collateral in the retain amount\\n            nACcb += qACFeeRetained;\\n            // transfer qAC fee to Moc Fee Flow\\n            acTransfer(mocFeeFlowAddress, feeCalcs_.qACFee - qACFeeRetained);\\n            // transfer qAC markup to vendor\\n            acTransfer(vendor_, feeCalcs_.qACVendorMarkup);\\n        }\\n        // if qACFee == 0 then the fees are paid in Fee Token\\n        else {\\n            // transfer Fee Token to Moc Fee Flow\\n            _feeTokenTransfer(sender_, mocFeeFlowAddress, feeCalcs_.qFeeToken);\\n            // transfer Fee Token to vendor\\n            _feeTokenTransfer(sender_, vendor_, feeCalcs_.qFeeTokenVendorMarkup);\\n        }\\n        // transfer qAC to operator\\n        acTransfer(operatorsAddress_, operatorsQAC_);\\n    }\\n\\n    /**\\n     * @notice transfer Fee Tokens from an address to another\\n     * @dev this function could revert during safeTransfer call.\\n     *  safeTransfer will revert if token transfer reverts or returns 0\\n     * @param from_ address who sends the Fee Token\\n     * @param to_ address who receives the Fee Token\\n     * @param amount_ amount of Fee Token to transfer\\n     */\\n    function _feeTokenTransfer(address from_, address to_, uint256 amount_) internal {\\n        if (amount_ > 0) SafeERC20.safeTransferFrom(feeToken, from_, to_, amount_);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param tp_ Pegged Token address\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTP(address tp_, address recipient_) external returns (uint256 qACRedeemed) {\\n        return _liqRedeemTPTo(tp_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice distribute appreciation factor to beneficiary and success fee to Moc Fee Flow\\n     */\\n    function _distributeSuccessFee() internal {\\n        uint256 mocGain = 0;\\n        uint256 pegAmount = pegContainer.length;\\n        uint256[] memory tpToMint = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = _getPACtp(i);\\n            _updateTPtracking(i, pACtp);\\n            int256 iou = tpiou[i];\\n            if (iou > 0) {\\n                // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n                tpToMint[i] = _mulPrec(_mulPrec(appreciationFactor, pACtp), uint256(iou));\\n                // [N] = [N] + [N]\\n                mocGain += uint256(iou);\\n                // reset TP profit\\n                tpiou[i] = 0;\\n                _depositAndMintTP(i, tpToMint[i], 0, mocAppreciationBeneficiaryAddress);\\n            }\\n        }\\n        if (mocGain != 0) {\\n            // [N] = [N] * [PREC] / [PREC]\\n            mocGain = _mulPrec(mocGain, successFee);\\n            // sub qAC from the Bucket\\n            nACcb -= mocGain;\\n            // transfer the mocGain AC to Moc Fee Flow\\n            acTransfer(mocFeeFlowAddress, mocGain);\\n        }\\n        emit SuccessFeeDistributed(mocGain, tpToMint);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice this function is executed during settlement.\\n     *  stores amount of locked AC by Pegged Tokens at this moment and distribute success fee\\n     */\\n    function execSettlement() external notPaused {\\n        // check if it is in the corresponding block to execute the settlement\\n        if (block.number < bns) revert MissingBlocksToSettlement();\\n        unchecked {\\n            bns = block.number + bes;\\n        }\\n        emit SettlementExecuted();\\n        _distributeSuccessFee();\\n    }\\n\\n    /**\\n     * @notice executes the interest payment of the TC holders\\n     *  can only be executed after a block span\\n     * @dev\\n     *  -   The amount is not differential, it's a snapshot of the moment it's executed\\n     *  -   It does not check coverage\\n     */\\n    function tcHoldersInterestPayment() external notPaused {\\n        // check if it is in the corresponding block to execute the interest payment\\n        if (block.number < nextTCInterestPayment) revert MissingBlocksToTCInterestPayment();\\n        unchecked {\\n            nextTCInterestPayment = block.number + tcInterestPaymentBlockSpan;\\n        }\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 interestAmount = _mulPrec(nACcb, tcInterestRate);\\n        emit TCInterestPayment(interestAmount);\\n        // transfer interests to the interest collector address, reverts if fail\\n        acTransfer(tcInterestCollectorAddress, interestAmount);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets Moc Core Expansion contract address\\n     * @param mocCoreExpansion_ moc core expansion new contract address\\n     */\\n    function setMocCoreExpansion(address mocCoreExpansion_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocCoreExpansion = mocCoreExpansion_;\\n    }\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is implemented in MocCoreExpansion but with this contract context\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev\\n     *      tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).addPeggedToken, (peggedTokenParams_));\\n        // slither-disable-next-line unused-return\\n        Address.functionDelegateCall(mocCoreExpansion, payload);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is implemented in MocCoreExpansion but with this contract context\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev\\n     *      tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        bytes memory payload = abi.encodeCall(MocCoreExpansion(mocCoreExpansion).editPeggedToken, (peggedTokenParams_));\\n        // slither-disable-next-line unused-return\\n        Address.functionDelegateCall(mocCoreExpansion, payload);\\n    }\\n\\n    /**\\n     * @dev sets Moc Vendors contract address\\n     * @param mocVendors_ moc Vendors new contract address\\n     */\\n    function setMocVendors(address mocVendors_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        mocVendors = MocVendors(mocVendors_);\\n    }\\n\\n    // ------- Getters Functions -------\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @return pTCac [PREC]\\n     */\\n    function getPTCac() external view returns (uint256 pTCac) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getPTCac(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @return cglob [PREC]\\n     */\\n    function getCglb() external view returns (uint256 cglob) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getCglb(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset locked by Pegged Token\\n     * @return lckAC [PREC]\\n     */\\n    function getLckAC() external view returns (uint256 lckAC) {\\n        (lckAC, ) = _getLckACandACgain();\\n        return lckAC;\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TC available to redeem. Consider it an approximation.\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function getTCAvailableToRedeem() external view returns (uint256 tcAvailableToRedeem) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _calcCtargemaCA();\\n        (uint256 lckAC, uint256 nACgain) = _calcLckACandACgain(pACtps);\\n        return _getTCAvailableToRedeem(ctargemaCA, lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TP available to mint. Consider it an approximation.\\n     * @param tp_ Pegged Token address\\n     * @return tpAvailableToMint [N]\\n     */\\n    function getTPAvailableToMint(address tp_) external view returns (int256 tpAvailableToMint) {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _calcCtargemaCA();\\n        uint256 i = _tpi(tp_);\\n        uint256 pACtp = pACtps[i];\\n        (uint256 lckAC, uint256 nACgain) = _calcLckACandACgain(pACtps);\\n        return _getTPAvailableToMintSigned(ctargemaCA, _getCtargemaTP(i, pACtp), pACtp, lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @return totalACavailable [N]\\n     */\\n    function getTotalACavailable() external view returns (uint256 totalACavailable) {\\n        (, uint256 nACgain) = _getLckACandACgain();\\n        return _getTotalACavailable(nACgain);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @return leverageTC [PREC]\\n     */\\n    function getLeverageTC() external view returns (uint256 leverageTC) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getLeverageTC(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get the number of blocks remaining for settlement\\n     */\\n    function getBts() external view returns (uint256) {\\n        if (block.number >= bns) return 0;\\n        return bns - block.number;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xfb31b9d417fe2fde990a257f6ca0e079e0b37d1ee2331e14820d89c47003d340\",\"license\":\"UNLICENSED\"},\"contracts/core/MocCoreExpansion.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCommons, PeggedTokenParams } from \\\"./MocCommons.sol\\\";\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { IPriceProvider } from \\\"../interfaces/IPriceProvider.sol\\\";\\nimport { IDataProvider } from \\\"../interfaces/IDataProvider.sol\\\";\\n\\n/**\\n * @title MocCoreExpansion\\n * @notice This contract is used as an expansion of MocCore because 24kb size limitation\\n *  MocCore delegate some function calls to it.\\n * @dev IMPORTANT NOTES:\\n *  1. MocCore and MocCoreExpansion must have always the same storage layout to avoid collisions\\n *  2. Because MocCore is upgradeable and delegates calls to MocCoreExpansion, it cannot be upgradeable because\\n *      a proxy contract cannot delegate calls to another proxy contract. So, for any MocCoreExpansion upgrade\\n *      you must deploy a new implementation and set it to MocCore.\\n */\\ncontract MocCoreExpansion is MocCommons {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     *  - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        IMocRC20 tpToken = IMocRC20(peggedTokenParams_.tpTokenAddress);\\n\\n        IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n        if (peggedTokenIndex[address(tpToken)].exists) revert PeggedTokenAlreadyAdded();\\n        uint256 newTPindex = uint256(tpTokens.length);\\n        peggedTokenIndex[address(tpToken)] = PeggedTokenIndex({ index: newTPindex, exists: true });\\n\\n        // set Pegged Token address\\n        tpTokens.push(tpToken);\\n        // set peg container item\\n        pegContainer.push(PegContainerItem({ nTP: 0, priceProvider: priceProvider }));\\n        // set target coverage\\n        tpCtarg.push(peggedTokenParams_.tpCtarg);\\n        // set mint fee pct\\n        tpMintFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma.push(EmaItem({ ema: peggedTokenParams_.tpEma, sf: peggedTokenParams_.tpEmaSf }));\\n        tpiou.push();\\n        // reverts if price provider is invalid\\n        pACtpLstop.push(_getPACtp(newTPindex));\\n        // emit the event\\n        emit PeggedTokenChange(newTPindex, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     *  This function is called by MocCore contract using it's context with delegate call\\n     *  Checks done there:\\n     *  -  onlyAuthorizedChanger: the caller must have governance authorization.\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external {\\n        PeggedTokenIndex memory ptIndex = peggedTokenIndex[peggedTokenParams_.tpTokenAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        uint256 i = ptIndex.index;\\n        // if being edited, verifies it is a valid priceProvider\\n        if (peggedTokenParams_.priceProviderAddress != address(pegContainer[i].priceProvider)) {\\n            IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n            (, bool has) = priceProvider.peek();\\n            if (!has) revert InvalidAddress();\\n            pegContainer[i].priceProvider = priceProvider;\\n        }\\n        // set target coverage\\n        tpCtarg[i] = peggedTokenParams_.tpCtarg;\\n        // set mint fee pct\\n        tpMintFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFees[peggedTokenParams_.tpTokenAddress] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma[i].sf = peggedTokenParams_.tpEmaSf;\\n        // emit the event\\n        emit PeggedTokenChange(i, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     *  The equivalent AC given the liquidation frozen price(qACRedeemed) is transferred\\n     *  to the `recipient_` by MocCore contract\\n     *  Checks done there:\\n     *  -  notPaused: the contract must be unpaused\\n     * @param tp_ Pegged Token address\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTP(\\n        address tp_,\\n        address sender_,\\n        address recipient_,\\n        uint256 mocACBalance\\n    ) external returns (uint256 qACRedeemed) {\\n        if (!liquidated) revert OnlyWhenLiquidated();\\n        uint256 i = _tpi(tp_);\\n        uint256 qTP = tpTokens[i].balanceOf(sender_);\\n        // slither-disable-next-line incorrect-equality\\n        if (qTP == 0) revert InsufficientTPtoRedeem(qTP, qTP);\\n        // [PREC]\\n        uint256 liqPACtp = tpLiqPrices[i];\\n        // [PREC] = [N] * [PREC] / [PREC]\\n        qACRedeemed = _divPrec(qTP, liqPACtp);\\n        // Given rounding errors, the last redeemer might receive a little less\\n        if (mocACBalance < qACRedeemed) qACRedeemed = mocACBalance;\\n        // in liquidation doesn't pay fees or markup\\n        // qACfee, qFeeToken, qACVendorMarkup, qFeeTokenVendorMarkup  = (0, 0, 0, 0)\\n        emit LiqTPRedeemed(tp_, sender_, recipient_, qTP, qACRedeemed);\\n        // burn qTP from the sender\\n        tpTokens[i].burn(sender_, qTP);\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token and Pegged Token in exchange for Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param params_ mint TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount of Pegged Token to mint\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent\\n     *      sender_ address who sends Collateral Asset\\n     *      recipient_ address who receives the Collateral Token and Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function mintTCandTPto(\\n        MintTCandTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACtotalNeeded, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256 qACNeededtoMint;\\n        uint256 qACtoMintTP;\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        (qTCtoMint, qACNeededtoMint, qACtoMintTP) = _calcQACforMintTCandTP(\\n            params_.qTP,\\n            pACtp,\\n            _getCtargemaTP(i, pACtp),\\n            _getPTCac(lckAC, nACgain)\\n        );\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACNeededtoMint,\\n            mintTCandTPFee\\n        );\\n        qACtotalNeeded = qACNeededtoMint + qACSurcharges;\\n        if (qACtotalNeeded > params_.qACmax) revert InsufficientQacSent(params_.qACmax, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnMintTP(qACtoMintTP);\\n        _depositAndMintTC(qTCtoMint, qACNeededtoMint, params_.recipient);\\n        _depositAndMintTP(i, params_.qTP, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param params_ redeem TC and TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to redeem\\n     *      qTP_ maximum amount of Pegged Token to redeem\\n     *      qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     *      sender_ address who sends Collateral Token and Pegged Token\\n     *      recipient_ address who receives the Collateral Asset\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qTPtoRedeem amount of Pegged Token redeemed\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs platform fee detail breakdown\\n     */\\n    function redeemTCandTPto(\\n        RedeemTCandTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACtoRedeem, uint256 qTPtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(liqThrld, pACtps);\\n        uint256 pTCac = _getPTCac(lckAC, nACgain);\\n        // ctargemaCA and ctargemaTP never should be less than ONE\\n        // [PREC] = [PREC - PREC] * [PREC - PREC] / [PREC - PREC]\\n        uint256 redeemProportion = ((_getCglb(lckAC, nACgain) - ONE) * (_getCtargemaTP(i, pACtp) - ONE)) /\\n            (ctargemaCA - ONE);\\n        // calculate how many TP are needed to redeem TC and not compromise the coverage\\n        // [N] = [N] * [PREC] * [PREC] / [PREC] * [PREC]\\n        qTPtoRedeem = (params_.qTC * pACtp * pTCac) / (redeemProportion * PRECISION);\\n        if (qTPtoRedeem > params_.qTP) revert InsufficientQtpSent(params_.qTP, qTPtoRedeem);\\n        // if qTC == 0 => qTPtoRedeem == 0 and will revert because QacNeededMustBeGreaterThanZero\\n        (uint256 qACtotalToRedeem, uint256 qACtoRedeemTP) = _calcQACforRedeemTCandTP(\\n            params_.qTC,\\n            qTPtoRedeem,\\n            pACtp,\\n            pTCac\\n        );\\n        uint256 qACSurcharges;\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            redeemTCandTPFee\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACSurcharges;\\n        if (qACtoRedeem < params_.qACmin) revert QacBelowMinimumRequired(params_.qACmin, qACtoRedeem);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnRedeemTP(qACtoRedeemTP);\\n        _withdrawAndBurnTC(params_.qTC, qACtotalToRedeem);\\n        _withdrawAndBurnTP(i, qTPtoRedeem, 0);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TP for TP function parameters\\n     * @dev\\n     *      iFrom_ owned Pegged Token index\\n     *      iTo_ target Pegged Token index\\n     *      qTP_ amount of owned Pegged Token to swap\\n     *      qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives the target Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTPforTPto(\\n        SwapTPforTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        if (params_.tpFrom == params_.tpTo) revert InvalidValue();\\n        uint256 iFrom = _tpi(params_.tpFrom);\\n        uint256 iTo = _tpi(params_.tpTo);\\n        uint256 pACtpFrom = _getPACtp(iFrom);\\n        uint256 pACtpTo = _getPACtp(iTo);\\n        _updateTPtracking(iFrom, pACtpFrom);\\n        _updateTPtracking(iTo, pACtpTo);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtpFrom);\\n        // calculate how many qTP can mint with the given qAC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qTPtoMint = (params_.qTP * pACtpTo) / pACtpFrom;\\n        if (qTPtoMint < params_.qTPmin || qTPtoMint == 0) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        // if ctargemaTPto > ctargemaTPfrom we need to check coverage\\n        if (_getCtargemaTP(iTo, pACtpTo) > _getCtargemaTP(iFrom, pACtpFrom)) {\\n            (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n            // evaluates whether or not the system coverage is healthy enough to mint TP\\n            // given the target coverage adjusted by the moving average, reverts if it's not\\n            (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n            // evaluates if there are enough TP available to mint, reverts if it's not\\n            _evalTPavailableToMint(iTo, qTPtoMint, pACtpTo, ctargemaCA, lckAC, nACgain);\\n        }\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        _depositAndMintTP(iTo, qTPtoMint, 0, params_.recipient);\\n        _withdrawAndBurnTP(iFrom, params_.qTP, 0);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to Collateral Token\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TP for TC function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTP_ amount Pegged Token to swap\\n     *      qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Pegged Token\\n     *      recipient_ address who receives Collateral Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTCtoMint amount of Collateral Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @return feeCalcs struct with:\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTPforTCto(\\n        SwapTPforTCParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTCtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        uint256[] memory pACtps = _getPACtps();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld, pACtps);\\n        // calculate how many total qAC are redeemed TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _divPrec(params_.qTP, pACtp);\\n        // calculate how many qTC can mint with the given qAC\\n        // qTCtoMint = qTP / pTCac / pACtp\\n        // [N] = [N] * [N] * [PREC] / ([N] - [N]) * [PREC]\\n        qTCtoMint = _divPrec(params_.qTP * nTCcb, (_getTotalACavailable(nACgain) - lckAC) * pACtp);\\n        // slither-disable-next-line incorrect-equality\\n        if (qTCtoMint < params_.qTCmin || qTCtoMint == 0) revert QtcBelowMinimumRequired(params_.qTCmin, qTCtoMint);\\n\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTPforTCFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnRedeemTP(qACtotalToRedeem);\\n        _withdrawAndBurnTP(i, params_.qTP, 0);\\n        _depositAndMintTC(qTCtoMint, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice swap Collateral Token to Pegged Token\\n     * @dev This function is called by MocCore contract using it's context with delegate call\\n     * @param params_ swap TC for TP function parameters\\n     * @dev\\n     *      i_ Pegged Token index\\n     *      qTC_ amount of Collateral Token to swap\\n     *      qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive\\n     *      qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     *      sender_ address who sends the Collateral Token\\n     *      recipient_ address who receives the Pegged Token\\n     *      vendor_ address who receives a markup. If its address(0) no markup is applied\\n     * @return qACSurcharges amount of AC used to pay fees and markup\\n     * @return qTPtoMint amount of Pegged Token minted\\n     * @return qFeeTokenTotalNeeded amount of Fee Token used by `sender_` to pay fees. 0 if qAC is used instead\\n     * @dev\\n     *      qACFee amount of AC needed to pay fees\\n     *      qFeeToken amount of Fee Token needed to pay fess\\n     *      qACVendorMarkup amount of AC needed to pay vendor markup\\n     *      qFeeTokenVendorMarkup amount of Fee Token needed to pay vendor markup\\n     */\\n    function swapTCforTPto(\\n        SwapTCforTPParams memory params_\\n    )\\n        external\\n        payable\\n        returns (uint256 qACSurcharges, uint256 qTPtoMint, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (uint256 ctargemaCA, uint256[] memory pACtps) = _updateEmasAndCalcCtargemaCA();\\n        uint256 i = _tpi(params_.tp);\\n        uint256 pACtp = pACtps[i];\\n        _updateTPtracking(i, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA, pACtps);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(params_.qTC, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        uint256 qACtotalToRedeem = _mulPrec(params_.qTC, _getPTCac(lckAC, nACgain));\\n        // if is 0 reverts because it is trying to swap an amount below precision\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qTP can mint with the given qAC\\n        // qTPtoMint = qTC * pTCac * pACtp\\n        // [N] = ([N] * ([N] - [N]) * [PREC] / [N]) / [PREC]\\n        qTPtoMint = ((params_.qTC * (_getTotalACavailable(nACgain) - lckAC) * pACtp) / nTCcb) / PRECISION;\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(i, qTPtoMint, pACtp, ctargemaCA, lckAC, nACgain);\\n        if (qTPtoMint < params_.qTPmin) revert QtpBelowMinimumRequired(params_.qTPmin, qTPtoMint);\\n\\n        (qACSurcharges, qFeeTokenTotalNeeded, feeCalcs) = _calcFees(\\n            params_.sender,\\n            params_.vendor,\\n            qACtotalToRedeem,\\n            swapTCforTPFee\\n        );\\n        if (qACSurcharges > params_.qACmax) revert InsufficientQacSent(params_.qACmax, feeCalcs.qACFee);\\n        // update flux capacitor and reverts if not allowed by accumulators\\n        _updateAccumulatorsOnMintTP(qACtotalToRedeem);\\n        _withdrawAndBurnTC(params_.qTC, 0);\\n        _depositAndMintTP(i, qTPtoMint, 0, params_.recipient);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qTCtoMint amount of Collateral Token to mint [N]\\n     * @return qACNeededtoMint total amount of Collateral Asset needed to mint [N]\\n     * @return qACtoMintTP amount of Collateral Asset used to mint Pegged Token [N]\\n     */\\n    function _calcQACforMintTCandTP(\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaTP_,\\n        uint256 pTCac_\\n    ) internal pure returns (uint256 qTCtoMint, uint256 qACNeededtoMint, uint256 qACtoMintTP) {\\n        // calculate how many TC are needed to mint TP and total qAC used for mint both\\n        // [N] = [N] * ([PREC] - [PREC]) / [PREC]\\n        qACNeededtoMint = (qTP_ * (ctargemaTP_ - ONE)) / pACtp_;\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qTCtoMint = _divPrec(qACNeededtoMint, pTCac_);\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qACtoMintTP = _divPrec(qTP_, pACtp_);\\n        // [N] = [N] + [N]\\n        qACNeededtoMint = qACNeededtoMint + qACtoMintTP;\\n        return (qTCtoMint, qACNeededtoMint, qACtoMintTP);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qACtotalToRedeem total amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACtoRedeemTP amount of Collateral Asset used to redeem Pegged Token [N]\\n     */\\n    function _calcQACforRedeemTCandTP(\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 pTCac_\\n    ) internal pure returns (uint256 qACtotalToRedeem, uint256 qACtoRedeemTP) {\\n        // calculate how many total qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtoRedeemTP = _divPrec(qTP_, pACtp_);\\n        // if is 0 reverts because it is trying to redeem an amount of TP below precision\\n        // we check it here to prevent qTP == 0 && qTC != 0\\n        // slither-disable-next-line incorrect-equality\\n        if (qACtoRedeemTP == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qAC are redeemed because TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtotalToRedeem = qACtoRedeemTP + _mulPrec(qTC_, pTCac_);\\n        return (qACtotalToRedeem, qACtoRedeemTP);\\n    }\\n}\\n\",\"keccak256\":\"0xebc7d5319e8279898aa4baf9c71919658f36716863aaac5669214b1d57d9fff9\",\"license\":\"UNLICENSED\"},\"contracts/core/MocEma.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { MocBaseBucket } from \\\"./MocBaseBucket.sol\\\";\\n\\n/**\\n * @title MocEma: Exponential Moving Average\\n * @notice Moc Ema, provides a set of methods that allows to calculate and track\\n * Exponential Moving Average for each of the pegged Tokens.\\n * @dev More information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n */\\nabstract contract MocEma is MocBaseBucket {\\n    // ------- Events -------\\n    event TPemaUpdated(uint256 indexed i_, uint256 oldTPema_, uint256 newTPema_);\\n\\n    // ------- Structs -------\\n    struct EmaItem {\\n        // exponential moving average\\n        uint256 ema;\\n        // smoothing factor\\n        uint256 sf;\\n    }\\n\\n    // ------- Storage -------\\n    // TP EMA items, indexes are in sync with PeggedTokens across Moc solution\\n    EmaItem[] public tpEma;\\n    // next Ema Calculation Block number\\n    uint256 public nextEmaCalculation;\\n    // amount of blocks to wait for next ema calculation\\n    uint256 public emaCalculationBlockSpan;\\n\\n    /**\\n     * @notice calculates exponential moving average of the value of a Pegged Token\\n     * @dev more information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n     * @param currentTPema_ current Ema value\\n     * @param pACtp_ current tp AC price\\n     */\\n    function __calcNewEma(EmaItem memory currentTPema_, uint256 pACtp_) private pure returns (uint256) {\\n        // [PREC\\u00b2] = [PREC] * ([PREC] - [PREC])\\n        uint256 term1 = currentTPema_.ema * (ONE - currentTPema_.sf);\\n        // [PREC\\u00b2] = [PREC] * [PREC]\\n        uint256 term2 = currentTPema_.sf * pACtp_;\\n        // [PREC] = ([PREC\\u00b2] + [PREC\\u00b2]) / [PREC]\\n        return (term1 + term2) / PRECISION;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function __MocEma_init_unchained(uint256 emaCalculationBlockSpan_) internal onlyInitializing {\\n        if (emaCalculationBlockSpan_ == 0) revert InvalidValue();\\n        emaCalculationBlockSpan = emaCalculationBlockSpan_;\\n        _updateNextEmaCalculation(emaCalculationBlockSpan_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice updates next EMA block calculation\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function _updateNextEmaCalculation(uint256 emaCalculationBlockSpan_) internal {\\n        unchecked {\\n            nextEmaCalculation = block.number + emaCalculationBlockSpan_;\\n        }\\n    }\\n\\n    /**\\n     * @notice get target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return ctargemaTP [PREC]\\n     */\\n    function _getCtargemaTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 ctargemaTP) {\\n        uint256 auxTPctarg = tpCtarg[i_];\\n        uint256 auxTpEma = tpEma[i_].ema;\\n        if (shouldCalculateEma()) auxTpEma = __calcNewEma(tpEma[i_], pACtp_);\\n        if (auxTpEma >= pACtp_) return auxTPctarg;\\n        // [PREC] = [PREC] * [PREC] / [PREC]\\n        return (auxTPctarg * pACtp_) / auxTpEma;\\n    }\\n\\n    /**\\n     * @notice update exponential moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     */\\n    function updateTPema(uint256 i_) internal {\\n        EmaItem memory currentTPema = tpEma[i_];\\n        uint256 pACtp = _getPACtp(i_);\\n        uint256 newEma = __calcNewEma(currentTPema, pACtp);\\n        // save new ema value to storage\\n        tpEma[i_].ema = newEma;\\n        emit TPemaUpdated(i_, currentTPema.ema, newEma);\\n    }\\n\\n    /**\\n     * @notice calculates CA target coverage, adjusted by all Pegged Token's to\\n     *  Collateral Asset last stored moving average price\\n     * @dev WARN: if EMA are not up to date, the resulting coverage might not reflect real spot value\\n     *      qAC = (nTP + tpGain) / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _calcCtargemaCA() internal view returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        uint256 num;\\n        uint256 den;\\n        uint256 pegAmount = pegContainer.length;\\n        pACtps = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = _getPACtp(i);\\n            pACtps[i] = pACtp;\\n            (uint256 tpGain, ) = _getPnLTP(i, pACtp);\\n            // [PREC] = [N] * [PREC] * [PREC]  / [PREC]\\n            uint256 qAC = _divPrec((pegContainer[i].nTP + tpGain) * PRECISION, pACtp);\\n            // [PREC]^2 = [PREC] * [PREC]\\n            num += _getCtargemaTP(i, pACtp) * qAC;\\n            // [PREC] = [PREC]\\n            den += qAC;\\n        }\\n        // we must return a default value when all nTP are 0\\n        // slither-disable-next-line incorrect-equality\\n        if (den == 0) {\\n            unchecked {\\n                return (protThrld * 2, pACtps);\\n            }\\n        }\\n        // [PREC] = ([PREC]^2) / [PREC]\\n        ctargemaCA = num / den;\\n    }\\n\\n    /**\\n     * @notice make sure Ema is up to date, and calculates target coverage adjusted by all Pegged Token's\\n     * to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     * @return pACtps array of all AC prices for each TP, with [PREC]\\n     */\\n    function _updateEmasAndCalcCtargemaCA() internal returns (uint256 ctargemaCA, uint256[] memory pACtps) {\\n        // Make sure EMAs are up to date for all the pegs, in the, unlikely, scenario they hadn't been updated already\\n        updateEmas();\\n        return _calcCtargemaCA();\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     */\\n    function calcCtargemaCA() external view returns (uint256 ctargemaCA) {\\n        (ctargemaCA, ) = _calcCtargemaCA();\\n    }\\n\\n    /**\\n     * @notice true if the necessary span has pass since last ema update\\n     */\\n    function shouldCalculateEma() public view returns (bool) {\\n        unchecked {\\n            return block.number >= nextEmaCalculation;\\n        }\\n    }\\n\\n    /**\\n     * @notice If time, calculates the EMA for all the Pegged Token prices.\\n     * @dev All price provider prices must be available, fails if not\\n     */\\n    function updateEmas() public {\\n        if (shouldCalculateEma()) {\\n            uint256 pegAmount = pegContainer.length;\\n            for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n                updateTPema(i);\\n            }\\n            _updateNextEmaCalculation(emaCalculationBlockSpan);\\n        }\\n    }\\n\\n    /**\\n     * @param blockSpan_ Defines how many blocks should pass between EMA calculations\\n     * @dev nextEmaCalculation is not automatically updated, you have to wait until next\\n     *  EMA calculation to be made : nextEmaCalculation = block.number + emaCalculationBlockSpan\\n     **/\\n    function setEmaCalculationBlockSpan(uint256 blockSpan_) external onlyAuthorizedChanger {\\n        emaCalculationBlockSpan = blockSpan_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7ca1141851bba2ee28342ae1aff2e90e8e482f936c20361b7325e0a7a31f15f6\",\"license\":\"UNLICENSED\"},\"contracts/core/MocOperations.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocCore } from \\\"./MocCore.sol\\\";\\nimport { MocQueue } from \\\"../queue/MocQueue.sol\\\";\\nimport { MocQueueExecFees } from \\\"../queue/MocQueueExecFees.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title MocOperations\\n * @notice All the Moc Protocol operations are grouped in this contract\\n */\\nabstract contract MocOperations is MocCore {\\n    // ------- Custom Errors -------\\n    error OnlyQueue();\\n\\n    // ------- Modifiers -------\\n    modifier onlyMocQueue() {\\n        if (msg.sender != mocQueue) revert OnlyQueue();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the amount of coinbase sent to be used as execution fee\\n     * @dev this function must be overridden by the AC implementation\\n     * @param qACTotal_ provided Collateral Asset amount\\n     * @param operType_ Operation Type\\n     * @return qACmax maximum amount of Collateral Asset that can be spent on the Operation\\n     * @return execFee amount of coinbase to be payed as execution Fee\\n     */\\n    /* solhint-disable no-empty-blocks */\\n    function _getExecFeeSent(\\n        uint256 qACTotal_,\\n        MocQueueExecFees.OperType operType_\\n    ) internal virtual returns (uint256 qACmax, uint256 execFee) {}\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n     * @notice while registering a pending Operation, we need to lock user's funds until it's executed\\n     * @param qACToLock_ AC amount to be locked\\n     */\\n    function _lockACInPending(uint256 qACToLock_) internal virtual {\\n        qACLockedInPending += qACToLock_;\\n    }\\n\\n    /**\\n     * @notice while registering a pending Operation, we need to lock user's tokens until it's executed\\n     * @param qTCToLock_ TC amount to be locked\\n     */\\n    function _lockTCInPending(uint256 qTCToLock_) internal {\\n        SafeERC20Upgradeable.safeTransferFrom(tcToken, msg.sender, address(this), qTCToLock_);\\n    }\\n\\n    /**\\n     * @notice while registering a pending Operation, we need to lock user's tokens until it's executed\\n     * @param qTPToLock_ TP amount to be locked\\n     */\\n    function _lockTPInPending(IERC20Upgradeable tpToken, uint256 qTPToLock_) internal {\\n        SafeERC20Upgradeable.safeTransferFrom(tpToken, msg.sender, address(this), qTPToLock_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *   Requires prior sender approval of Collateral Asset to this contract\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _mintTCtoViaVendor(\\n        uint256 qTC_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.mintTC);\\n        MintTCParams memory params = MintTCParams({\\n            qTC: qTC_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueMintTC{ value: execFee }(params);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _redeemTCtoViaVendor(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        RedeemTCParams memory params = RedeemTCParams({\\n            qTC: qTC_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueRedeemTC{ value: msg.value }(params);\\n        _lockTCInPending(qTC_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *   Requires prior sender approval of Collateral Asset to this contract\\n     * @param tp_ Pegged Token address to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _mintTPtoViaVendor(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.mintTP);\\n        MintTPParams memory params = MintTPParams({\\n            tp: tp_,\\n            qTP: qTP_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueMintTP{ value: execFee }(params);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _redeemTPtoViaVendor(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        RedeemTPParams memory params = RedeemTPParams({\\n            tp: tp_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueRedeemTP{ value: msg.value }(params);\\n        _lockTPInPending(IERC20Upgradeable(tp_), qTP_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     *  Requires prior sender approval of Collateral Asset to this contract\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _mintTCandTPtoViaVendor(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.mintTCandTP);\\n        MintTCandTPParams memory params = MintTCandTPParams({\\n            tp: tp_,\\n            qTP: qTP_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueMintTCandTP{ value: execFee }(params);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    /**\\n     * @notice Caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset.\\n     *  `vendor_` receives a markup in Fee Token if possible or in Collateral Asset if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that their price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param tp_ Pegged Token address\\n     * @param qTC_ Maximum amount of Collateral Token to redeem\\n     * @param qTP_ Maximum amount of Pegged Token to redeem\\n     * @param qACmin_ Minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ Address who receives the Collateral Asset\\n     * @param vendor_ Address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _redeemTCandTPtoViaVendor(\\n        address tp_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        RedeemTCandTPParams memory params = RedeemTCandTPParams({\\n            tp: tp_,\\n            qTC: qTC_,\\n            qTP: qTP_,\\n            qACmin: qACmin_,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueRedeemTCandTP{ value: msg.value }(params);\\n        _lockTCInPending(qTC_);\\n        _lockTPInPending(IERC20Upgradeable(tp_), qTP_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tpFrom_ owned Pegged Token address\\n     * @param tpTo_ target Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _swapTPforTPtoViaVendor(\\n        address tpFrom_,\\n        address tpTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.swapTPforTP);\\n        SwapTPforTPParams memory params = SwapTPforTPParams({\\n            tpFrom: tpFrom_,\\n            tpTo: tpTo_,\\n            qTP: qTP_,\\n            qTPmin: qTPmin_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueSwapTPforTP{ value: execFee }(params);\\n        _lockTPInPending(IERC20Upgradeable(tpFrom_), qTP_);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the Collateral Token\\n     * @param vendor_ address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _swapTPforTCtoViaVendor(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.swapTPforTC);\\n        SwapTPforTCParams memory params = SwapTPforTCParams({\\n            tp: tp_,\\n            qTP: qTP_,\\n            qTCmin: qTCmin_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueSwapTPforTC{ value: execFee }(params);\\n        _lockTPInPending(IERC20Upgradeable(tp_), qTP_);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    /**\\n     * @notice Caller sends a Collateral Token and recipient receives Pegged Token.\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not.\\n     * @param tp_ Pegged Token address\\n     * @param qTC_ Amount of owned Collateral Token to swap\\n     * @param qTPmin_ Minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ Maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ Address who receives the Pegged Token\\n     * @param vendor_ Address who receives a markup\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function _swapTCforTPtoViaVendor(\\n        address tp_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_,\\n        address vendor_\\n    ) internal notLiquidated notPaused returns (uint256 operId) {\\n        (uint256 qACmax, uint256 execFee) = _getExecFeeSent(qACmax_, MocQueueExecFees.OperType.swapTCforTP);\\n        SwapTCforTPParams memory params = SwapTCforTPParams({\\n            tp: tp_,\\n            qTC: qTC_,\\n            qTPmin: qTPmin_,\\n            qACmax: qACmax,\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            vendor: vendor_\\n        });\\n        operId = MocQueue(mocQueue).queueSwapTCforTP{ value: execFee }(params);\\n        _lockTCInPending(qTC_);\\n        _lockACInPending(qACmax);\\n    }\\n\\n    // ------- External functions -------\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function redeemTC(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _redeemTCtoViaVendor(qTC_, qACmin_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and recipient receives Collateral Asset\\n     *  `vendor_` receives a markup in Fee Token if possible or in qAC if not\\n     * @param tp_ Pegged Token address to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function redeemTP(\\n        address tp_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _redeemTPtoViaVendor(tp_, qTP_, qACmin_, recipient_, vendor_);\\n    }\\n\\n    /**\\n     * @notice Caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset.\\n     *  `vendor_` receives a markup in Fee Token if possible or in Collateral Asset if not\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that their price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param tp_ Pegged Token address\\n     * @param qTC_ Maximum amount of Collateral Token to redeem\\n     * @param qTP_ Maximum amount of Pegged Token to redeem\\n     * @param qACmin_ Minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ Address who receives the Collateral Asset\\n     * @param vendor_ address who receives a markup, `0x0` if not using a vendor\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function redeemTCandTP(\\n        address tp_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_,\\n        address vendor_\\n    ) external payable returns (uint256 operId) {\\n        return _redeemTCandTPtoViaVendor(tp_, qTC_, qTP_, qACmin_, recipient_, vendor_);\\n    }\\n\\n    // ------- External Only Queue Functions -------\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _mintTCto for details\\n     */\\n    function execMintTC(\\n        MintTCParams calldata params_\\n    ) external onlyMocQueue returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        return _mintTCto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _redeemTCto for details\\n     */\\n    function execRedeemTC(\\n        RedeemTCParams calldata params_\\n    ) external onlyMocQueue returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        return _redeemTCto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _mintTPto for details\\n     */\\n    function execMintTP(\\n        MintTPParams calldata params_\\n    ) external onlyMocQueue returns (uint256 qACtotalNeeded, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        return _mintTPto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _redeemTPto for details\\n     */\\n    function execRedeemTP(\\n        RedeemTPParams calldata params_\\n    ) external onlyMocQueue returns (uint256 qACtoRedeem, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs) {\\n        return _redeemTPto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _mintTCandTPto for details\\n     */\\n    function execMintTCandTP(\\n        MintTCandTPParams calldata params_\\n    )\\n        external\\n        onlyMocQueue\\n        returns (uint256 qACtotalNeeded, uint256 qTCMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        return _mintTCandTPto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _redeemTCandTPto for details\\n     */\\n    function execRedeemTCandTP(\\n        RedeemTCandTPParams calldata params_\\n    )\\n        external\\n        onlyMocQueue\\n        returns (uint256 qACtoRedeem, uint256 qTPRedeemed, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        (qACtoRedeem, qTPRedeemed, qFeeTokenTotalNeeded, feeCalcs) = _redeemTCandTPto(params_);\\n        // return the unused locked TPs\\n        unchecked {\\n            uint256 qTPDif = params_.qTP - qTPRedeemed;\\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(params_.tp), params_.sender, qTPDif);\\n        }\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _swapTCforTPto for details\\n     */\\n    function execSwapTCforTP(\\n        SwapTCforTPParams calldata params_\\n    )\\n        external\\n        onlyMocQueue\\n        returns (uint256 qACSurcharges, uint256 qTPMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        return _swapTCforTPto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _swapTPforTCto for details\\n     */\\n    function execSwapTPforTC(\\n        SwapTPforTCParams calldata params_\\n    )\\n        external\\n        onlyMocQueue\\n        returns (uint256 qACSurcharges, uint256 qTCMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        return _swapTPforTCto(params_);\\n    }\\n\\n    /**\\n     * @notice executes Operation based on params, only mocQueue allowed\\n     * see MocCore _swapTPforTPto for details\\n     */\\n    function execSwapTPforTP(\\n        SwapTPforTPParams calldata params_\\n    )\\n        external\\n        onlyMocQueue\\n        returns (uint256 qACSurcharges, uint256 qTPMinted, uint256 qFeeTokenTotalNeeded, FeeCalcs memory feeCalcs)\\n    {\\n        return _swapTPforTPto(params_);\\n    }\\n\\n    /**\\n     * @notice while executing a pending Operation, if it fails we need to unlock user's funds\\n     * @dev this function must be overridden by the AC implementation\\n     * @param owner_ funds owner, address to be returned to\\n     * @param qACToUnlock_ AC amount to be unlocked\\n     */\\n    function unlockACInPending(address owner_, uint256 qACToUnlock_) external virtual;\\n\\n    /**\\n     * @notice while executing a pending Operation, if it fails we need to unlock user's tokens\\n     * @param owner_ funds owner, address to be returned to\\n     * @param qTCToUnlock_ TC amount to be unlocked\\n     */\\n    function unlockTCInPending(address owner_, uint256 qTCToUnlock_) external onlyMocQueue {\\n        SafeERC20Upgradeable.safeTransfer(tcToken, owner_, qTCToUnlock_);\\n    }\\n\\n    /**\\n     * @notice while executing a pending Operation, if it fails we need to unlock user's tokens\\n     * @param owner_ funds owner, address to be returned to\\n     * @param tpToken_ TP to be unlocked\\n     * @param qTPToUnlock_ TP amount to be unlocked\\n     */\\n    function unlockTPInPending(address owner_, IERC20Upgradeable tpToken_, uint256 qTPToUnlock_) external onlyMocQueue {\\n        SafeERC20Upgradeable.safeTransfer(tpToken_, owner_, qTPToUnlock_);\\n    }\\n}\\n\",\"keccak256\":\"0x46bd9e704c2e12a3b8aa4b74c65ad048a6cfe4cc1b544a6644890f557d367052\",\"license\":\"UNLICENSED\"},\"contracts/governance/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IGovernor } from \\\"../interfaces/IGovernor.sol\\\";\\nimport { MocHelper } from \\\"../utils/MocHelper.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n  @title Governed\\n  @notice Base contract to be inherited by governed contracts\\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behavior\\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\\n  governance aspect of the child contract\\n  */\\nabstract contract Governed is Initializable, MocHelper {\\n    /**\\n    @notice The address of the contract which governs this one\\n   */\\n    IGovernor public governor;\\n\\n    error NotAuthorizedChanger();\\n\\n    /**\\n    @notice Modifier that protects the function\\n    @dev You should use this modifier in any function that should be called through\\n    the governance system\\n   */\\n    modifier onlyAuthorizedChanger() {\\n        checkIfAuthorizedChanger();\\n        _;\\n    }\\n\\n    /**\\n    @notice Initialize the contract with the basic settings\\n    @dev This initialize replaces the constructor but it is not called automatically.\\n    It is necessary because of the upgradeability of the contracts\\n    @param governorAddress_ Governor address\\n   */\\n    function __Governed_init(address governorAddress_) internal onlyInitializing {\\n        __Governed_init_unchained(governorAddress_);\\n    }\\n\\n    function __Governed_init_unchained(address governorAddress_) internal onlyInitializing {\\n        governor = IGovernor(governorAddress_);\\n    }\\n\\n    /**\\n    @notice Change the contract's governor. Should be called through the old governance system\\n    @param newGovernor_ New governor address\\n   */\\n    function changeGovernor(IGovernor newGovernor_) external onlyAuthorizedChanger {\\n        governor = newGovernor_;\\n    }\\n\\n    /**\\n    @notice Checks if the msg sender is an authorized changer, reverts otherwise\\n   */\\n    function checkIfAuthorizedChanger() internal view {\\n        if (!governor.isAuthorizedChanger(msg.sender)) revert NotAuthorizedChanger();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x4ca00d6d57ffff0ee43e4441d1bafa20c4e3f52e43e50b08cf68d7f65540e09a\",\"license\":\"UNLICENSED\"},\"contracts/governance/MocUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { Stoppable } from \\\"../governance/Stoppable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// Import to allow compilation and deploy of ERC1967Proxy\\nimport { ERC1967Proxy } from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nabstract contract MocUpgradable is UUPSUpgradeable, Stoppable {\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function __MocUpgradable_init(address governorAddress_, address pauserAddress_) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        __Governed_init(governorAddress_);\\n        __Stoppable_init_unchained(pauserAddress_, true);\\n    }\\n\\n    /**\\n     * @inheritdoc UUPSUpgradeable\\n     * @dev checks that the changer that will do the upgrade is currently authorized by governance to makes\\n     * changes within the system\\n     * @param newImplementation new implementation contract address(not used)\\n     */\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcfd79734ffdc0e9e294b7c27a56e65228a704d77b9b75881227765a314a29186\",\"license\":\"UNLICENSED\"},\"contracts/governance/Stoppable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { Governed } from \\\"./Governed.sol\\\";\\n\\n/**\\n * @title Stoppable\\n * @notice Allow a contract to be paused through the stopper subsystem. This contracts\\n * is able to disable the stoppability feature through governance.\\n * @dev This contract was heavily based on the _Pausable_ contract of openzeppelin-eth but\\n * it was modified in order to being able to turn on and off its stoppability\\n */\\ncontract Stoppable is Governed {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool public stoppable;\\n    bool private _paused;\\n    address public pauser;\\n\\n    // ------- Custom Errors -------\\n    error Unstoppable();\\n    error OnlyWhilePaused();\\n    error NotWhenPaused();\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is not paused\\n     */\\n    modifier notPaused() {\\n        _checkNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is paused\\n     */\\n    modifier onlyPaused() {\\n        if (!_paused) revert OnlyWhilePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the basic settings\\n     * @dev This initialize replaces the constructor but it is not called automatically.\\n     * It is necessary because of the upgradeability of the contracts. Either this function or the previous can be used\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     * @param stoppable_ Define if the contract starts being unstoppable or not\\n     */\\n    function __Stoppable_init_unchained(address pauserAddress_, bool stoppable_) internal onlyInitializing {\\n        stoppable = stoppable_;\\n        pauser = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev reverts with NotWhenPaused when _paused\\n     */\\n    function _checkNotPaused() internal view {\\n        if (_paused) revert NotWhenPaused();\\n    }\\n\\n    /**\\n     * @notice Returns true if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Called by the owner to pause, triggers stopped state\\n     * @dev Should only be called by the pauser and when it is stoppable\\n     */\\n    function pause() external notPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        if (!stoppable) revert Unstoppable();\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Called by the owner to unpause, returns to normal state\\n     * @dev Should only be called by the pauser and when it is stoppable\\n     */\\n    function unpause() external onlyPaused {\\n        if (msg.sender != pauser && !governor.isAuthorizedChanger(msg.sender)) revert OnlyPauser();\\n        if (!stoppable) revert Unstoppable();\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Switches OFF the stoppability of the contract. It cannot be paused or unpaused\\n     * Doesn't change the pause state, if the contract was already paused it cannot be operated\\n     * @dev Should be called through governance\\n     */\\n    function makeUnstoppable() external onlyAuthorizedChanger {\\n        stoppable = false;\\n    }\\n\\n    /**\\n     * @notice Switches ON the stoppability of the contract. It can be paused or unpaused\\n     *  Doesn't change the pause state, if the contract was already paused it cannot be operated\\n     * @dev Should be called through governance\\n     */\\n    function makeStoppable() external onlyAuthorizedChanger {\\n        stoppable = true;\\n    }\\n\\n    /**\\n     * @notice Changes the address which is enable to pause this contract\\n     * @param newPauser_ Address of the new pauser\\n     * @dev Should be called through governance\\n     */\\n    function setPauser(address newPauser_) external onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        pauser = newPauser_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xedf6f4b1d5fb70aece7b1809aabae4b5ab9c20991abe8c861cd0ea5953eaa479\",\"license\":\"UNLICENSED\"},\"contracts/governance/changerTemplates/UpgraderUUPSChangerTemplate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangeContract } from \\\"../../interfaces/IChangeContract.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n  @title UpgraderUUPSChangerTemplate\\n  @notice This contract is a ChangeContract intended to be used when\\n  upgrading a MOC UUPS contract, through the Moc upgradeability\\n  system. This doesn't initialize the upgraded contract, that should be done extending\\n  this one or taking it as a guide\\n */\\nabstract contract UpgraderUUPSChangerTemplate is IChangeContract {\\n    UUPSUpgradeable public immutable proxy;\\n    address public immutable newImplementation;\\n\\n    /** \\n    @notice Constructor\\n    @param proxy_ Address of the proxy to be upgraded\\n    @param newImplementation_ Address of the contract the proxy will delegate to\\n  */\\n    constructor(UUPSUpgradeable proxy_, address newImplementation_) {\\n        proxy = proxy_;\\n        newImplementation = newImplementation_;\\n    }\\n\\n    /**\\n    @notice Execute the changes.\\n    @dev Should be called by the governor, but this contract does not check that explicitly\\n    because it is not its responsibility in the current architecture\\n    IMPORTANT: This function should not be overridden, you should only redefine\\n    _beforeUpgrade and _afterUpgrade methods to use this template\\n   */\\n    function execute() external {\\n        _beforeUpgrade();\\n        _upgrade();\\n        _afterUpgrade();\\n    }\\n\\n    /**\\n    @notice Upgrade the proxy to the newImplementation\\n    @dev IMPORTANT: This function should not be overridden\\n   */\\n    function _upgrade() internal {\\n        proxy.upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n    @notice Intended to prepare the system for the upgrade\\n    @dev This function can be overridden by child changers to upgrade contracts that\\n    require some preparation before the upgrade\\n   */\\n    function _beforeUpgrade() internal virtual;\\n\\n    /**\\n    @notice Intended to do the final tweaks after the upgrade, for example initialize the contract\\n    @dev This function can be overridden by child changers to upgrade contracts that\\n    require some changes after the upgrade\\n   */\\n    function _afterUpgrade() internal virtual;\\n}\\n\",\"keccak256\":\"0xc027757ed029d16b721b4e9fc468c0353ed31743854a88efbfe2e2596ca09307\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0x22e20ac9596a6a4c4545b0c5cf307c2924987d6033ef75357850b0de4d1f0901\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IDataProvider\\n * @notice Amphiraos-Oracle Interface for peeking the data from an oracle\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IDataProvider {\\n    /**\\n     * @notice returns the given `data` if `valid`\\n     * @param data peeked\\n     * @param valid true if the data is valid\\n     */\\n    function peek() external view returns (bytes32 data, bool valid);\\n}\\n\",\"keccak256\":\"0xa24e4a8fe86fd41e5da606a361b504a20d97b579c5d620221442dd080e2ba39b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IChangeContract } from \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0f8cd9de3ed9348e6a58cf4d971586f60f5542a20ecd3748194e4ba288f419c1\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IMocRC20\\n * @notice Base Moc ERC20 Token Interface: burn, mint. It can be both Pegs and Collateral Tokens.\\n */\\ninterface IMocRC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x59d458617a8daf761e2f0ff84a367b32b4eacabfb8340e244f52bc168cb8a16a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n/**\\n * @title IPriceFeed\\n * @notice Amphiraos-Oracle Interface for peeking the price of a given asset\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IPriceProvider {\\n    /**\\n     * @notice returns the given `price` for the asset if `valid`\\n     * @param price assetPrice\\n     * @param valid true if the price is valid\\n     */\\n    function peek() external view returns (bytes32 price, bool valid);\\n}\\n\",\"keccak256\":\"0xf91d285e24227b0c2f0c187d610d63e33a4fc9c1e193e0ced8df131eac440b23\",\"license\":\"UNLICENSED\"},\"contracts/mocks/MocQueueMock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocQueue, MocCore } from \\\"../queue/MocQueue.sol\\\";\\nimport { UpgradableMock } from \\\"./upgradeability/MocUpgradeMocks.sol\\\";\\n\\n/**\\n * @title MocQueueMock: Allows Deferral execution without error handling\\n * @dev Intended to allow Deferral testing using behaviors, including error tests\\n */\\ncontract MocQueueMock is MocQueue, UpgradableMock {\\n    function _executeMintTC(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.MintTCParams memory params = operationsMintTC[operId_];\\n        delete operationsMintTC[operId_];\\n        (uint256 _qACtotalNeeded, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execMintTC(params);\\n        _onDeferredTCMinted(operId_, params, _qACtotalNeeded, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeRedeemTC(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.RedeemTCParams memory params = operationsRedeemTC[operId_];\\n        delete operationsRedeemTC[operId_];\\n        (uint256 _qACRedeemed, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execRedeemTC(params);\\n        _onDeferredTCRedeemed(operId_, params, _qACRedeemed, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeMintTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.MintTPParams memory params = operationsMintTP[operId_];\\n        delete operationsMintTP[operId_];\\n        (uint256 _qACtotalNeeded, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execMintTP(params);\\n        _onDeferredTPMinted(operId_, params, _qACtotalNeeded, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeRedeemTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.RedeemTPParams memory params = operationsRedeemTP[operId_];\\n        delete operationsRedeemTP[operId_];\\n        (uint256 _qACRedeemed, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execRedeemTP(params);\\n        _onDeferredTPRedeemed(operId_, params, _qACRedeemed, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeMintTCandTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.MintTCandTPParams memory params = operationsMintTCandTP[operId_];\\n        delete operationsMintTCandTP[operId_];\\n        (uint256 _qACtotalNeeded, uint256 _qTPMinted, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations\\n            .execMintTCandTP(params);\\n        _onDeferredTCandTPMinted(operId_, params, _qTPMinted, _qACtotalNeeded, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeRedeemTCandTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.RedeemTCandTPParams memory params = operationsRedeemTCandTP[operId_];\\n        delete operationsRedeemTCandTP[operId_];\\n        (uint256 _qACRedeemed, uint256 _qTPRedeemed, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations\\n            .execRedeemTCandTP(params);\\n        _onDeferredTCandTPRedeemed(operId_, params, _qTPRedeemed, _qACRedeemed, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeSwapTCforTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.SwapTCforTPParams memory params = operationsSwapTCforTP[operId_];\\n        delete operationsSwapTCforTP[operId_];\\n        (, uint256 qTPMinted, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execSwapTCforTP(params);\\n        _onDeferredTCforTPSwapped(operId_, params, qTPMinted, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeSwapTPforTC(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.SwapTPforTCParams memory params = operationsSwapTPforTC[operId_];\\n        delete operationsSwapTPforTC[operId_];\\n        (, uint256 qTCMinted, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execSwapTPforTC(params);\\n        _onDeferredTPforTCSwapped(operId_, params, qTCMinted, _feeCalcs);\\n        return true;\\n    }\\n\\n    function _executeSwapTPforTP(uint256 operId_) internal override returns (bool executed) {\\n        MocCore.SwapTPforTPParams memory params = operationsSwapTPforTP[operId_];\\n        delete operationsSwapTPforTP[operId_];\\n        (, uint256 qTPMinted, , MocCore.FeeCalcs memory _feeCalcs) = mocOperations.execSwapTPforTP(params);\\n        _onDeferredTPforTPSwapped(operId_, params, qTPMinted, _feeCalcs);\\n        return true;\\n    }\\n\\n    function getCustomMockValue() external view override returns (uint256) {\\n        return newVariable + execFee[OperType.mintTC];\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0254e8fd1000ff96a1a12593c3754965131f1fb8d73909da83a52231105ec\",\"license\":\"UNLICENSED\"},\"contracts/mocks/upgradeability/MocUpgradeMocks.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\n// This contract is not intended to be used in a production system\\n// It was designed to be used in a testing environment only\\n\\n/* solhint-disable-next-line max-line-length */\\nimport { UUPSUpgradeable, UpgraderUUPSChangerTemplate } from \\\"../../governance/changerTemplates/UpgraderUUPSChangerTemplate.sol\\\";\\nimport { MocCACoinbase } from \\\"../../collateral/coinbase/MocCACoinbase.sol\\\";\\nimport { MocCARC20 } from \\\"../../collateral/rc20/MocCARC20.sol\\\";\\n\\n/**\\n * @title UpgradableMock\\n * @dev Only for upgradeability testing purposes. Generic contract for initialize a mock and get a custom method.\\n */\\nabstract contract UpgradableMock {\\n    uint256 public newVariable;\\n\\n    function initializeMock() external {\\n        newVariable = 42;\\n    }\\n\\n    function getCustomMockValue() external view virtual returns (uint256);\\n}\\n\\n/**\\n * @title MocCoinbaseMock\\n * @dev Only for upgradeability testing purposes. Extends MocCACoinbase adding a new variable.\\n */\\ncontract MocCoinbaseMock is MocCACoinbase, UpgradableMock {\\n    function getCustomMockValue() external view override returns (uint256) {\\n        return newVariable + (protThrld / PRECISION);\\n    }\\n}\\n\\n/**\\n * @title MocCARC20Mock\\n * @dev Only for upgradeability testing purposes. Extends MocCARC20Mock adding a new variable.\\n */\\ncontract MocCARC20Mock is MocCARC20, UpgradableMock {\\n    function getCustomMockValue() external view override returns (uint256) {\\n        return newVariable + (protThrld / PRECISION);\\n    }\\n}\\n\\n/**\\n * @title MocUpgradeChangerMock\\n * @dev Only for upgradeability testing purposes. Extends UpgraderUUPSTemplate so that it\\n * can upgrade, via UUPS, the original Moc compatible implementation\\n */\\n// solhint-disable no-empty-blocks\\ncontract MocUpgradeChangerMock is UpgraderUUPSChangerTemplate {\\n    constructor(\\n        UUPSUpgradeable _proxy,\\n        UpgradableMock _newImplementation\\n    ) UpgraderUUPSChangerTemplate(_proxy, address(_newImplementation)) {}\\n\\n    function _beforeUpgrade() internal override {}\\n\\n    function _afterUpgrade() internal override {\\n        UpgradableMock upgradedProxy = UpgradableMock(address(proxy));\\n        upgradedProxy.initializeMock();\\n    }\\n}\\n\",\"keccak256\":\"0xbc657057aa3e4113551103b00fc6b512a8d6eb146a75ce0d2532b227a2e47dad\",\"license\":\"UNLICENSED\"},\"contracts/queue/MocQueue.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocQueueExecFees } from \\\"./MocQueueExecFees.sol\\\";\\nimport { MocCore } from \\\"../core/MocCore.sol\\\";\\nimport { MocCommons } from \\\"../core/MocCommons.sol\\\";\\nimport { MocBaseBucket } from \\\"../core/MocBaseBucket.sol\\\";\\nimport { MocOperations } from \\\"../core/MocOperations.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nbytes32 constant ENQUEUER_ROLE = keccak256(\\\"ENQUEUER_ROLE\\\");\\n\\n/**\\n * @title MocQueue: Allows queue Operation deferral execution processing\\n */\\ncontract MocQueue is MocQueueExecFees, ReentrancyGuardUpgradeable {\\n    // ------- Custom Errors -------\\n\\n    // Wrong amount of coinbase set as execution fee\\n    error BucketAlreadyRegistered();\\n\\n    // ------- Events -------\\n    event OperationError(uint256 operId_, bytes4 errorCode_, string msg_);\\n    event UnhandledError(uint256 operId_, bytes reason_);\\n\\n    event OperationQueued(address indexed bucket_, uint256 operId_, OperType operType_);\\n    event OperationExecuted(address indexed executor, uint256 indexed operId_);\\n\\n    event TCMinted(\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TCRedeemed(\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TPMinted(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TPRedeemed(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TCandTPRedeemed(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TCandTPMinted(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TPSwappedForTP(\\n        address indexed tpFrom_,\\n        address tpTo_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTPfrom_,\\n        uint256 qTPto_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TPSwappedForTC(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qTC_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n    event TCSwappedForTP(\\n        address indexed tp_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACfee_,\\n        uint256 qFeeToken_,\\n        uint256 qACVendorMarkup_,\\n        uint256 qFeeTokenVendorMarkup_,\\n        address vendor_,\\n        uint256 operId_\\n    );\\n\\n    // ------- Structs -------\\n    struct OperInfo {\\n        // Operation Type\\n        OperType operType;\\n        // block number on which the Operation was queued\\n        uint248 queuedBlk;\\n    }\\n\\n    // ------- Storage -------\\n\\n    // mocOperations bucket that would be able to queue\\n    MocOperations public mocOperations;\\n    // Amount of Operations created\\n    uint256 public operIdCount;\\n    // first operation to be executed\\n    uint256 public firstOperId;\\n\\n    mapping(uint256 => MocCore.MintTCParams) public operationsMintTC;\\n    mapping(uint256 => MocCore.MintTPParams) public operationsMintTP;\\n    mapping(uint256 => MocCore.RedeemTCParams) public operationsRedeemTC;\\n    mapping(uint256 => MocCore.RedeemTPParams) public operationsRedeemTP;\\n    mapping(uint256 => MocCore.MintTCandTPParams) public operationsMintTCandTP;\\n    mapping(uint256 => MocCore.RedeemTCandTPParams) public operationsRedeemTCandTP;\\n    mapping(uint256 => MocCore.SwapTCforTPParams) public operationsSwapTCforTP;\\n    mapping(uint256 => MocCore.SwapTPforTCParams) public operationsSwapTPforTC;\\n    mapping(uint256 => MocCore.SwapTPforTPParams) public operationsSwapTPforTP;\\n\\n    // OperId => Operation Type | block.number\\n    mapping(uint256 => OperInfo) public opersInfo;\\n\\n    // min amount of blocks the Operation should wait in the Queue before execution\\n    uint128 public minOperWaitingBlk;\\n\\n    // max amount of Operations that can be executed on a single batch,\\n    // gas restricted batch size to guarantee no gas limit failure\\n    uint128 public maxOperPerBatch;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n\\n    function initialize(\\n        address governor_,\\n        address pauser_,\\n        uint128 minOperWaitingBlk_,\\n        uint128 maxOperPerBatch_,\\n        InitializeMocQueueExecFeesParams calldata mocQueueExecFeesParams_\\n    ) external initializer {\\n        __AccessControl_init();\\n        __MocUpgradable_init(governor_, pauser_);\\n        __MocQueueExecFees_init(mocQueueExecFeesParams_);\\n        __ReentrancyGuard_init();\\n        minOperWaitingBlk = minOperWaitingBlk_;\\n        maxOperPerBatch = maxOperPerBatch_;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice hook after mintedTC Operation execution, emits the TCMinted event\\n     * @param operId_ Identifier to track the Operation lifecycle\\n     * @param params_ TCMint params\\n     * @param qACtotalNeeded_ amount of AC used to mint qTC\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTCMinted(\\n        uint256 operId_,\\n        MocCore.MintTCParams memory params_,\\n        uint256 qACtotalNeeded_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TCMinted(\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qACtotalNeeded_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice hook after redeemTC Operation execution, emits the TCRedeemed event\\n     * @param operId_ Identifier to track the Operation lifecycle\\n     * @param params_ mintTCto function params\\n     * @param qACRedeemed_ amount of AC redeemed\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTCRedeemed(\\n        uint256 operId_,\\n        MocCore.RedeemTCParams memory params_,\\n        uint256 qACRedeemed_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TCRedeemed(\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qACRedeemed_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice hook after mintTP Operation is executed, emits the TPMinted event\\n     * @param operId_ Identifier to track the Operation lifecycle\\n     * @param params_ mintTP functions params\\n     * @param qACtotalNeeded_ amount of AC needed to mint qTP\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTPMinted(\\n        uint256 operId_,\\n        MocCore.MintTPParams memory params_,\\n        uint256 qACtotalNeeded_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TPMinted(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qACtotalNeeded_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TP is redeemed, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ redeemTPto function params\\n     * @param qACRedeemed_ amount of AC redeemed\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTPRedeemed(\\n        uint256 operId_,\\n        MocCore.RedeemTPParams memory params_,\\n        uint256 qACRedeemed_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TPRedeemed(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qACRedeemed_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TC and TP are minted, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ mintTCandTPto function params\\n     * @param qTCMinted_ amount of qTC minted for the given qTP\\n     * @param qACtotalNeeded_ total amount of AC needed to mint qTC and qTP\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTCandTPMinted(\\n        uint256 operId_,\\n        MocCore.MintTCandTPParams memory params_,\\n        uint256 qTCMinted_,\\n        uint256 qACtotalNeeded_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TCandTPMinted(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            qTCMinted_,\\n            params_.qTP,\\n            qACtotalNeeded_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TC and TP are redeemed, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ redeemTCandTPto function params\\n     * @param qTPRedeemed_ total amount of TP redeemed\\n     * @param qACRedeemed_ total amount of AC redeemed\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTCandTPRedeemed(\\n        uint256 operId_,\\n        MocCore.RedeemTCandTPParams memory params_,\\n        uint256 qTPRedeemed_,\\n        uint256 qACRedeemed_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TCandTPRedeemed(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qTPRedeemed_,\\n            qACRedeemed_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TC is swapped for TP, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ swapTCforTP function params\\n     * @param qTPMinted_ total amount of TP swapped\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTCforTPSwapped(\\n        uint256 operId_,\\n        MocCore.SwapTCforTPParams memory params_,\\n        uint256 qTPMinted_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TCSwappedForTP(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTC,\\n            qTPMinted_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TP is swapped for TC, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ swapTPforTC function params\\n     * @param qTCMinted_ total amount of TC minted\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTPforTCSwapped(\\n        uint256 operId_,\\n        MocCore.SwapTPforTCParams memory params_,\\n        uint256 qTCMinted_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TPSwappedForTC(\\n            params_.tp,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qTCMinted_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Hook after the TP is swapped for another TP, with operation information result\\n     * @param operId_ operation id\\n     * @param params_ swapTPforTP function params\\n     * @param qTPMinted_ total amount of TP `iTo` minted\\n     * @param feeCalcs_ platform fee detail breakdown\\n     */\\n    function _onDeferredTPforTPSwapped(\\n        uint256 operId_,\\n        MocCore.SwapTPforTPParams memory params_,\\n        uint256 qTPMinted_,\\n        MocCore.FeeCalcs memory feeCalcs_\\n    ) internal {\\n        emit TPSwappedForTP(\\n            params_.tpFrom,\\n            params_.tpTo,\\n            params_.sender,\\n            params_.recipient,\\n            params_.qTP,\\n            qTPMinted_,\\n            feeCalcs_.qACFee,\\n            feeCalcs_.qFeeToken,\\n            feeCalcs_.qACVendorMarkup,\\n            feeCalcs_.qFeeTokenVendorMarkup,\\n            params_.vendor,\\n            operId_\\n        );\\n    }\\n\\n    /**\\n     * @notice Executes mint TC handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TCMinted, OperationError, UnhandledError} events\\n     */\\n    function _executeMintTC(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.MintTCParams memory params = operationsMintTC[operId_];\\n        try mocOperations.execMintTC(params) returns (\\n            uint256 _qACtotalNeeded,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTCMinted(operId_, params, _qACtotalNeeded, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsMintTC[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes redeem TC handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TCRedeemed, OperationError, UnhandledError} events\\n     */\\n    function _executeRedeemTC(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.RedeemTCParams memory params = operationsRedeemTC[operId_];\\n        try mocOperations.execRedeemTC(params) returns (\\n            uint256 _qACRedeemed,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTCRedeemed(operId_, params, _qACRedeemed, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.InsufficientTCtoRedeem.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient tc to redeem\\\");\\n            } else if (errorSelector == MocCommons.QacBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qAC below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTCInPending(params.sender, params.qTC);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsRedeemTC[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes mint TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TPMinted, OperationError, UnhandledError} events\\n     */\\n    function _executeMintTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.MintTPParams memory params = operationsMintTP[operId_];\\n        try mocOperations.execMintTP(params) returns (\\n            uint256 _qACtotalNeeded,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTPMinted(operId_, params, _qACtotalNeeded, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.InsufficientTPtoMint.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient tp to mint\\\");\\n            } else if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsMintTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes redeem TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TPRedeemed, OperationError, UnhandledError} events\\n     */\\n    function _executeRedeemTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.RedeemTPParams memory params = operationsRedeemTP[operId_];\\n        try mocOperations.execRedeemTP(params) returns (\\n            uint256 _qACRedeemed,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTPRedeemed(operId_, params, _qACRedeemed, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.QacBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qAC below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTPInPending(params.sender, IERC20Upgradeable(params.tp), params.qTP);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsRedeemTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes mint TC and TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TCandTPMinted, OperationError, UnhandledError} events\\n     */\\n    function _executeMintTCandTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.MintTCandTPParams memory params = operationsMintTCandTP[operId_];\\n        try mocOperations.execMintTCandTP(params) returns (\\n            uint256 _qACtotalNeeded,\\n            uint256 _qTcMinted,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTCandTPMinted(operId_, params, _qTcMinted, _qACtotalNeeded, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsMintTCandTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes redeem TC and TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TCandTPRedeemed, OperationError, UnhandledError} events\\n     */\\n    function _executeRedeemTCandTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.RedeemTCandTPParams memory params = operationsRedeemTCandTP[operId_];\\n        try mocOperations.execRedeemTCandTP(params) returns (\\n            uint256 _qACRedeemed,\\n            uint256 _qTPRedeemed,\\n            uint256,\\n            MocCore.FeeCalcs memory _feeCalcs\\n        ) {\\n            _onDeferredTCandTPRedeemed(operId_, params, _qTPRedeemed, _qACRedeemed, _feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.InsufficientQtpSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient tp sent\\\");\\n            } else if (errorSelector == MocCommons.QacBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qAC below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTPInPending(params.sender, IERC20Upgradeable(params.tp), params.qTP);\\n            mocOperations.unlockTCInPending(params.sender, params.qTC);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsRedeemTCandTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes swap TC for TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TCforTPSwapped, OperationError, UnhandledError} events\\n     */\\n    function _executeSwapTCforTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.SwapTCforTPParams memory params = operationsSwapTCforTP[operId_];\\n        try mocOperations.execSwapTCforTP(params) returns (\\n            uint256,\\n            uint256 qTPMinted,\\n            uint256,\\n            MocCore.FeeCalcs memory feeCalcs\\n        ) {\\n            _onDeferredTCforTPSwapped(operId_, params, qTPMinted, feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocCommons.QtpBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qTp below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTCInPending(params.sender, params.qTC);\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsSwapTCforTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes swap TP for TC handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TPforTCSwapped, OperationError, UnhandledError} events\\n     */\\n    function _executeSwapTPforTC(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.SwapTPforTCParams memory params = operationsSwapTPforTC[operId_];\\n        try mocOperations.execSwapTPforTC(params) returns (\\n            uint256,\\n            uint256 qTCMinted,\\n            uint256,\\n            MocCore.FeeCalcs memory feeCalcs\\n        ) {\\n            _onDeferredTPforTCSwapped(operId_, params, qTCMinted, feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.MaxFluxCapacitorOperationReached.selector) {\\n                // this error is handled to stop the batch execution, so the operation can be executed again\\n                // after blocks pass and the flux capacitor is free again\\n                emit OperationError(operId_, errorSelector, \\\"Max flux capacitor operation reached\\\");\\n                return false;\\n            } else if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocCommons.QtcBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qTc below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTPInPending(params.sender, IERC20Upgradeable(params.tp), params.qTP);\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsSwapTPforTC[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes swap TP for TP handling any error\\n     * @param operId_ operation id\\n     * @return executed true if the Operations was executed\\n     *\\n     * May emit {TPforTPSwapped, OperationError, UnhandledError} events\\n     */\\n    function _executeSwapTPforTP(uint256 operId_) internal virtual returns (bool executed) {\\n        MocCore.SwapTPforTPParams memory params = operationsSwapTPforTP[operId_];\\n        try mocOperations.execSwapTPforTP(params) returns (\\n            uint256,\\n            uint256 qTPMinted,\\n            uint256,\\n            MocCore.FeeCalcs memory feeCalcs\\n        ) {\\n            _onDeferredTPforTPSwapped(operId_, params, qTPMinted, feeCalcs);\\n        } catch (bytes memory returnData) {\\n            // TODO: analyze if it's necessary to decode error params, returnData needs to be\\n            // padded/shifted as decode only takes bytes32 chunks and error selector is just 4 bytes.\\n            bytes4 errorSelector = bytes4(returnData);\\n            if (errorSelector == MocCommons.InsufficientQacSent.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Insufficient qac sent\\\");\\n            } else if (errorSelector == MocCommons.QtpBelowMinimumRequired.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"qTp below minimum required\\\");\\n            } else if (errorSelector == MocBaseBucket.LowCoverage.selector) {\\n                emit OperationError(operId_, errorSelector, \\\"Low coverage\\\");\\n            } else emit UnhandledError(operId_, returnData);\\n\\n            // On a failed Operation, we unlock user funds\\n            mocOperations.unlockTPInPending(params.sender, IERC20Upgradeable(params.tpFrom), params.qTP);\\n            mocOperations.unlockACInPending(params.sender, params.qACmax);\\n        }\\n        // we delete the operation params when executed\\n        delete operationsSwapTPforTP[operId_];\\n        return true;\\n    }\\n\\n    /**\\n     * @notice executes the given Operation by the `operId_`\\n     * @dev does not revert on Operation failure, throws Process and Error\\n     * events according to the Oper type and result\\n     * @param operId_ Identifier for the Operation to be executed\\n     * @return executed true if the Operations was executed\\n     * @return executionFee execution fees corresponding to this Operation\\n     */\\n    function execute(uint256 operId_, uint256 limitBlk) internal returns (bool executed, uint256 executionFee) {\\n        OperInfo memory operInfo = opersInfo[operId_];\\n        if (operInfo.queuedBlk > limitBlk) {\\n            executed = false;\\n            executionFee = 0;\\n        } else if (operInfo.operType == OperType.mintTC) {\\n            executed = _executeMintTC(operId_);\\n            executionFee = execFee[OperType.mintTC];\\n        } else if (operInfo.operType == OperType.redeemTC) {\\n            executed = _executeRedeemTC(operId_);\\n            executionFee = execFee[OperType.redeemTC];\\n        } else if (operInfo.operType == OperType.mintTP) {\\n            executed = _executeMintTP(operId_);\\n            executionFee = execFee[OperType.mintTP];\\n        } else if (operInfo.operType == OperType.redeemTP) {\\n            executed = _executeRedeemTP(operId_);\\n            executionFee = execFee[OperType.redeemTP];\\n        } else if (operInfo.operType == OperType.mintTCandTP) {\\n            executed = _executeMintTCandTP(operId_);\\n            executionFee = execFee[OperType.mintTCandTP];\\n        } else if (operInfo.operType == OperType.redeemTCandTP) {\\n            executed = _executeRedeemTCandTP(operId_);\\n            executionFee = execFee[OperType.redeemTCandTP];\\n        } else if (operInfo.operType == OperType.swapTCforTP) {\\n            executed = _executeSwapTCforTP(operId_);\\n            executionFee = execFee[OperType.swapTCforTP];\\n        } else if (operInfo.operType == OperType.swapTPforTC) {\\n            executed = _executeSwapTPforTC(operId_);\\n            executionFee = execFee[OperType.swapTPforTC];\\n        } else if (operInfo.operType == OperType.swapTPforTP) {\\n            executed = _executeSwapTPforTP(operId_);\\n            executionFee = execFee[OperType.swapTPforTP];\\n        }\\n        if (executed) delete opersInfo[operId_];\\n        return (executed, executionFee);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice Processes Operations in the queue\\n     * @dev does not revert on Operation failure, throws Process and Error\\n     * events according to the Oper type and result\\n     */\\n    function execute(address executionFeeRecipient) external notPaused nonReentrant {\\n        uint256 operId = firstOperId;\\n        uint256 lastOperId;\\n        uint256 limitBlk;\\n        uint256 totalExecutionFee;\\n        unchecked {\\n            lastOperId = Math.min(operIdCount, operId + maxOperPerBatch);\\n            limitBlk = block.number - minOperWaitingBlk;\\n        }\\n        // loop through all pending Operations\\n        while (operId < lastOperId) {\\n            (bool executed, uint256 executionFee) = execute(operId, limitBlk);\\n            if (executed) {\\n                emit OperationExecuted(msg.sender, operId);\\n                operId = unchecked_inc(operId);\\n                unchecked {\\n                    totalExecutionFee += executionFee;\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n        // Define new reference to queue beginning\\n        firstOperId = operId;\\n        if (totalExecutionFee > 0) {\\n            // if execution fees were increased before the execution, the balance could not be enough\\n            // to pay the required, so, the recipient will receive everything that the contract has\\n            if (totalExecutionFee > address(this).balance) totalExecutionFee = address(this).balance;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = executionFeeRecipient.call{ value: totalExecutionFee }(\\\"\\\");\\n            if (!success) revert ExecutionFeePaymentFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueMintTC(\\n        MocCore.MintTCParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.mintTC]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.mintTC, uint248(block.number));\\n        operationsMintTC[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.mintTC);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueRedeemTC(\\n        MocCore.RedeemTCParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.redeemTC]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.redeemTC, uint248(block.number));\\n        operationsRedeemTC[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.redeemTC);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueMintTP(\\n        MocCore.MintTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.mintTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.mintTP, uint248(block.number));\\n        operationsMintTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.mintTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueRedeemTP(\\n        MocCore.RedeemTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.redeemTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.redeemTP, uint248(block.number));\\n        operationsRedeemTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.redeemTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueMintTCandTP(\\n        MocCore.MintTCandTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.mintTCandTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.mintTCandTP, uint248(block.number));\\n        operationsMintTCandTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.mintTCandTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueRedeemTCandTP(\\n        MocCore.RedeemTCandTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.redeemTCandTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.redeemTCandTP, uint248(block.number));\\n        operationsRedeemTCandTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.redeemTCandTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueSwapTCforTP(\\n        MocCore.SwapTCforTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.swapTCforTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.swapTCforTP, uint248(block.number));\\n        operationsSwapTCforTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.swapTCforTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueSwapTPforTC(\\n        MocCore.SwapTPforTCParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.swapTPforTC]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.swapTPforTC, uint248(block.number));\\n        operationsSwapTPforTC[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.swapTPforTC);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice Registered enqueuer can queue an Operations\\n     * @return operId Identifier to track the Operation lifecycle\\n     */\\n    function queueSwapTPforTP(\\n        MocCore.SwapTPforTPParams calldata params\\n    ) external payable notPaused onlyRole(ENQUEUER_ROLE) returns (uint256 operId) {\\n        verifyExecFee(execFee[OperType.swapTPforTP]);\\n        operId = operIdCount;\\n        opersInfo[operId] = OperInfo(OperType.swapTPforTP, uint248(block.number));\\n        operationsSwapTPforTP[operId] = params;\\n        emit OperationQueued(msg.sender, operId, OperType.swapTPforTP);\\n        operIdCount++;\\n    }\\n\\n    /**\\n     * @notice true if the queue is empty\\n     */\\n    function isEmpty() public view override returns (bool) {\\n        return firstOperId == operIdCount;\\n    }\\n\\n    /**\\n     * @notice true if the queue has at least one Operation ready to be executed\\n     */\\n    function readyToExecute() public view returns (bool) {\\n        if (isEmpty()) return false;\\n        OperInfo memory operInfo = opersInfo[firstOperId];\\n        return (operInfo.queuedBlk <= block.number - minOperWaitingBlk);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @notice sets Moc Queue minimum operation waiting blocks\\n     * @param minOperWaitingBlk_ minimum amount of blocks an operation needs to remain in the\\n     * queue before it can be executed\\n     */\\n    function setMinOperWaitingBlk(uint128 minOperWaitingBlk_) external onlyAuthorizedChanger {\\n        minOperWaitingBlk = minOperWaitingBlk_;\\n    }\\n\\n    /**\\n     * @notice sets Moc Queue maximum amount of operations per execution batch\\n     * @param maxOperPerBatch_ maximum amount of operations allowed on a batch to avoid going over\\n     * the block gas limit\\n     */\\n    function setMaxOperPerBatch(uint128 maxOperPerBatch_) external onlyAuthorizedChanger {\\n        maxOperPerBatch = maxOperPerBatch_;\\n    }\\n\\n    /**\\n     * @notice registers the mocOperations bucket that would operate over this queue\\n     * @dev in order to operate, the queue needs to be whitelisted as ENQUEUER_ROLE on the bucket as well\\n     * @param bucket_ address of the mocOperations implementation to interact with\\n     *\\n     * May emit a {RoleGranted} event for ENQUEUER role\\n     */\\n    function registerBucket(MocOperations bucket_) external onlyAuthorizedChanger {\\n        if (address(mocOperations) != address(0)) revert BucketAlreadyRegistered();\\n        mocOperations = bucket_;\\n        // internal, not role restricted granting, as it's protected by governance\\n        _grantRole(ENQUEUER_ROLE, address(bucket_));\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe067e35a8b6eb101bc481d2bbc72b8f97617e71f9db7764e3a1e508216105065\",\"license\":\"UNLICENSED\"},\"contracts/queue/MocQueueExecFees.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocAccessControlled } from \\\"../utils/MocAccessControlled.sol\\\";\\n\\n/**\\n * @title MocQueue Execution Fee: Handles Queuing execution fees\\n */\\nabstract contract MocQueueExecFees is MocAccessControlled {\\n    // Set of Deferrable Operation Types\\n    enum OperType {\\n        none, // avoid using zero as Type\\n        mintTC,\\n        redeemTC,\\n        mintTP,\\n        redeemTP,\\n        mintTCandTP,\\n        redeemTCandTP,\\n        swapTCforTP,\\n        swapTPforTC,\\n        swapTPforTP\\n    }\\n\\n    // ------- Custom Errors -------\\n\\n    // Wrong amount of coinbase set as execution fee\\n    error WrongExecutionFee(uint256 expectedValue);\\n    // Failure on Executor payment address coinbase transfer\\n    error ExecutionFeePaymentFailed();\\n\\n    // ------- Structs -------\\n\\n    struct InitializeMocQueueExecFeesParams {\\n        // absolute coinbase execution fee applied on Collateral Tokens mint\\n        uint256 tcMintExecFee;\\n        // absolute coinbase execution fee applied on Collateral Tokens redeem\\n        uint256 tcRedeemExecFee;\\n        // absolute coinbase execution fee applied on Pegged Tokens mint\\n        uint256 tpMintExecFee;\\n        // absolute coinbase execution fee applied on Pegged Tokens redeem\\n        uint256 tpRedeemExecFee;\\n        // absolute coinbase execution fee applied on swap a Pegged Token for another Pegged Token\\n        uint256 swapTPforTPExecFee;\\n        // absolute coinbase execution fee applied on swap a Pegged Token for Collateral Token\\n        uint256 swapTPforTCExecFee;\\n        // absolute coinbase execution fee applied on swap Collateral Token for a Pegged Token\\n        uint256 swapTCforTPExecFee;\\n        // absolute coinbase execution fee applied on redeem Collateral Token and Pegged Token in one operations\\n        uint256 redeemTCandTPExecFee;\\n        // absolute coinbase execution fee applied on mint Collateral Token and Pegged Token in one operation\\n        uint256 mintTCandTPExecFee;\\n    }\\n\\n    // OperType => Execution fee\\n    mapping(OperType => uint256) public execFee;\\n\\n    // ------- Initializer -------\\n\\n    function __MocQueueExecFees_init(\\n        InitializeMocQueueExecFeesParams calldata mocQueueExecFeesParams_\\n    ) internal onlyInitializing {\\n        _setExecutionFees(mocQueueExecFeesParams_);\\n    }\\n\\n    // ------- Abstract Functions -------\\n\\n    /**\\n     * @notice true if the queue is empty\\n     */\\n    function isEmpty() public view virtual returns (bool isEmpty);\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice verifies that operation execution fee sent (msg.value) is equal to `operationFee`\\n     * reverts, with WrongExecutionFee error is not.\\n     */\\n    function verifyExecFee(uint256 operationFee) internal {\\n        if (operationFee != msg.value) revert WrongExecutionFee(operationFee);\\n    }\\n\\n    /**\\n     * @notice sets Execution Fees absolute values for each operation type\\n     */\\n    function _setExecutionFees(InitializeMocQueueExecFeesParams calldata mocQueueExecFeesParams_) internal {\\n        execFee[OperType.mintTC] = mocQueueExecFeesParams_.tcMintExecFee;\\n        execFee[OperType.redeemTC] = mocQueueExecFeesParams_.tcRedeemExecFee;\\n        execFee[OperType.mintTP] = mocQueueExecFeesParams_.tpMintExecFee;\\n        execFee[OperType.redeemTP] = mocQueueExecFeesParams_.tpRedeemExecFee;\\n        execFee[OperType.swapTPforTP] = mocQueueExecFeesParams_.swapTPforTPExecFee;\\n        execFee[OperType.swapTPforTC] = mocQueueExecFeesParams_.swapTPforTCExecFee;\\n        execFee[OperType.swapTCforTP] = mocQueueExecFeesParams_.swapTCforTPExecFee;\\n        execFee[OperType.redeemTCandTP] = mocQueueExecFeesParams_.redeemTCandTPExecFee;\\n        execFee[OperType.mintTCandTP] = mocQueueExecFeesParams_.mintTCandTPExecFee;\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice get execution fee for the operation requested\\n     *  reverts if value sent is not enough to pay the execution fee\\n     * @dev only used for coinbase flavor\\n     * @param operType_ operation type registered\\n     * @param value_ value sent to pay execution fee\\n     * @return currentExecFee execution fee required for the operation\\n     */\\n    function getAndVerifyExecFee(OperType operType_, uint256 value_) external view returns (uint256 currentExecFee) {\\n        currentExecFee = execFee[operType_];\\n        if (currentExecFee > value_) revert WrongExecutionFee(currentExecFee);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @notice Updates executions fees with absolute values for each operation type\\n     * @dev When the changer is executed there could be pending operations on the queue, thats means that\\n     *  users have already paid for those operations, so, two situations could occur:\\n     *  1. If execution fees are decreased, the executor will receive all the new fees and the\\n     *       remaining funds will stay in this contract\\n     *  2. If execution fees are increased, the executor will receive less fees, unless this contract has funds\\n     *       remaining from another execution fee update (1.) or previously sent by another address\\n     * @param mocQueueExecFeesParams_ new execution fees\\n     */\\n    function updateExecutionFees(\\n        InitializeMocQueueExecFeesParams calldata mocQueueExecFeesParams_\\n    ) external onlyAuthorizedChanger {\\n        _setExecutionFees(mocQueueExecFeesParams_);\\n    }\\n\\n    // @notice used to receive extra executions fee payment\\n    /* solhint-disable-next-line no-empty-blocks */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7f93d6b781eadd950095f881434d3296c6a050166b9581fa89eb391d41632185\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocRC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IMocRC20 } from \\\"../interfaces/IMocRC20.sol\\\";\\nimport { IGovernor, Governed } from \\\"../governance/Governed.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { AccessControlEnumerableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title MocRC20\\n * @notice Base Moc ERC20 Token: burn, mint. It can be both Pegs and Collateral Tokens.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocRC20 is IMocRC20, AccessControlEnumerableUpgradeable, ERC20Upgradeable, UUPSUpgradeable, Governed {\\n    bytes32 private constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 private constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    error NotUniqueRole(bytes32 role);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * See {__MocRC20_init}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external virtual initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n    }\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `BURNER_ROLE` to `admin` address.\\n     *\\n     * See {ERC20_init}.\\n     */\\n    function __MocRC20_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) internal onlyInitializing {\\n        __ERC20_init(name_, symbol_);\\n        __AccessControlEnumerable_init();\\n        __UUPSUpgradeable_init();\\n        __Governed_init(address(governor_));\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(MINTER_ROLE, admin_);\\n        _grantRole(BURNER_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @inheritdoc UUPSUpgradeable\\n     * @dev checks that the changer that will do the upgrade is currently authorized by governance to makes\\n     * changes within the system\\n     * @param newImplementation new implementation contract address(not used)\\n     */\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) returns (bool) {\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     * Requirements:\\n     *\\n     * - the caller must have the `BURNER_ROLE`.\\n     */\\n    function burn(address to, uint256 amount) external virtual onlyRole(BURNER_ROLE) {\\n        _burn(to, amount);\\n    }\\n\\n    /**\\n     * @dev Grants all `roles` to `account` while sender renounces to all ``role``\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     * - no one else must have any other role\\n     *\\n     * May emit a {RoleGranted x3, RoleRevoked x3} event.\\n     */\\n    function transferAllRoles(address account) public virtual onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\\n        // One the new admin account has roles\\n        if (getRoleMemberCount(DEFAULT_ADMIN_ROLE) != 1) revert NotUniqueRole(DEFAULT_ADMIN_ROLE);\\n        if (getRoleMemberCount(MINTER_ROLE) != 1) revert NotUniqueRole(MINTER_ROLE);\\n        if (getRoleMemberCount(BURNER_ROLE) != 1) revert NotUniqueRole(BURNER_ROLE);\\n        _grantRole(DEFAULT_ADMIN_ROLE, account);\\n        _grantRole(MINTER_ROLE, account);\\n        _grantRole(BURNER_ROLE, account);\\n        _revokeRole(MINTER_ROLE, msg.sender);\\n        _revokeRole(BURNER_ROLE, msg.sender);\\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5761cffc87d6edb176a15819b336235389006529998493bc715587c5a669eb4d\",\"license\":\"UNLICENSED\"},\"contracts/tokens/MocTC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocRC20, IGovernor, IMocRC20 } from \\\"./MocRC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { ERC20PausableUpgradeable, ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title MocTC\\n * @notice Base Moc  ERC20 Collateral Tokens: Allows burn, mint and pause.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocTC is MocRC20, ERC20PausableUpgradeable {\\n    bytes32 private constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Grants `PAUSER_ROLE` to `admin` address.\\n     *\\n     * See {MocRC20-constructor}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external override initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n        __ERC20Pausable_init();\\n        _grantRole(PAUSER_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @dev override only to satisfy compiler\\n     * @inheritdoc ERC20PausableUpgradeable\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        ERC20PausableUpgradeable._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract.\\n     * See {ERC20PausableUpgradeable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Grants all `roles` to `account` while sender renounces to all ``role``.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     * - no one else must have any other role\\n     *\\n     * May emit a {RoleGranted x4, RoleRevoked x4} event.\\n     */\\n    function transferAllRoles(address account) public override onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\\n        if (getRoleMemberCount(PAUSER_ROLE) != 1) revert NotUniqueRole(PAUSER_ROLE);\\n        _grantRole(PAUSER_ROLE, account);\\n        _revokeRole(PAUSER_ROLE, msg.sender);\\n        super.transferAllRoles(account);\\n    }\\n}\\n\",\"keccak256\":\"0x14374ca4abdc0f1f176b5e61ef4de3ca21eb5b1ea84da1727898eee41f08feb3\",\"license\":\"UNLICENSED\"},\"contracts/utils/MocAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title MocAccessControlled\\n * @notice Extends Moc Upgradable capabilities, with access control capabilities\\n * @dev grant and revoke functions are overwritten so that they are also\\n *      compatible with governance authorization mechanism.\\n */\\nabstract contract MocAccessControlled is MocUpgradable, AccessControlUpgradeable {\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role  OR\\n     *   the caller must have be an authorized Governance changer.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        verifyRoleManagementPrivilege(role);\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role  OR\\n     *   the caller must have be an authorized Governance changer.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        verifyRoleManagementPrivilege(role);\\n        _revokeRole(role, account);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    function verifyRoleManagementPrivilege(bytes32 role) private view {\\n        if (!governor.isAuthorizedChanger(msg.sender) && !hasRole(getRoleAdmin(role), msg.sender))\\n            revert NotAuthorizedChanger();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x08d62ed029461b93adac423c101c4e56dbf6a628e4d02855c3c4040d1e5e2b4e\",\"license\":\"UNLICENSED\"},\"contracts/utils/MocHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n/* solhint-disable-next-line max-line-length */\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nabstract contract MocHelper {\\n    error InvalidAddress();\\n    error InvalidValue();\\n    // Constants may not be used in child contracts and that is fine as they are\\n    // not using any space in storage, so we disable the check\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant PRECISION = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant ONE = 10 ** 18;\\n    // slither-disable-next-line unused-state\\n    uint256 internal constant UINT256_MAX = ~uint256(0);\\n\\n    // Saves gas\\n    // https://github.com/KadenZipfel/gas-optimizations/blob/main/gas-saving-patterns/unchecked-arithmetic.md\\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice add precision and div two number\\n     * @param a_ numerator\\n     * @param b_ denominator\\n     * @return `a_` * PRECISION / `b_`\\n     */\\n    function _divPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * PRECISION) / b_;\\n    }\\n\\n    /**\\n     * @notice multiply two number and remove precision\\n     * @param a_ term 1\\n     * @param b_ term 2\\n     * @return `a_` * `b_` / PRECISION\\n     */\\n    function _mulPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * b_) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice reverts if value if less than PRECISION ONE\\n     * @param value_ value to check [PREC]\\n     */\\n    function _checkLessThanOne(uint256 value_) internal pure {\\n        if (value_ >= ONE) revert InvalidValue();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcaa68dd722c380b1fd1a6a13a07fe94da162c6af4a707de20199f2edad8d1f1e\",\"license\":\"UNLICENSED\"},\"contracts/vendors/MocVendors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { MocUpgradable } from \\\"../governance/MocUpgradable.sol\\\";\\n\\n/**\\n * @title MocVendors\\n * @notice MocVendors allows a third-party to add a markup to all operations\\n *  A vendor can set a markup themselves or ask vendors guardian to do it on their behalf.\\n *  Considerations:\\n *  - Theres is not a markup limit or restriction\\n *  - The currency that the vendor receives is always the same that is used to pay fees(AC or Fee Token)\\n *  - A malicious vendor front running an operation increasing the markup is protected in some way\\n *      by the maximum (AC or Fee Token) that the user expect to spend(or de minimum that expect to receive)\\n */\\ncontract MocVendors is MocUpgradable {\\n    // ------- Events -------\\n    event VendorMarkupChanged(address indexed vendorAddress_, uint256 newMarkup_);\\n    // ------- Custom Errors -------\\n    error NotVendorsGuardian(address sender_);\\n\\n    // ------- Storage -------\\n\\n    // address authorized to change a vendor's markup\\n    address public vendorsGuardianAddress;\\n    // addition markup pct applied on each operation when operating through a vendor [PREC]\\n    mapping(address => uint256) public vendorMarkup; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // ------- Initializer -------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice contract initializer\\n     * @param vendorsGuardianAddress_ The address authorized to change a vendor's markup\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function initialize(\\n        address vendorsGuardianAddress_,\\n        address governorAddress_,\\n        address pauserAddress_\\n    ) external initializer {\\n        // slither-disable-next-line missing-zero-check\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n        __MocUpgradable_init(governorAddress_, pauserAddress_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function _setMarkup(address vendorAddress_, uint256 newMarkup_) internal {\\n        vendorMarkup[vendorAddress_] = newMarkup_;\\n        emit VendorMarkupChanged(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice vendor sets its own markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setMarkup(uint256 newMarkup_) external {\\n        _setMarkup(msg.sender, newMarkup_);\\n    }\\n\\n    /**\\n     * @notice guardian sets a vendor markup\\n     * @param vendorAddress_ vendor address to change markup\\n     * @param newMarkup_ new markup applied to vendor [PREC]\\n     */\\n    function setVendorMarkup(address vendorAddress_, uint256 newMarkup_) external {\\n        if (msg.sender != vendorsGuardianAddress) revert NotVendorsGuardian(msg.sender);\\n        _setMarkup(vendorAddress_, newMarkup_);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev Sets the address which will be authorized to set a vendor markup.\\n     * @param vendorsGuardianAddress_ Address which will be authorized to set a vendor markup.\\n     */\\n    function setVendorsGuardianAddress(address vendorsGuardianAddress_) public onlyAuthorizedChanger {\\n        // slither-disable-next-line missing-zero-check\\n        vendorsGuardianAddress = vendorsGuardianAddress_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n\\n    // Purposely left unused to save some state space to allow for future upgrades\\n    // slither-disable-next-line unused-state\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2fd4ff4cf08ecabbd32b44f837c3d7f6f14b5512574abc23b4f35a12995d3ae9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 950,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 953,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 932,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1247,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25922,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19559,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "governor",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IGovernor)20396"
      },
      {
        "astId": 19630,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19699,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "stoppable",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 19701,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "_paused",
        "offset": 1,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 19703,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "pauser",
        "offset": 2,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 19875,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19681,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3017,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3400,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "_roles",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
      },
      {
        "astId": 479,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25826,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "453",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25207,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "execFee",
        "offset": 0,
        "slot": "503",
        "type": "t_mapping(t_enum(OperType)25177,t_uint256)"
      },
      {
        "astId": 25371,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "504",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1389,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "_status",
        "offset": 0,
        "slot": "554",
        "type": "t_uint256"
      },
      {
        "astId": 1458,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "555",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22621,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "mocOperations",
        "offset": 0,
        "slot": "604",
        "type": "t_contract(MocOperations)16136"
      },
      {
        "astId": 22623,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operIdCount",
        "offset": 0,
        "slot": "605",
        "type": "t_uint256"
      },
      {
        "astId": 22625,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "firstOperId",
        "offset": 0,
        "slot": "606",
        "type": "t_uint256"
      },
      {
        "astId": 22630,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsMintTC",
        "offset": 0,
        "slot": "607",
        "type": "t_mapping(t_uint256,t_struct(MintTCParams)12003_storage)"
      },
      {
        "astId": 22635,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsMintTP",
        "offset": 0,
        "slot": "608",
        "type": "t_mapping(t_uint256,t_struct(MintTPParams)12255_storage)"
      },
      {
        "astId": 22640,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsRedeemTC",
        "offset": 0,
        "slot": "609",
        "type": "t_mapping(t_uint256,t_struct(RedeemTCParams)12129_storage)"
      },
      {
        "astId": 22645,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsRedeemTP",
        "offset": 0,
        "slot": "610",
        "type": "t_mapping(t_uint256,t_struct(RedeemTPParams)11105_storage)"
      },
      {
        "astId": 22650,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsMintTCandTP",
        "offset": 0,
        "slot": "611",
        "type": "t_mapping(t_uint256,t_struct(MintTCandTPParams)11030_storage)"
      },
      {
        "astId": 22655,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsRedeemTCandTP",
        "offset": 0,
        "slot": "612",
        "type": "t_mapping(t_uint256,t_struct(RedeemTCandTPParams)11045_storage)"
      },
      {
        "astId": 22660,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsSwapTCforTP",
        "offset": 0,
        "slot": "613",
        "type": "t_mapping(t_uint256,t_struct(SwapTCforTPParams)11092_storage)"
      },
      {
        "astId": 22665,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsSwapTPforTC",
        "offset": 0,
        "slot": "614",
        "type": "t_mapping(t_uint256,t_struct(SwapTPforTCParams)11077_storage)"
      },
      {
        "astId": 22670,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "operationsSwapTPforTP",
        "offset": 0,
        "slot": "615",
        "type": "t_mapping(t_uint256,t_struct(SwapTPforTPParams)11062_storage)"
      },
      {
        "astId": 22675,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "opersInfo",
        "offset": 0,
        "slot": "616",
        "type": "t_mapping(t_uint256,t_struct(OperInfo)22618_storage)"
      },
      {
        "astId": 22677,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "minOperWaitingBlk",
        "offset": 0,
        "slot": "617",
        "type": "t_uint128"
      },
      {
        "astId": 22679,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "maxOperPerBatch",
        "offset": 16,
        "slot": "617",
        "type": "t_uint128"
      },
      {
        "astId": 25158,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "__gap",
        "offset": 0,
        "slot": "618",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22235,
        "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
        "label": "newVariable",
        "offset": 0,
        "slot": "668",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGovernor)20396": {
        "encoding": "inplace",
        "label": "contract IGovernor",
        "numberOfBytes": "20"
      },
      "t_contract(MocOperations)16136": {
        "encoding": "inplace",
        "label": "contract MocOperations",
        "numberOfBytes": "20"
      },
      "t_enum(OperType)25177": {
        "encoding": "inplace",
        "label": "enum MocQueueExecFees.OperType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)179_storage"
      },
      "t_mapping(t_enum(OperType)25177,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(OperType)25177",
        "label": "mapping(enum MocQueueExecFees.OperType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(MintTCParams)12003_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCore.MintTCParams)",
        "numberOfBytes": "32",
        "value": "t_struct(MintTCParams)12003_storage"
      },
      "t_mapping(t_uint256,t_struct(MintTCandTPParams)11030_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.MintTCandTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(MintTCandTPParams)11030_storage"
      },
      "t_mapping(t_uint256,t_struct(MintTPParams)12255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCore.MintTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(MintTPParams)12255_storage"
      },
      "t_mapping(t_uint256,t_struct(OperInfo)22618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocQueue.OperInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OperInfo)22618_storage"
      },
      "t_mapping(t_uint256,t_struct(RedeemTCParams)12129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCore.RedeemTCParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RedeemTCParams)12129_storage"
      },
      "t_mapping(t_uint256,t_struct(RedeemTCandTPParams)11045_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.RedeemTCandTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RedeemTCandTPParams)11045_storage"
      },
      "t_mapping(t_uint256,t_struct(RedeemTPParams)11105_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.RedeemTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(RedeemTPParams)11105_storage"
      },
      "t_mapping(t_uint256,t_struct(SwapTCforTPParams)11092_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.SwapTCforTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapTCforTPParams)11092_storage"
      },
      "t_mapping(t_uint256,t_struct(SwapTPforTCParams)11077_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.SwapTPforTCParams)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapTPforTCParams)11077_storage"
      },
      "t_mapping(t_uint256,t_struct(SwapTPforTPParams)11062_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MocCommons.SwapTPforTPParams)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapTPforTPParams)11062_storage"
      },
      "t_struct(MintTCParams)12003_storage": {
        "encoding": "inplace",
        "label": "struct MocCore.MintTCParams",
        "members": [
          {
            "astId": 11994,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTC",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11996,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11998,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12000,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12002,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MintTCandTPParams)11030_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.MintTCandTPParams",
        "members": [
          {
            "astId": 11019,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11021,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11023,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11025,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11027,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11029,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(MintTPParams)12255_storage": {
        "encoding": "inplace",
        "label": "struct MocCore.MintTPParams",
        "members": [
          {
            "astId": 12244,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12246,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12248,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12250,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12252,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 12254,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(OperInfo)22618_storage": {
        "encoding": "inplace",
        "label": "struct MocQueue.OperInfo",
        "members": [
          {
            "astId": 22615,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "operType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OperType)25177"
          },
          {
            "astId": 22617,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "queuedBlk",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RedeemTCParams)12129_storage": {
        "encoding": "inplace",
        "label": "struct MocCore.RedeemTCParams",
        "members": [
          {
            "astId": 12120,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTC",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12122,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12124,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 12126,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 12128,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RedeemTCandTPParams)11045_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.RedeemTCandTPParams",
        "members": [
          {
            "astId": 11032,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11034,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTC",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11036,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11038,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmin",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11040,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11042,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11044,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RedeemTPParams)11105_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.RedeemTPParams",
        "members": [
          {
            "astId": 11094,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11096,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11098,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11100,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11102,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11104,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)179_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 178,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapTCforTPParams)11092_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.SwapTCforTPParams",
        "members": [
          {
            "astId": 11079,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11081,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTC",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11083,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTPmin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11085,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11087,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11089,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11091,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(SwapTPforTCParams)11077_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.SwapTPforTCParams",
        "members": [
          {
            "astId": 11064,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11066,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11068,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTCmin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11070,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11072,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11074,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11076,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(SwapTPforTPParams)11062_storage": {
        "encoding": "inplace",
        "label": "struct MocCommons.SwapTPforTPParams",
        "members": [
          {
            "astId": 11047,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tpFrom",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11049,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "tpTo",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11051,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11053,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qTPmin",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11055,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "qACmax",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11057,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "sender",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11059,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "recipient",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 11061,
            "contract": "contracts/mocks/MocQueueMock.sol:MocQueueMock",
            "label": "vendor",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeGovernor(address)": {
        "notice": "Change the contract's governor. Should be called through the old governance system"
      },
      "execute(address)": {
        "notice": "Processes Operations in the queue"
      },
      "getAndVerifyExecFee(uint8,uint256)": {
        "notice": "get execution fee for the operation requested  reverts if value sent is not enough to pay the execution fee"
      },
      "governor()": {
        "notice": "The address of the contract which governs this one"
      },
      "isEmpty()": {
        "notice": "true if the queue is empty"
      },
      "makeStoppable()": {
        "notice": "Switches ON the stoppability of the contract. It can be paused or unpaused  Doesn't change the pause state, if the contract was already paused it cannot be operated"
      },
      "makeUnstoppable()": {
        "notice": "Switches OFF the stoppability of the contract. It cannot be paused or unpaused Doesn't change the pause state, if the contract was already paused it cannot be operated"
      },
      "pause()": {
        "notice": "Called by the owner to pause, triggers stopped state"
      },
      "paused()": {
        "notice": "Returns true if paused"
      },
      "queueMintTC((uint256,uint256,address,address,address))": {
        "notice": "registered enqueuer can queue an Operations"
      },
      "queueMintTCandTP((address,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "queueMintTP((address,uint256,uint256,address,address,address))": {
        "notice": "registered enqueuer can queue an Operations"
      },
      "queueRedeemTC((uint256,uint256,address,address,address))": {
        "notice": "registered enqueuer can queue an Operations"
      },
      "queueRedeemTCandTP((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "queueRedeemTP((address,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "queueSwapTCforTP((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "queueSwapTPforTC((address,uint256,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "queueSwapTPforTP((address,address,uint256,uint256,uint256,address,address,address))": {
        "notice": "Registered enqueuer can queue an Operations"
      },
      "readyToExecute()": {
        "notice": "true if the queue has at least one Operation ready to be executed"
      },
      "registerBucket(address)": {
        "notice": "registers the mocOperations bucket that would operate over this queue"
      },
      "setMaxOperPerBatch(uint128)": {
        "notice": "sets Moc Queue maximum amount of operations per execution batch"
      },
      "setMinOperWaitingBlk(uint128)": {
        "notice": "sets Moc Queue minimum operation waiting blocks"
      },
      "setPauser(address)": {
        "notice": "Changes the address which is enable to pause this contract"
      },
      "unpause()": {
        "notice": "Called by the owner to unpause, returns to normal state"
      },
      "updateExecutionFees((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Updates executions fees with absolute values for each operation type"
      }
    },
    "version": 1
  }
}