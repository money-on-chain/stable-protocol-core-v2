{
  "contractName": "MocCARC20",
  "sourceName": "contracts/collateral/rc20/MocCARC20.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQacSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPsent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPNeeded_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientQtpSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tcAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTCtoRedeem",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToMint_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpAvailableToRedeem_",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTPtoRedeem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceProviderAddress_",
          "type": "address"
        }
      ],
      "name": "InvalidPriceProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Liquidated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cglb_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "covThrld_",
          "type": "uint256"
        }
      ],
      "name": "LowCoverage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedChanger",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhenPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPauser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySettlement",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhenLiquidated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyWhilePaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeggedTokenAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACtoRedeem_",
          "type": "uint256"
        }
      ],
      "name": "QacBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QacNeededMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        }
      ],
      "name": "QtcBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "QtpBelowMinimumRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unstoppable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct MocCore.PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "PeggedTokenChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SettlementExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mocGain_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tpGain_",
          "type": "uint256[]"
        }
      ],
      "name": "SuccessFeeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TCMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TCRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TCSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TCandTPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TPMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qAC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TPRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPfrom_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qTPto_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qACfee_",
          "type": "uint256"
        }
      ],
      "name": "TPSwappedForTP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTPema_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTPema_",
          "type": "uint256"
        }
      ],
      "name": "TPemaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCore.PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "addPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appreciationFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcCtargemaCA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ctargemaCA",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGovernor",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tpTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceProviderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tpCtarg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpMintFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpRedeemFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpEmaSf",
              "type": "uint256"
            }
          ],
          "internalType": "struct MocCore.PeggedTokenParams",
          "name": "peggedTokenParams_",
          "type": "tuple"
        }
      ],
      "name": "editPeggedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emaCalculationBlockSpan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "evalLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "execSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRetainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCglb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cglob",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLeverageTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "leverageTC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "getPACtp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPTCac",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pTCac",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        }
      ],
      "name": "getQACforRedeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACfee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTCAvailableToRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tcAvailableToRedeem",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "getTPAvailableToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tpAvailableToMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalACavailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalACavailable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tcTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "mocFeeFlowAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "mocAppreciationBeneficiaryAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "protThrld",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "liqThrld",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "feeRetainer",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tcMintFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tcRedeemFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapTPforTPFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapTPforTCFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapTCforTPFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "redeemTCandTPFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "mintTCandTPFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "successFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "appreciationFactor",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct MocBaseBucket.InitializeBaseBucketParams",
                  "name": "initializeBaseBucketParams",
                  "type": "tuple"
                },
                {
                  "internalType": "address",
                  "name": "governorAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pauserAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "emaCalculationBlockSpan",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "bes",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MocCore.InitializeCoreParams",
              "name": "initializeCoreParams",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "acTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct MocCARC20.InitializeParams",
          "name": "initializeParams_",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLiquidationReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        }
      ],
      "name": "liqRedeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "liqRedeemTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeStoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeUnstoppable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "mintTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "mintTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCtoMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "mintTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "mintTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACtotalNeeded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocAppreciationBeneficiaryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mocFeeFlowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nACcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nTCcb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEmaCalculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pegContainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nTP",
          "type": "uint256"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "priceProvider",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "peggedTokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protThrld",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTCandTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemTCandTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTCandTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        }
      ],
      "name": "redeemTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmin_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "redeemTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACRedeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshACBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "appreciationFactor_",
          "type": "uint256"
        }
      ],
      "name": "setAppreciationFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bes_",
          "type": "uint256"
        }
      ],
      "name": "setBes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockSpan_",
          "type": "uint256"
        }
      ],
      "name": "setEmaCalculationBlockSpan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRetainer_",
          "type": "uint256"
        }
      ],
      "name": "setFeeRetainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "liqEnabled_",
          "type": "bool"
        }
      ],
      "name": "setLiqEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liqThrld_",
          "type": "uint256"
        }
      ],
      "name": "setLiqThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setMintTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocAppreciationBeneficiaryAddress_",
          "type": "address"
        }
      ],
      "name": "setMocAppreciationBeneficiaryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mocFeeFlowAddress_",
          "type": "address"
        }
      ],
      "name": "setMocFeeFlowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser_",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protThrld_",
          "type": "uint256"
        }
      ],
      "name": "setProtThrld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTCandTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setRedeemTCandTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "successFee_",
          "type": "uint256"
        }
      ],
      "name": "setSuccessFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTCforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTCforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTCFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTCFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapTPforTPFee_",
          "type": "uint256"
        }
      ],
      "name": "setSwapTPforTPFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcMintFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tcRedeemFee_",
          "type": "uint256"
        }
      ],
      "name": "setTcRedeemFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldCalculateEma",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stoppable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "swapTCforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTCforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTC_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTCforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "swapTPforTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTCFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTCmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTPforTCto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        }
      ],
      "name": "swapTPforTP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapTPforTPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "iFrom_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iTo_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTP_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPmin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qACmax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        }
      ],
      "name": "swapTPforTPto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "qACFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qTPMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcToken",
      "outputs": [
        {
          "internalType": "contract MocTC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpCtarg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpEma",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ema",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tpTokens",
      "outputs": [
        {
          "internalType": "contract IMocRC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateEmas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106105745760003560e01c806370713468116102d8578063bb4872de11610180578063e4012945116100e7578063f26114aa116100a0578063f375cfba1161007a578063f375cfba14611080578063fa6e83bd14611097578063fa79589e146110ae578063fda70f8b146110ce57600080fd5b8063f26114aa14611029578063f280877814611049578063f30b56141461106957600080fd5b8063e401294514610f86578063e4c0aaf414610fa6578063e6b1627c14610fc6578063e7c2597814610fe6578063e8859a1514611001578063f21fcc001461101657600080fd5b8063ceecc55a11610139578063ceecc55a14610ee7578063d1a0faa014610f07578063db79607214610f1c578063de08160f14610f3c578063de8d520a14610f5c578063e23c135c14610f7157600080fd5b8063bb4872de14610e38578063bbba7ed914610e52578063becaca6b14610e72578063c00f538d14610e92578063c039cc6914610eb2578063c84353c914610ec757600080fd5b80638456cb591161023f5780639ad6659d116101f85780639fd0506d116101d25780639fd0506d14610dc2578063a8e9ac3014610de8578063aea038dc14610e01578063bb2ac78814610e1857600080fd5b80639ad6659d14610d405780639bdd7cce14610d555780639cabfc0014610d7557600080fd5b80638456cb5914610c935780638cfa424114610ca8578063904aa85b14610cbf5780639195c85b14610cdf5780639853c35a14610cff5780639abb14c914610d2057600080fd5b80637a4ff1d9116102915780637a4ff1d914610be75780637a727fe814610c075780637af5758c14610c1e5780637cba238314610c3e5780637d8e031414610c5e578063826fcd5814610c7e57600080fd5b80637071346814610b425780637554fffd14610b625780637750ba0c14610b795780637820a32814610b9957806379f9a91c14610bb95780637a193c3114610bd057600080fd5b806333421c381161043b5780634f0f27ee116103a25780635c616a731161035b57806360009e0b1161033557806360009e0b14610ae0578063662013f414610b015780636827435714610b165780636b5488df14610b2b57600080fd5b80635c616a7314610a8e5780635c975abb14610aa35780635d65d04514610ac057600080fd5b80634f0f27ee146109fa5780634f1ef28614610a115780635210570c14610a245780635241271c14610a3957806352d1902d14610a5957806354a73c6214610a6e57600080fd5b80634310adc6116103f45780634310adc6146109255780634454ae8b146109455780634b746001146109655780634cffbaab146109a25780634d977e78146109c25780634e1f907a146109d957600080fd5b806333421c381461088f5780633659cfe6146108a45780633bc4ac0a146108c45780633f4ba83a146108e45780634017936a146108f9578063407f0e341461090e57600080fd5b80631867e2f5116104df57806323b98cde1161049857806323b98cde146107d157806327eab2a1146108015780632a20d57d146108215780632c43bd3b146108385780632d88af4a14610858578063333431fd1461087857600080fd5b80631867e2f5146107325780631a89b8f2146107495780631f1138a61461075c5780631fb0dda01461077c5780631fe6a7ad146107915780632069f753146107b157600080fd5b80630d6ac463116105315780630d6ac463146106725780630e0a8fd2146106925780631301a8f0146106b257806317574bc5146106d257806317df0ab8146106f2578063181770da1461071257600080fd5b806301cded9c1461057957806301dde6ef146105b357806301f1b684146105d55780630bb7f6081461060d5780630c340a241461063b5780630c36d8971461065b575b600080fd5b34801561058557600080fd5b50610599610594366004614e63565b6110e5565b604080519283526020830191909152015b60405180910390f35b3480156105bf57600080fd5b506105d36105ce366004614eb0565b611104565b005b3480156105e157600080fd5b506105f56105f0366004614eb0565b611112565b6040516001600160a01b0390911681526020016105aa565b34801561061957600080fd5b5061062d610628366004614ec9565b61113d565b6040519081526020016105aa565b34801561064757600080fd5b506097546105f5906001600160a01b031681565b34801561066757600080fd5b5061062d61017e5481565b34801561067e57600080fd5b506105d361068d366004614eeb565b611154565b34801561069e57600080fd5b506105d36106ad366004614eb0565b61117f565b3480156106be57600080fd5b506105996106cd366004614f08565b61118d565b3480156106de57600080fd5b506105996106ed366004614f08565b6111ab565b3480156106fe57600080fd5b5061062d61070d366004614f3a565b6111bc565b34801561071e57600080fd5b5061062d61072d366004614f3a565b6111d5565b34801561073e57600080fd5b5061062d6101b35481565b610599610757366004614f66565b6111e4565b34801561076857600080fd5b50610599610777366004614fa7565b6111f4565b34801561078857600080fd5b5061062d611215565b34801561079d57600080fd5b506105d36107ac36600461500a565b611237565b3480156107bd57600080fd5b506105d36107cc366004614eb0565b611253565b3480156107dd57600080fd5b50610148546107f190610100900460ff1681565b60405190151581526020016105aa565b34801561080d57600080fd5b506105d361081c366004614eeb565b611261565b34801561082d57600080fd5b5061062d61013e5481565b34801561084457600080fd5b506105d3610853366004614eb0565b61128c565b34801561086457600080fd5b506105d3610873366004614eeb565b61129a565b34801561088457600080fd5b5061062d61013d5481565b34801561089b57600080fd5b506105d36112cc565b3480156108b057600080fd5b506105d36108bf366004614eeb565b6113b0565b3480156108d057600080fd5b506105d36108df366004614eb0565b611498565b3480156108f057600080fd5b506105d36114a6565b34801561090557600080fd5b5061062d611540565b34801561091a57600080fd5b5061062d61013c5481565b34801561093157600080fd5b5061062d610940366004615027565b611563565b34801561095157600080fd5b50610599610960366004614e63565b611571565b34801561097157600080fd5b50610985610980366004614eb0565b611582565b604080519283526001600160a01b039091166020830152016105aa565b3480156109ae57600080fd5b5061062d6109bd366004614f66565b6115ba565b3480156109ce57600080fd5b5061062d6101b25481565b3480156109e557600080fd5b50610144546105f5906001600160a01b031681565b348015610a0657600080fd5b5061062d6101395481565b6105d3610a1f366004615076565b6115d4565b348015610a3057600080fd5b506105d36116a4565b348015610a4557600080fd5b5061062d610a54366004614eb0565b6116b8565b348015610a6557600080fd5b5061062d6116da565b348015610a7a57600080fd5b5061062d610a89366004614f66565b61178d565b348015610a9a57600080fd5b506105d361179c565b348015610aaf57600080fd5b5060ca54610100900460ff166107f1565b348015610acc57600080fd5b5061062d610adb36600461513a565b6117f1565b348015610aec57600080fd5b50610131546105f5906001600160a01b031681565b348015610b0d57600080fd5b5061062d6117fe565b348015610b2257600080fd5b506105d3611815565b348015610b3757600080fd5b5061062d6101465481565b348015610b4e57600080fd5b506105d3610b5d366004614eb0565b61182c565b348015610b6e57600080fd5b5061062d6101375481565b348015610b8557600080fd5b506105d3610b94366004614eb0565b61183a565b348015610ba557600080fd5b50610599610bb4366004614ec9565b611848565b348015610bc557600080fd5b5061062d6101405481565b348015610bdc57600080fd5b5061062d6101325481565b348015610bf357600080fd5b506105d3610c02366004614eb0565b611869565b348015610c1357600080fd5b5061062d61017f5481565b348015610c2a57600080fd5b506105d3610c39366004614eb0565b611877565b348015610c4a57600080fd5b506105d3610c59366004614eb0565b611885565b348015610c6a57600080fd5b5061062d610c79366004614eb0565b611893565b348015610c8a57600080fd5b5061062d6118a4565b348015610c9f57600080fd5b506105d36118bf565b348015610cb457600080fd5b5061062d6101475481565b348015610ccb57600080fd5b5061062d610cda366004614eb0565b61195a565b348015610ceb57600080fd5b5061062d610cfa366004614eb0565b611a24565b348015610d0b57600080fd5b50610143546105f5906001600160a01b031681565b348015610d2c57600080fd5b5061062d610d3b366004614ec9565b611a31565b348015610d4c57600080fd5b506107f1611a3f565b348015610d6157600080fd5b50610599610d70366004614e63565b611a6a565b348015610d8157600080fd5b50610dad610d90366004614eeb565b610134602052600090815260409020805460019091015460ff1682565b604080519283529015156020830152016105aa565b348015610dce57600080fd5b5060ca546105f5906201000090046001600160a01b031681565b348015610df457600080fd5b5061017e544310156107f1565b348015610e0d57600080fd5b5061062d61013b5481565b348015610e2457600080fd5b50610599610e33366004614f08565b611a7b565b348015610e4457600080fd5b5060ca546107f19060ff1681565b348015610e5e57600080fd5b506105d3610e6d36600461516a565b611a8c565b348015610e7e57600080fd5b506105d3610e8d366004614eb0565b611bd1565b348015610e9e57600080fd5b506105d3610ead366004614eb0565b611bdf565b348015610ebe57600080fd5b5061062d611bed565b348015610ed357600080fd5b506105d3610ee2366004614eb0565b611c08565b348015610ef357600080fd5b50610599610f02366004615183565b611c16565b348015610f1357600080fd5b506105d3611c28565b348015610f2857600080fd5b506105d3610f373660046151be565b611c62565b348015610f4857600080fd5b5061062d610f57366004614eb0565b611fef565b348015610f6857600080fd5b5061062d612000565b348015610f7d57600080fd5b506105d361201d565b348015610f9257600080fd5b5061062d610fa1366004615027565b61205b565b348015610fb257600080fd5b506105d3610fc1366004614eeb565b612069565b348015610fd257600080fd5b50610599610fe1366004614eb0565b612093565b348015610ff257600080fd5b50610148546107f19060ff1681565b34801561100d57600080fd5b5061062d6120c2565b610599611024366004614f3a565b6120e3565b34801561103557600080fd5b506105d36110443660046151be565b6120ff565b34801561105557600080fd5b506105d3611064366004614eb0565b612389565b34801561107557600080fd5b5061062d61012f5481565b34801561108c57600080fd5b5061062d61013f5481565b3480156110a357600080fd5b5061062d6101385481565b3480156110ba57600080fd5b5061062d6110c9366004614eb0565b612397565b3480156110da57600080fd5b5061062d61013a5481565b6000806110f68787878733886123da565b915091509550959350505050565b61110c6125b9565b61013855565b610133818154811061112357600080fd5b6000918252602090912001546001600160a01b0316905081565b600061114b83833333612642565b90505b92915050565b61115c6125b9565b61014380546001600160a01b0319166001600160a01b0392909216919091179055565b6111876125b9565b61013d55565b60008061119e868686863333612754565b9150915094509492505050565b60008061119e8686868633336128e2565b60006111cb8484843333612a5f565b90505b9392505050565b60006111cb8484843333612b76565b60008061119e8686863387612cbc565b60008061120688888888883389612df9565b91509150965096945050505050565b6000806000611222612fdd565b915091506112308282613089565b9250505090565b61123f6125b9565b610148805460ff1916911515919091179055565b61125b6125b9565b61014055565b6112696125b9565b61014480546001600160a01b0319166001600160a01b0392909216919091179055565b6112946125b9565b61014755565b6112a26125b9565b60ca80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6112d46130c5565b6101485460ff1680156112f0575061014854610100900460ff16155b80156112ff57506112ff611a3f565b156113ae57610148805461ff0019166101001790556040517f8b77276c97a5709f0d6db52329848a254eb760ce8be80d281799f633bdb69e8390600090a161013160009054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561138e57600080fd5b505af11580156113a2573d6000803e3d6000fd5b505050506113ae6130ee565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114015760405162461bcd60e51b81526004016113f8906151d0565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661144a600080516020615517833981519152546001600160a01b031690565b6001600160a01b0316146114705760405162461bcd60e51b81526004016113f89061521c565b6114798161324a565b6040805160008082526020820190925261149591839190613252565b50565b6114a06125b9565b61017f55565b60ca54610100900460ff166114ce57604051637c7fd07960e01b815260040160405180910390fd5b60ca546201000090046001600160a01b031633146114ff57604051631d77d47760e21b815260040160405180910390fd5b60ca805461ff00191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b600080600061154d612fdd565b9150915061123061155c6133c2565b83836134a9565b60006111cb84843385612642565b6000806110f6878787873388612754565b610135818154811061159357600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60006115c98585853386612b76565b90505b949350505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361161c5760405162461bcd60e51b81526004016113f8906151d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611665600080516020615517833981519152546001600160a01b031690565b6001600160a01b03161461168b5760405162461bcd60e51b81526004016113f89061521c565b6116948261324a565b6116a082826001613252565b5050565b6116ac6125b9565b60ca805460ff19169055565b61014281815481106116c957600080fd5b600091825260209091200154905081565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461177a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016113f8565b5060008051602061551783398151915290565b60006115c98585853386612a5f565b6117a46130c5565b6101b35443106113ae576101b2546117bc904361527e565b6101b3556040517fd3c59bda47e141a8ec5a33d241b7f71b86e30d359f83a9227d912858b60404fc90600090a16113ae6134cd565b600061114b8333846134d5565b6000611808611c28565b6118106133c2565b905090565b61181d6125b9565b60ca805460ff19166001179055565b6118346125b9565b61013c55565b6118426125b9565b61013955565b60008061185e84846118598761195a565b613705565b915091509250929050565b6118716125b9565b61013f55565b61187f6125b9565b61013e55565b61188d6125b9565b61014655565b61014581815481106116c957600080fd5b60008060006118b1612fdd565b915091506112308282613767565b6118c76130c5565b60ca546201000090046001600160a01b031633146118f857604051631d77d47760e21b815260040160405180910390fd5b60ca5460ff1661191b5760405163866099c360e01b815260040160405180910390fd5b60ca805461ff0019166101001790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602001611536565b600080610135838154811061197157611971615291565b60009182526020822060016002909202010154604080516359e02dd760e01b815281516001600160a01b039093169450839285926359e02dd792600480820193918290030181865afa1580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef91906152a7565b9150915080611a1c5760405163de4f3a0f60e01b81526001600160a01b03841660048201526024016113f8565b509392505050565b600061114e8233336134d5565b600061114b83833333613786565b6000806000611a4c612fdd565b915091506000611a5c8383613767565b610147541015949350505050565b6000806110f68787878733886128e2565b60008061119e8686868633336123da565b600054610100900460ff1615808015611aac5750600054600160ff909116105b80611ac65750303b158015611ac6575060005460ff166001145b611b295760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016113f8565b6000805460ff191660011790558015611b4c576000805461ff0019166101001790555b611b5e61028083016102608401614eeb565b61021880546001600160a01b0319166001600160a01b0392909216919091179055611b8882613891565b80156116a0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b611bd96125b9565b61013755565b611be76125b9565b61013b55565b6000806000611bfa612fdd565b915091506112308282613909565b611c106125b9565b6101b255565b6000806110f687878787873333612df9565b61017e5443106113ae576101355460005b81811015611c5257611c4a81613925565b600101611c39565b5061149561017f54430161017e55565b611c6a6125b9565b6000611c796020830183614eeb565b60405163d55fd84560e01b81523060048201529091506001600160a01b0382169063d55fd84590602401602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce491906152cc565b611d015760405163e6c4247b60e01b815260040160405180910390fd5b6000611d136040840160208501614eeb565b6001600160a01b0383166000908152610134602052604090206001015490915060ff1615611d5457604051633458f6c560e01b815260040160405180910390fd5b6101338054604080518082018252828152600160208083018281526001600160a01b03808a1660008181526101348552878120965187559251958501805496151560ff199097169690961790955587548085019098557f92e985329fb94cc1b424ebb0f7f2929b6d27383ca94c0ec71c44fb48bdf96d2c90970180546001600160a01b031990811690951790558451808601865281815288881681840190815261013580548087018255908452915160029283027fdf37d27e88e3bd0b85262482997e409a463f5be0ebb19232abf994dd8474090d81019190915590517fdf37d27e88e3bd0b85262482997e409a463f5be0ebb19232abf994dd8474090e9091018054919099169516949094179096556101458054808401909155898501357fed95984add84c4014c7f9d66a1b73e788e2db64f5763fa861ad52da204f71b2b90910155610141805480840190915560608a01357fb3926254d0163c91fc94bf08f3f8062ff5d48635dfa7dbef8168ad7d4847a75890910155610142805480840190915560808a01357f7917ad5f1bd6fa6d4f9128143f89bcba30c5b503e76ecd2dd7562ddf9706ae1990910155835180850190945260a0890135845260c089013590840190815261017d805480840182559087529351939092027f0f2aec2a8c6072690b3c86d5c08e34587f891268d22d8bdca6e66838c0f2f22d81019390935590517f0f2aec2a8c6072690b3c86d5c08e34587f891268d22d8bdca6e66838c0f2f22e909201919091556101498054909101815590915261014a611f998261195a565b8154600181018355600092835260209092209091015560405181907f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e390611fe19087906152e9565b60405180910390a250505050565b61014181815481106116c957600080fd5b60008061200b612fdd565b91505061201781613a3f565b91505090565b600061012f5461202c30613a5e565b6120369190615356565b11156113ae576113ae61012f5461204c30613a5e565b6120569190615356565b613ace565b60006111cb84843385613786565b6120716125b9565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b61017d81815481106120a457600080fd5b60009182526020909120600290910201805460019091015490915082565b60006101b35443106120d45750600090565b436101b3546118109190615356565b6000806120f38585853333612cbc565b91509150935093915050565b6121076125b9565b60006101348161211a6020850185614eeb565b6001600160a01b0316815260208082019290925260409081016000208151808301909252805482526001015460ff16151591810182905291506121705760405163e6c4247b60e01b815260040160405180910390fd5b805161013580548290811061218757612187615291565b6000918252602091829020600160029092020101546001600160a01b0316906121b69060408601908601614eeb565b6001600160a01b0316146122a95760006121d66040850160208601614eeb565b90506000816001600160a01b03166359e02dd76040518163ffffffff1660e01b81526004016040805180830381865afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b91906152a7565b9150508061225c5760405163e6c4247b60e01b815260040160405180910390fd5b81610135848154811061227157612271615291565b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505b826040013561014582815481106122c2576122c2615291565b9060005260206000200181905550826060013561014182815481106122e9576122e9615291565b90600052602060002001819055508260800135610142828154811061231057612310615291565b90600052602060002001819055508260c0013561017d828154811061233757612337615291565b906000526020600020906002020160010181905550807f6417e5a3c1e0e5dae98b8fe718c4babdfcb35e0d7b5e1b9641b5914756f5d8e38460405161237c91906152e9565b60405180910390a2505050565b6123916125b9565b61013a55565b6000806123a38361195a565b90506000806123b0612fdd565b915091506123d16123bf6133c2565b6123c98786613ae9565b858585613b5b565b95945050505050565b6000806123e5613ba4565b6123ed6130c5565b60006123f88961195a565b90506124048982613bce565b600061240e6117fe565b905060008061241c83613c31565b9150915061242c8b848484613c7f565b60006124398c8484613cb9565b5090508060000361245d5760405163f3e39b5d60e01b815260040160405180910390fd5b670de0b6b3a764000061013254868561247586613a3f565b61247f9190615356565b8f61248a9190615369565b6124949190615369565b61249e9190615380565b6124a89190615380565b95506124b88d8787878787613cff565b8a8610156124e35760405163272e3f5960e21b8152600481018c9052602481018790526044016113f8565b6124f08161013e54613d53565b96508987111561251d57604051630b63f1a760e01b8152600481018b9052602481018890526044016113f8565b604080518d8152602081018890529081018890528d908d906001600160a01b03808c1691908d169084907f0b0ee95633545edabb63afd3c3962a133536b36e2372f68c3c2722710ee0cd899060600160405180910390a450506125828c60008b613d72565b61258f8d8760008b613de9565b600061259b8b89613e74565b90506125a88a828a613e99565b505050505050965096945050505050565b60975460405163d994d6d560e01b81523360048201526001600160a01b039091169063d994d6d590602401602060405180830381865afa158015612601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262591906152cc565b6113ae57604051631dd1b1b560e21b815260040160405180910390fd5b600061264c613ba4565b6126546130c5565b60008061266361014654613c31565b91509150600080612675898585613ef2565b9092509050612684818361527e565b9450878511156126b157604051630b63f1a760e01b815260048101899052602481018690526044016113f8565b846000036126d25760405163f3e39b5d60e01b815260040160405180910390fd5b604080518a8152602081018790529081018290526001600160a01b0380881691908916907f62f0126e99b1936535db27571cea2b2d54db14a471b9203b29b31b89c300e4f69060600160405180910390a361272e898388613f33565b600061273a8987613e74565b9050612747888284613e99565b5050505050949350505050565b60008061275f613ba4565b6127676130c5565b60006127728961195a565b905061277e8982613bce565b60008061278d61014654613c31565b91509150600061279e8c8c86613705565b5090506127d7610132548c6127b39190615369565b85856127be86613a3f565b6127c89190615356565b6127d29190615369565b613f77565b9450898510806127e5575084155b1561280d5760405163f577bef560e01b8152600481018b9052602481018690526044016113f8565b61281a8161013d54613d53565b95508886111561284757604051630b63f1a760e01b8152600481018a9052602481018790526044016113f8565b604080518c8152602081018790529081018790528c908c906001600160a01b03808b1691908c169084907ff77b7563e0c6c33e0b804a715d94c82baea057d2e6f8bfdc211fe04d3c03bad99060600160405180910390a450506128ad8c8c60008b613f8c565b6128b985600089613f33565b60006128c58a88613e74565b90506128d2898289613e99565b5050505050965096945050505050565b6000806128ed613ba4565b6128f56130c5565b60006129008961195a565b905061290c8982613bce565b60008061291b61014754613c31565b91509150670de0b6b3a76400006101325484848d6129399190615369565b6129439190615369565b61294d9190615380565b6129579190615380565b93508884111561298457604051637a031da360e11b8152600481018a9052602481018590526044016113f8565b60008061299d8d8d88886129988989613089565b613fed565b90925090506129ac8183615356565b9650898710156129d9576040516354cde31360e01b8152600481018b9052602481018890526044016113f8565b604080518d815260208101889052908101889052606081018290528d908d9089906001600160a01b038c811691908e169085907f879e4419a6544de6ea456f6344b2fcf0c3b9fc0e6738c82fa4026a8789747c539060800160405180910390a4505050612a478c838b613d72565b612a548d8760008c613f8c565b6128d2888883613e99565b6000612a69613ba4565b612a716130c5565b6000612a7c8761195a565b9050612a888782613bce565b612a9461014654613c31565b5050600080612aa4898985613705565b9150915081600003612ac95760405163f3e39b5d60e01b815260040160405180910390fd5b612ad38183615356565b935086841015612b00576040516354cde31360e01b815260048101889052602481018590526044016113f8565b60408051898152602081018690529081018290526001600160a01b0380871691908816908b907f4716c9926ce32100e8a5b6ad71af5500ac55514d7b0c8f80f209856c9dfaeb929060600160405180910390a4612b5f89898489613f8c565b612b6a858583613e99565b50505095945050505050565b6000612b80613ba4565b612b886130c5565b6000612b938761195a565b9050612b9f8782613bce565b6000612ba96117fe565b9050600080612bb783613c31565b91509150612bc98a8a86868686613cff565b600080612bd78c8c8861402d565b9092509050612be6818361527e565b965089871115612c1357604051630b63f1a760e01b8152600481018b9052602481018890526044016113f8565b86600003612c345760405163f3e39b5d60e01b815260040160405180910390fd5b604080518c8152602081018990529081018290526001600160a01b03808a1691908b16908e907f05f8dfb23a03c1f9d37a1860fc8038ffdc6dec3e24db38cdb09cc0176b35453f9060600160405180910390a4612c938c8c848b613de9565b6000612c9f8b89613e74565b9050612cac8a8284613e99565b5050505050505095945050505050565b600080612cc7613ba4565b612ccf6130c5565b6000806000612cdd8a61195a565b9050612ce98a82613bce565b612cf561014754613c31565b5050612d018982614075565b91955093509150612d12828461527e565b945087851115612d3f57604051630b63f1a760e01b815260048101899052602481018690526044016113f8565b84600003612d605760405163f3e39b5d60e01b815260040160405180910390fd5b60408051858152602081018b9052908101869052606081018390526001600160a01b0380881691908916908c907fcd3821e3a6afec66fdfa7a942b879811bb9919b2f270de090b6e00178cd7eaee9060800160405180910390a4612dc5848488613f33565b612dd28a8a600089613de9565b6000612dde8987613e74565b9050612deb888285613e99565b505050509550959350505050565b600080612e04613ba4565b612e0c6130c5565b878903612e2c57604051632a9ffab760e21b815260040160405180910390fd5b6000612e378a61195a565b90506000612e448a61195a565b9050612e508b83613bce565b612e5a8a82613bce565b6000612e678c8b85613705565b50905082612e75838c615369565b612e7f9190615380565b935088841080612e8d575083155b15612eb55760405163272e3f5960e21b8152600481018a9052602481018590526044016113f8565b612ebf8c84613ae9565b612ec98c84613ae9565b1115612efd576000612ed96117fe565b9050600080612ee783613c31565b91509150612ef98e8887868686613cff565b5050505b612f0a8161013c54613d53565b945087851115612f3757604051630b63f1a760e01b815260048101899052602481018690526044016113f8565b604080518c8152602081018c9052908101859052606081018690528c908c908c906001600160a01b03808b1691908c169085907f77d2223aca09d9ec6e49d1b8cdcb0b40dec540a5f65daf1ecab069c822bff4609060800160405180910390a4505050612fa78b85600089613de9565b612fb48c8b60008a613f8c565b6000612fc08987613e74565b9050612fcd888288613e99565b5050505097509795505050505050565b610135546000908190815b81811015613074576000612ffb8261195a565b905060008061300a8484614104565b9150915061304882610135868154811061302657613026615291565b906000526020600020906002020160000154613042919061527e565b84613f77565b613052908861527e565b965061305e818761527e565b955050505061306d8160010190565b9050612fe8565b506130828261013754613d53565b9150509091565b6000610132546000036130a55750670de0b6b3a764000061114e565b61114b836130b284613a3f565b6130bc9190615356565b61013254613f77565b60ca54610100900460ff16156113ae5760405163783bb6c960e11b815260040160405180910390fd5b60006101305461012f54613102919061527e565b90508060000361310f5750565b610135546000808267ffffffffffffffff81111561312f5761312f615060565b604051908082528060200260200182016040528015613158578160200160208202803683370190505b50905060005b838110156131e95761316f8161195a565b82828151811061318157613181615291565b6020026020010181815250506131d561013582815481106131a4576131a4615291565b9060005260206000209060020201600001548383815181106131c8576131c8615291565b6020026020010151613f77565b6131df908461527e565b925060010161315e565b5060005b8381101561324357610136858484848151811061320c5761320c615291565b602002602001015161321e9190615369565b6132289190615380565b815460018082018455600093845260209093200155016131ed565b5050505050565b6114956125b9565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561328a576132858361416b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156132e4575060408051601f3d908101601f191682019092526132e1918101906153a2565b60015b6133475760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016113f8565b60008051602061551783398151915281146133b65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016113f8565b50613285838383614207565b6101355460009081908190815b8181101561347f5760006133e28261195a565b905060006133f08383614104565b509050600061343c670de0b6b3a764000083610135878154811061341657613416615291565b906000526020600020906002020160000154613432919061527e565b6130429190615369565b9050806134498585613ae9565b6134539190615369565b61345d908861527e565b9650613469818761527e565b95505050506134788160010190565b90506133cf565b50816000036134975761014654600202935050505090565b6134a18284615380565b935050505090565b6000806134b785858561422c565b90506134c38484613089565b6123d19082615380565b6113ae614276565b60006134df6130c5565b61014854610100900460ff166135085760405163031b0d3560e11b815260040160405180910390fd5b6000610133858154811061351e5761351e615291565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa158015613571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359591906153a2565b9050806000036135c257604051633fe8c5eb60e01b815260048101829052602481018290526044016113f8565b600061013686815481106135d8576135d8615291565b906000526020600020015490506135ef8282613f77565b9250610133868154811061360557613605615291565b600091825260209091200154604051632770a7eb60e21b81526001600160a01b0387811660048301526024820185905290911690639dc29fac90604401600060405180830381600087803b15801561365c57600080fd5b505af1158015613670573d6000803e3d6000fd5b505050508261367e30613a5e565b10156136905761368d30613a5e565b92505b836001600160a01b0316856001600160a01b0316877f4716c9926ce32100e8a5b6ad71af5500ac55514d7b0c8f80f209856c9dfaeb92858760006040516136ea939291909283526020830191909152604082015260600190565b60405180910390a46136fc8484614437565b50509392505050565b6000808360000361372957604051632a9ffab760e21b815260040160405180910390fd5b6137338484613f77565b915061375d82610142878154811061374d5761374d615291565b9060005260206000200154613d53565b9050935093915050565b60008260000361377a575060001961114e565b61114b61304283613a3f565b6000613790613ba4565b6137986130c5565b60006137a26117fe565b90506000806137b083613c31565b915091506137c088848484613c7f565b6000806137ce8a8585613cb9565b91509150816000036137f35760405163f3e39b5d60e01b815260040160405180910390fd5b6137fd8183615356565b95508886101561382a576040516354cde31360e01b8152600481018a9052602481018790526044016113f8565b604080518b8152602081018890529081018290526001600160a01b0380891691908a16907f2d184907c04672620e3c88a12a39d6a603dd26373427842aa172eb3e5bfcff079060600160405180910390a36138868a838a613d72565b612747878783613e99565b600054610100900460ff166138b85760405162461bcd60e51b81526004016113f8906153bb565b6138e46138cd61020083016101e08401614eeb565b6138df61022084016102008501614eeb565b614455565b6138ed81614498565b6138fb8161022001356146fd565b611495816102400135614757565b60008061391583613a3f565b90506115cc816127d28682615356565b600061017d828154811061393b5761393b615291565b6000918252602080832060408051808201909152600290930201805483526001015490820152915061396c8361195a565b905060008260200151670de0b6b3a76400006139889190615356565b83516139949190615369565b905060008284602001516139a89190615369565b90506000670de0b6b3a76400006139bf838561527e565b6139c99190615380565b90508061017d87815481106139e0576139e0615291565b6000918252602090912060029091020155845160405187917f19156e9379c7bbbce8f646ce5ee30ba860b8f954717405f3d5859a6c1a21ae6091613a2f91908590918252602082015260400190565b60405180910390a2505050505050565b6000816101305461012f54613a54919061527e565b61114e9190615356565b610218546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015613aaa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e91906153a2565b8061012f6000828254613ae1919061527e565b909155505050565b6000806101458481548110613b0057613b00615291565b90600052602060002001549050600061017d8581548110613b2357613b23615291565b9060005260206000209060020201600001549050838110613b465750905061114e565b80613b518584615369565b6123d19190615380565b6000670de0b6b3a7640000613b708187615356565b85613b7c89878761422c565b613b869190615369565b613b909190615380565b613b9a9190615380565b9695505050505050565b61014854610100900460ff16156113ae57604051631ca61d7760e01b815260040160405180910390fd5b613bd88282614795565b6101498381548110613bec57613bec615291565b906000526020600020016000828254613c059190615406565b925050819055508061014a8381548110613c2157613c21615291565b6000918252602090912001555050565b600080613c3c612fdd565b90925090506000613c4d8383613767565b9050838111613c7957604051637912120160e01b815260048101829052602481018590526044016113f8565b50915091565b6000613c8c8484846134a9565b9050848110156132435760405163a5db715d60e01b815260048101869052602481018290526044016113f8565b60008084600003613cdd57604051632a9ffab760e21b815260040160405180910390fd5b613cf085613ceb8686613089565b613d53565b915061375d8261013b54613d53565b6000613d0b8786613ae9565b90506000613d1c8583888787613b5b565b905086811015613d495760405163c39b739f60e01b815260048101889052602481018290526044016113f8565b5050505050505050565b6000670de0b6b3a7640000613d688385615369565b61114b9190615380565b613d7c8383614811565b61013154604051632770a7eb60e21b81526001600160a01b0383811660048301526024820186905290911690639dc29fac906044015b600060405180830381600087803b158015613dcc57600080fd5b505af1158015613de0573d6000803e3d6000fd5b50505050505050565b613df4848484614847565b6101338481548110613e0857613e08615291565b6000918252602090912001546040516340c10f1960e01b81526001600160a01b03838116600483015260248201869052909116906340c10f19906044015b600060405180830381600087803b158015613e6057600080fd5b505af1158015613d49573d6000803e3d6000fd5b61021854600090613e90906001600160a01b031633308561488b565b50600092915050565b6000613ea86101395483613d53565b90508061012f6000828254613ebd919061527e565b909155505061014354613ee2906001600160a01b0316613edd8385615356565b614437565b613eec8484614437565b50505050565b60008084600003613f1657604051632a9ffab760e21b815260040160405180910390fd5b613f2485613ceb8686613089565b915061375d8261013a54613d53565b613f3d83836148f6565b610131546040516340c10f1960e01b81526001600160a01b03838116600483015260248201869052909116906340c10f1990604401613db2565b600081613d68670de0b6b3a764000085615369565b613f97848484614918565b6101338481548110613fab57613fab615291565b600091825260209091200154604051632770a7eb60e21b81526001600160a01b0383811660048301526024820186905290911690639dc29fac90604401613e46565b600080613ffb878686613705565b5091506140088684613d53565b614012908361527e565b91506140218261013f54613d53565b90509550959350505050565b6000808360000361405157604051632a9ffab760e21b815260040160405180910390fd5b61405b8484613f77565b915061375d82610141878154811061374d5761374d615291565b6000806000806000614085612fdd565b9150915060006140958383613089565b905086670de0b6b3a76400006140a96133c2565b6140b39190615356565b6140bd908a615369565b6140c79190615380565b94506140d38582613f77565b95506140df8888613f77565b6140e9908661527e565b94506140f88561014054613d53565b93505050509250925092565b60008060006141138585614795565b610149868154811061412757614127615291565b906000526020600020015461413c9190615406565b905060008113156141635780915061416061415a6101385486613d53565b83613d53565b92505b509250929050565b6001600160a01b0381163b6141d85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016113f8565b60008051602061551783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61421083614971565b60008251118061421d5750805b1561328557613eec83836149b1565b6000836142398484613767565b11614246575060006111ce565b6142508385615369565b670de0b6b3a764000061426284613a3f565b61426c9190615369565b6111cb9190615356565b61013554600090818167ffffffffffffffff81111561429757614297615060565b6040519080825280602002602001820160405280156142c0578160200160208202803683370190505b50905060005b828110156143b45760006142d98261195a565b90506142e58282613bce565b600061014983815481106142fb576142fb615291565b9060005260206000200154905060008113156143aa576143276143216101385484613d53565b82613d53565b84848151811061433957614339615291565b602090810291909101015261434e818761527e565b95506000610149848154811061436657614366615291565b90600052602060002001819055506143aa8385858151811061438a5761438a615291565b6020908102919091010151610144546000906001600160a01b0316613de9565b50506001016142c6565b5082156143f9576143c88361013754613d53565b92508261012f60008282546143dd9190615356565b9091555050610143546143f9906001600160a01b031684614437565b7fae5116a8119d08673a0f1dfa7546b95da4bd54bb17feda7c61130ac7859152f6838260405161442a92919061542e565b60405180910390a1505050565b80156116a057610218546116a0906001600160a01b03168383614a9c565b600054610100900460ff1661447c5760405162461bcd60e51b81526004016113f8906153bb565b614484614acc565b61448d82614af3565b6116a0816001614b23565b600054610100900460ff166144bf5760405162461bcd60e51b81526004016113f8906153bb565b670de0b6b3a7640000816060013510156144ec57604051632a9ffab760e21b815260040160405180910390fd5b6144f98160a00135614b86565b6145068160c00135614b86565b6145138160e00135614b86565b614521816101000135614b86565b61452f816101200135614b86565b61453d816101400135614b86565b61454b816101600135614b86565b614559816101800135614b86565b6145756145706101c08301356101a084013561527e565b614b86565b6145826020820182614eeb565b61013180546001600160a01b0319166001600160a01b0392909216918217905560405163d55fd84560e01b815230600482015263d55fd84590602401602060405180830381865afa1580156145db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ff91906152cc565b61461c5760405163e6c4247b60e01b815260040160405180910390fd5b61462c6040820160208301614eeb565b61014380546001600160a01b0319166001600160a01b039290921691909117905561465d6060820160408301614eeb565b61014480546001600160a01b0319166001600160a01b039290921691909117905560608101356101465560808101356101475560a08101356101395560c081013561013a5560e081013561013b5561010081013561013c5561012081013561013d556101408082013561013e5561016082013561013f5561018082013590556101a0810135610137556101c0013561013855610148805461ffff19169055565b600054610100900460ff166147245760405162461bcd60e51b81526004016113f8906153bb565b8060000361474557604051632a9ffab760e21b815260040160405180910390fd5b61017f81905561149581430161017e55565b600054610100900460ff1661477e5760405162461bcd60e51b81526004016113f8906153bb565b6101b281905561478e814361527e565b6101b35550565b600080670de0b6b3a764000061013585815481106147b5576147b5615291565b9060005260206000209060020201600001546147d19190615369565b90506147dd8382615380565b61014a85815481106147f1576147f1615291565b9060005260206000200154826148079190615380565b6115cc919061547c565b8161013260008282546148249190615356565b925050819055508061012f600082825461483e9190615356565b90915550505050565b81610135848154811061485c5761485c615291565b9060005260206000209060020201600001600082825461487c919061527e565b90915550613285905081613ace565b6040516001600160a01b0380851660248301528316604482015260648101829052613eec9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614baf565b816101326000828254614909919061527e565b909155506116a0905081613ace565b81610135848154811061492d5761492d615291565b9060005260206000209060020201600001600082825461494d9190615356565b925050819055508061012f60008282546149679190615356565b9091555050505050565b61497a8161416b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614a195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016113f8565b600080846001600160a01b031684604051614a3491906154c7565b600060405180830381855af49150503d8060008114614a6f576040519150601f19603f3d011682016040523d82523d6000602084013e614a74565b606091505b50915091506123d1828260405180606001604052806027815260200161553760279139614c81565b6040516001600160a01b03831660248201526044810182905261328590849063a9059cbb60e01b906064016148bf565b600054610100900460ff166113ae5760405162461bcd60e51b81526004016113f8906153bb565b600054610100900460ff16614b1a5760405162461bcd60e51b81526004016113f8906153bb565b61149581614c9a565b600054610100900460ff16614b4a5760405162461bcd60e51b81526004016113f8906153bb565b60ca80546001600160a01b03909316620100000262010000600160b01b03199215159290921661ff01600160b01b031990931692909217179055565b670de0b6b3a764000081111561149557604051632a9ffab760e21b815260040160405180910390fd5b6000614c04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614cc19092919063ffffffff16565b8051909150156132855780806020019051810190614c2291906152cc565b6132855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016113f8565b60608315614c905750816111ce565b6111ce8383614cd0565b600054610100900460ff166120715760405162461bcd60e51b81526004016113f8906153bb565b60606111cb8484600085614cfa565b815115614ce05781518083602001fd5b8060405162461bcd60e51b81526004016113f891906154e3565b606082471015614d5b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016113f8565b600080866001600160a01b03168587604051614d7791906154c7565b60006040518083038185875af1925050503d8060008114614db4576040519150601f19603f3d011682016040523d82523d6000602084013e614db9565b606091505b5091509150614dca87838387614dd5565b979650505050505050565b60608315614e44578251600003614e3d576001600160a01b0385163b614e3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113f8565b50816115cc565b6115cc8383614cd0565b6001600160a01b038116811461149557600080fd5b600080600080600060a08688031215614e7b57600080fd5b853594506020860135935060408601359250606086013591506080860135614ea281614e4e565b809150509295509295909350565b600060208284031215614ec257600080fd5b5035919050565b60008060408385031215614edc57600080fd5b50508035926020909101359150565b600060208284031215614efd57600080fd5b81356111ce81614e4e565b60008060008060808587031215614f1e57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215614f4f57600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215614f7c57600080fd5b8435935060208501359250604085013591506060850135614f9c81614e4e565b939692955090935050565b60008060008060008060c08789031215614fc057600080fd5b863595506020870135945060408701359350606087013592506080870135915060a0870135614fee81614e4e565b809150509295509295509295565b801515811461149557600080fd5b60006020828403121561501c57600080fd5b81356111ce81614ffc565b60008060006060848603121561503c57600080fd5b8335925060208401359150604084013561505581614e4e565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561508957600080fd5b823561509481614e4e565b9150602083013567ffffffffffffffff808211156150b157600080fd5b818501915085601f8301126150c557600080fd5b8135818111156150d7576150d7615060565b604051601f8201601f19908116603f011681019083821181831017156150ff576150ff615060565b8160405282815288602084870101111561511857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561514d57600080fd5b82359150602083013561515f81614e4e565b809150509250929050565b6000610280828403121561517d57600080fd5b50919050565b600080600080600060a0868803121561519b57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060e0828403121561517d57600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561114e5761114e615268565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156152ba57600080fd5b82519150602083015161515f81614ffc565b6000602082840312156152de57600080fd5b81516111ce81614ffc565b60e0810182356152f881614e4e565b6001600160a01b03908116835260208401359061531482614e4e565b8082166020850152505060408301356040830152606083013560608301526080830135608083015260a083013560a083015260c083013560c083015292915050565b8181038181111561114e5761114e615268565b808202811582820484141761114e5761114e615268565b60008261539d57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156153b457600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b808201828112600083128015821682158216171561542657615426615268565b505092915050565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561546f57845183529383019391830191600101615453565b5090979650505050505050565b818103600083128015838313168383128216171561549c5761549c615268565b5092915050565b60005b838110156154be5781810151838201526020016154a6565b50506000910152565b600082516154d98184602087016154a3565b9190910192915050565b60208152600082518060208401526155028160408501602087016154a3565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c82bbc78faff99b5f7dacb06d56738247d8da7bc3d2fce6c1b6514731bd989f464736f6c63430008110033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`tpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "calcCtargemaCA()": {
        "details": "qAC = nTP / pACtp      ctargemaCA = ∑(ctargemaTP * qAC) / ∑(qAC)",
        "returns": {
          "ctargemaCA": "[PREC]"
        }
      },
      "changeGovernor(address)": {
        "params": {
          "newGovernor_": "New governor address"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "details": "Note that the ema value, should consider `nextEmaCalculation`tpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - the tpTokenAddress must exists",
        "params": {
          "peggedTokenParams_": "params of Pegged Token to add"
        }
      },
      "getCglb()": {
        "returns": {
          "cglob": "[PREC]"
        }
      },
      "getLeverageTC()": {
        "returns": {
          "leverageTC": "[PREC]"
        }
      },
      "getPACtp(uint256)": {
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "_0": "price [PREC]"
        }
      },
      "getPTCac()": {
        "returns": {
          "pTCac": "[PREC]"
        }
      },
      "getQACforRedeemTP(uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qTP_": "amount of Pegged Token to redeem"
        },
        "returns": {
          "qACfee": "amount of Collateral Asset in concept of fees [N]",
          "qACtotalToRedeem": "amount of Collateral Asset needed to redeem, including fees [N]"
        }
      },
      "getTCAvailableToRedeem()": {
        "details": "because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TC available to redeem. Consider it an approximation.",
        "returns": {
          "tcAvailableToRedeem": "[N]"
        }
      },
      "getTPAvailableToMint(uint256)": {
        "details": "because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TP available to mint. Consider it an approximation.",
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "tpAvailableToMint": "[N]"
        }
      },
      "getTotalACavailable()": {
        "returns": {
          "totalACavailable": "[N]"
        }
      },
      "initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))": {
        "details": "governorAddress The address that will define when a change contract is authorized      pauserAddress The address that is authorized to pause this contract      acTokenAddress Collateral Asset Token contract address      tcTokenAddress Collateral Token contract address      mocFeeFlowAddress Moc Fee Flow contract address      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address      protThrld protected state threshold [PREC]      liqThrld liquidation coverage threshold [PREC]      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]      successFee pct of the gain because Pegged Tokens devaluation that is transferred        in Collateral Asset to Moc Fee Flow during the settlement [PREC]      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation",
        "params": {
          "initializeParams_": "contract initializer params"
        }
      },
      "isLiquidationReached()": {
        "returns": {
          "_0": "true if liquidation state is reached, false otherwise"
        }
      },
      "liqRedeemTP(uint256)": {
        "params": {
          "i_": "Pegged Token index"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender"
        }
      },
      "liqRedeemTPto(uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "recipient_": "address who receives the AC"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to `recipient_`"
        }
      },
      "makeStoppable()": {
        "details": "Should be called through governance"
      },
      "makeUnstoppable()": {
        "details": "Should be called through governance"
      },
      "mintTC(uint256,uint256)": {
        "params": {
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTC_": "amount of Collateral Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC"
        }
      },
      "mintTCandTP(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTP_": "amount of Pegged Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCandTPto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Collateral Token and Pegged Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint Collateral Token and Pegged Token",
          "qTCtoMint": "amount of Collateral Token minted"
        }
      },
      "mintTCto(uint256,uint256,address)": {
        "params": {
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTC_": "amount of Collateral Token to mint",
          "recipient_": "address who receives the Collateral Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTC"
        }
      },
      "mintTP(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index to mint",
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTP_": "amount of Pegged Token to mint"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP"
        }
      },
      "mintTPto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index to mint",
          "qACmax_": "maximum amount of Collateral Asset that can be spent",
          "qTP_": "amount of Pegged Token to mint",
          "recipient_": "address who receives the Pegged Token"
        },
        "returns": {
          "qACtotalNeeded": "amount of AC used to mint qTP"
        }
      },
      "pause()": {
        "details": "Should only be called by the pauser and when it is stoppable"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemTC(uint256,uint256)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTC_": "amount of Collateral Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender"
        }
      },
      "redeemTCandTP(uint256,uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that the sender expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the sender",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "maximum amount of Collateral Token to redeem",
          "qTP_": "maximum amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to the `recipient_`",
          "qTPRedeemed": "amount of Pegged Token redeemed"
        }
      },
      "redeemTCto(uint256,uint256,address)": {
        "params": {
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTC_": "amount of Collateral Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'"
        }
      },
      "redeemTP(uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that sender expects to receive",
          "qTP_": "amount of Pegged Token to redeem"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to sender"
        }
      },
      "redeemTPto(uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index to redeem",
          "qACmin_": "minimum amount of Collateral Asset that `recipient_` expects to receive",
          "qTP_": "amount of Pegged Token to redeem",
          "recipient_": "address who receives the Collateral Asset"
        },
        "returns": {
          "qACRedeemed": "amount of AC sent to 'recipient_'"
        }
      },
      "refreshACBalance()": {
        "details": "Intended to be use as notification after an RC20 AC transfer to this contract"
      },
      "setAppreciationFactor(uint256)": {
        "details": "sets appreciation Factor value.",
        "params": {
          "appreciationFactor_": "pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]"
        }
      },
      "setBes(uint256)": {
        "params": {
          "bes_": "number of blocks between settlements*"
        }
      },
      "setEmaCalculationBlockSpan(uint256)": {
        "params": {
          "blockSpan_": "Defines how many blocks should pass between BMA calculations*"
        }
      },
      "setFeeRetainer(uint256)": {
        "details": "sets the fee pct to be retainer on AC fees payments as AC re-injection.",
        "params": {
          "feeRetainer_": "pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setLiqEnabled(bool)": {
        "details": "enables and disables the liquidation mechanism.",
        "params": {
          "liqEnabled_": "is liquidation enabled"
        }
      },
      "setLiqThrld(uint256)": {
        "details": "sets the value of the liq threshold configuration param",
        "params": {
          "liqThrld_": "liquidation threshold"
        }
      },
      "setMintTCandTPFee(uint256)": {
        "details": "sets the fee charged when mint Collateral Token and Pegged Token in one operation.",
        "params": {
          "mintTCandTPFee_": "additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setMocAppreciationBeneficiaryAddress(address)": {
        "details": "sets Moc Appreciation Beneficiary Address",
        "params": {
          "mocAppreciationBeneficiaryAddress_": "moc Appreciation Beneficiary new address"
        }
      },
      "setMocFeeFlowAddress(address)": {
        "details": "sets Moc Fee Flow contract address",
        "params": {
          "mocFeeFlowAddress_": "moc Fee Flow new contract address"
        }
      },
      "setPauser(address)": {
        "details": "Should be called through governance",
        "params": {
          "newPauser_": "Address of the new pauser"
        }
      },
      "setProtThrld(uint256)": {
        "details": "sets the value of the protected threshold configuration param",
        "params": {
          "protThrld_": "coverage protected state threshold [PREC]"
        }
      },
      "setRedeemTCandTPFee(uint256)": {
        "details": "sets the fee charged when redeem Collateral Token and Pegged Token in one operation.",
        "params": {
          "redeemTCandTPFee_": "additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSuccessFee(uint256)": {
        "details": "sets success Fee value.",
        "params": {
          "successFee_": "pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]"
        }
      },
      "setSwapTCforTPFee(uint256)": {
        "details": "sets the fee charged when swap Collateral Token for a Pegged Token.",
        "params": {
          "swapTCforTPFee_": "additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTCFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for Collateral Token.",
        "params": {
          "swapTPforTCFee_": "additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setSwapTPforTPFee(uint256)": {
        "details": "sets the fee charged when swap a Pegged Token for another Pegged Token.",
        "params": {
          "swapTPforTPFee_": "additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTcMintFee(uint256)": {
        "details": "sets the fee charged on Token Collateral mint.",
        "params": {
          "tcMintFee_": "addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "setTcRedeemFee(uint256)": {
        "details": "sets the fee charged on Token Collateral redeem.",
        "params": {
          "tcRedeemFee_": "addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18"
        }
      },
      "swapTCforTP(uint256,uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTC_": "amount of Collateral Token to swap",
          "qTPmin_": "minimum amount of Pegged Token that the sender expects to receive"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTCforTPto(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTC_": "amount of Collateral Token to swap",
          "qTPmin_": "minimum amount of Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the Pegged Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTC(uint256,uint256,uint256,uint256)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTCmin_": "minimum amount of Collateral Token that the sender expects to receive",
          "qTP_": "amount of owned Pegged Token to swap"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTCto(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i_": "Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTCmin_": "minimum amount of Collateral Token that `recipient_` expects to receive",
          "qTP_": "amount of owned Pegged Token to swap",
          "recipient_": "address who receives the Collateral Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Collateral Token minted"
        }
      },
      "swapTPforTP(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that the sender expects to receive"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "iFrom_": "owned Pegged Token index",
          "iTo_": "target Pegged Token index",
          "qACmax_": "maximum amount of Collateral Asset that can be spent in fees",
          "qTP_": "amount of owned Pegged Token to swap",
          "qTPmin_": "minimum amount of target Pegged Token that `recipient_` expects to receive",
          "recipient_": "address who receives the target Pegged Token"
        },
        "returns": {
          "qACFee": "amount of AC used to pay fee",
          "qTPMinted": "amount of Pegged Token minted"
        }
      },
      "updateEmas()": {
        "details": "All price provider prices must be available, fails if not"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "MocCARC20: Moc Collateral Asset RC20",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_13857": {
          "entryPoint": null,
          "id": 13857,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_9124": {
          "entryPoint": null,
          "id": 9124,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_disableInitializers_1117": {
          "entryPoint": 48,
          "id": 1117,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:608:73",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:73",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "188:229:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "205:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "216:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "198:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "198:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "198:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "239:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "250:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "235:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "235:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "255:2:73",
                            "type": "",
                            "value": "39"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "228:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "228:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "228:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "278:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "289:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "274:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "274:18:73"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "294:34:73",
                            "type": "",
                            "value": "Initializable: contract is initi"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "267:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "267:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "267:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "349:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "360:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "345:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "345:18:73"
                          },
                          {
                            "hexValue": "616c697a696e67",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "365:9:73",
                            "type": "",
                            "value": "alizing"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "338:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "338:37:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "338:37:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "384:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "396:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "407:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "392:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "392:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "384:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "165:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "179:4:73",
                    "type": ""
                  }
                ],
                "src": "14:403:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "519:87:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "529:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "541:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "552:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "537:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "537:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "529:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "571:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "586:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "594:4:73",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "582:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "582:17:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "564:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "564:36:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "564:36:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "488:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "499:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "510:4:73",
                    "type": ""
                  }
                ],
                "src": "422:184:73"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}",
          "id": 73,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x20 PUSH3 0x30 JUMP JUMPDEST PUSH3 0x2A PUSH3 0x30 JUMP JUMPDEST PUSH3 0xF2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND LT ISZERO PUSH3 0xF0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x5593 PUSH3 0x12A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x13BA ADD MSTORE DUP2 DUP2 PUSH2 0x1403 ADD MSTORE DUP2 DUP2 PUSH2 0x15DE ADD MSTORE DUP2 DUP2 PUSH2 0x161E ADD MSTORE PUSH2 0x16E7 ADD MSTORE PUSH2 0x5593 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x574 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70713468 GT PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xBB4872DE GT PUSH2 0x180 JUMPI DUP1 PUSH4 0xE4012945 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0xF26114AA GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF375CFBA GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF375CFBA EQ PUSH2 0x1080 JUMPI DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x1097 JUMPI DUP1 PUSH4 0xFA79589E EQ PUSH2 0x10AE JUMPI DUP1 PUSH4 0xFDA70F8B EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF26114AA EQ PUSH2 0x1029 JUMPI DUP1 PUSH4 0xF2808778 EQ PUSH2 0x1049 JUMPI DUP1 PUSH4 0xF30B5614 EQ PUSH2 0x1069 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE4012945 EQ PUSH2 0xF86 JUMPI DUP1 PUSH4 0xE4C0AAF4 EQ PUSH2 0xFA6 JUMPI DUP1 PUSH4 0xE6B1627C EQ PUSH2 0xFC6 JUMPI DUP1 PUSH4 0xE7C25978 EQ PUSH2 0xFE6 JUMPI DUP1 PUSH4 0xE8859A15 EQ PUSH2 0x1001 JUMPI DUP1 PUSH4 0xF21FCC00 EQ PUSH2 0x1016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCEECC55A GT PUSH2 0x139 JUMPI DUP1 PUSH4 0xCEECC55A EQ PUSH2 0xEE7 JUMPI DUP1 PUSH4 0xD1A0FAA0 EQ PUSH2 0xF07 JUMPI DUP1 PUSH4 0xDB796072 EQ PUSH2 0xF1C JUMPI DUP1 PUSH4 0xDE08160F EQ PUSH2 0xF3C JUMPI DUP1 PUSH4 0xDE8D520A EQ PUSH2 0xF5C JUMPI DUP1 PUSH4 0xE23C135C EQ PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBB4872DE EQ PUSH2 0xE38 JUMPI DUP1 PUSH4 0xBBBA7ED9 EQ PUSH2 0xE52 JUMPI DUP1 PUSH4 0xBECACA6B EQ PUSH2 0xE72 JUMPI DUP1 PUSH4 0xC00F538D EQ PUSH2 0xE92 JUMPI DUP1 PUSH4 0xC039CC69 EQ PUSH2 0xEB2 JUMPI DUP1 PUSH4 0xC84353C9 EQ PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0x23F JUMPI DUP1 PUSH4 0x9AD6659D GT PUSH2 0x1F8 JUMPI DUP1 PUSH4 0x9FD0506D GT PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x9FD0506D EQ PUSH2 0xDC2 JUMPI DUP1 PUSH4 0xA8E9AC30 EQ PUSH2 0xDE8 JUMPI DUP1 PUSH4 0xAEA038DC EQ PUSH2 0xE01 JUMPI DUP1 PUSH4 0xBB2AC788 EQ PUSH2 0xE18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9AD6659D EQ PUSH2 0xD40 JUMPI DUP1 PUSH4 0x9BDD7CCE EQ PUSH2 0xD55 JUMPI DUP1 PUSH4 0x9CABFC00 EQ PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xC93 JUMPI DUP1 PUSH4 0x8CFA4241 EQ PUSH2 0xCA8 JUMPI DUP1 PUSH4 0x904AA85B EQ PUSH2 0xCBF JUMPI DUP1 PUSH4 0x9195C85B EQ PUSH2 0xCDF JUMPI DUP1 PUSH4 0x9853C35A EQ PUSH2 0xCFF JUMPI DUP1 PUSH4 0x9ABB14C9 EQ PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7A4FF1D9 GT PUSH2 0x291 JUMPI DUP1 PUSH4 0x7A4FF1D9 EQ PUSH2 0xBE7 JUMPI DUP1 PUSH4 0x7A727FE8 EQ PUSH2 0xC07 JUMPI DUP1 PUSH4 0x7AF5758C EQ PUSH2 0xC1E JUMPI DUP1 PUSH4 0x7CBA2383 EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0x7D8E0314 EQ PUSH2 0xC5E JUMPI DUP1 PUSH4 0x826FCD58 EQ PUSH2 0xC7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70713468 EQ PUSH2 0xB42 JUMPI DUP1 PUSH4 0x7554FFFD EQ PUSH2 0xB62 JUMPI DUP1 PUSH4 0x7750BA0C EQ PUSH2 0xB79 JUMPI DUP1 PUSH4 0x7820A328 EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0x79F9A91C EQ PUSH2 0xBB9 JUMPI DUP1 PUSH4 0x7A193C31 EQ PUSH2 0xBD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33421C38 GT PUSH2 0x43B JUMPI DUP1 PUSH4 0x4F0F27EE GT PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x5C616A73 GT PUSH2 0x35B JUMPI DUP1 PUSH4 0x60009E0B GT PUSH2 0x335 JUMPI DUP1 PUSH4 0x60009E0B EQ PUSH2 0xAE0 JUMPI DUP1 PUSH4 0x662013F4 EQ PUSH2 0xB01 JUMPI DUP1 PUSH4 0x68274357 EQ PUSH2 0xB16 JUMPI DUP1 PUSH4 0x6B5488DF EQ PUSH2 0xB2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C616A73 EQ PUSH2 0xA8E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xAA3 JUMPI DUP1 PUSH4 0x5D65D045 EQ PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F0F27EE EQ PUSH2 0x9FA JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0x5210570C EQ PUSH2 0xA24 JUMPI DUP1 PUSH4 0x5241271C EQ PUSH2 0xA39 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xA59 JUMPI DUP1 PUSH4 0x54A73C62 EQ PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4310ADC6 GT PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x4310ADC6 EQ PUSH2 0x925 JUMPI DUP1 PUSH4 0x4454AE8B EQ PUSH2 0x945 JUMPI DUP1 PUSH4 0x4B746001 EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0x4CFFBAAB EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0x4D977E78 EQ PUSH2 0x9C2 JUMPI DUP1 PUSH4 0x4E1F907A EQ PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33421C38 EQ PUSH2 0x88F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x8A4 JUMPI DUP1 PUSH4 0x3BC4AC0A EQ PUSH2 0x8C4 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0x4017936A EQ PUSH2 0x8F9 JUMPI DUP1 PUSH4 0x407F0E34 EQ PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1867E2F5 GT PUSH2 0x4DF JUMPI DUP1 PUSH4 0x23B98CDE GT PUSH2 0x498 JUMPI DUP1 PUSH4 0x23B98CDE EQ PUSH2 0x7D1 JUMPI DUP1 PUSH4 0x27EAB2A1 EQ PUSH2 0x801 JUMPI DUP1 PUSH4 0x2A20D57D EQ PUSH2 0x821 JUMPI DUP1 PUSH4 0x2C43BD3B EQ PUSH2 0x838 JUMPI DUP1 PUSH4 0x2D88AF4A EQ PUSH2 0x858 JUMPI DUP1 PUSH4 0x333431FD EQ PUSH2 0x878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1867E2F5 EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0x1A89B8F2 EQ PUSH2 0x749 JUMPI DUP1 PUSH4 0x1F1138A6 EQ PUSH2 0x75C JUMPI DUP1 PUSH4 0x1FB0DDA0 EQ PUSH2 0x77C JUMPI DUP1 PUSH4 0x1FE6A7AD EQ PUSH2 0x791 JUMPI DUP1 PUSH4 0x2069F753 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD6AC463 GT PUSH2 0x531 JUMPI DUP1 PUSH4 0xD6AC463 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0xE0A8FD2 EQ PUSH2 0x692 JUMPI DUP1 PUSH4 0x1301A8F0 EQ PUSH2 0x6B2 JUMPI DUP1 PUSH4 0x17574BC5 EQ PUSH2 0x6D2 JUMPI DUP1 PUSH4 0x17DF0AB8 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0x181770DA EQ PUSH2 0x712 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1CDED9C EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0x1DDE6EF EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0x1F1B684 EQ PUSH2 0x5D5 JUMPI DUP1 PUSH4 0xBB7F608 EQ PUSH2 0x60D JUMPI DUP1 PUSH4 0xC340A24 EQ PUSH2 0x63B JUMPI DUP1 PUSH4 0xC36D897 EQ PUSH2 0x65B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x5CE CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F5 PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x68D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x1154 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x6AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x6CD CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x118D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x6ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x11AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x70D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x72D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x11D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1B3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x599 PUSH2 0x757 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x11E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x777 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA7 JUMP JUMPDEST PUSH2 0x11F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1215 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x7AC CALLDATASIZE PUSH1 0x4 PUSH2 0x500A JUMP JUMPDEST PUSH2 0x1237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x7CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 SLOAD PUSH2 0x7F1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x81C CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x853 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x128C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x873 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x129A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13D SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x12CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x8BF CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x8DF CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1498 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x14A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1540 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13C SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x940 CALLDATASIZE PUSH1 0x4 PUSH2 0x5027 JUMP JUMPDEST PUSH2 0x1563 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x960 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x1571 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x985 PUSH2 0x980 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1582 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x9BD CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x15BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1B2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x139 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x5D3 PUSH2 0xA1F CALLDATASIZE PUSH1 0x4 PUSH2 0x5076 JUMP JUMPDEST PUSH2 0x15D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x16A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xA54 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x16B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x16DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xA89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x178D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x179C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xADB CALLDATASIZE PUSH1 0x4 PUSH2 0x513A JUMP JUMPDEST PUSH2 0x17F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x131 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1815 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x146 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xB5D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x182C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x137 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xB94 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x183A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xBB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x1848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x140 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x132 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC02 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1869 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC39 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1877 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC59 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1893 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x18A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x18BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x147 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xCDA CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xCFA CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1A24 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xD3B CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x1A31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F1 PUSH2 0x1A3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xD70 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x1A6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDAD PUSH2 0xD90 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x134 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x5F5 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17E SLOAD NUMBER LT ISZERO PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13B SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xE33 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x1A7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x7F1 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xE6D CALLDATASIZE PUSH1 0x4 PUSH2 0x516A JUMP JUMPDEST PUSH2 0x1A8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xE8D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xEAD CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1BED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xEE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1C08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xF02 CALLDATASIZE PUSH1 0x4 PUSH2 0x5183 JUMP JUMPDEST PUSH2 0x1C16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1C28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xF37 CALLDATASIZE PUSH1 0x4 PUSH2 0x51BE JUMP JUMPDEST PUSH2 0x1C62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xF57 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1FEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x2000 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x201D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xFA1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5027 JUMP JUMPDEST PUSH2 0x205B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xFC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x2069 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xFE1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 SLOAD PUSH2 0x7F1 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x20C2 JUMP JUMPDEST PUSH2 0x599 PUSH2 0x1024 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x20E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1044 CALLDATASIZE PUSH1 0x4 PUSH2 0x51BE JUMP JUMPDEST PUSH2 0x20FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1064 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2389 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1075 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x12F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x108C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x138 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x10C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2397 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x23DA JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x110C PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x138 SSTORE JUMP JUMPDEST PUSH2 0x133 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 DUP4 CALLER CALLER PUSH2 0x2642 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x115C PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x143 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1187 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13D SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x2754 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 DUP5 CALLER CALLER PUSH2 0x2A5F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 DUP5 CALLER CALLER PUSH2 0x2B76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 CALLER DUP8 PUSH2 0x2CBC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1206 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER DUP10 PUSH2 0x2DF9 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1222 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3089 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x123F PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x148 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x125B PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x140 SSTORE JUMP JUMPDEST PUSH2 0x1269 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x144 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1294 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x147 SSTORE JUMP JUMPDEST PUSH2 0x12A2 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH3 0x10000 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12D4 PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x12F0 JUMPI POP PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x12FF JUMPI POP PUSH2 0x12FF PUSH2 0x1A3F JUMP JUMPDEST ISZERO PUSH2 0x13AE JUMPI PUSH2 0x148 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x131 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x13AE PUSH2 0x30EE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1401 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x51D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x144A PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1470 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1479 DUP2 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1495 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x3252 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x14A0 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x17F SSTORE JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x154D PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 PUSH2 0x155C PUSH2 0x33C2 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x34A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 CALLER DUP6 PUSH2 0x2642 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x2754 JUMP JUMPDEST PUSH2 0x135 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C9 DUP6 DUP6 DUP6 CALLER DUP7 PUSH2 0x2B76 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x161C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x51D0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1665 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x168B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1694 DUP3 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x16A0 DUP3 DUP3 PUSH1 0x1 PUSH2 0x3252 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16AC PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x142 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x177A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C9 DUP6 DUP6 DUP6 CALLER DUP7 PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x17A4 PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x1B3 SLOAD NUMBER LT PUSH2 0x13AE JUMPI PUSH2 0x1B2 SLOAD PUSH2 0x17BC SWAP1 NUMBER PUSH2 0x527E JUMP JUMPDEST PUSH2 0x1B3 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD3C59BDA47E141A8EC5A33D241B7F71B86E30D359F83A9227D912858B60404FC SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x13AE PUSH2 0x34CD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 CALLER DUP5 PUSH2 0x34D5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1808 PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x1810 PUSH2 0x33C2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x181D PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1834 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13C SSTORE JUMP JUMPDEST PUSH2 0x1842 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x139 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x185E DUP5 DUP5 PUSH2 0x1859 DUP8 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x3705 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1871 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13F SSTORE JUMP JUMPDEST PUSH2 0x187F PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13E SSTORE JUMP JUMPDEST PUSH2 0x188D PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x146 SSTORE JUMP JUMPDEST PUSH2 0x145 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x18B1 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3767 JUMP JUMPDEST PUSH2 0x18C7 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x18F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA SLOAD PUSH1 0xFF AND PUSH2 0x191B JUMPI PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 ADD PUSH2 0x1536 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x135 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1971 JUMPI PUSH2 0x1971 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP5 POP DUP4 SWAP3 DUP6 SWAP3 PUSH4 0x59E02DD7 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EF SWAP2 SWAP1 PUSH2 0x52A7 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1A1C JUMPI PUSH1 0x40 MLOAD PUSH4 0xDE4F3A0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x13F8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114E DUP3 CALLER CALLER PUSH2 0x34D5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 DUP4 CALLER CALLER PUSH2 0x3786 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A4C PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1A5C DUP4 DUP4 PUSH2 0x3767 JUMP JUMPDEST PUSH2 0x147 SLOAD LT ISZERO SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x23DA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1AAC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1AC6 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1B4C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B5E PUSH2 0x280 DUP4 ADD PUSH2 0x260 DUP5 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x218 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1B88 DUP3 PUSH2 0x3891 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16A0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1BD9 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x137 SSTORE JUMP JUMPDEST PUSH2 0x1BE7 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13B SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1BFA PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3909 JUMP JUMPDEST PUSH2 0x1C10 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x1B2 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 DUP8 CALLER CALLER PUSH2 0x2DF9 JUMP JUMPDEST PUSH2 0x17E SLOAD NUMBER LT PUSH2 0x13AE JUMPI PUSH2 0x135 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C52 JUMPI PUSH2 0x1C4A DUP2 PUSH2 0x3925 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C39 JUMP JUMPDEST POP PUSH2 0x1495 PUSH2 0x17F SLOAD NUMBER ADD PUSH2 0x17E SSTORE JUMP JUMPDEST PUSH2 0x1C6A PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C79 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD55FD845 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD55FD845 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE4 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x1D01 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D13 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x134 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1D54 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3458F6C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x133 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x134 DUP6 MSTORE DUP8 DUP2 KECCAK256 SWAP7 MLOAD DUP8 SSTORE SWAP3 MLOAD SWAP6 DUP6 ADD DUP1 SLOAD SWAP7 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE DUP8 SLOAD DUP1 DUP6 ADD SWAP1 SWAP9 SSTORE PUSH32 0x92E985329FB94CC1B424EBB0F7F2929B6D27383CA94C0EC71C44FB48BDF96D2C SWAP1 SWAP8 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP6 OR SWAP1 SSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE DUP2 DUP2 MSTORE DUP9 DUP9 AND DUP2 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x135 DUP1 SLOAD DUP1 DUP8 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 MLOAD PUSH1 0x2 SWAP3 DUP4 MUL PUSH32 0xDF37D27E88E3BD0B85262482997E409A463F5BE0EBB19232ABF994DD8474090D DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0xDF37D27E88E3BD0B85262482997E409A463F5BE0EBB19232ABF994DD8474090E SWAP1 SWAP2 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP10 AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP7 SSTORE PUSH2 0x145 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE DUP10 DUP6 ADD CALLDATALOAD PUSH32 0xED95984ADD84C4014C7F9D66A1B73E788E2DB64F5763FA861AD52DA204F71B2B SWAP1 SWAP2 ADD SSTORE PUSH2 0x141 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP11 ADD CALLDATALOAD PUSH32 0xB3926254D0163C91FC94BF08F3F8062FF5D48635DFA7DBEF8168AD7D4847A758 SWAP1 SWAP2 ADD SSTORE PUSH2 0x142 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE PUSH1 0x80 DUP11 ADD CALLDATALOAD PUSH32 0x7917AD5F1BD6FA6D4F9128143F89BCBA30C5B503E76ECD2DD7562DDF9706AE19 SWAP1 SWAP2 ADD SSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP10 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x17D DUP1 SLOAD DUP1 DUP5 ADD DUP3 SSTORE SWAP1 DUP8 MSTORE SWAP4 MLOAD SWAP4 SWAP1 SWAP3 MUL PUSH32 0xF2AEC2A8C6072690B3C86D5C08E34587F891268D22D8BDCA6E66838C0F2F22D DUP2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 MLOAD PUSH32 0xF2AEC2A8C6072690B3C86D5C08E34587F891268D22D8BDCA6E66838C0F2F22E SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x149 DUP1 SLOAD SWAP1 SWAP2 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH2 0x14A PUSH2 0x1F99 DUP3 PUSH2 0x195A JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP1 PUSH2 0x1FE1 SWAP1 DUP8 SWAP1 PUSH2 0x52E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x141 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x200B PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2017 DUP2 PUSH2 0x3A3F JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F SLOAD PUSH2 0x202C ADDRESS PUSH2 0x3A5E JUMP JUMPDEST PUSH2 0x2036 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST GT ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x12F SLOAD PUSH2 0x204C ADDRESS PUSH2 0x3A5E JUMP JUMPDEST PUSH2 0x2056 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 CALLER DUP6 PUSH2 0x3786 JUMP JUMPDEST PUSH2 0x2071 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x17D DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x20A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 POP DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B3 SLOAD NUMBER LT PUSH2 0x20D4 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST NUMBER PUSH2 0x1B3 SLOAD PUSH2 0x1810 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20F3 DUP6 DUP6 DUP6 CALLER CALLER PUSH2 0x2CBC JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2107 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134 DUP2 PUSH2 0x211A PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 MSTORE PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH2 0x2170 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x135 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x2187 JUMPI PUSH2 0x2187 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x21B6 SWAP1 PUSH1 0x40 DUP7 ADD SWAP1 DUP7 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22A9 JUMPI PUSH1 0x0 PUSH2 0x21D6 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59E02DD7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2217 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x223B SWAP2 SWAP1 PUSH2 0x52A7 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x225C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x2271 JUMPI PUSH2 0x2271 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP POP POP JUMPDEST DUP3 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x145 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x22C2 JUMPI PUSH2 0x22C2 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x141 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x22E9 JUMPI PUSH2 0x22E9 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x142 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2310 JUMPI PUSH2 0x2310 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x17D DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2337 JUMPI PUSH2 0x2337 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x237C SWAP2 SWAP1 PUSH2 0x52E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x2391 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13A SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23A3 DUP4 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x23B0 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x23D1 PUSH2 0x23BF PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x23C9 DUP8 DUP7 PUSH2 0x3AE9 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x3B5B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23E5 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x23ED PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23F8 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2404 DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240E PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x241C DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x242C DUP12 DUP5 DUP5 DUP5 PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2439 DUP13 DUP5 DUP5 PUSH2 0x3CB9 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x245D JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x132 SLOAD DUP7 DUP6 PUSH2 0x2475 DUP7 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x247F SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST DUP16 PUSH2 0x248A SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2494 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x249E SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x24A8 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP6 POP PUSH2 0x24B8 DUP14 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x3CFF JUMP JUMPDEST DUP11 DUP7 LT ISZERO PUSH2 0x24E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x24F0 DUP2 PUSH2 0x13E SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP7 POP DUP10 DUP8 GT ISZERO PUSH2 0x251D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND SWAP2 SWAP1 DUP14 AND SWAP1 DUP5 SWAP1 PUSH32 0xB0EE95633545EDABB63AFD3C3962A133536B36E2372F68C3C2722710EE0CD89 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x2582 DUP13 PUSH1 0x0 DUP12 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x258F DUP14 DUP8 PUSH1 0x0 DUP12 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x259B DUP12 DUP10 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x25A8 DUP11 DUP3 DUP11 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD994D6D5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2625 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x264C PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2654 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2663 PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x2675 DUP10 DUP6 DUP6 PUSH2 0x3EF2 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2684 DUP2 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x26B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x26D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP11 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP2 SWAP1 DUP10 AND SWAP1 PUSH32 0x62F0126E99B1936535DB27571CEA2B2D54DB14A471B9203B29B31B89C300E4F6 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x272E DUP10 DUP4 DUP9 PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x273A DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2747 DUP9 DUP3 DUP5 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x275F PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2767 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2772 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x277E DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278D PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x279E DUP13 DUP13 DUP7 PUSH2 0x3705 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x27D7 PUSH2 0x132 SLOAD DUP13 PUSH2 0x27B3 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST DUP6 DUP6 PUSH2 0x27BE DUP7 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x27C8 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x27D2 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3F77 JUMP JUMPDEST SWAP5 POP DUP10 DUP6 LT DUP1 PUSH2 0x27E5 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x280D JUMPI PUSH1 0x40 MLOAD PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x281A DUP2 PUSH2 0x13D SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP6 POP DUP9 DUP7 GT ISZERO PUSH2 0x2847 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP2 SWAP1 DUP13 AND SWAP1 DUP5 SWAP1 PUSH32 0xF77B7563E0C6C33E0B804A715D94C82BAEA057D2E6F8BFDC211FE04D3C03BAD9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x28AD DUP13 DUP13 PUSH1 0x0 DUP12 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x28B9 DUP6 PUSH1 0x0 DUP10 PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C5 DUP11 DUP9 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x28D2 DUP10 DUP3 DUP10 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28ED PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x28F5 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2900 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x290C DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x291B PUSH2 0x147 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x132 SLOAD DUP5 DUP5 DUP14 PUSH2 0x2939 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2943 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x294D SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x2957 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP DUP9 DUP5 GT ISZERO PUSH2 0x2984 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x299D DUP14 DUP14 DUP9 DUP9 PUSH2 0x2998 DUP10 DUP10 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x3FED JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x29AC DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP7 POP DUP10 DUP8 LT ISZERO PUSH2 0x29D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE DUP14 SWAP1 DUP14 SWAP1 DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND SWAP2 SWAP1 DUP15 AND SWAP1 DUP6 SWAP1 PUSH32 0x879E4419A6544DE6EA456F6344B2FCF0C3B9FC0E6738C82FA4026A8789747C53 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0x2A47 DUP13 DUP4 DUP12 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x2A54 DUP14 DUP8 PUSH1 0x0 DUP13 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x28D2 DUP9 DUP9 DUP4 PUSH2 0x3E99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A69 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2A71 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7C DUP8 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2A88 DUP8 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2A94 PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 PUSH2 0x2AA4 DUP10 DUP10 DUP6 PUSH2 0x3705 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x2AC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AD3 DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP4 POP DUP7 DUP5 LT ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP2 SWAP1 DUP9 AND SWAP1 DUP12 SWAP1 PUSH32 0x4716C9926CE32100E8A5B6AD71AF5500AC55514D7B0C8F80F209856C9DFAEB92 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2B5F DUP10 DUP10 DUP5 DUP10 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x2B6A DUP6 DUP6 DUP4 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B80 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2B88 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B93 DUP8 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2B9F DUP8 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA9 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2BB7 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2BC9 DUP11 DUP11 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3CFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD7 DUP13 DUP13 DUP9 PUSH2 0x402D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2BE6 DUP2 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP DUP10 DUP8 GT ISZERO PUSH2 0x2C13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP7 PUSH1 0x0 SUB PUSH2 0x2C34 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 SWAP1 DUP12 AND SWAP1 DUP15 SWAP1 PUSH32 0x5F8DFB23A03C1F9D37A1860FC8038FFDC6DEC3E24DB38CDB09CC0176B35453F SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2C93 DUP13 DUP13 DUP5 DUP12 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C9F DUP12 DUP10 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CAC DUP11 DUP3 DUP5 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC7 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2CCF PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CDD DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2CE9 DUP11 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2CF5 PUSH2 0x147 SLOAD PUSH2 0x3C31 JUMP JUMPDEST POP POP PUSH2 0x2D01 DUP10 DUP3 PUSH2 0x4075 JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x2D12 DUP3 DUP5 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x2D3F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x2D60 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP12 SWAP1 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP2 SWAP1 DUP10 AND SWAP1 DUP13 SWAP1 PUSH32 0xCD3821E3A6AFEC66FDFA7A942B879811BB9919B2F270DE090B6E00178CD7EAEE SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2DC5 DUP5 DUP5 DUP9 PUSH2 0x3F33 JUMP JUMPDEST PUSH2 0x2DD2 DUP11 DUP11 PUSH1 0x0 DUP10 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DDE DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DEB DUP9 DUP3 DUP6 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E04 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2E0C PUSH2 0x30C5 JUMP JUMPDEST DUP8 DUP10 SUB PUSH2 0x2E2C JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2E37 DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E44 DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2E50 DUP12 DUP4 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2E5A DUP11 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP13 DUP12 DUP6 PUSH2 0x3705 JUMP JUMPDEST POP SWAP1 POP DUP3 PUSH2 0x2E75 DUP4 DUP13 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2E7F SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP DUP9 DUP5 LT DUP1 PUSH2 0x2E8D JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2EB5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x2EBF DUP13 DUP5 PUSH2 0x3AE9 JUMP JUMPDEST PUSH2 0x2EC9 DUP13 DUP5 PUSH2 0x3AE9 JUMP JUMPDEST GT ISZERO PUSH2 0x2EFD JUMPI PUSH1 0x0 PUSH2 0x2ED9 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2EE7 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2EF9 DUP15 DUP9 DUP8 DUP7 DUP7 DUP7 PUSH2 0x3CFF JUMP JUMPDEST POP POP POP JUMPDEST PUSH2 0x2F0A DUP2 PUSH2 0x13C SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x2F37 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP2 SWAP1 DUP13 AND SWAP1 DUP6 SWAP1 PUSH32 0x77D2223ACA09D9EC6E49D1B8CDCB0B40DEC540A5F65DAF1ECAB069C822BFF460 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0x2FA7 DUP12 DUP6 PUSH1 0x0 DUP10 PUSH2 0x3DE9 JUMP JUMPDEST PUSH2 0x2FB4 DUP13 DUP12 PUSH1 0x0 DUP11 PUSH2 0x3F8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC0 DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FCD DUP9 DUP3 DUP9 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP SWAP8 POP SWAP8 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3074 JUMPI PUSH1 0x0 PUSH2 0x2FFB DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x300A DUP5 DUP5 PUSH2 0x4104 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x3048 DUP3 PUSH2 0x135 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x3026 JUMPI PUSH2 0x3026 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x3042 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x3052 SWAP1 DUP9 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP PUSH2 0x305E DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x306D DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FE8 JUMP JUMPDEST POP PUSH2 0x3082 DUP3 PUSH2 0x137 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP2 POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x132 SLOAD PUSH1 0x0 SUB PUSH2 0x30A5 JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x114E JUMP JUMPDEST PUSH2 0x114B DUP4 PUSH2 0x30B2 DUP5 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x30BC SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x132 SLOAD PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 SLOAD PUSH2 0x12F SLOAD PUSH2 0x3102 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x310F JUMPI POP JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x312F JUMPI PUSH2 0x312F PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31E9 JUMPI PUSH2 0x316F DUP2 PUSH2 0x195A JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3181 JUMPI PUSH2 0x3181 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x31D5 PUSH2 0x135 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x31A4 JUMPI PUSH2 0x31A4 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x31C8 JUMPI PUSH2 0x31C8 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x31DF SWAP1 DUP5 PUSH2 0x527E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x315E JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3243 JUMPI PUSH2 0x136 DUP6 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x320C JUMPI PUSH2 0x320C PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x321E SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3228 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP1 SWAP4 KECCAK256 ADD SSTORE ADD PUSH2 0x31ED JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1495 PUSH2 0x25B9 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x328A JUMPI PUSH2 0x3285 DUP4 PUSH2 0x416B JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x32E4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x32E1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x53A2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x33B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST POP PUSH2 0x3285 DUP4 DUP4 DUP4 PUSH2 0x4207 JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH1 0x0 PUSH2 0x33E2 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33F0 DUP4 DUP4 PUSH2 0x4104 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x343C PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x135 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x3416 JUMPI PUSH2 0x3416 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x3432 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x3042 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3449 DUP6 DUP6 PUSH2 0x3AE9 JUMP JUMPDEST PUSH2 0x3453 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x345D SWAP1 DUP9 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP PUSH2 0x3469 DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x3478 DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33CF JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x3497 JUMPI PUSH2 0x146 SLOAD PUSH1 0x2 MUL SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x34A1 DUP3 DUP5 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34B7 DUP6 DUP6 DUP6 PUSH2 0x422C JUMP JUMPDEST SWAP1 POP PUSH2 0x34C3 DUP5 DUP5 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x23D1 SWAP1 DUP3 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x13AE PUSH2 0x4276 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34DF PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31B0D35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x133 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x351E JUMPI PUSH2 0x351E PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3571 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3595 SWAP2 SWAP1 PUSH2 0x53A2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x35C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3FE8C5EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x136 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x35D8 JUMPI PUSH2 0x35D8 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH2 0x35EF DUP3 DUP3 PUSH2 0x3F77 JUMP JUMPDEST SWAP3 POP PUSH2 0x133 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x3605 JUMPI PUSH2 0x3605 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x365C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3670 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH2 0x367E ADDRESS PUSH2 0x3A5E JUMP JUMPDEST LT ISZERO PUSH2 0x3690 JUMPI PUSH2 0x368D ADDRESS PUSH2 0x3A5E JUMP JUMPDEST SWAP3 POP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH32 0x4716C9926CE32100E8A5B6AD71AF5500AC55514D7B0C8F80F209856C9DFAEB92 DUP6 DUP8 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x36EA SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x36FC DUP5 DUP5 PUSH2 0x4437 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 SUB PUSH2 0x3729 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3733 DUP5 DUP5 PUSH2 0x3F77 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x142 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 SUB PUSH2 0x377A JUMPI POP PUSH1 0x0 NOT PUSH2 0x114E JUMP JUMPDEST PUSH2 0x114B PUSH2 0x3042 DUP4 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3790 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x3798 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37A2 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x37B0 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x37C0 DUP9 DUP5 DUP5 DUP5 PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x37CE DUP11 DUP6 DUP6 PUSH2 0x3CB9 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x37F3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37FD DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP6 POP DUP9 DUP7 LT ISZERO PUSH2 0x382A JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP2 SWAP1 DUP11 AND SWAP1 PUSH32 0x2D184907C04672620E3C88A12A39D6A603DD26373427842AA172EB3E5BFCFF07 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3886 DUP11 DUP4 DUP11 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x2747 DUP8 DUP8 DUP4 PUSH2 0x3E99 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x38B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x38E4 PUSH2 0x38CD PUSH2 0x200 DUP4 ADD PUSH2 0x1E0 DUP5 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x38DF PUSH2 0x220 DUP5 ADD PUSH2 0x200 DUP6 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x4455 JUMP JUMPDEST PUSH2 0x38ED DUP2 PUSH2 0x4498 JUMP JUMPDEST PUSH2 0x38FB DUP2 PUSH2 0x220 ADD CALLDATALOAD PUSH2 0x46FD JUMP JUMPDEST PUSH2 0x1495 DUP2 PUSH2 0x240 ADD CALLDATALOAD PUSH2 0x4757 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3915 DUP4 PUSH2 0x3A3F JUMP JUMPDEST SWAP1 POP PUSH2 0x15CC DUP2 PUSH2 0x27D2 DUP7 DUP3 PUSH2 0x5356 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x393B JUMPI PUSH2 0x393B PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x396C DUP4 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD PUSH8 0xDE0B6B3A7640000 PUSH2 0x3988 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x3994 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x39A8 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x39BF DUP4 DUP6 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x39C9 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x17D DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x39E0 JUMPI PUSH2 0x39E0 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SSTORE DUP5 MLOAD PUSH1 0x40 MLOAD DUP8 SWAP2 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 SWAP2 PUSH2 0x3A2F SWAP2 SWAP1 DUP6 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x130 SLOAD PUSH2 0x12F SLOAD PUSH2 0x3A54 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x114E SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x218 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114E SWAP2 SWAP1 PUSH2 0x53A2 JUMP JUMPDEST DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3AE1 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x145 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3B00 JUMPI PUSH2 0x3B00 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x17D DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x3B23 JUMPI PUSH2 0x3B23 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD SWAP1 POP DUP4 DUP2 LT PUSH2 0x3B46 JUMPI POP SWAP1 POP PUSH2 0x114E JUMP JUMPDEST DUP1 PUSH2 0x3B51 DUP6 DUP5 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x23D1 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3B70 DUP2 DUP8 PUSH2 0x5356 JUMP JUMPDEST DUP6 PUSH2 0x3B7C DUP10 DUP8 DUP8 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x3B86 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3B90 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x3B9A SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1CA61D77 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BD8 DUP3 DUP3 PUSH2 0x4795 JUMP JUMPDEST PUSH2 0x149 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3BEC JUMPI PUSH2 0x3BEC PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3C05 SWAP2 SWAP1 PUSH2 0x5406 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x14A DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3C21 JUMPI PUSH2 0x3C21 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3C PUSH2 0x2FDD JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x3C4D DUP4 DUP4 PUSH2 0x3767 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x3C79 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79121201 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8C DUP5 DUP5 DUP5 PUSH2 0x34A9 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x3243 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 SUB PUSH2 0x3CDD JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3CF0 DUP6 PUSH2 0x3CEB DUP7 DUP7 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x3D53 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x13B SLOAD PUSH2 0x3D53 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0B DUP8 DUP7 PUSH2 0x3AE9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D1C DUP6 DUP4 DUP9 DUP8 DUP8 PUSH2 0x3B5B JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x3D49 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3D68 DUP4 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x3D7C DUP4 DUP4 PUSH2 0x4811 JUMP JUMPDEST PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3DF4 DUP5 DUP5 DUP5 PUSH2 0x4847 JUMP JUMPDEST PUSH2 0x133 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3E08 JUMPI PUSH2 0x3E08 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x218 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x3E90 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x488B JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA8 PUSH2 0x139 SLOAD DUP4 PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3EBD SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x143 SLOAD PUSH2 0x3EE2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3EDD DUP4 DUP6 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x4437 JUMP JUMPDEST PUSH2 0x3EEC DUP5 DUP5 PUSH2 0x4437 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 SUB PUSH2 0x3F16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F24 DUP6 PUSH2 0x3CEB DUP7 DUP7 PUSH2 0x3089 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x13A SLOAD PUSH2 0x3D53 JUMP JUMPDEST PUSH2 0x3F3D DUP4 DUP4 PUSH2 0x48F6 JUMP JUMPDEST PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3D68 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3F97 DUP5 DUP5 DUP5 PUSH2 0x4918 JUMP JUMPDEST PUSH2 0x133 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3FAB JUMPI PUSH2 0x3FAB PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH2 0x3E46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FFB DUP8 DUP7 DUP7 PUSH2 0x3705 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x4008 DUP7 DUP5 PUSH2 0x3D53 JUMP JUMPDEST PUSH2 0x4012 SWAP1 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP2 POP PUSH2 0x4021 DUP3 PUSH2 0x13F SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 SUB PUSH2 0x4051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x405B DUP5 DUP5 PUSH2 0x3F77 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x141 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4085 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x4095 DUP4 DUP4 PUSH2 0x3089 JUMP JUMPDEST SWAP1 POP DUP7 PUSH8 0xDE0B6B3A7640000 PUSH2 0x40A9 PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x40B3 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x40BD SWAP1 DUP11 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x40C7 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP5 POP PUSH2 0x40D3 DUP6 DUP3 PUSH2 0x3F77 JUMP JUMPDEST SWAP6 POP PUSH2 0x40DF DUP9 DUP9 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x40E9 SWAP1 DUP7 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP PUSH2 0x40F8 DUP6 PUSH2 0x140 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4113 DUP6 DUP6 PUSH2 0x4795 JUMP JUMPDEST PUSH2 0x149 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x4127 JUMPI PUSH2 0x4127 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x413C SWAP2 SWAP1 PUSH2 0x5406 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4163 JUMPI DUP1 SWAP2 POP PUSH2 0x4160 PUSH2 0x415A PUSH2 0x138 SLOAD DUP7 PUSH2 0x3D53 JUMP JUMPDEST DUP4 PUSH2 0x3D53 JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x41D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4210 DUP4 PUSH2 0x4971 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x421D JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x3285 JUMPI PUSH2 0x3EEC DUP4 DUP4 PUSH2 0x49B1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4239 DUP5 DUP5 PUSH2 0x3767 JUMP JUMPDEST GT PUSH2 0x4246 JUMPI POP PUSH1 0x0 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x4250 DUP4 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x4262 DUP5 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x426C SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x11CB SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4297 JUMPI PUSH2 0x4297 PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43B4 JUMPI PUSH1 0x0 PUSH2 0x42D9 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x42E5 DUP3 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x149 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x42FB JUMPI PUSH2 0x42FB PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x43AA JUMPI PUSH2 0x4327 PUSH2 0x4321 PUSH2 0x138 SLOAD DUP5 PUSH2 0x3D53 JUMP JUMPDEST DUP3 PUSH2 0x3D53 JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4339 JUMPI PUSH2 0x4339 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x434E DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x149 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x4366 JUMPI PUSH2 0x4366 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x43AA DUP4 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x438A JUMPI PUSH2 0x438A PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x144 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3DE9 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x42C6 JUMP JUMPDEST POP DUP3 ISZERO PUSH2 0x43F9 JUMPI PUSH2 0x43C8 DUP4 PUSH2 0x137 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x43DD SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x143 SLOAD PUSH2 0x43F9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x4437 JUMP JUMPDEST PUSH32 0xAE5116A8119D08673A0F1DFA7546B95DA4BD54BB17FEDA7C61130AC7859152F6 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x442A SWAP3 SWAP2 SWAP1 PUSH2 0x542E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16A0 JUMPI PUSH2 0x218 SLOAD PUSH2 0x16A0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP4 PUSH2 0x4A9C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x447C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x4484 PUSH2 0x4ACC JUMP JUMPDEST PUSH2 0x448D DUP3 PUSH2 0x4AF3 JUMP JUMPDEST PUSH2 0x16A0 DUP2 PUSH1 0x1 PUSH2 0x4B23 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x44BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0x60 ADD CALLDATALOAD LT ISZERO PUSH2 0x44EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44F9 DUP2 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4506 DUP2 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4513 DUP2 PUSH1 0xE0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4521 DUP2 PUSH2 0x100 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x452F DUP2 PUSH2 0x120 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x453D DUP2 PUSH2 0x140 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x454B DUP2 PUSH2 0x160 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4559 DUP2 PUSH2 0x180 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4575 PUSH2 0x4570 PUSH2 0x1C0 DUP4 ADD CALLDATALOAD PUSH2 0x1A0 DUP5 ADD CALLDATALOAD PUSH2 0x527E JUMP JUMPDEST PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4582 PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x131 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xD55FD845 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH4 0xD55FD845 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x45FF SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x461C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x462C PUSH1 0x40 DUP3 ADD PUSH1 0x20 DUP4 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x143 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x465D PUSH1 0x60 DUP3 ADD PUSH1 0x40 DUP4 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x144 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH2 0x146 SSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH2 0x147 SSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH2 0x139 SSTORE PUSH1 0xC0 DUP2 ADD CALLDATALOAD PUSH2 0x13A SSTORE PUSH1 0xE0 DUP2 ADD CALLDATALOAD PUSH2 0x13B SSTORE PUSH2 0x100 DUP2 ADD CALLDATALOAD PUSH2 0x13C SSTORE PUSH2 0x120 DUP2 ADD CALLDATALOAD PUSH2 0x13D SSTORE PUSH2 0x140 DUP1 DUP3 ADD CALLDATALOAD PUSH2 0x13E SSTORE PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH2 0x13F SSTORE PUSH2 0x180 DUP3 ADD CALLDATALOAD SWAP1 SSTORE PUSH2 0x1A0 DUP2 ADD CALLDATALOAD PUSH2 0x137 SSTORE PUSH2 0x1C0 ADD CALLDATALOAD PUSH2 0x138 SSTORE PUSH2 0x148 DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4724 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x4745 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17F DUP2 SWAP1 SSTORE PUSH2 0x1495 DUP2 NUMBER ADD PUSH2 0x17E SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x477E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x1B2 DUP2 SWAP1 SSTORE PUSH2 0x478E DUP2 NUMBER PUSH2 0x527E JUMP JUMPDEST PUSH2 0x1B3 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x135 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x47B5 JUMPI PUSH2 0x47B5 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x47D1 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH2 0x47DD DUP4 DUP3 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x14A DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x47F1 JUMPI PUSH2 0x47F1 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 PUSH2 0x4807 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x15CC SWAP2 SWAP1 PUSH2 0x547C JUMP JUMPDEST DUP2 PUSH2 0x132 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4824 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x483E SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x485C JUMPI PUSH2 0x485C PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x487C SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3285 SWAP1 POP DUP2 PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x3EEC SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x4BAF JUMP JUMPDEST DUP2 PUSH2 0x132 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4909 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x16A0 SWAP1 POP DUP2 PUSH2 0x3ACE JUMP JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x492D JUMPI PUSH2 0x492D PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x494D SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4967 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497A DUP2 PUSH2 0x416B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x4A19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A34 SWAP2 SWAP1 PUSH2 0x54C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4A6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4A74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x23D1 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5537 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x4C81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x3285 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x48BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x1495 DUP2 PUSH2 0x4C9A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 AND PUSH2 0xFF01 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO PUSH2 0x1495 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4C04 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4CC1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3285 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C22 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x3285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4C90 JUMPI POP DUP2 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x11CE DUP4 DUP4 PUSH2 0x4CD0 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2071 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11CB DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x4CFA JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x4CE0 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP2 SWAP1 PUSH2 0x54E3 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4D5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4D77 SWAP2 SWAP1 PUSH2 0x54C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4DB4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4DB9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x4DCA DUP8 DUP4 DUP4 DUP8 PUSH2 0x4DD5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4E44 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x4E3D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x4E3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x13F8 JUMP JUMPDEST POP DUP2 PUSH2 0x15CC JUMP JUMPDEST PUSH2 0x15CC DUP4 DUP4 PUSH2 0x4CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4EA2 DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11CE DUP2 PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x4F9C DUP2 PUSH2 0x4E4E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH2 0x4FEE DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x501C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11CE DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x503C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x5055 DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5094 DUP2 PUSH2 0x4E4E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x50B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x50C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x50D7 JUMPI PUSH2 0x50D7 PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x50FF JUMPI PUSH2 0x50FF PUSH2 0x5060 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x5118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x514D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x515F DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x517D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x519B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x517D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x515F DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11CE DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD DUP3 CALLDATALOAD PUSH2 0x52F8 DUP2 PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x5314 DUP3 PUSH2 0x4E4E JUMP JUMPDEST DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x539D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 SLT PUSH1 0x0 DUP4 SLT DUP1 ISZERO DUP3 AND DUP3 ISZERO DUP3 AND OR ISZERO PUSH2 0x5426 JUMPI PUSH2 0x5426 PUSH2 0x5268 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x20 PUSH1 0x40 DUP2 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x546F JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5453 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP4 SLT DUP1 ISZERO DUP4 DUP4 SGT AND DUP4 DUP4 SLT DUP3 AND OR ISZERO PUSH2 0x549C JUMPI PUSH2 0x549C PUSH2 0x5268 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x54BE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x54A6 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x54D9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x54A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5502 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x54A3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C8 0x2B 0xBC PUSH25 0xFAFF99B5F7DACB06D56738247D8DA7BC3D2FCE6C1B6514731B 0xD9 DUP10 DELEGATECALL PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
      "sourceMap": "188:13518:42:-:0;;;1332:4:8;1289:48;;569:53:42;;;;;;;;;-1:-1:-1;529:22:46;:20;:22::i;:::-;593::42;:20;:22::i;:::-;188:13518;;5928:279:7;5996:13;;;;;;;5995:14;5987:66;;;;-1:-1:-1;;;5987:66:7;;216:2:73;5987:66:7;;;198:21:73;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:73;;;338:37;392:19;;5987:66:7;;;;;;;;6067:12;;6082:15;6067:12;;;:30;6063:138;;;6113:12;:30;;-1:-1:-1;;6113:30:7;6128:15;6113:30;;;;;;6162:28;;564:36:73;;;6162:28:7;;552:2:73;537:18;6162:28:7;;;;;;;6063:138;5928:279::o;422:184:73:-;188:13518:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@__Governed_init_16433": {
          "entryPoint": 19187,
          "id": 16433,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__Governed_init_unchained_16447": {
          "entryPoint": 19610,
          "id": 16447,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__MocBaseBucket_init_unchained_9876": {
          "entryPoint": 17560,
          "id": 9876,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__MocCore_init_11129": {
          "entryPoint": 14481,
          "id": 11129,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__MocEma_init_unchained_13552": {
          "entryPoint": 18173,
          "id": 13552,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__MocSettlement_init_unchained_13877": {
          "entryPoint": 18263,
          "id": 13877,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@__MocUpgradable_init_16514": {
          "entryPoint": 17493,
          "id": 16514,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@__Stoppable_init_unchained_16595": {
          "entryPoint": 19235,
          "id": 16595,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@__UUPSUpgradeable_init_1154": {
          "entryPoint": 19148,
          "id": 1154,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_authorizeUpgrade_16523": {
          "entryPoint": 12874,
          "id": 16523,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_calcOtfPnLTP_10361": {
          "entryPoint": 18325,
          "id": 10361,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_calcQACforMintTC_12659": {
          "entryPoint": 16114,
          "id": 12659,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_calcQACforMintTCandTP_12856": {
          "entryPoint": 16501,
          "id": 12856,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "@_calcQACforMintTP_12744": {
          "entryPoint": 16429,
          "id": 12744,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_calcQACforRedeemTC_12702": {
          "entryPoint": 15545,
          "id": 12702,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_calcQACforRedeemTCandTP_12902": {
          "entryPoint": 16365,
          "id": 12902,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@_calcQACforRedeemTP_12786": {
          "entryPoint": 14085,
          "id": 12786,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@_callOptionalReturn_6249": {
          "entryPoint": 19375,
          "id": 6249,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_checkLessThanOne_18085": {
          "entryPoint": 19334,
          "id": 18085,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_checkLiquidated_9886": {
          "entryPoint": 15268,
          "id": 9886,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_checkNotPaused_16605": {
          "entryPoint": 12485,
          "id": 16605,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_depositAC_9897": {
          "entryPoint": 15054,
          "id": 9897,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_depositAndMintTC_10052": {
          "entryPoint": 16179,
          "id": 10052,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_depositAndMintTP_10002": {
          "entryPoint": 15849,
          "id": 10002,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@_depositTC_9914": {
          "entryPoint": 18678,
          "id": 9914,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_depositTP_9953": {
          "entryPoint": 18503,
          "id": 9953,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_distOpResults_12436": {
          "entryPoint": 16025,
          "id": 12436,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_distributeSuccessFee_13099": {
          "entryPoint": 17014,
          "id": 13099,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_divPrec_18053": {
          "entryPoint": 16247,
          "id": 18053,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_evalCoverage_10203": {
          "entryPoint": 15409,
          "id": 10203,
          "parameterSlots": 1,
          "returnSlots": 2
        },
        "@_evalTCAvailableToRedeem_12932": {
          "entryPoint": 15487,
          "id": 12932,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@_evalTPavailableToMint_12975": {
          "entryPoint": 15615,
          "id": 12975,
          "parameterSlots": 6,
          "returnSlots": 0
        },
        "@_execSettlement_13108": {
          "entryPoint": 13517,
          "id": 13108,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_functionDelegateCall_951": {
          "entryPoint": 18865,
          "id": 951,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getCglb_10572": {
          "entryPoint": 14183,
          "id": 10572,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getCtargemaCA_13755": {
          "entryPoint": 13250,
          "id": 13755,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getCtargemaTP_13604": {
          "entryPoint": 15081,
          "id": 13604,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getImplementation_635": {
          "entryPoint": null,
          "id": 635,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getLckACandACgain_10482": {
          "entryPoint": 12253,
          "id": 10482,
          "parameterSlots": 0,
          "returnSlots": 2
        },
        "@_getLckACemaAdjusted_10107": {
          "entryPoint": 16940,
          "id": 10107,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_getLeverageTC_10548": {
          "entryPoint": 14601,
          "id": 10548,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getPTCac_10524": {
          "entryPoint": 12425,
          "id": 10524,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_getPnLTP_10411": {
          "entryPoint": 16644,
          "id": 10411,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "@_getTCAvailableToRedeem_10135": {
          "entryPoint": 13481,
          "id": 10135,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_getTPAvailableToMint_10169": {
          "entryPoint": 15195,
          "id": 10169,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@_getTotalACavailable_10497": {
          "entryPoint": 14911,
          "id": 10497,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_liqRedeemTPTo_12402": {
          "entryPoint": 13525,
          "id": 12402,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_mintTCandTPto_11661": {
          "entryPoint": 11452,
          "id": 11661,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@_mintTCto_11243": {
          "entryPoint": 9794,
          "id": 11243,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_mintTPto_11453": {
          "entryPoint": 11126,
          "id": 11453,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@_mulPrec_18071": {
          "entryPoint": 15699,
          "id": 18071,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_onACNeededOperation_9213": {
          "entryPoint": 15988,
          "id": 9213,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@_redeemTCandTPto_11804": {
          "entryPoint": 10466,
          "id": 11804,
          "parameterSlots": 6,
          "returnSlots": 2
        },
        "@_redeemTCto_11336": {
          "entryPoint": 14214,
          "id": 11336,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@_redeemTPto_11545": {
          "entryPoint": 10847,
          "id": 11545,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "@_revert_2847": {
          "entryPoint": 19664,
          "id": 2847,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_revert_6579": {
          "entryPoint": null,
          "id": 6579,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setImplementation_659": {
          "entryPoint": 16747,
          "id": 659,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_swapTCforTPto_12310": {
          "entryPoint": 9178,
          "id": 12310,
          "parameterSlots": 6,
          "returnSlots": 2
        },
        "@_swapTPforTCto_12138": {
          "entryPoint": 10068,
          "id": 12138,
          "parameterSlots": 6,
          "returnSlots": 2
        },
        "@_swapTPforTPto_11993": {
          "entryPoint": 11769,
          "id": 11993,
          "parameterSlots": 7,
          "returnSlots": 2
        },
        "@_updateNextEmaCalculation_13567": {
          "entryPoint": null,
          "id": 13567,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_updateTPtracking_10325": {
          "entryPoint": 15310,
          "id": 10325,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_upgradeToAndCallUUPS_755": {
          "entryPoint": 12882,
          "id": 755,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeToAndCall_702": {
          "entryPoint": 16903,
          "id": 702,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_upgradeTo_674": {
          "entryPoint": 18801,
          "id": 674,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_withdrawAndBurnTC_10075": {
          "entryPoint": 15730,
          "id": 10075,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_withdrawAndBurnTP_10029": {
          "entryPoint": 16268,
          "id": 10029,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@_withdrawTC_9931": {
          "entryPoint": 18449,
          "id": 9931,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_withdrawTP_9975": {
          "entryPoint": 18712,
          "id": 9975,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@acBalanceOf_9184": {
          "entryPoint": 14942,
          "id": 9184,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@acTransfer_9169": {
          "entryPoint": 17463,
          "id": 9169,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@addPeggedToken_13242": {
          "entryPoint": 7266,
          "id": 13242,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@appreciationFactor_9662": {
          "entryPoint": null,
          "id": 9662,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@bes_13847": {
          "entryPoint": null,
          "id": 13847,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@bns_13849": {
          "entryPoint": null,
          "id": 13849,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@calcCtargemaCA_13768": {
          "entryPoint": 6142,
          "id": 13768,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@changeGovernor_16461": {
          "entryPoint": 8297,
          "id": 16461,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@checkIfAuthorizedChanger_16476": {
          "entryPoint": 9657,
          "id": 16476,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@editPeggedToken_13345": {
          "entryPoint": 8447,
          "id": 13345,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@emaCalculationBlockSpan_13528": {
          "entryPoint": null,
          "id": 13528,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@evalLiquidation_10628": {
          "entryPoint": 4812,
          "id": 10628,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@execSettlement_13905": {
          "entryPoint": 6044,
          "id": 13905,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@feeRetainer_9664": {
          "entryPoint": null,
          "id": 9664,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@functionCallWithValue_6404": {
          "entryPoint": 19706,
          "id": 6404,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@functionCall_6340": {
          "entryPoint": 19649,
          "id": 6340,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@getAddressSlot_2916": {
          "entryPoint": null,
          "id": 2916,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getBooleanSlot_2927": {
          "entryPoint": null,
          "id": 2927,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getBts_13924": {
          "entryPoint": 8386,
          "id": 13924,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getCglb_13383": {
          "entryPoint": 6308,
          "id": 13383,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getLeverageTC_13473": {
          "entryPoint": 7149,
          "id": 13473,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getPACtp_10668": {
          "entryPoint": 6490,
          "id": 10668,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getPTCac_13364": {
          "entryPoint": 4629,
          "id": 13364,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getQACforRedeemTP_13494": {
          "entryPoint": 6216,
          "id": 13494,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "@getTCAvailableToRedeem_13404": {
          "entryPoint": 5440,
          "id": 13404,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getTPAvailableToMint_13438": {
          "entryPoint": 9111,
          "id": 13438,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getTotalACavailable_13454": {
          "entryPoint": 8192,
          "id": 13454,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@governor_16410": {
          "entryPoint": null,
          "id": 16410,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@initialize_9146": {
          "entryPoint": 6796,
          "id": 9146,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@isContract_2582": {
          "entryPoint": null,
          "id": 2582,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@isContract_6268": {
          "entryPoint": null,
          "id": 6268,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@isLiquidationReached_10597": {
          "entryPoint": 6719,
          "id": 10597,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@liqEnabled_9697": {
          "entryPoint": null,
          "id": 9697,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@liqRedeemTP_12598": {
          "entryPoint": 6692,
          "id": 12598,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@liqRedeemTPto_12616": {
          "entryPoint": 6129,
          "id": 12616,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@liqThrld_9695": {
          "entryPoint": null,
          "id": 9695,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@liquidated_9699": {
          "entryPoint": null,
          "id": 9699,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@makeStoppable_16690": {
          "entryPoint": 6165,
          "id": 16690,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@makeUnstoppable_16679": {
          "entryPoint": 5796,
          "id": 16679,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@mintTC_9233": {
          "entryPoint": 4413,
          "id": 9233,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@mintTCandTPFee_9678": {
          "entryPoint": null,
          "id": 9678,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@mintTCandTP_9326": {
          "entryPoint": 8419,
          "id": 9326,
          "parameterSlots": 3,
          "returnSlots": 2
        },
        "@mintTCandTPto_9352": {
          "entryPoint": 4580,
          "id": 9352,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@mintTCto_9254": {
          "entryPoint": 5475,
          "id": 9254,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@mintTP_9277": {
          "entryPoint": 4565,
          "id": 9277,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@mintTPto_9301": {
          "entryPoint": 5562,
          "id": 9301,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@mocAppreciationBeneficiaryAddress_9688": {
          "entryPoint": null,
          "id": 9688,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@mocFeeFlowAddress_9686": {
          "entryPoint": null,
          "id": 9686,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@nACcb_9635": {
          "entryPoint": null,
          "id": 9635,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@nTCcb_9642": {
          "entryPoint": null,
          "id": 9642,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@nextEmaCalculation_13526": {
          "entryPoint": null,
          "id": 13526,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@pause_16644": {
          "entryPoint": 6335,
          "id": 16644,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@paused_16614": {
          "entryPoint": null,
          "id": 16614,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@pauser_16549": {
          "entryPoint": null,
          "id": 16549,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@pegContainer_9655": {
          "entryPoint": 5506,
          "id": 9655,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@peggedTokenIndex_9651": {
          "entryPoint": null,
          "id": 9651,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@protThrld_9693": {
          "entryPoint": null,
          "id": 9693,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@proxiableUUID_1217": {
          "entryPoint": 5850,
          "id": 1217,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@redeemTC_12456": {
          "entryPoint": 6705,
          "id": 12456,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@redeemTCandTPFee_9676": {
          "entryPoint": null,
          "id": 9676,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@redeemTCandTP_12552": {
          "entryPoint": 4523,
          "id": 12552,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@redeemTCandTPto_12581": {
          "entryPoint": 6762,
          "id": 12581,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@redeemTCto_12477": {
          "entryPoint": 8283,
          "id": 12477,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@redeemTP_12500": {
          "entryPoint": 4540,
          "id": 12500,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@redeemTPto_12524": {
          "entryPoint": 6029,
          "id": 12524,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@refreshACBalance_9556": {
          "entryPoint": 8221,
          "id": 9556,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@safeTransferFrom_6027": {
          "entryPoint": 18571,
          "id": 6027,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@safeTransfer_6001": {
          "entryPoint": 19100,
          "id": 6001,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@setAppreciationFactor_10863": {
          "entryPoint": 4356,
          "id": 10863,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setBes_13937": {
          "entryPoint": 7176,
          "id": 13937,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setEmaCalculationBlockSpan_13831": {
          "entryPoint": 5272,
          "id": 13831,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setFeeRetainer_10681": {
          "entryPoint": 6202,
          "id": 10681,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setLiqEnabled_10837": {
          "entryPoint": 4663,
          "id": 10837,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setLiqThrld_10824": {
          "entryPoint": 4748,
          "id": 10824,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setMintTCandTPFee_10772": {
          "entryPoint": 4691,
          "id": 10772,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setMocAppreciationBeneficiaryAddress_10798": {
          "entryPoint": 4705,
          "id": 10798,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setMocFeeFlowAddress_10785": {
          "entryPoint": 4436,
          "id": 10785,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setPauser_16703": {
          "entryPoint": 4762,
          "id": 16703,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setProtThrld_10811": {
          "entryPoint": 6277,
          "id": 10811,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setRedeemTCandTPFee_10759": {
          "entryPoint": 6249,
          "id": 10759,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setSuccessFee_10850": {
          "entryPoint": 7121,
          "id": 10850,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setSwapTCforTPFee_10746": {
          "entryPoint": 6263,
          "id": 10746,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setSwapTPforTCFee_10733": {
          "entryPoint": 4479,
          "id": 10733,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setSwapTPforTPFee_10720": {
          "entryPoint": 6188,
          "id": 10720,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setTcMintFee_10694": {
          "entryPoint": 9097,
          "id": 10694,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@setTcRedeemFee_10707": {
          "entryPoint": 7135,
          "id": 10707,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@settleLiquidationPrices_10301": {
          "entryPoint": 12526,
          "id": 10301,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@shouldCalculateEma_13781": {
          "entryPoint": null,
          "id": 13781,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@stoppable_16545": {
          "entryPoint": null,
          "id": 16545,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@successFee_9660": {
          "entryPoint": null,
          "id": 9660,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@swapTCforTPFee_9674": {
          "entryPoint": null,
          "id": 9674,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@swapTCforTP_9500": {
          "entryPoint": 6779,
          "id": 9500,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@swapTCforTPto_9529": {
          "entryPoint": 4325,
          "id": 9529,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@swapTPforTCFee_9672": {
          "entryPoint": null,
          "id": 9672,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@swapTPforTC_9443": {
          "entryPoint": 4493,
          "id": 9443,
          "parameterSlots": 4,
          "returnSlots": 2
        },
        "@swapTPforTCto_9472": {
          "entryPoint": 5489,
          "id": 9472,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@swapTPforTPFee_9670": {
          "entryPoint": null,
          "id": 9670,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@swapTPforTP_9383": {
          "entryPoint": 7190,
          "id": 9383,
          "parameterSlots": 5,
          "returnSlots": 2
        },
        "@swapTPforTPto_9415": {
          "entryPoint": 4596,
          "id": 9415,
          "parameterSlots": 6,
          "returnSlots": 2
        },
        "@tcMintFee_9666": {
          "entryPoint": null,
          "id": 9666,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tcRedeemFee_9668": {
          "entryPoint": null,
          "id": 9668,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tcToken_9640": {
          "entryPoint": null,
          "id": 9640,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tpCtarg_9691": {
          "entryPoint": 6291,
          "id": 9691,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tpEma_13524": {
          "entryPoint": 8339,
          "id": 13524,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tpMintFee_9681": {
          "entryPoint": 8175,
          "id": 9681,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tpRedeemFee_9684": {
          "entryPoint": 5816,
          "id": 9684,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@tpTokens_9646": {
          "entryPoint": 4370,
          "id": 9646,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@unchecked_inc_18035": {
          "entryPoint": null,
          "id": 18035,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@unpause_16668": {
          "entryPoint": 5286,
          "id": 16668,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@updateEmas_13818": {
          "entryPoint": 7208,
          "id": 13818,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@updateTPema_13665": {
          "entryPoint": 14629,
          "id": 13665,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@upgradeToAndCall_1260": {
          "entryPoint": 5588,
          "id": 1260,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@upgradeTo_1239": {
          "entryPoint": 5040,
          "id": 1239,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@verifyCallResultFromTarget_6535": {
          "entryPoint": 19925,
          "id": 6535,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "@verifyCallResult_2827": {
          "entryPoint": 19585,
          "id": 2827,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 20203,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_bytes_memory_ptr": {
          "entryPoint": 20598,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_bool": {
          "entryPoint": 20490,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 21196,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": 21410,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32t_bool_fromMemory": {
          "entryPoint": 21159,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_contract$_IGovernor_$17140": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_struct$_InitializeParams_$9113_calldata_ptr": {
          "entryPoint": 20842,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr": {
          "entryPoint": 20926,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 20144,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256t_address": {
          "entryPoint": 20794,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_uint256": {
          "entryPoint": 20169,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_uint256t_address": {
          "entryPoint": 20519,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256": {
          "entryPoint": 20282,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256t_address": {
          "entryPoint": 20326,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256": {
          "entryPoint": 20232,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_address": {
          "entryPoint": 20067,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256": {
          "entryPoint": 20867,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 5
        },
        "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256t_address": {
          "entryPoint": 20391,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 6
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 21703,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IGovernor_$17140__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_IMocRC20_$17171__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_contract$_MocTC_$17997__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 21731,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 20944,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 21020,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 21435,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr__to_t_struct$_PeggedTokenParams_$11097_memory_ptr__fromStack_reversed": {
          "entryPoint": 21225,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
          "entryPoint": 21550,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_contract$_IPriceProvider_$17183__to_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "checked_add_t_int256": {
          "entryPoint": 21510,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 21118,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 21376,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 21353,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_int256": {
          "entryPoint": 21628,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 21334,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 21667,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "panic_error_0x11": {
          "entryPoint": 21096,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 21137,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 20576,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_address": {
          "entryPoint": 20046,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "validator_revert_bool": {
          "entryPoint": 20476,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:20443:73",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:73",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "59:86:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "123:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "132:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "125:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "125:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "125:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "82:5:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "93:5:73"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:3:73",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "113:1:73",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "104:3:73"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "104:11:73"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "117:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "100:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:19:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "89:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "89:31:73"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "79:2:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "79:42:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "72:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "72:50:73"
                      },
                      "nodeType": "YulIf",
                      "src": "69:70:73"
                    }
                  ]
                },
                "name": "validator_revert_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "48:5:73",
                    "type": ""
                  }
                ],
                "src": "14:131:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "288:383:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "335:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "344:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "347:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "337:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "337:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "337:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "309:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "318:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "305:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "305:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "330:3:73",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "301:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "301:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "298:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "360:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "383:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "370:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "370:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "360:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "402:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "429:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "440:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "425:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "425:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "412:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "412:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "402:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "453:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "480:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "491:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "476:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "476:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "463:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "463:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "453:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "504:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "531:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "542:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "527:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "527:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "514:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "514:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "504:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "555:46:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "585:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "596:3:73",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "581:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "581:19:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "568:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "568:33:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "559:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "635:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "610:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "610:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "610:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "650:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "660:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "650:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "222:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "233:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "245:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "253:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "261:6:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "269:6:73",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "277:6:73",
                    "type": ""
                  }
                ],
                "src": "150:521:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "805:119:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "815:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "827:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "838:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "823:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "823:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "815:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "857:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "868:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "850:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "850:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "850:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "895:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "906:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "891:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "891:18:73"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "911:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "884:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "884:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "884:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "766:9:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "777:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "785:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "796:4:73",
                    "type": ""
                  }
                ],
                "src": "676:248:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "999:110:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1045:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1054:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1057:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1047:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1047:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1047:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1020:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1029:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1016:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1016:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1041:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1012:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1012:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "1009:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1070:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1093:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1080:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1080:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1070:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "965:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "976:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "988:6:73",
                    "type": ""
                  }
                ],
                "src": "929:180:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1233:102:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1243:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1255:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1266:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1251:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1251:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1243:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1285:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1300:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1316:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1321:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1312:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1312:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1325:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1308:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1308:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1296:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1296:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1278:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1278:51:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1278:51:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IMocRC20_$17171__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1202:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1213:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1224:4:73",
                    "type": ""
                  }
                ],
                "src": "1114:221:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1427:161:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1473:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1482:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1485:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1475:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1475:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1475:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1448:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1457:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1444:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1444:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1469:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1440:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1440:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "1437:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1498:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1521:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1508:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1508:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1498:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1540:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1567:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1578:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1563:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1563:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1550:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1550:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "1540:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1385:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1396:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1408:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1416:6:73",
                    "type": ""
                  }
                ],
                "src": "1340:248:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1694:76:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1704:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1716:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1727:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1712:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1712:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1704:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1746:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1757:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1739:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1739:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1739:25:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1663:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1674:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1685:4:73",
                    "type": ""
                  }
                ],
                "src": "1593:177:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1895:102:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1905:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1917:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1928:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1913:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1913:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1905:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1947:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1962:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1978:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1983:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1974:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1974:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1987:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1970:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1970:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1958:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1958:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1940:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1940:51:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1940:51:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_IGovernor_$17140__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1864:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1875:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1886:4:73",
                    "type": ""
                  }
                ],
                "src": "1775:222:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2072:177:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2118:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2127:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2130:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2120:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2120:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2120:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2093:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2102:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2089:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2089:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2114:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2085:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2085:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "2082:52:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2143:36:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2169:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2156:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2156:23:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "2147:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2213:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "2188:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2188:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2188:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2228:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "2238:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2228:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2038:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2049:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2061:6:73",
                    "type": ""
                  }
                ],
                "src": "2002:247:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2375:264:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2422:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2431:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2434:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2424:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2424:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2424:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2396:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2405:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2392:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2392:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2417:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2388:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2388:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "2385:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2447:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2470:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2457:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2457:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2447:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2489:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2516:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2527:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2512:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2512:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2499:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2499:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2489:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2540:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2567:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2578:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2563:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2563:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2550:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2550:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2540:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2591:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2618:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2629:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2614:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2614:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2601:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2601:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "2591:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2317:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2328:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2340:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2348:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2356:6:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "2364:6:73",
                    "type": ""
                  }
                ],
                "src": "2254:385:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2748:212:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2794:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2803:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2806:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2796:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2796:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2796:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2769:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2778:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2765:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2765:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2790:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2761:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2761:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "2758:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2819:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2842:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2829:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2829:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2819:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2861:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2888:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2899:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2884:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2884:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2871:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2871:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2861:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2912:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2939:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2950:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2935:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2935:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2922:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2922:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2912:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2698:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "2709:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2721:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2729:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2737:6:73",
                    "type": ""
                  }
                ],
                "src": "2644:316:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3086:331:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3133:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3142:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3145:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3135:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3135:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3135:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3107:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3116:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3103:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3103:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3128:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3099:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3099:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "3096:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3158:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3181:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3168:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3168:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3158:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3200:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3227:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3238:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3223:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3223:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3210:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3210:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3200:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3251:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3278:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3289:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3274:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3274:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3261:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3261:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "3251:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3302:45:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3332:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3343:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3328:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3328:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3315:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3315:32:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "3306:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3381:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "3356:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3356:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3356:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3396:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "3406:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "3396:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3028:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3039:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3051:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3059:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3067:6:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "3075:6:73",
                    "type": ""
                  }
                ],
                "src": "2965:452:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3577:435:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3624:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3633:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3636:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3626:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3626:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3626:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3598:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3607:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3594:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3594:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3619:3:73",
                            "type": "",
                            "value": "192"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3590:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3590:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "3587:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3649:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3672:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3659:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3659:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3649:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3691:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3718:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3729:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3714:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3714:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3701:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3701:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3691:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3742:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3769:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3780:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3765:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3765:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3752:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3752:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "3742:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3793:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3820:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3831:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3816:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3816:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3803:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3803:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "3793:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3844:43:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3871:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3882:3:73",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3867:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3867:19:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3854:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3854:33:73"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "3844:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3896:46:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3926:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3937:3:73",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3922:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3922:19:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3909:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3909:33:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "3900:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3976:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "3951:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3951:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3951:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3991:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4001:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value5",
                          "nodeType": "YulIdentifier",
                          "src": "3991:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3503:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3514:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3526:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3534:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3542:6:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "3550:6:73",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "3558:6:73",
                    "type": ""
                  },
                  {
                    "name": "value5",
                    "nodeType": "YulTypedName",
                    "src": "3566:6:73",
                    "type": ""
                  }
                ],
                "src": "3422:590:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4059:76:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4113:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4122:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4125:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4115:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4115:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4115:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4082:5:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4103:5:73"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4096:6:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4096:13:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4089:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4089:21:73"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4079:2:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4079:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4072:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4072:40:73"
                      },
                      "nodeType": "YulIf",
                      "src": "4069:60:73"
                    }
                  ]
                },
                "name": "validator_revert_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4048:5:73",
                    "type": ""
                  }
                ],
                "src": "4017:118:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4207:174:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4253:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4262:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4265:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4255:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4255:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4255:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4228:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4237:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4224:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4224:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4249:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4220:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4220:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "4217:52:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4278:36:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4304:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4291:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4291:23:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "4282:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4345:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "4323:21:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4323:28:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4323:28:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4360:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4370:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4360:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4173:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4184:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4196:6:73",
                    "type": ""
                  }
                ],
                "src": "4140:241:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4481:92:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4491:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4503:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4514:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4499:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4499:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4491:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4533:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4558:6:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4551:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4551:14:73"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4544:6:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4544:22:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4526:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4526:41:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4526:41:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4450:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4461:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4472:4:73",
                    "type": ""
                  }
                ],
                "src": "4386:187:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4682:279:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4728:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4737:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4740:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4730:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4730:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4730:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4703:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4712:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4699:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4699:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4724:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4695:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4695:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "4692:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4753:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4776:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4763:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4763:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4753:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4795:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4822:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4833:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4818:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4818:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4805:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4805:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4795:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4846:45:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4876:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4887:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4872:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4872:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4859:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4859:32:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "4850:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4925:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "4900:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4900:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4900:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4940:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "4950:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4940:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4632:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4643:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4655:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4663:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4671:6:73",
                    "type": ""
                  }
                ],
                "src": "4578:383:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5119:145:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5129:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5141:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5152:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5137:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5137:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5129:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5171:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "5182:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5164:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5164:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5164:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5209:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5220:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5205:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5205:18:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5229:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5245:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5250:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5241:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5241:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5254:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5237:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5237:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5225:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5225:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5198:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5198:60:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5198:60:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_contract$_IPriceProvider_$17183__to_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5080:9:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5091:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5099:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5110:4:73",
                    "type": ""
                  }
                ],
                "src": "4966:298:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5370:102:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "5380:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5392:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5403:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5388:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5388:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5380:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5422:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5437:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5453:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5458:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5449:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5449:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5462:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5445:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5445:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "5433:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5433:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5415:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5415:51:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5415:51:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5339:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5350:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5361:4:73",
                    "type": ""
                  }
                ],
                "src": "5269:203:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5509:95:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5526:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5533:3:73",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5538:10:73",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "5529:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5529:20:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5519:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5519:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5519:31:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5566:1:73",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5569:4:73",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5559:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5559:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5559:15:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5590:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5593:4:73",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "5583:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5583:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5583:15:73"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "5477:127:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5705:960:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5751:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5760:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5763:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5753:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5753:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5753:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5726:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5735:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5722:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5722:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5747:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5718:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5718:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "5715:52:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5776:36:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5802:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5789:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5789:23:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "5780:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5846:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "5821:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5821:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5821:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5861:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "5871:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5861:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5885:46:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5916:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5927:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5912:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5912:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5899:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5899:32:73"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "5889:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5940:28:73",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5950:18:73",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "5944:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5995:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6004:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6007:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5997:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5997:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5997:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "5983:6:73"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5991:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "5980:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5980:14:73"
                      },
                      "nodeType": "YulIf",
                      "src": "5977:34:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6020:32:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6034:9:73"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "6045:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6030:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6030:22:73"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "6024:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6100:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6109:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6112:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6102:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6102:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6102:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6079:2:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6083:4:73",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6075:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6075:13:73"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6090:7:73"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6071:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6071:27:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "6064:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6064:35:73"
                      },
                      "nodeType": "YulIf",
                      "src": "6061:55:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6125:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "6148:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6135:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6135:16:73"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "6129:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6174:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "6176:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6176:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6176:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "6166:2:73"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "6170:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6163:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6163:10:73"
                      },
                      "nodeType": "YulIf",
                      "src": "6160:36:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6205:17:73",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6219:2:73",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "6215:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6215:7:73"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "6209:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6231:23:73",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6251:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "6245:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6245:9:73"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "6235:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6263:71:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "6285:6:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "6309:2:73"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6313:4:73",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "6305:3:73"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6305:13:73"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "6320:2:73"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "6301:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6301:22:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6325:2:73",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6297:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6297:31:73"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "6330:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6293:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6293:40:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6281:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6281:53:73"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "6267:10:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6393:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "6395:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6395:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6395:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "6352:10:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6364:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6349:2:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6349:18:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "6372:10:73"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6384:6:73"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6369:2:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6369:22:73"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "6346:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6346:46:73"
                      },
                      "nodeType": "YulIf",
                      "src": "6343:72:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6431:2:73",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "6435:10:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6424:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6424:22:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6424:22:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "6462:6:73"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "6470:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6455:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6455:18:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6455:18:73"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6519:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6528:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6531:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6521:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6521:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6521:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "6496:2:73"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "6500:2:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6492:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6492:11:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6505:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6488:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6488:20:73"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "6510:7:73"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "6485:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6485:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "6482:53:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "6561:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6569:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6557:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6557:15:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6578:2:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6582:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6574:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6574:11:73"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "6587:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "6544:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6544:46:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6544:46:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "6614:6:73"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "6622:2:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6610:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6610:15:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6627:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6606:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6606:24:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6632:1:73",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6599:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6599:35:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6599:35:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6643:16:73",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "6653:6:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6643:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5663:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5674:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5686:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5694:6:73",
                    "type": ""
                  }
                ],
                "src": "5609:1056:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6771:76:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "6781:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6793:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6804:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6789:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6789:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6781:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6823:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "6834:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6816:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6816:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6816:25:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6740:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6751:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6762:4:73",
                    "type": ""
                  }
                ],
                "src": "6670:177:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6939:228:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6985:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6994:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6997:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6987:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6987:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6987:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6960:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6969:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6956:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6956:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6981:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6952:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6952:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "6949:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7010:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7033:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7020:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7020:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7010:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7052:45:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7082:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7093:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7078:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7078:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7065:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7065:32:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "7056:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7131:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "7106:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7106:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7106:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7146:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "7156:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7146:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6897:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6908:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6920:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6928:6:73",
                    "type": ""
                  }
                ],
                "src": "6852:315:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7288:102:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7298:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7310:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7321:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7306:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7306:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7298:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7340:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7355:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7371:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7376:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7367:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7367:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7380:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7363:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7363:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "7351:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7351:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7333:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7333:51:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7333:51:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_contract$_MocTC_$17997__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7257:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7268:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7279:4:73",
                    "type": ""
                  }
                ],
                "src": "7172:218:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7518:135:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "7528:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7540:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7551:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7536:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7536:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7528:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7570:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "7581:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7563:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7563:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7563:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7608:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7619:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7604:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7604:18:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7638:6:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7631:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7631:14:73"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7624:6:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7624:22:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7597:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7597:50:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7597:50:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7479:9:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7490:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7498:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7509:4:73",
                    "type": ""
                  }
                ],
                "src": "7395:258:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7764:97:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7811:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7820:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7823:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7813:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7813:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7813:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7785:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7794:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7781:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7781:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7806:3:73",
                            "type": "",
                            "value": "640"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7777:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7777:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "7774:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7836:19:73",
                      "value": {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "7846:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7836:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_struct$_InitializeParams_$9113_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7730:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7741:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7753:6:73",
                    "type": ""
                  }
                ],
                "src": "7658:203:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8004:316:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8051:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8060:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8063:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8053:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8053:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8053:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8025:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8034:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8021:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8021:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8046:3:73",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8017:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8017:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "8014:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8076:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8099:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8086:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8086:23:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8076:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8118:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8145:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8156:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8141:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8141:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8128:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8128:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "8118:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8169:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8196:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8207:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8192:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8192:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8179:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8179:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "8169:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8220:42:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8247:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8258:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8243:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8243:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8230:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8230:32:73"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "8220:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8271:43:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8298:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8309:3:73",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8294:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8294:19:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8281:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8281:33:73"
                      },
                      "variableNames": [
                        {
                          "name": "value4",
                          "nodeType": "YulIdentifier",
                          "src": "8271:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7938:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7949:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7961:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7969:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7977:6:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "7985:6:73",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "7993:6:73",
                    "type": ""
                  }
                ],
                "src": "7866:454:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8433:97:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8480:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8489:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8492:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8482:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8482:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8482:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8454:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8463:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8450:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8450:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8475:3:73",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8446:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8446:33:73"
                      },
                      "nodeType": "YulIf",
                      "src": "8443:53:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8505:19:73",
                      "value": {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "8515:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8505:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8399:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8410:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8422:6:73",
                    "type": ""
                  }
                ],
                "src": "8325:205:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8624:177:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8670:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8679:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8682:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8672:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8672:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8672:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8645:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8654:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8641:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8641:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8666:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8637:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8637:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "8634:52:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8695:36:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8721:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8708:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8708:23:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "8699:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8765:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "8740:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8740:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8740:31:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8780:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "8790:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8780:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_contract$_IGovernor_$17140",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8590:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8601:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8613:6:73",
                    "type": ""
                  }
                ],
                "src": "8535:266:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8980:234:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8997:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9008:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8990:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8990:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8990:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9031:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9042:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9027:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9027:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9047:2:73",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9020:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9020:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9020:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9070:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9081:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9066:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9066:18:73"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9086:34:73",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9059:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9059:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9059:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9141:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9152:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9137:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9137:18:73"
                          },
                          {
                            "hexValue": "64656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9157:14:73",
                            "type": "",
                            "value": "delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9130:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9130:42:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9130:42:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9181:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9193:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9204:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9189:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9189:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9181:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8957:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8971:4:73",
                    "type": ""
                  }
                ],
                "src": "8806:408:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9393:234:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9410:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9421:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9403:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9403:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9403:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9444:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9455:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9440:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9440:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9460:2:73",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9433:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9433:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9433:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9483:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9494:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9479:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9479:18:73"
                          },
                          {
                            "hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9499:34:73",
                            "type": "",
                            "value": "Function must be called through "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9472:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9472:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9472:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9554:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9565:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9550:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9550:18:73"
                          },
                          {
                            "hexValue": "6163746976652070726f7879",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9570:14:73",
                            "type": "",
                            "value": "active proxy"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9543:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9543:42:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9543:42:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9594:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9606:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9617:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9602:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9602:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9594:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9370:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9384:4:73",
                    "type": ""
                  }
                ],
                "src": "9219:408:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9806:246:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9823:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9834:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9816:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9816:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9816:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9857:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9868:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9853:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9853:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9873:2:73",
                            "type": "",
                            "value": "56"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9846:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9846:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9846:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9896:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9907:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9892:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9892:18:73"
                          },
                          {
                            "hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9912:34:73",
                            "type": "",
                            "value": "UUPSUpgradeable: must not be cal"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9885:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9885:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9885:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9967:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9978:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9963:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9963:18:73"
                          },
                          {
                            "hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9983:26:73",
                            "type": "",
                            "value": "led through delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9956:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9956:54:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9956:54:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10019:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10031:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10042:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10027:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10027:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10019:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9783:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9797:4:73",
                    "type": ""
                  }
                ],
                "src": "9632:420:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10089:95:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10106:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10113:3:73",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10118:10:73",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "10109:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10109:20:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10099:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10099:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10099:31:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10146:1:73",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10149:4:73",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10139:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10139:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10139:15:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10170:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10173:4:73",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "10163:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10163:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10163:15:73"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "10057:127:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10237:77:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "10247:16:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "10258:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "10261:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10254:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10254:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "10247:3:73"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10286:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "10288:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10288:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10288:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "10278:1:73"
                          },
                          {
                            "name": "sum",
                            "nodeType": "YulIdentifier",
                            "src": "10281:3:73"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "10275:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10275:10:73"
                      },
                      "nodeType": "YulIf",
                      "src": "10272:36:73"
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "10220:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "10223:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "10229:3:73",
                    "type": ""
                  }
                ],
                "src": "10189:125:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10351:95:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10368:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10375:3:73",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10380:10:73",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "10371:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10371:20:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10361:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10361:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10361:31:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10408:1:73",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10411:4:73",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10401:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10401:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10401:15:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10432:1:73",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10435:4:73",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "10425:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10425:15:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10425:15:73"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "10319:127:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10546:211:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10592:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10601:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10604:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10594:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10594:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10594:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10567:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10576:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10563:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10563:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10588:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "10559:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10559:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "10556:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10617:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10633:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "10627:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10627:16:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "10617:6:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10652:38:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10675:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10686:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10671:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10671:18:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "10665:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10665:25:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "10656:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "10721:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "10699:21:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10699:28:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10699:28:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10736:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "10746:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "10736:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10504:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "10515:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "10527:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "10535:6:73",
                    "type": ""
                  }
                ],
                "src": "10451:306:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10936:236:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10953:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10964:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10946:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10946:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10946:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10987:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10998:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10983:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10983:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11003:2:73",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10976:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10976:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10976:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11026:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11037:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11022:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11022:18:73"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11042:34:73",
                            "type": "",
                            "value": "Initializable: contract is alrea"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11015:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11015:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11015:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11097:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11108:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11093:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11093:18:73"
                          },
                          {
                            "hexValue": "647920696e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11113:16:73",
                            "type": "",
                            "value": "dy initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11086:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11086:44:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11086:44:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11139:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11151:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11162:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11147:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11147:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11139:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10913:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10927:4:73",
                    "type": ""
                  }
                ],
                "src": "10762:410:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11284:87:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11294:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11306:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11317:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11302:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11302:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11294:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11336:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11351:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11359:4:73",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11347:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11347:17:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11329:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11329:36:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11329:36:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11253:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11264:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11275:4:73",
                    "type": ""
                  }
                ],
                "src": "11177:194:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11454:167:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11500:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11509:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11512:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "11502:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11502:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11502:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11475:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11484:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "11471:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11471:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11496:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "11467:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11467:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "11464:52:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11525:29:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11544:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "11538:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11538:16:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "11529:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11585:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "11563:21:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11563:28:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11563:28:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11600:15:73",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "11610:5:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "11600:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11420:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "11431:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11443:6:73",
                    "type": ""
                  }
                ],
                "src": "11376:245:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11801:707:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11811:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11823:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11834:3:73",
                            "type": "",
                            "value": "224"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11819:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11819:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11811:4:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11847:33:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "11873:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "11860:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11860:20:73"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "11851:5:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11914:5:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "11889:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11889:31:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11889:31:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11929:29:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11947:3:73",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11952:1:73",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "11943:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11943:11:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11956:1:73",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "11939:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11939:19:73"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "11933:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11974:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11989:5:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11996:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11985:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11985:14:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11967:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11967:33:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11967:33:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12009:46:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12041:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12049:4:73",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12037:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12037:17:73"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "12024:12:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12024:31:73"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "12013:7:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "12089:7:73"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_address",
                          "nodeType": "YulIdentifier",
                          "src": "12064:24:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12064:33:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12064:33:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12117:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12128:4:73",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12113:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12113:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "12139:7:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12148:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12135:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12135:16:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12106:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12106:46:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12106:46:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12172:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12183:4:73",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12168:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12168:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12207:6:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12215:4:73",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12203:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12203:17:73"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12190:12:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12190:31:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12161:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12161:61:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12161:61:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12242:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12253:4:73",
                                "type": "",
                                "value": "0x60"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12238:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12238:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12277:6:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12285:4:73",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12273:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12273:17:73"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12260:12:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12260:31:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12231:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12231:61:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12231:61:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12312:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12323:4:73",
                                "type": "",
                                "value": "0x80"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12308:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12308:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12347:6:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12355:4:73",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12343:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12343:17:73"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12330:12:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12330:31:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12301:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12301:61:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12301:61:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12382:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12393:4:73",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12378:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12378:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12417:6:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12425:4:73",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12413:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12413:17:73"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12400:12:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12400:31:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12371:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12371:61:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12371:61:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12452:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12463:4:73",
                                "type": "",
                                "value": "0xc0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12448:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12448:20:73"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12487:6:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12495:4:73",
                                    "type": "",
                                    "value": "0xc0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12483:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12483:17:73"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12470:12:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12470:31:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12441:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12441:61:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12441:61:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr__to_t_struct$_PeggedTokenParams_$11097_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11770:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11781:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11792:4:73",
                    "type": ""
                  }
                ],
                "src": "11626:882:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12562:79:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "12572:17:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "12584:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "12587:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "12580:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12580:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "12572:4:73"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12613:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "12615:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12615:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12615:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "12604:4:73"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "12610:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "12601:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12601:11:73"
                      },
                      "nodeType": "YulIf",
                      "src": "12598:37:73"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "12544:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "12547:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "12553:4:73",
                    "type": ""
                  }
                ],
                "src": "12513:128:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12698:116:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "12708:20:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "12723:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "12726:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "12719:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12719:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "12708:7:73"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12786:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "12788:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12788:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12788:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12757:1:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "12750:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12750:9:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12764:1:73"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "product",
                                        "nodeType": "YulIdentifier",
                                        "src": "12771:7:73"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "12780:1:73"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "12767:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12767:15:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "12761:2:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12761:22:73"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "12747:2:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12747:37:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "12740:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12740:45:73"
                      },
                      "nodeType": "YulIf",
                      "src": "12737:71:73"
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "12677:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "12680:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "12686:7:73",
                    "type": ""
                  }
                ],
                "src": "12646:168:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12865:171:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12896:111:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12917:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12924:3:73",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12929:10:73",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "12920:3:73"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12920:20:73"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "12910:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12910:31:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12910:31:73"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12961:1:73",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12964:4:73",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "12954:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12954:15:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12954:15:73"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12989:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "12992:4:73",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "12982:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12982:15:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12982:15:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "12885:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "12878:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12878:9:73"
                      },
                      "nodeType": "YulIf",
                      "src": "12875:132:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13016:14:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "13025:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "13028:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "13021:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13021:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "13016:1:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "12850:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "12853:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "12859:1:73",
                    "type": ""
                  }
                ],
                "src": "12819:217:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13198:162:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "13208:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13220:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13231:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13216:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13216:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13208:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13250:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "13261:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13243:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13243:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13243:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13288:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13299:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13284:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13284:18:73"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "13304:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13277:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13277:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13277:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13331:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13342:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13327:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13327:18:73"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "13347:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13320:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13320:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13320:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13151:9:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "13162:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "13170:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13178:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13189:4:73",
                    "type": ""
                  }
                ],
                "src": "13041:319:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13550:206:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "13560:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13572:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13583:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13568:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13568:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13560:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13603:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "13614:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13596:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13596:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13596:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13641:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13652:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13637:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13637:18:73"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "13657:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13630:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13630:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13630:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13684:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13695:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13680:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13680:18:73"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "13700:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13673:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13673:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13673:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13727:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13738:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13723:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13723:18:73"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "13743:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13716:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13716:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13716:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13495:9:73",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "13506:6:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "13514:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "13522:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13530:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13541:4:73",
                    "type": ""
                  }
                ],
                "src": "13365:391:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13842:103:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "13888:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13897:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13900:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "13890:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "13890:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "13890:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "13863:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13872:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "13859:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13859:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13884:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "13855:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13855:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "13852:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13913:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13929:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "13923:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13923:16:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "13913:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13808:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "13819:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13831:6:73",
                    "type": ""
                  }
                ],
                "src": "13761:184:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14124:236:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14141:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14152:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14134:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14134:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14134:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14175:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14186:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14171:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14171:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14191:2:73",
                            "type": "",
                            "value": "46"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14164:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14164:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14164:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14214:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14225:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14210:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14210:18:73"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14230:34:73",
                            "type": "",
                            "value": "ERC1967Upgrade: new implementati"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14203:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14203:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14203:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14285:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14296:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14281:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14281:18:73"
                          },
                          {
                            "hexValue": "6f6e206973206e6f742055555053",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14301:16:73",
                            "type": "",
                            "value": "on is not UUPS"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14274:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14274:44:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14274:44:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14327:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14339:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14350:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14335:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14335:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14327:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14101:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14115:4:73",
                    "type": ""
                  }
                ],
                "src": "13950:410:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14539:231:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14556:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14567:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14549:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14549:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14549:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14590:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14601:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14586:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14586:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14606:2:73",
                            "type": "",
                            "value": "41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14579:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14579:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14579:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14629:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14640:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14625:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14625:18:73"
                          },
                          {
                            "hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14645:34:73",
                            "type": "",
                            "value": "ERC1967Upgrade: unsupported prox"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14618:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14618:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14618:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14700:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14711:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14696:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14696:18:73"
                          },
                          {
                            "hexValue": "6961626c6555554944",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "14716:11:73",
                            "type": "",
                            "value": "iableUUID"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "14689:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14689:39:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14689:39:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14737:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14749:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14760:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "14745:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14745:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "14737:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14516:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "14530:4:73",
                    "type": ""
                  }
                ],
                "src": "14365:405:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14856:103:73",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14902:16:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14911:1:73",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14914:1:73",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "14904:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14904:12:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14904:12:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14877:7:73"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14886:9:73"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14873:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14873:23:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14898:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "14869:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14869:32:73"
                      },
                      "nodeType": "YulIf",
                      "src": "14866:52:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "14927:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14943:9:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "14937:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14937:16:73"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "14927:6:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "14822:9:73",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "14833:7:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "14845:6:73",
                    "type": ""
                  }
                ],
                "src": "14775:184:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15093:145:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "15103:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15115:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15126:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15111:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15111:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15103:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15145:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "15160:6:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15176:3:73",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15181:1:73",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "15172:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15172:11:73"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15185:1:73",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15168:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15168:19:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "15156:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15156:32:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15138:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15138:51:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15138:51:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15209:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15220:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15205:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15205:18:73"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "15225:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15198:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15198:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15198:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15054:9:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "15065:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "15073:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15084:4:73",
                    "type": ""
                  }
                ],
                "src": "14964:274:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15408:162:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "15418:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15430:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15441:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15426:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15426:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15418:4:73"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15460:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "15471:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15453:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15453:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15453:25:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15498:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15509:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15494:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15494:18:73"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "15514:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15487:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15487:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15487:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15541:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15552:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15537:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15537:18:73"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "15557:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15530:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15530:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15530:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15361:9:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "15372:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "15380:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "15388:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15399:4:73",
                    "type": ""
                  }
                ],
                "src": "15243:327:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "15749:233:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15766:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15777:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15759:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15759:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15759:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15800:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15811:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15796:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15796:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15816:2:73",
                            "type": "",
                            "value": "43"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15789:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15789:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15789:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15839:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15850:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15835:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15835:18:73"
                          },
                          {
                            "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15855:34:73",
                            "type": "",
                            "value": "Initializable: contract is not i"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15828:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15828:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15828:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15910:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15921:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15906:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15906:18:73"
                          },
                          {
                            "hexValue": "6e697469616c697a696e67",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "15926:13:73",
                            "type": "",
                            "value": "nitializing"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "15899:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15899:41:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "15899:41:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15949:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "15961:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15972:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "15957:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15957:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "15949:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "15726:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "15740:4:73",
                    "type": ""
                  }
                ],
                "src": "15575:407:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16034:169:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "16044:16:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "16055:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "16058:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16051:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16051:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "16044:3:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16069:21:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "sum",
                            "nodeType": "YulIdentifier",
                            "src": "16083:3:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "16088:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "16079:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16079:11:73"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "16073:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16099:19:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "16113:1:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16116:1:73",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "16109:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16109:9:73"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "16103:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "16175:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "16177:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "16177:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "16177:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "16144:2:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16137:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16137:10:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16149:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16133:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16133:19:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "16158:2:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16169:2:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16162:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16162:10:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16154:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16154:19:73"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "16130:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16130:44:73"
                      },
                      "nodeType": "YulIf",
                      "src": "16127:70:73"
                    }
                  ]
                },
                "name": "checked_add_t_int256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "16017:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "16020:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "16026:3:73",
                    "type": ""
                  }
                ],
                "src": "15987:216:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16382:235:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16399:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16410:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16392:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16392:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16392:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16433:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16444:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16429:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16429:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16449:2:73",
                            "type": "",
                            "value": "45"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16422:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16422:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16422:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16472:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16483:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16468:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16468:18:73"
                          },
                          {
                            "hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16488:34:73",
                            "type": "",
                            "value": "ERC1967: new implementation is n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16461:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16461:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16461:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16543:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16554:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16539:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16539:18:73"
                          },
                          {
                            "hexValue": "6f74206120636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "16559:15:73",
                            "type": "",
                            "value": "ot a contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16532:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16532:43:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16532:43:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16584:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16596:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16607:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16592:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16592:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16584:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16359:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16373:4:73",
                    "type": ""
                  }
                ],
                "src": "16208:409:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16801:524:73",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16811:32:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16829:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16840:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16825:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16825:18:73"
                      },
                      "variables": [
                        {
                          "name": "tail_1",
                          "nodeType": "YulTypedName",
                          "src": "16815:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16859:9:73"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "16870:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16852:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16852:25:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16852:25:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16886:12:73",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "16896:2:73",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "16890:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16918:9:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16929:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16914:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16914:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16934:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16907:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16907:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16907:30:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16946:17:73",
                      "value": {
                        "name": "tail_1",
                        "nodeType": "YulIdentifier",
                        "src": "16957:6:73"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "16950:3:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16972:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "16992:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "16986:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16986:13:73"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "16976:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "17015:6:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "17023:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17008:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17008:22:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17008:22:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17039:25:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17050:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17061:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17046:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17046:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "17039:3:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17073:29:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "17091:6:73"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "17099:2:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17087:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17087:15:73"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "17077:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17111:10:73",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "17120:1:73",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "17115:1:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17179:120:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "17200:3:73"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "17211:6:73"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "17205:5:73"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17205:13:73"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "17193:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17193:26:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17193:26:73"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "17232:19:73",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "17243:3:73"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "17248:2:73"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "17239:3:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17239:12:73"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17232:3:73"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "17264:25:73",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "17278:6:73"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "17286:2:73"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "17274:3:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17274:15:73"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "17264:6:73"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "17141:1:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "17144:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "17138:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17138:13:73"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "17152:18:73",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "17154:14:73",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "17163:1:73"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17166:1:73",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "17159:3:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17159:9:73"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17154:1:73"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "17134:3:73",
                        "statements": []
                      },
                      "src": "17130:169:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17308:11:73",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "17316:3:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17308:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16762:9:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16773:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16781:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16792:4:73",
                    "type": ""
                  }
                ],
                "src": "16622:703:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17378:152:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "17388:17:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "17400:1:73"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "17403:1:73"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "17396:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17396:9:73"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "17388:4:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17414:19:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "17428:1:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17431:1:73",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "17424:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17424:9:73"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "17418:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17502:22:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "17504:16:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17504:18:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17504:18:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17459:2:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "17452:6:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17452:10:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "diff",
                                    "nodeType": "YulIdentifier",
                                    "src": "17468:4:73"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "17474:1:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "sgt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17464:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17464:12:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17448:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17448:29:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17483:2:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "diff",
                                    "nodeType": "YulIdentifier",
                                    "src": "17491:4:73"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "17497:1:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17487:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17487:12:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17479:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17479:21:73"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "17445:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17445:56:73"
                      },
                      "nodeType": "YulIf",
                      "src": "17442:82:73"
                    }
                  ]
                },
                "name": "checked_sub_t_int256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "17360:1:73",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "17363:1:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "17369:4:73",
                    "type": ""
                  }
                ],
                "src": "17330:200:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17692:218:73",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "17702:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17714:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17725:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17710:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17710:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17702:4:73"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17737:29:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17755:3:73",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17760:1:73",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "17751:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17751:11:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17764:1:73",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "17747:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17747:19:73"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "17741:2:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17782:9:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17797:6:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17805:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17793:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17793:15:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17775:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17775:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17775:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17829:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17840:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17825:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17825:18:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17849:6:73"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17857:2:73"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17845:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17845:15:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17818:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17818:43:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17818:43:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17881:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17892:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17877:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17877:18:73"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "17897:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17870:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17870:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17870:34:73"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17645:9:73",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "17656:6:73",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "17664:6:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "17672:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17683:4:73",
                    "type": ""
                  }
                ],
                "src": "17535:375:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18089:228:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18106:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18117:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18099:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18099:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18099:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18140:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18151:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18136:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18136:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18156:2:73",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18129:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18129:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18129:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18179:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18190:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18175:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18175:18:73"
                          },
                          {
                            "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18195:34:73",
                            "type": "",
                            "value": "Address: delegate call to non-co"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18168:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18168:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18168:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18250:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18261:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18246:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18246:18:73"
                          },
                          {
                            "hexValue": "6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "18266:8:73",
                            "type": "",
                            "value": "ntract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18239:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18239:36:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18239:36:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18284:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "18296:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18307:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18292:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18292:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "18284:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "18066:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "18080:4:73",
                    "type": ""
                  }
                ],
                "src": "17915:402:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18388:184:73",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18398:10:73",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "18407:1:73",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "18402:1:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "18467:63:73",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "18492:3:73"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "18497:1:73"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "18488:3:73"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18488:11:73"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "18511:3:73"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "18516:1:73"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "18507:3:73"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18507:11:73"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "18501:5:73"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18501:18:73"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "18481:6:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18481:39:73"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "18481:39:73"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "18428:1:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18431:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "18425:2:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18425:13:73"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "18439:19:73",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "18441:15:73",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "18450:1:73"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "18453:2:73",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "18446:3:73"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "18446:10:73"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "18441:1:73"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "18421:3:73",
                        "statements": []
                      },
                      "src": "18417:113:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "18550:3:73"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18555:6:73"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18546:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18546:16:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18564:1:73",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "18539:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18539:27:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18539:27:73"
                    }
                  ]
                },
                "name": "copy_memory_to_memory_with_cleanup",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "18366:3:73",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "18371:3:73",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "18376:6:73",
                    "type": ""
                  }
                ],
                "src": "18322:250:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "18714:150:73",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "18724:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "18744:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "18738:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18738:13:73"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "18728:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18799:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18807:4:73",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18795:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18795:17:73"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18814:3:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18819:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "18760:34:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18760:66:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "18760:66:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "18835:23:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "18846:3:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "18851:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "18842:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "18842:16:73"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "18835:3:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "18690:3:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "18695:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "18706:3:73",
                    "type": ""
                  }
                ],
                "src": "18577:287:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19043:232:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19060:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19071:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19053:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19053:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19053:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19094:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19105:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19090:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19090:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19110:2:73",
                            "type": "",
                            "value": "42"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19083:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19083:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19083:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19133:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19144:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19129:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19129:18:73"
                          },
                          {
                            "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19149:34:73",
                            "type": "",
                            "value": "SafeERC20: ERC20 operation did n"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19122:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19122:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19122:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19204:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19215:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19200:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19200:18:73"
                          },
                          {
                            "hexValue": "6f742073756363656564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19220:12:73",
                            "type": "",
                            "value": "ot succeed"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19193:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19193:40:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19193:40:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19242:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19254:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19265:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19250:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19250:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19242:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19020:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19034:4:73",
                    "type": ""
                  }
                ],
                "src": "18869:406:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19401:275:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19418:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19429:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19411:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19411:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19411:21:73"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "19441:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "19461:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "19455:5:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19455:13:73"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "19445:6:73",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19488:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19499:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19484:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19484:18:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "19504:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19477:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19477:34:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19477:34:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "19559:6:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19567:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19555:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19555:15:73"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19576:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19587:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19572:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19572:18:73"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "19592:6:73"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "19520:34:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19520:79:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19520:79:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "19608:62:73",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19624:9:73"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "19643:6:73"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19651:2:73",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19639:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19639:15:73"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19660:2:73",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "19656:3:73"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19656:7:73"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19635:3:73"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19635:29:73"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19620:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19620:45:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19667:2:73",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "19616:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19616:54:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "19608:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19370:9:73",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "19381:6:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19392:4:73",
                    "type": ""
                  }
                ],
                "src": "19280:396:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "19855:228:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "19872:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19883:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19865:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19865:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19865:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19906:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19917:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19902:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19902:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19922:2:73",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19895:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19895:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19895:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19945:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19956:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19941:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19941:18:73"
                          },
                          {
                            "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "19961:34:73",
                            "type": "",
                            "value": "Address: insufficient balance fo"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "19934:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "19934:62:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "19934:62:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20016:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20027:2:73",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20012:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20012:18:73"
                          },
                          {
                            "hexValue": "722063616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20032:8:73",
                            "type": "",
                            "value": "r call"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20005:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20005:36:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20005:36:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20050:27:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20062:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20073:3:73",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20058:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20058:19:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20050:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "19832:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "19846:4:73",
                    "type": ""
                  }
                ],
                "src": "19681:402:73"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "20262:179:73",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20279:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20290:2:73",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20272:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20272:21:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20272:21:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20313:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20324:2:73",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20309:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20309:18:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20329:2:73",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20302:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20302:30:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20302:30:73"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20352:9:73"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20363:2:73",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20348:3:73"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20348:18:73"
                          },
                          {
                            "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "20368:31:73",
                            "type": "",
                            "value": "Address: call to non-contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "20341:6:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20341:59:73"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "20341:59:73"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "20409:26:73",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "20421:9:73"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20432:2:73",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "20417:3:73"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "20417:18:73"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "20409:4:73"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "20239:9:73",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "20253:4:73",
                    "type": ""
                  }
                ],
                "src": "20088:353:73"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        validator_revert_address(value)\n        value4 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IMocRC20_$17171__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IGovernor_$17140__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        validator_revert_address(value)\n        value3 := value\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let value := calldataload(add(headStart, 160))\n        validator_revert_address(value)\n        value5 := value\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address(value)\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint256_t_contract$_IPriceProvider_$17183__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_contract$_MocTC_$17997__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_decode_tuple_t_struct$_InitializeParams_$9113_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 640) { revert(0, 0) }\n        value0 := headStart\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := headStart\n    }\n    function abi_decode_tuple_t_contract$_IGovernor_$17140(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bytes32t_bool_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_struct$_PeggedTokenParams_$11097_calldata_ptr__to_t_struct$_PeggedTokenParams_$11097_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        let value := calldataload(value0)\n        validator_revert_address(value)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value, _1))\n        let value_1 := calldataload(add(value0, 0x20))\n        validator_revert_address(value_1)\n        mstore(add(headStart, 0x20), and(value_1, _1))\n        mstore(add(headStart, 0x40), calldataload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), calldataload(add(value0, 0x60)))\n        mstore(add(headStart, 0x80), calldataload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), calldataload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), calldataload(add(value0, 0xc0)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_rational_0_by_1__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_int256(x, y) -> sum\n    {\n        sum := add(x, y)\n        let _1 := slt(sum, y)\n        let _2 := slt(x, 0)\n        if or(and(iszero(_2), _1), and(_2, iszero(_1))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 64)\n        mstore(headStart, value0)\n        let _1 := 32\n        mstore(add(headStart, _1), 64)\n        let pos := tail_1\n        let length := mload(value1)\n        mstore(tail_1, length)\n        pos := add(headStart, 96)\n        let srcPtr := add(value1, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function checked_sub_t_int256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        let _1 := slt(y, 0)\n        if or(and(iszero(_1), sgt(diff, x)), and(_1, slt(diff, x))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}",
          "id": 73,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "1167": [
          {
            "length": 32,
            "start": 5050
          },
          {
            "length": 32,
            "start": 5123
          },
          {
            "length": 32,
            "start": 5598
          },
          {
            "length": 32,
            "start": 5662
          },
          {
            "length": 32,
            "start": 5863
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x574 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70713468 GT PUSH2 0x2D8 JUMPI DUP1 PUSH4 0xBB4872DE GT PUSH2 0x180 JUMPI DUP1 PUSH4 0xE4012945 GT PUSH2 0xE7 JUMPI DUP1 PUSH4 0xF26114AA GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xF375CFBA GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF375CFBA EQ PUSH2 0x1080 JUMPI DUP1 PUSH4 0xFA6E83BD EQ PUSH2 0x1097 JUMPI DUP1 PUSH4 0xFA79589E EQ PUSH2 0x10AE JUMPI DUP1 PUSH4 0xFDA70F8B EQ PUSH2 0x10CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xF26114AA EQ PUSH2 0x1029 JUMPI DUP1 PUSH4 0xF2808778 EQ PUSH2 0x1049 JUMPI DUP1 PUSH4 0xF30B5614 EQ PUSH2 0x1069 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE4012945 EQ PUSH2 0xF86 JUMPI DUP1 PUSH4 0xE4C0AAF4 EQ PUSH2 0xFA6 JUMPI DUP1 PUSH4 0xE6B1627C EQ PUSH2 0xFC6 JUMPI DUP1 PUSH4 0xE7C25978 EQ PUSH2 0xFE6 JUMPI DUP1 PUSH4 0xE8859A15 EQ PUSH2 0x1001 JUMPI DUP1 PUSH4 0xF21FCC00 EQ PUSH2 0x1016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCEECC55A GT PUSH2 0x139 JUMPI DUP1 PUSH4 0xCEECC55A EQ PUSH2 0xEE7 JUMPI DUP1 PUSH4 0xD1A0FAA0 EQ PUSH2 0xF07 JUMPI DUP1 PUSH4 0xDB796072 EQ PUSH2 0xF1C JUMPI DUP1 PUSH4 0xDE08160F EQ PUSH2 0xF3C JUMPI DUP1 PUSH4 0xDE8D520A EQ PUSH2 0xF5C JUMPI DUP1 PUSH4 0xE23C135C EQ PUSH2 0xF71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBB4872DE EQ PUSH2 0xE38 JUMPI DUP1 PUSH4 0xBBBA7ED9 EQ PUSH2 0xE52 JUMPI DUP1 PUSH4 0xBECACA6B EQ PUSH2 0xE72 JUMPI DUP1 PUSH4 0xC00F538D EQ PUSH2 0xE92 JUMPI DUP1 PUSH4 0xC039CC69 EQ PUSH2 0xEB2 JUMPI DUP1 PUSH4 0xC84353C9 EQ PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 GT PUSH2 0x23F JUMPI DUP1 PUSH4 0x9AD6659D GT PUSH2 0x1F8 JUMPI DUP1 PUSH4 0x9FD0506D GT PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x9FD0506D EQ PUSH2 0xDC2 JUMPI DUP1 PUSH4 0xA8E9AC30 EQ PUSH2 0xDE8 JUMPI DUP1 PUSH4 0xAEA038DC EQ PUSH2 0xE01 JUMPI DUP1 PUSH4 0xBB2AC788 EQ PUSH2 0xE18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9AD6659D EQ PUSH2 0xD40 JUMPI DUP1 PUSH4 0x9BDD7CCE EQ PUSH2 0xD55 JUMPI DUP1 PUSH4 0x9CABFC00 EQ PUSH2 0xD75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xC93 JUMPI DUP1 PUSH4 0x8CFA4241 EQ PUSH2 0xCA8 JUMPI DUP1 PUSH4 0x904AA85B EQ PUSH2 0xCBF JUMPI DUP1 PUSH4 0x9195C85B EQ PUSH2 0xCDF JUMPI DUP1 PUSH4 0x9853C35A EQ PUSH2 0xCFF JUMPI DUP1 PUSH4 0x9ABB14C9 EQ PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7A4FF1D9 GT PUSH2 0x291 JUMPI DUP1 PUSH4 0x7A4FF1D9 EQ PUSH2 0xBE7 JUMPI DUP1 PUSH4 0x7A727FE8 EQ PUSH2 0xC07 JUMPI DUP1 PUSH4 0x7AF5758C EQ PUSH2 0xC1E JUMPI DUP1 PUSH4 0x7CBA2383 EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0x7D8E0314 EQ PUSH2 0xC5E JUMPI DUP1 PUSH4 0x826FCD58 EQ PUSH2 0xC7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70713468 EQ PUSH2 0xB42 JUMPI DUP1 PUSH4 0x7554FFFD EQ PUSH2 0xB62 JUMPI DUP1 PUSH4 0x7750BA0C EQ PUSH2 0xB79 JUMPI DUP1 PUSH4 0x7820A328 EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0x79F9A91C EQ PUSH2 0xBB9 JUMPI DUP1 PUSH4 0x7A193C31 EQ PUSH2 0xBD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33421C38 GT PUSH2 0x43B JUMPI DUP1 PUSH4 0x4F0F27EE GT PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x5C616A73 GT PUSH2 0x35B JUMPI DUP1 PUSH4 0x60009E0B GT PUSH2 0x335 JUMPI DUP1 PUSH4 0x60009E0B EQ PUSH2 0xAE0 JUMPI DUP1 PUSH4 0x662013F4 EQ PUSH2 0xB01 JUMPI DUP1 PUSH4 0x68274357 EQ PUSH2 0xB16 JUMPI DUP1 PUSH4 0x6B5488DF EQ PUSH2 0xB2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C616A73 EQ PUSH2 0xA8E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xAA3 JUMPI DUP1 PUSH4 0x5D65D045 EQ PUSH2 0xAC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F0F27EE EQ PUSH2 0x9FA JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0xA11 JUMPI DUP1 PUSH4 0x5210570C EQ PUSH2 0xA24 JUMPI DUP1 PUSH4 0x5241271C EQ PUSH2 0xA39 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0xA59 JUMPI DUP1 PUSH4 0x54A73C62 EQ PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4310ADC6 GT PUSH2 0x3F4 JUMPI DUP1 PUSH4 0x4310ADC6 EQ PUSH2 0x925 JUMPI DUP1 PUSH4 0x4454AE8B EQ PUSH2 0x945 JUMPI DUP1 PUSH4 0x4B746001 EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0x4CFFBAAB EQ PUSH2 0x9A2 JUMPI DUP1 PUSH4 0x4D977E78 EQ PUSH2 0x9C2 JUMPI DUP1 PUSH4 0x4E1F907A EQ PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x33421C38 EQ PUSH2 0x88F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x8A4 JUMPI DUP1 PUSH4 0x3BC4AC0A EQ PUSH2 0x8C4 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x8E4 JUMPI DUP1 PUSH4 0x4017936A EQ PUSH2 0x8F9 JUMPI DUP1 PUSH4 0x407F0E34 EQ PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1867E2F5 GT PUSH2 0x4DF JUMPI DUP1 PUSH4 0x23B98CDE GT PUSH2 0x498 JUMPI DUP1 PUSH4 0x23B98CDE EQ PUSH2 0x7D1 JUMPI DUP1 PUSH4 0x27EAB2A1 EQ PUSH2 0x801 JUMPI DUP1 PUSH4 0x2A20D57D EQ PUSH2 0x821 JUMPI DUP1 PUSH4 0x2C43BD3B EQ PUSH2 0x838 JUMPI DUP1 PUSH4 0x2D88AF4A EQ PUSH2 0x858 JUMPI DUP1 PUSH4 0x333431FD EQ PUSH2 0x878 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1867E2F5 EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0x1A89B8F2 EQ PUSH2 0x749 JUMPI DUP1 PUSH4 0x1F1138A6 EQ PUSH2 0x75C JUMPI DUP1 PUSH4 0x1FB0DDA0 EQ PUSH2 0x77C JUMPI DUP1 PUSH4 0x1FE6A7AD EQ PUSH2 0x791 JUMPI DUP1 PUSH4 0x2069F753 EQ PUSH2 0x7B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD6AC463 GT PUSH2 0x531 JUMPI DUP1 PUSH4 0xD6AC463 EQ PUSH2 0x672 JUMPI DUP1 PUSH4 0xE0A8FD2 EQ PUSH2 0x692 JUMPI DUP1 PUSH4 0x1301A8F0 EQ PUSH2 0x6B2 JUMPI DUP1 PUSH4 0x17574BC5 EQ PUSH2 0x6D2 JUMPI DUP1 PUSH4 0x17DF0AB8 EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0x181770DA EQ PUSH2 0x712 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1CDED9C EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0x1DDE6EF EQ PUSH2 0x5B3 JUMPI DUP1 PUSH4 0x1F1B684 EQ PUSH2 0x5D5 JUMPI DUP1 PUSH4 0xBB7F608 EQ PUSH2 0x60D JUMPI DUP1 PUSH4 0xC340A24 EQ PUSH2 0x63B JUMPI DUP1 PUSH4 0xC36D897 EQ PUSH2 0x65B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x5CE CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F5 PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x628 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x113D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x97 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x68D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x1154 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x6AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x6CD CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x118D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x6ED CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x11AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x70D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x11BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x72D CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x11D5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1B3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x599 PUSH2 0x757 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x11E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x777 CALLDATASIZE PUSH1 0x4 PUSH2 0x4FA7 JUMP JUMPDEST PUSH2 0x11F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1215 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x79D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x7AC CALLDATASIZE PUSH1 0x4 PUSH2 0x500A JUMP JUMPDEST PUSH2 0x1237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x7CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 SLOAD PUSH2 0x7F1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x81C CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x1261 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x853 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x128C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x873 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x129A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13D SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x12CC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x8BF CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x8DF CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1498 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x14A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1540 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13C SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x940 CALLDATASIZE PUSH1 0x4 PUSH2 0x5027 JUMP JUMPDEST PUSH2 0x1563 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0x960 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x1571 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x985 PUSH2 0x980 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1582 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x9BD CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x15BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1B2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x144 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x139 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x5D3 PUSH2 0xA1F CALLDATASIZE PUSH1 0x4 PUSH2 0x5076 JUMP JUMPDEST PUSH2 0x15D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x16A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xA54 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x16B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x16DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xA89 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F66 JUMP JUMPDEST PUSH2 0x178D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x179C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xACC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xADB CALLDATASIZE PUSH1 0x4 PUSH2 0x513A JUMP JUMPDEST PUSH2 0x17F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x131 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1815 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x146 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xB5D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x182C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x137 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xB94 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x183A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xBB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x1848 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x140 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x132 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC02 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1869 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x17F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC39 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1877 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xC59 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1893 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x18A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x18BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x147 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xCDA CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x195A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xCFA CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1A24 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x5F5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xD3B CALLDATASIZE PUSH1 0x4 PUSH2 0x4EC9 JUMP JUMPDEST PUSH2 0x1A31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F1 PUSH2 0x1A3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xD70 CALLDATASIZE PUSH1 0x4 PUSH2 0x4E63 JUMP JUMPDEST PUSH2 0x1A6A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDAD PUSH2 0xD90 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x134 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x5F5 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17E SLOAD NUMBER LT ISZERO PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13B SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xE33 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F08 JUMP JUMPDEST PUSH2 0x1A7B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCA SLOAD PUSH2 0x7F1 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xE6D CALLDATASIZE PUSH1 0x4 PUSH2 0x516A JUMP JUMPDEST PUSH2 0x1A8C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xE8D CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1BD1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xEAD CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x1BED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xED3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xEE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1C08 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xF02 CALLDATASIZE PUSH1 0x4 PUSH2 0x5183 JUMP JUMPDEST PUSH2 0x1C16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1C28 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xF37 CALLDATASIZE PUSH1 0x4 PUSH2 0x51BE JUMP JUMPDEST PUSH2 0x1C62 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xF57 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x1FEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x2000 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x201D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0xFA1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5027 JUMP JUMPDEST PUSH2 0x205B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0xFC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x2069 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x599 PUSH2 0xFE1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x148 SLOAD PUSH2 0x7F1 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x100D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x20C2 JUMP JUMPDEST PUSH2 0x599 PUSH2 0x1024 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3A JUMP JUMPDEST PUSH2 0x20E3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1044 CALLDATASIZE PUSH1 0x4 PUSH2 0x51BE JUMP JUMPDEST PUSH2 0x20FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D3 PUSH2 0x1064 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2389 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1075 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x12F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x108C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x138 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x10C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EB0 JUMP JUMPDEST PUSH2 0x2397 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x62D PUSH2 0x13A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x23DA JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x110C PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x138 SSTORE JUMP JUMPDEST PUSH2 0x133 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 DUP4 CALLER CALLER PUSH2 0x2642 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x115C PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x143 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1187 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13D SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x2754 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 DUP5 CALLER CALLER PUSH2 0x2A5F JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 DUP5 CALLER CALLER PUSH2 0x2B76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 CALLER DUP8 PUSH2 0x2CBC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1206 DUP9 DUP9 DUP9 DUP9 DUP9 CALLER DUP10 PUSH2 0x2DF9 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1222 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3089 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x123F PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x148 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x125B PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x140 SSTORE JUMP JUMPDEST PUSH2 0x1269 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x144 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1294 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x147 SSTORE JUMP JUMPDEST PUSH2 0x12A2 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH3 0x10000 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x12D4 PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x12F0 JUMPI POP PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x12FF JUMPI POP PUSH2 0x12FF PUSH2 0x1A3F JUMP JUMPDEST ISZERO PUSH2 0x13AE JUMPI PUSH2 0x148 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x8B77276C97A5709F0D6DB52329848A254EB760CE8BE80D281799F633BDB69E83 SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x131 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8456CB59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x138E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x13AE PUSH2 0x30EE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x1401 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x51D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x144A PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1470 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1479 DUP2 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1495 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x3252 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x14A0 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x17F SSTORE JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x7C7FD079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x154D PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 PUSH2 0x155C PUSH2 0x33C2 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x34A9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 CALLER DUP6 PUSH2 0x2642 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x2754 JUMP JUMPDEST PUSH2 0x135 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1593 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C9 DUP6 DUP6 DUP6 CALLER DUP7 PUSH2 0x2B76 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x161C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x51D0 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1665 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x168B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x521C JUMP JUMPDEST PUSH2 0x1694 DUP3 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x16A0 DUP3 DUP3 PUSH1 0x1 PUSH2 0x3252 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16AC PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x142 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x177A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15C9 DUP6 DUP6 DUP6 CALLER DUP7 PUSH2 0x2A5F JUMP JUMPDEST PUSH2 0x17A4 PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x1B3 SLOAD NUMBER LT PUSH2 0x13AE JUMPI PUSH2 0x1B2 SLOAD PUSH2 0x17BC SWAP1 NUMBER PUSH2 0x527E JUMP JUMPDEST PUSH2 0x1B3 SSTORE PUSH1 0x40 MLOAD PUSH32 0xD3C59BDA47E141A8EC5A33D241B7F71B86E30D359F83A9227D912858B60404FC SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x13AE PUSH2 0x34CD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 CALLER DUP5 PUSH2 0x34D5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1808 PUSH2 0x1C28 JUMP JUMPDEST PUSH2 0x1810 PUSH2 0x33C2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x181D PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1834 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13C SSTORE JUMP JUMPDEST PUSH2 0x1842 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x139 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x185E DUP5 DUP5 PUSH2 0x1859 DUP8 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x3705 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1871 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13F SSTORE JUMP JUMPDEST PUSH2 0x187F PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13E SSTORE JUMP JUMPDEST PUSH2 0x188D PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x146 SSTORE JUMP JUMPDEST PUSH2 0x145 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x18B1 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3767 JUMP JUMPDEST PUSH2 0x18C7 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x18F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D77D477 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA SLOAD PUSH1 0xFF AND PUSH2 0x191B JUMPI PUSH1 0x40 MLOAD PUSH4 0x866099C3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD CALLER DUP2 MSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP1 PUSH1 0x20 ADD PUSH2 0x1536 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x135 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1971 JUMPI PUSH2 0x1971 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x59E02DD7 PUSH1 0xE0 SHL DUP2 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP5 POP DUP4 SWAP3 DUP6 SWAP3 PUSH4 0x59E02DD7 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EF SWAP2 SWAP1 PUSH2 0x52A7 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 PUSH2 0x1A1C JUMPI PUSH1 0x40 MLOAD PUSH4 0xDE4F3A0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x13F8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114E DUP3 CALLER CALLER PUSH2 0x34D5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114B DUP4 DUP4 CALLER CALLER PUSH2 0x3786 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A4C PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1A5C DUP4 DUP4 PUSH2 0x3767 JUMP JUMPDEST PUSH2 0x147 SLOAD LT ISZERO SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 CALLER DUP9 PUSH2 0x28E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x119E DUP7 DUP7 DUP7 DUP7 CALLER CALLER PUSH2 0x23DA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x1AAC JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x1AC6 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC6 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x1B29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x1B4C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x1B5E PUSH2 0x280 DUP4 ADD PUSH2 0x260 DUP5 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x218 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x1B88 DUP3 PUSH2 0x3891 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16A0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1BD9 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x137 SSTORE JUMP JUMPDEST PUSH2 0x1BE7 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13B SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1BFA PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1230 DUP3 DUP3 PUSH2 0x3909 JUMP JUMPDEST PUSH2 0x1C10 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x1B2 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10F6 DUP8 DUP8 DUP8 DUP8 DUP8 CALLER CALLER PUSH2 0x2DF9 JUMP JUMPDEST PUSH2 0x17E SLOAD NUMBER LT PUSH2 0x13AE JUMPI PUSH2 0x135 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C52 JUMPI PUSH2 0x1C4A DUP2 PUSH2 0x3925 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C39 JUMP JUMPDEST POP PUSH2 0x1495 PUSH2 0x17F SLOAD NUMBER ADD PUSH2 0x17E SSTORE JUMP JUMPDEST PUSH2 0x1C6A PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C79 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD55FD845 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD55FD845 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CE4 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x1D01 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D13 PUSH1 0x40 DUP5 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x134 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1D54 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3458F6C5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x133 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH2 0x134 DUP6 MSTORE DUP8 DUP2 KECCAK256 SWAP7 MLOAD DUP8 SSTORE SWAP3 MLOAD SWAP6 DUP6 ADD DUP1 SLOAD SWAP7 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP8 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE DUP8 SLOAD DUP1 DUP6 ADD SWAP1 SWAP9 SSTORE PUSH32 0x92E985329FB94CC1B424EBB0F7F2929B6D27383CA94C0EC71C44FB48BDF96D2C SWAP1 SWAP8 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP6 OR SWAP1 SSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE DUP2 DUP2 MSTORE DUP9 DUP9 AND DUP2 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x135 DUP1 SLOAD DUP1 DUP8 ADD DUP3 SSTORE SWAP1 DUP5 MSTORE SWAP2 MLOAD PUSH1 0x2 SWAP3 DUP4 MUL PUSH32 0xDF37D27E88E3BD0B85262482997E409A463F5BE0EBB19232ABF994DD8474090D DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0xDF37D27E88E3BD0B85262482997E409A463F5BE0EBB19232ABF994DD8474090E SWAP1 SWAP2 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP10 AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP7 SSTORE PUSH2 0x145 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE DUP10 DUP6 ADD CALLDATALOAD PUSH32 0xED95984ADD84C4014C7F9D66A1B73E788E2DB64F5763FA861AD52DA204F71B2B SWAP1 SWAP2 ADD SSTORE PUSH2 0x141 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP11 ADD CALLDATALOAD PUSH32 0xB3926254D0163C91FC94BF08F3F8062FF5D48635DFA7DBEF8168AD7D4847A758 SWAP1 SWAP2 ADD SSTORE PUSH2 0x142 DUP1 SLOAD DUP1 DUP5 ADD SWAP1 SWAP2 SSTORE PUSH1 0x80 DUP11 ADD CALLDATALOAD PUSH32 0x7917AD5F1BD6FA6D4F9128143F89BCBA30C5B503E76ECD2DD7562DDF9706AE19 SWAP1 SWAP2 ADD SSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP10 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 DUP5 ADD SWAP1 DUP2 MSTORE PUSH2 0x17D DUP1 SLOAD DUP1 DUP5 ADD DUP3 SSTORE SWAP1 DUP8 MSTORE SWAP4 MLOAD SWAP4 SWAP1 SWAP3 MUL PUSH32 0xF2AEC2A8C6072690B3C86D5C08E34587F891268D22D8BDCA6E66838C0F2F22D DUP2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 MLOAD PUSH32 0xF2AEC2A8C6072690B3C86D5C08E34587F891268D22D8BDCA6E66838C0F2F22E SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x149 DUP1 SLOAD SWAP1 SWAP2 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH2 0x14A PUSH2 0x1F99 DUP3 PUSH2 0x195A JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP4 SSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 SWAP3 KECCAK256 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD DUP2 SWAP1 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 SWAP1 PUSH2 0x1FE1 SWAP1 DUP8 SWAP1 PUSH2 0x52E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x141 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x200B PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2017 DUP2 PUSH2 0x3A3F JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F SLOAD PUSH2 0x202C ADDRESS PUSH2 0x3A5E JUMP JUMPDEST PUSH2 0x2036 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST GT ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x12F SLOAD PUSH2 0x204C ADDRESS PUSH2 0x3A5E JUMP JUMPDEST PUSH2 0x2056 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CB DUP5 DUP5 CALLER DUP6 PUSH2 0x3786 JUMP JUMPDEST PUSH2 0x2071 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x17D DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x20A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 POP DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B3 SLOAD NUMBER LT PUSH2 0x20D4 JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST NUMBER PUSH2 0x1B3 SLOAD PUSH2 0x1810 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20F3 DUP6 DUP6 DUP6 CALLER CALLER PUSH2 0x2CBC JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2107 PUSH2 0x25B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134 DUP2 PUSH2 0x211A PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 MSTORE PUSH1 0x1 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 POP PUSH2 0x2170 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x135 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x2187 JUMPI PUSH2 0x2187 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x21B6 SWAP1 PUSH1 0x40 DUP7 ADD SWAP1 DUP7 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22A9 JUMPI PUSH1 0x0 PUSH2 0x21D6 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4EEB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59E02DD7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2217 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x223B SWAP2 SWAP1 PUSH2 0x52A7 JUMP JUMPDEST SWAP2 POP POP DUP1 PUSH2 0x225C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x2271 JUMPI PUSH2 0x2271 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP POP POP JUMPDEST DUP3 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x145 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x22C2 JUMPI PUSH2 0x22C2 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x141 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x22E9 JUMPI PUSH2 0x22E9 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x142 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2310 JUMPI PUSH2 0x2310 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x17D DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2337 JUMPI PUSH2 0x2337 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH32 0x6417E5A3C1E0E5DAE98B8FE718C4BABDFCB35E0D7B5E1B9641B5914756F5D8E3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x237C SWAP2 SWAP1 PUSH2 0x52E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x2391 PUSH2 0x25B9 JUMP JUMPDEST PUSH2 0x13A SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23A3 DUP4 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x23B0 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x23D1 PUSH2 0x23BF PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x23C9 DUP8 DUP7 PUSH2 0x3AE9 JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x3B5B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23E5 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x23ED PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23F8 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2404 DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240E PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x241C DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x242C DUP12 DUP5 DUP5 DUP5 PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2439 DUP13 DUP5 DUP5 PUSH2 0x3CB9 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x245D JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x132 SLOAD DUP7 DUP6 PUSH2 0x2475 DUP7 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x247F SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST DUP16 PUSH2 0x248A SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2494 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x249E SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x24A8 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP6 POP PUSH2 0x24B8 DUP14 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x3CFF JUMP JUMPDEST DUP11 DUP7 LT ISZERO PUSH2 0x24E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x24F0 DUP2 PUSH2 0x13E SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP7 POP DUP10 DUP8 GT ISZERO PUSH2 0x251D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP13 AND SWAP2 SWAP1 DUP14 AND SWAP1 DUP5 SWAP1 PUSH32 0xB0EE95633545EDABB63AFD3C3962A133536B36E2372F68C3C2722710EE0CD89 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x2582 DUP13 PUSH1 0x0 DUP12 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x258F DUP14 DUP8 PUSH1 0x0 DUP12 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x259B DUP12 DUP10 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x25A8 DUP11 DUP3 DUP11 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x40 MLOAD PUSH4 0xD994D6D5 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD994D6D5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2625 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1DD1B1B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x264C PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2654 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2663 PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 PUSH2 0x2675 DUP10 DUP6 DUP6 PUSH2 0x3EF2 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2684 DUP2 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x26B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x26D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP11 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP2 SWAP1 DUP10 AND SWAP1 PUSH32 0x62F0126E99B1936535DB27571CEA2B2D54DB14A471B9203B29B31B89C300E4F6 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x272E DUP10 DUP4 DUP9 PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x273A DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2747 DUP9 DUP3 DUP5 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x275F PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2767 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2772 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x277E DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x278D PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x279E DUP13 DUP13 DUP7 PUSH2 0x3705 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x27D7 PUSH2 0x132 SLOAD DUP13 PUSH2 0x27B3 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST DUP6 DUP6 PUSH2 0x27BE DUP7 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x27C8 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x27D2 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3F77 JUMP JUMPDEST SWAP5 POP DUP10 DUP6 LT DUP1 PUSH2 0x27E5 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 0x280D JUMPI PUSH1 0x40 MLOAD PUSH4 0xF577BEF5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x281A DUP2 PUSH2 0x13D SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP6 POP DUP9 DUP7 GT ISZERO PUSH2 0x2847 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP2 SWAP1 DUP13 AND SWAP1 DUP5 SWAP1 PUSH32 0xF77B7563E0C6C33E0B804A715D94C82BAEA057D2E6F8BFDC211FE04D3C03BAD9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x28AD DUP13 DUP13 PUSH1 0x0 DUP12 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x28B9 DUP6 PUSH1 0x0 DUP10 PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C5 DUP11 DUP9 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x28D2 DUP10 DUP3 DUP10 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x28ED PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x28F5 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2900 DUP10 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x290C DUP10 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x291B PUSH2 0x147 SLOAD PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x132 SLOAD DUP5 DUP5 DUP14 PUSH2 0x2939 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2943 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x294D SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x2957 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP DUP9 DUP5 GT ISZERO PUSH2 0x2984 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7A031DA3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x299D DUP14 DUP14 DUP9 DUP9 PUSH2 0x2998 DUP10 DUP10 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x3FED JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x29AC DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP7 POP DUP10 DUP8 LT ISZERO PUSH2 0x29D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP14 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE DUP14 SWAP1 DUP14 SWAP1 DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND SWAP2 SWAP1 DUP15 AND SWAP1 DUP6 SWAP1 PUSH32 0x879E4419A6544DE6EA456F6344B2FCF0C3B9FC0E6738C82FA4026A8789747C53 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0x2A47 DUP13 DUP4 DUP12 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x2A54 DUP14 DUP8 PUSH1 0x0 DUP13 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x28D2 DUP9 DUP9 DUP4 PUSH2 0x3E99 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A69 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2A71 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A7C DUP8 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2A88 DUP8 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2A94 PUSH2 0x146 SLOAD PUSH2 0x3C31 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 PUSH2 0x2AA4 DUP10 DUP10 DUP6 PUSH2 0x3705 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x2AC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AD3 DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP4 POP DUP7 DUP5 LT ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP2 SWAP1 DUP9 AND SWAP1 DUP12 SWAP1 PUSH32 0x4716C9926CE32100E8A5B6AD71AF5500AC55514D7B0C8F80F209856C9DFAEB92 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2B5F DUP10 DUP10 DUP5 DUP10 PUSH2 0x3F8C JUMP JUMPDEST PUSH2 0x2B6A DUP6 DUP6 DUP4 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B80 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2B88 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B93 DUP8 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2B9F DUP8 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA9 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2BB7 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2BC9 DUP11 DUP11 DUP7 DUP7 DUP7 DUP7 PUSH2 0x3CFF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD7 DUP13 DUP13 DUP9 PUSH2 0x402D JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2BE6 DUP2 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP DUP10 DUP8 GT ISZERO PUSH2 0x2C13 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP7 PUSH1 0x0 SUB PUSH2 0x2C34 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 SWAP1 DUP12 AND SWAP1 DUP15 SWAP1 PUSH32 0x5F8DFB23A03C1F9D37A1860FC8038FFDC6DEC3E24DB38CDB09CC0176B35453F SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2C93 DUP13 DUP13 DUP5 DUP12 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C9F DUP12 DUP10 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2CAC DUP11 DUP3 DUP5 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC7 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2CCF PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2CDD DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2CE9 DUP11 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2CF5 PUSH2 0x147 SLOAD PUSH2 0x3C31 JUMP JUMPDEST POP POP PUSH2 0x2D01 DUP10 DUP3 PUSH2 0x4075 JUMP JUMPDEST SWAP2 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0x2D12 DUP3 DUP5 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x2D3F JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST DUP5 PUSH1 0x0 SUB PUSH2 0x2D60 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP12 SWAP1 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND SWAP2 SWAP1 DUP10 AND SWAP1 DUP13 SWAP1 PUSH32 0xCD3821E3A6AFEC66FDFA7A942B879811BB9919B2F270DE090B6E00178CD7EAEE SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2DC5 DUP5 DUP5 DUP9 PUSH2 0x3F33 JUMP JUMPDEST PUSH2 0x2DD2 DUP11 DUP11 PUSH1 0x0 DUP10 PUSH2 0x3DE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DDE DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2DEB DUP9 DUP3 DUP6 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E04 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x2E0C PUSH2 0x30C5 JUMP JUMPDEST DUP8 DUP10 SUB PUSH2 0x2E2C JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2E37 DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E44 DUP11 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x2E50 DUP12 DUP4 PUSH2 0x3BCE JUMP JUMPDEST PUSH2 0x2E5A DUP11 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E67 DUP13 DUP12 DUP6 PUSH2 0x3705 JUMP JUMPDEST POP SWAP1 POP DUP3 PUSH2 0x2E75 DUP4 DUP13 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x2E7F SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP DUP9 DUP5 LT DUP1 PUSH2 0x2E8D JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2EB5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x272E3F59 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x2EBF DUP13 DUP5 PUSH2 0x3AE9 JUMP JUMPDEST PUSH2 0x2EC9 DUP13 DUP5 PUSH2 0x3AE9 JUMP JUMPDEST GT ISZERO PUSH2 0x2EFD JUMPI PUSH1 0x0 PUSH2 0x2ED9 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x2EE7 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2EF9 DUP15 DUP9 DUP8 DUP7 DUP7 DUP7 PUSH2 0x3CFF JUMP JUMPDEST POP POP POP JUMPDEST PUSH2 0x2F0A DUP2 PUSH2 0x13C SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP5 POP DUP8 DUP6 GT ISZERO PUSH2 0x2F37 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB63F1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP2 SWAP1 DUP13 AND SWAP1 DUP6 SWAP1 PUSH32 0x77D2223ACA09D9EC6E49D1B8CDCB0B40DEC540A5F65DAF1ECAB069C822BFF460 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP PUSH2 0x2FA7 DUP12 DUP6 PUSH1 0x0 DUP10 PUSH2 0x3DE9 JUMP JUMPDEST PUSH2 0x2FB4 DUP13 DUP12 PUSH1 0x0 DUP11 PUSH2 0x3F8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC0 DUP10 DUP8 PUSH2 0x3E74 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FCD DUP9 DUP3 DUP9 PUSH2 0x3E99 JUMP JUMPDEST POP POP POP POP SWAP8 POP SWAP8 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3074 JUMPI PUSH1 0x0 PUSH2 0x2FFB DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x300A DUP5 DUP5 PUSH2 0x4104 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x3048 DUP3 PUSH2 0x135 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x3026 JUMPI PUSH2 0x3026 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x3042 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST DUP5 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x3052 SWAP1 DUP9 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP PUSH2 0x305E DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x306D DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FE8 JUMP JUMPDEST POP PUSH2 0x3082 DUP3 PUSH2 0x137 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP2 POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x132 SLOAD PUSH1 0x0 SUB PUSH2 0x30A5 JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x114E JUMP JUMPDEST PUSH2 0x114B DUP4 PUSH2 0x30B2 DUP5 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x30BC SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x132 SLOAD PUSH2 0x3F77 JUMP JUMPDEST PUSH1 0xCA SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x783BB6C9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x130 SLOAD PUSH2 0x12F SLOAD PUSH2 0x3102 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x310F JUMPI POP JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x312F JUMPI PUSH2 0x312F PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3158 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31E9 JUMPI PUSH2 0x316F DUP2 PUSH2 0x195A JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3181 JUMPI PUSH2 0x3181 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x31D5 PUSH2 0x135 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x31A4 JUMPI PUSH2 0x31A4 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x31C8 JUMPI PUSH2 0x31C8 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x31DF SWAP1 DUP5 PUSH2 0x527E JUMP JUMPDEST SWAP3 POP PUSH1 0x1 ADD PUSH2 0x315E JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3243 JUMPI PUSH2 0x136 DUP6 DUP5 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x320C JUMPI PUSH2 0x320C PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x321E SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3228 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP1 SWAP4 KECCAK256 ADD SSTORE ADD PUSH2 0x31ED JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1495 PUSH2 0x25B9 JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x328A JUMPI PUSH2 0x3285 DUP4 PUSH2 0x416B JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x32E4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x32E1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x53A2 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x33B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST POP PUSH2 0x3285 DUP4 DUP4 DUP4 PUSH2 0x4207 JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x347F JUMPI PUSH1 0x0 PUSH2 0x33E2 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x33F0 DUP4 DUP4 PUSH2 0x4104 JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x343C PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x135 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x3416 JUMPI PUSH2 0x3416 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x3432 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x3042 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3449 DUP6 DUP6 PUSH2 0x3AE9 JUMP JUMPDEST PUSH2 0x3453 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x345D SWAP1 DUP9 PUSH2 0x527E JUMP JUMPDEST SWAP7 POP PUSH2 0x3469 DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP POP POP POP PUSH2 0x3478 DUP2 PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x33CF JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x3497 JUMPI PUSH2 0x146 SLOAD PUSH1 0x2 MUL SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x34A1 DUP3 DUP5 PUSH2 0x5380 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x34B7 DUP6 DUP6 DUP6 PUSH2 0x422C JUMP JUMPDEST SWAP1 POP PUSH2 0x34C3 DUP5 DUP5 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x23D1 SWAP1 DUP3 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x13AE PUSH2 0x4276 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34DF PUSH2 0x30C5 JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x3508 JUMPI PUSH1 0x40 MLOAD PUSH4 0x31B0D35 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x133 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x351E JUMPI PUSH2 0x351E PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3571 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3595 SWAP2 SWAP1 PUSH2 0x53A2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x35C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3FE8C5EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x136 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x35D8 JUMPI PUSH2 0x35D8 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH2 0x35EF DUP3 DUP3 PUSH2 0x3F77 JUMP JUMPDEST SWAP3 POP PUSH2 0x133 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x3605 JUMPI PUSH2 0x3605 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x365C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3670 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH2 0x367E ADDRESS PUSH2 0x3A5E JUMP JUMPDEST LT ISZERO PUSH2 0x3690 JUMPI PUSH2 0x368D ADDRESS PUSH2 0x3A5E JUMP JUMPDEST SWAP3 POP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH32 0x4716C9926CE32100E8A5B6AD71AF5500AC55514D7B0C8F80F209856C9DFAEB92 DUP6 DUP8 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x36EA SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x36FC DUP5 DUP5 PUSH2 0x4437 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 SUB PUSH2 0x3729 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3733 DUP5 DUP5 PUSH2 0x3F77 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x142 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 SUB PUSH2 0x377A JUMPI POP PUSH1 0x0 NOT PUSH2 0x114E JUMP JUMPDEST PUSH2 0x114B PUSH2 0x3042 DUP4 PUSH2 0x3A3F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3790 PUSH2 0x3BA4 JUMP JUMPDEST PUSH2 0x3798 PUSH2 0x30C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37A2 PUSH2 0x17FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x37B0 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x37C0 DUP9 DUP5 DUP5 DUP5 PUSH2 0x3C7F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x37CE DUP11 DUP6 DUP6 PUSH2 0x3CB9 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 SUB PUSH2 0x37F3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3E39B5D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x37FD DUP2 DUP4 PUSH2 0x5356 JUMP JUMPDEST SWAP6 POP DUP9 DUP7 LT ISZERO PUSH2 0x382A JUMPI PUSH1 0x40 MLOAD PUSH4 0x54CDE313 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP10 AND SWAP2 SWAP1 DUP11 AND SWAP1 PUSH32 0x2D184907C04672620E3C88A12A39D6A603DD26373427842AA172EB3E5BFCFF07 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x3886 DUP11 DUP4 DUP11 PUSH2 0x3D72 JUMP JUMPDEST PUSH2 0x2747 DUP8 DUP8 DUP4 PUSH2 0x3E99 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x38B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x38E4 PUSH2 0x38CD PUSH2 0x200 DUP4 ADD PUSH2 0x1E0 DUP5 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x38DF PUSH2 0x220 DUP5 ADD PUSH2 0x200 DUP6 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x4455 JUMP JUMPDEST PUSH2 0x38ED DUP2 PUSH2 0x4498 JUMP JUMPDEST PUSH2 0x38FB DUP2 PUSH2 0x220 ADD CALLDATALOAD PUSH2 0x46FD JUMP JUMPDEST PUSH2 0x1495 DUP2 PUSH2 0x240 ADD CALLDATALOAD PUSH2 0x4757 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3915 DUP4 PUSH2 0x3A3F JUMP JUMPDEST SWAP1 POP PUSH2 0x15CC DUP2 PUSH2 0x27D2 DUP7 DUP3 PUSH2 0x5356 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x393B JUMPI PUSH2 0x393B PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD DUP4 MSTORE PUSH1 0x1 ADD SLOAD SWAP1 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x396C DUP4 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD PUSH8 0xDE0B6B3A7640000 PUSH2 0x3988 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x3994 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x39A8 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x39BF DUP4 DUP6 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x39C9 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x17D DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x39E0 JUMPI PUSH2 0x39E0 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SSTORE DUP5 MLOAD PUSH1 0x40 MLOAD DUP8 SWAP2 PUSH32 0x19156E9379C7BBBCE8F646CE5EE30BA860B8F954717405F3D5859A6C1A21AE60 SWAP2 PUSH2 0x3A2F SWAP2 SWAP1 DUP6 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x130 SLOAD PUSH2 0x12F SLOAD PUSH2 0x3A54 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST PUSH2 0x114E SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x218 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3AAA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114E SWAP2 SWAP1 PUSH2 0x53A2 JUMP JUMPDEST DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3AE1 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x145 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3B00 JUMPI PUSH2 0x3B00 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x17D DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x3B23 JUMPI PUSH2 0x3B23 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD SWAP1 POP DUP4 DUP2 LT PUSH2 0x3B46 JUMPI POP SWAP1 POP PUSH2 0x114E JUMP JUMPDEST DUP1 PUSH2 0x3B51 DUP6 DUP5 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x23D1 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3B70 DUP2 DUP8 PUSH2 0x5356 JUMP JUMPDEST DUP6 PUSH2 0x3B7C DUP10 DUP8 DUP8 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x3B86 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3B90 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x3B9A SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x148 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1CA61D77 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3BD8 DUP3 DUP3 PUSH2 0x4795 JUMP JUMPDEST PUSH2 0x149 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3BEC JUMPI PUSH2 0x3BEC PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3C05 SWAP2 SWAP1 PUSH2 0x5406 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x14A DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3C21 JUMPI PUSH2 0x3C21 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3C3C PUSH2 0x2FDD JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x3C4D DUP4 DUP4 PUSH2 0x3767 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x3C79 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79121201 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8C DUP5 DUP5 DUP5 PUSH2 0x34A9 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 0x3243 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA5DB715D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 SUB PUSH2 0x3CDD JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3CF0 DUP6 PUSH2 0x3CEB DUP7 DUP7 PUSH2 0x3089 JUMP JUMPDEST PUSH2 0x3D53 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x13B SLOAD PUSH2 0x3D53 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D0B DUP8 DUP7 PUSH2 0x3AE9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3D1C DUP6 DUP4 DUP9 DUP8 DUP8 PUSH2 0x3B5B JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x3D49 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC39B739F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x13F8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x3D68 DUP4 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x3D7C DUP4 DUP4 PUSH2 0x4811 JUMP JUMPDEST PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DE0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3DF4 DUP5 DUP5 DUP5 PUSH2 0x4847 JUMP JUMPDEST PUSH2 0x133 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3E08 JUMPI PUSH2 0x3E08 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x218 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x3E90 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x488B JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EA8 PUSH2 0x139 SLOAD DUP4 PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3EBD SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x143 SLOAD PUSH2 0x3EE2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3EDD DUP4 DUP6 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x4437 JUMP JUMPDEST PUSH2 0x3EEC DUP5 DUP5 PUSH2 0x4437 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x0 SUB PUSH2 0x3F16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F24 DUP6 PUSH2 0x3CEB DUP7 DUP7 PUSH2 0x3089 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x13A SLOAD PUSH2 0x3D53 JUMP JUMPDEST PUSH2 0x3F3D DUP4 DUP4 PUSH2 0x48F6 JUMP JUMPDEST PUSH2 0x131 SLOAD PUSH1 0x40 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH2 0x3DB2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3D68 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x3F97 DUP5 DUP5 DUP5 PUSH2 0x4918 JUMP JUMPDEST PUSH2 0x133 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x3FAB JUMPI PUSH2 0x3FAB PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x2770A7EB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH2 0x3E46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3FFB DUP8 DUP7 DUP7 PUSH2 0x3705 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x4008 DUP7 DUP5 PUSH2 0x3D53 JUMP JUMPDEST PUSH2 0x4012 SWAP1 DUP4 PUSH2 0x527E JUMP JUMPDEST SWAP2 POP PUSH2 0x4021 DUP3 PUSH2 0x13F SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP1 POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 SUB PUSH2 0x4051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x405B DUP5 DUP5 PUSH2 0x3F77 JUMP JUMPDEST SWAP2 POP PUSH2 0x375D DUP3 PUSH2 0x141 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x374D JUMPI PUSH2 0x374D PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4085 PUSH2 0x2FDD JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x4095 DUP4 DUP4 PUSH2 0x3089 JUMP JUMPDEST SWAP1 POP DUP7 PUSH8 0xDE0B6B3A7640000 PUSH2 0x40A9 PUSH2 0x33C2 JUMP JUMPDEST PUSH2 0x40B3 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x40BD SWAP1 DUP11 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x40C7 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST SWAP5 POP PUSH2 0x40D3 DUP6 DUP3 PUSH2 0x3F77 JUMP JUMPDEST SWAP6 POP PUSH2 0x40DF DUP9 DUP9 PUSH2 0x3F77 JUMP JUMPDEST PUSH2 0x40E9 SWAP1 DUP7 PUSH2 0x527E JUMP JUMPDEST SWAP5 POP PUSH2 0x40F8 DUP6 PUSH2 0x140 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x4113 DUP6 DUP6 PUSH2 0x4795 JUMP JUMPDEST PUSH2 0x149 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x4127 JUMPI PUSH2 0x4127 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x413C SWAP2 SWAP1 PUSH2 0x5406 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x4163 JUMPI DUP1 SWAP2 POP PUSH2 0x4160 PUSH2 0x415A PUSH2 0x138 SLOAD DUP7 PUSH2 0x3D53 JUMP JUMPDEST DUP4 PUSH2 0x3D53 JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x41D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x5517 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4210 DUP4 PUSH2 0x4971 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x421D JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x3285 JUMPI PUSH2 0x3EEC DUP4 DUP4 PUSH2 0x49B1 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH2 0x4239 DUP5 DUP5 PUSH2 0x3767 JUMP JUMPDEST GT PUSH2 0x4246 JUMPI POP PUSH1 0x0 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x4250 DUP4 DUP6 PUSH2 0x5369 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH2 0x4262 DUP5 PUSH2 0x3A3F JUMP JUMPDEST PUSH2 0x426C SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x11CB SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST PUSH2 0x135 SLOAD PUSH1 0x0 SWAP1 DUP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4297 JUMPI PUSH2 0x4297 PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x42C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x43B4 JUMPI PUSH1 0x0 PUSH2 0x42D9 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH2 0x42E5 DUP3 DUP3 PUSH2 0x3BCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x149 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x42FB JUMPI PUSH2 0x42FB PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT ISZERO PUSH2 0x43AA JUMPI PUSH2 0x4327 PUSH2 0x4321 PUSH2 0x138 SLOAD DUP5 PUSH2 0x3D53 JUMP JUMPDEST DUP3 PUSH2 0x3D53 JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4339 JUMPI PUSH2 0x4339 PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x434E DUP2 DUP8 PUSH2 0x527E JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x149 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x4366 JUMPI PUSH2 0x4366 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x43AA DUP4 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x438A JUMPI PUSH2 0x438A PUSH2 0x5291 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x144 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3DE9 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x42C6 JUMP JUMPDEST POP DUP3 ISZERO PUSH2 0x43F9 JUMPI PUSH2 0x43C8 DUP4 PUSH2 0x137 SLOAD PUSH2 0x3D53 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x43DD SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 0x143 SLOAD PUSH2 0x43F9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x4437 JUMP JUMPDEST PUSH32 0xAE5116A8119D08673A0F1DFA7546B95DA4BD54BB17FEDA7C61130AC7859152F6 DUP4 DUP3 PUSH1 0x40 MLOAD PUSH2 0x442A SWAP3 SWAP2 SWAP1 PUSH2 0x542E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x16A0 JUMPI PUSH2 0x218 SLOAD PUSH2 0x16A0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP4 PUSH2 0x4A9C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x447C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x4484 PUSH2 0x4ACC JUMP JUMPDEST PUSH2 0x448D DUP3 PUSH2 0x4AF3 JUMP JUMPDEST PUSH2 0x16A0 DUP2 PUSH1 0x1 PUSH2 0x4B23 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x44BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0x60 ADD CALLDATALOAD LT ISZERO PUSH2 0x44EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44F9 DUP2 PUSH1 0xA0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4506 DUP2 PUSH1 0xC0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4513 DUP2 PUSH1 0xE0 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4521 DUP2 PUSH2 0x100 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x452F DUP2 PUSH2 0x120 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x453D DUP2 PUSH2 0x140 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x454B DUP2 PUSH2 0x160 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4559 DUP2 PUSH2 0x180 ADD CALLDATALOAD PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4575 PUSH2 0x4570 PUSH2 0x1C0 DUP4 ADD CALLDATALOAD PUSH2 0x1A0 DUP5 ADD CALLDATALOAD PUSH2 0x527E JUMP JUMPDEST PUSH2 0x4B86 JUMP JUMPDEST PUSH2 0x4582 PUSH1 0x20 DUP3 ADD DUP3 PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x131 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xD55FD845 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH4 0xD55FD845 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x45FF SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x461C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x462C PUSH1 0x40 DUP3 ADD PUSH1 0x20 DUP4 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x143 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x465D PUSH1 0x60 DUP3 ADD PUSH1 0x40 DUP4 ADD PUSH2 0x4EEB JUMP JUMPDEST PUSH2 0x144 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH2 0x146 SSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH2 0x147 SSTORE PUSH1 0xA0 DUP2 ADD CALLDATALOAD PUSH2 0x139 SSTORE PUSH1 0xC0 DUP2 ADD CALLDATALOAD PUSH2 0x13A SSTORE PUSH1 0xE0 DUP2 ADD CALLDATALOAD PUSH2 0x13B SSTORE PUSH2 0x100 DUP2 ADD CALLDATALOAD PUSH2 0x13C SSTORE PUSH2 0x120 DUP2 ADD CALLDATALOAD PUSH2 0x13D SSTORE PUSH2 0x140 DUP1 DUP3 ADD CALLDATALOAD PUSH2 0x13E SSTORE PUSH2 0x160 DUP3 ADD CALLDATALOAD PUSH2 0x13F SSTORE PUSH2 0x180 DUP3 ADD CALLDATALOAD SWAP1 SSTORE PUSH2 0x1A0 DUP2 ADD CALLDATALOAD PUSH2 0x137 SSTORE PUSH2 0x1C0 ADD CALLDATALOAD PUSH2 0x138 SSTORE PUSH2 0x148 DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4724 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x4745 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17F DUP2 SWAP1 SSTORE PUSH2 0x1495 DUP2 NUMBER ADD PUSH2 0x17E SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x477E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x1B2 DUP2 SWAP1 SSTORE PUSH2 0x478E DUP2 NUMBER PUSH2 0x527E JUMP JUMPDEST PUSH2 0x1B3 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x135 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x47B5 JUMPI PUSH2 0x47B5 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x47D1 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST SWAP1 POP PUSH2 0x47DD DUP4 DUP3 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x14A DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x47F1 JUMPI PUSH2 0x47F1 PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 PUSH2 0x4807 SWAP2 SWAP1 PUSH2 0x5380 JUMP JUMPDEST PUSH2 0x15CC SWAP2 SWAP1 PUSH2 0x547C JUMP JUMPDEST DUP2 PUSH2 0x132 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4824 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x483E SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x485C JUMPI PUSH2 0x485C PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x487C SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3285 SWAP1 POP DUP2 PUSH2 0x3ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x3EEC SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x4BAF JUMP JUMPDEST DUP2 PUSH2 0x132 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4909 SWAP2 SWAP1 PUSH2 0x527E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x16A0 SWAP1 POP DUP2 PUSH2 0x3ACE JUMP JUMPDEST DUP2 PUSH2 0x135 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x492D JUMPI PUSH2 0x492D PUSH2 0x5291 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x494D SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x12F PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4967 SWAP2 SWAP1 PUSH2 0x5356 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x497A DUP2 PUSH2 0x416B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x4A19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x4A34 SWAP2 SWAP1 PUSH2 0x54C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4A6F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4A74 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x23D1 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5537 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x4C81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x3285 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x48BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x13AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH2 0x1495 DUP2 PUSH2 0x4C9A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B4A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0xCA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH3 0x10000 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 AND PUSH2 0xFF01 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 GT ISZERO PUSH2 0x1495 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A9FFAB7 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4C04 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4CC1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3285 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C22 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH2 0x3285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4C90 JUMPI POP DUP2 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x11CE DUP4 DUP4 PUSH2 0x4CD0 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2071 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP1 PUSH2 0x53BB JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11CB DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x4CFA JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x4CE0 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F8 SWAP2 SWAP1 PUSH2 0x54E3 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x4D5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x13F8 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x4D77 SWAP2 SWAP1 PUSH2 0x54C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4DB4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4DB9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x4DCA DUP8 DUP4 DUP4 DUP8 PUSH2 0x4DD5 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x4E44 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x4E3D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x4E3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x13F8 JUMP JUMPDEST POP DUP2 PUSH2 0x15CC JUMP JUMPDEST PUSH2 0x15CC DUP4 DUP4 PUSH2 0x4CD0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x4EA2 DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4EFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11CE DUP2 PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4F7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x4F9C DUP2 PUSH2 0x4E4E JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH2 0x4FEE DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x501C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11CE DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x503C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x5055 DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5089 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x5094 DUP2 PUSH2 0x4E4E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x50B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x50C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x50D7 JUMPI PUSH2 0x50D7 PUSH2 0x5060 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x50FF JUMPI PUSH2 0x50FF PUSH2 0x5060 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x5118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x514D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x515F DUP2 PUSH2 0x4E4E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x280 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x517D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x519B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP4 CALLDATALOAD SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x517D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x52BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x515F DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11CE DUP2 PUSH2 0x4FFC JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD DUP3 CALLDATALOAD PUSH2 0x52F8 DUP2 PUSH2 0x4E4E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP1 PUSH2 0x5314 DUP3 PUSH2 0x4E4E JUMP JUMPDEST DUP1 DUP3 AND PUSH1 0x20 DUP6 ADD MSTORE POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x114E JUMPI PUSH2 0x114E PUSH2 0x5268 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x539D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP3 DUP2 SLT PUSH1 0x0 DUP4 SLT DUP1 ISZERO DUP3 AND DUP3 ISZERO DUP3 AND OR ISZERO PUSH2 0x5426 JUMPI PUSH2 0x5426 PUSH2 0x5268 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD DUP5 DUP4 MSTORE PUSH1 0x20 PUSH1 0x40 DUP2 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x546F JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5453 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP4 SLT DUP1 ISZERO DUP4 DUP4 SGT AND DUP4 DUP4 SLT DUP3 AND OR ISZERO PUSH2 0x549C JUMPI PUSH2 0x549C PUSH2 0x5268 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x54BE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x54A6 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x54D9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x54A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5502 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x54A3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220C8 0x2B 0xBC PUSH25 0xFAFF99B5F7DACB06D56738247D8DA7BC3D2FCE6C1B6514731B 0xD9 DUP10 DELEGATECALL PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
      "sourceMapi;:::-;;:::i;:::-;;;;850:25:73;;;906:2;891:18;;884:34;;;;823:18;12725:292:42;;;;;;;;30354:148:43;;;;;;;;;;-1:-1:-1;30354:148:43;;;;;:::i;:::-;;:::i;:::-;;3474:26;;;;;;;;;;-1:-1:-1;3474:26:43;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1296:32:73;;;1278:51;;1266:2;1251:18;3474:26:43;1114:221:73;3968:161:42;;;;;;;;;;-1:-1:-1;3968:161:42;;;;;:::i;:::-;;:::i;:::-;;;1739:25:73;;;1727:2;1712:18;3968:161:42;1593:177:73;647:25:49;;;;;;;;;;-1:-1:-1;647:25:49;;;;-1:-1:-1;;;;;647:25:49;;;891:33:45;;;;;;;;;;;;;;;;28469:144:43;;;;;;;;;;-1:-1:-1;28469:144:43;;;;;:::i;:::-;;:::i;26997:132::-;;;;;;;;;;-1:-1:-1;26997:132:43;;;;;:::i;:::-;;:::i;10363:262:42:-;;;;;;;;;;-1:-1:-1;10363:262:42;;;;;:::i;:::-;;:::i;33653:267:44:-;;;;;;;;;;-1:-1:-1;33653:267:44;;;;;:::i;:::-;;:::i;32070:178::-;;;;;;;;;;-1:-1:-1;32070:178:44;;;;;:::i;:::-;;:::i;5151:177:42:-;;;;;;;;;;-1:-1:-1;5151:177:42;;;;;:::i;:::-;;:::i;427:18:46:-;;;;;;;;;;;;;;;;7867:274:42;;;;;;:::i;:::-;;:::i;9563:328::-;;;;;;;;;;-1:-1:-1;9563:328:42;;;;;:::i;:::-;;:::i;50841:172:44:-;;;;;;;;;;;;;:::i;29651:113:43:-;;;;;;;;;;-1:-1:-1;29651:113:43;;;;;:::i;:::-;;:::i;28201:132::-;;;;;;;;;;-1:-1:-1;28201:132:43;;;;;:::i;:::-;;:::i;6369:22::-;;;;;;;;;;-1:-1:-1;6369:22:43;;;;;;;;;;;;;;4551:14:73;;4544:22;4526:41;;4514:2;4499:18;6369:22:43;4386:187:73;28779:222:43;;;;;;;;;;-1:-1:-1;28779:222:43;;;;;:::i;:::-;;:::i;5052:29::-;;;;;;;;;;;;;;;;29412:108;;;;;;;;;;-1:-1:-1;29412:108:43;;;;;:::i;:::-;;:::i;3469:106:51:-;;;;;;;;;;-1:-1:-1;3469:106:51;;;;;:::i;:::-;;:::i;4890:29:43:-;;;;;;;;;;;;;;;;24455:331;;;;;;;;;;;;;:::i;3317:197:8:-;;;;;;;;;;-1:-1:-1;3317:197:8;;;;;:::i;:::-;;:::i;5782:140:45:-;;;;;;;;;;-1:-1:-1;5782:140:45;;;;;:::i;:::-;;:::i;2496:161:51:-;;;;;;;;;;;;;:::i;51644:232:44:-;;;;;;;;;;;;;:::i;4728:29:43:-;;;;;;;;;;;;;;;;4569:183:42;;;;;;;;;;-1:-1:-1;4569:183:42;;;;;:::i;:::-;;:::i;11176:292::-;;;;;;;;;;-1:-1:-1;11176:292:42;;;;;:::i;:::-;;:::i;3621:38:43:-;;;;;;;;;;-1:-1:-1;3621:38:43;;;;;:::i;:::-;;:::i;:::-;;;;5164:25:73;;;-1:-1:-1;;;;;5225:32:73;;;5220:2;5205:18;;5198:60;5137:18;3621:38:43;4966:298:73;5800:237:42;;;;;;;;;;-1:-1:-1;5800:237:42;;;;;:::i;:::-;;:::i;374:18:46:-;;;;;;;;;;;;;;;;5883:48:43;;;;;;;;;;-1:-1:-1;5883:48:43;;;;-1:-1:-1;;;;;5883:48:43;;;4287:26;;;;;;;;;;;;;;;;3763:222:8;;;;;;:::i;:::-;;:::i;2847:92:51:-;;;;;;;;;;;;;:::i;5687:28:43:-;;;;;;;;;;-1:-1:-1;5687:28:43;;;;;:::i;:::-;;:::i;3006:131:8:-;;;;;;;;;;;;;:::i;32671:238:44:-;;;;;;;;;;-1:-1:-1;32671:238:44;;;;;:::i;:::-;;:::i;1000:284:46:-;;;;;;;;;;;;;:::i;1961:78:51:-;;;;;;;;;;-1:-1:-1;2025:7:51;;;;;;;1961:78;;35769:160:44;;;;;;;;;;-1:-1:-1;35769:160:44;;;;;:::i;:::-;;:::i;3336:20:43:-;;;;;;;;;;-1:-1:-1;3336:20:43;;;;-1:-1:-1;;;;;3336:20:43;;;4763:182:45;;;;;;;;;;;;;:::i;3185:89:51:-;;;;;;;;;;;;;:::i;6119:24:43:-;;;;;;;;;;;;;;;;26609:132;;;;;;;;;;-1:-1:-1;26609:132:43;;;;;:::i;:::-;;:::i;3932:25::-;;;;;;;;;;;;;;;;25567:120;;;;;;;;;;-1:-1:-1;25567:120:43;;;;;:::i;:::-;;:::i;53544:207:44:-;;;;;;;;;;-1:-1:-1;53544:207:44;;;;;:::i;:::-;;:::i;5411:29:43:-;;;;;;;;;;;;;;;;3408:20;;;;;;;;;;;;;;;;27792:140;;;;;;;;;;-1:-1:-1;27792:140:43;;;;;:::i;:::-;;:::i;987:38:45:-;;;;;;;;;;;;;;;;27385:132:43;;;;;;;;;;-1:-1:-1;27385:132:43;;;;;:::i;:::-;;:::i;29164:112::-;;;;;;;;;;-1:-1:-1;29164:112:43;;;;;:::i;:::-;;:::i;6040:24::-;;;;;;;;;;-1:-1:-1;6040:24:43;;;;;:::i;:::-;;:::i;51105:170:44:-;;;;;;;;;;;;;:::i;2202:201:51:-;;;;;;;;;;;;;:::i;6194:23:43:-;;;;;;;;;;;;;;;;24938:306;;;;;;;;;;-1:-1:-1;24938:306:43;;;;;:::i;:::-;;:::i;35303:138:44:-;;;;;;;;;;-1:-1:-1;35303:138:44;;;;;:::i;:::-;;:::i;5801:32:43:-;;;;;;;;;;-1:-1:-1;5801:32:43;;;;-1:-1:-1;;;;;5801:32:43;;;31005:162:44;;;;;;;;;;-1:-1:-1;31005:162:44;;;;;:::i;:::-;;:::i;23998:213:43:-;;;;;;;;;;;;;:::i;34737:297:44:-;;;;;;;;;;-1:-1:-1;34737:297:44;;;;;:::i;:::-;;:::i;3534:60:43:-;;;;;;;;;;-1:-1:-1;3534:60:43;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;7563:25:73;;;7631:14;;7624:22;7619:2;7604:18;;7597:50;7536:18;3534:60:43;7395:258:73;565:21:51;;;;;;;;;;-1:-1:-1;565:21:51;;;;;;;-1:-1:-1;;;;;565:21:51;;;5040:149:45;;;;;;;;;;-1:-1:-1;5154:18:45;;5138:12;:34;;5040:149;;4565:26:43;;;;;;;;;;;;;;;;11928:262:42;;;;;;;;;;-1:-1:-1;11928:262:42;;;;;:::i;:::-;;:::i;512:21:51:-;;;;;;;;;;-1:-1:-1;512:21:51;;;;;;;;2083:217:42;;;;;;;;;;-1:-1:-1;2083:217:42;;;;;:::i;:::-;;:::i;29990:116:43:-;;;;;;;;;;-1:-1:-1;29990:116:43;;;;;:::i;:::-;;:::i;26225:120::-;;;;;;;;;;-1:-1:-1;26225:120:43;;;;;:::i;:::-;;:::i;52974:187:44:-;;;;;;;;;;;;;:::i;1585:88:46:-;;;;;;;;;;-1:-1:-1;1585:88:46;;;;;:::i;:::-;;:::i;8662:298:42:-;;;;;;;;;;-1:-1:-1;8662:298:42;;;;;:::i;:::-;;:::i;5357:316:45:-;;;;;;;;;;;;;:::i;47273:1451:44:-;;;;;;;;;;-1:-1:-1;47273:1451:44;;;;;:::i;:::-;;:::i;5550:26:43:-;;;;;;;;;;-1:-1:-1;5550:26:43;;;;;:::i;:::-;;:::i;52689:185:44:-;;;;;;;;;;;;;:::i;13185:228:42:-;;;;;;;;;;;;;:::i;31552:184:44:-;;;;;;;;;;-1:-1:-1;31552:184:44;;;;;:::i;:::-;;:::i;1696:119:49:-;;;;;;;;;;-1:-1:-1;1696:119:49;;;;;:::i;:::-;;:::i;822:22:45:-;;;;;;;;;;-1:-1:-1;822:22:45;;;;;:::i;:::-;;:::i;6250::43:-;;;;;;;;;;-1:-1:-1;6250:22:43;;;;;;;;1371:135:46;;;;;;;;;;;;;:::i;6783:244:42:-;;;;;;:::i;:::-;;:::i;49553:1154:44:-;;;;;;;;;;-1:-1:-1;49553:1154:44;;;;;:::i;:::-;;:::i;25897:112:43:-;;;;;;;;;;-1:-1:-1;25897:112:43;;;;;:::i;:::-;;:::i;3178:20::-;;;;;;;;;;;;;;;;5232:31;;;;;;;;;;;;;;;;4118:33;;;;;;;;;;;;;;;;52271:308:44;;;;;;;;;;-1:-1:-1;52271:308:44;;;;;:::i;:::-;;:::i;4426:24:43:-;;;;;;;;;;;;;;;;12725:292:42;12892:14;12908:17;12944:66;12959:2;12963:4;12969:7;12978;12987:10;12999;12944:14;:66::i;:::-;12937:73;;;;12725:292;;;;;;;;:::o;30354:148:43:-;929:26:49;:24;:26::i;:::-;30455:18:43::1;:40:::0;30354:148::o;3474:26::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3474:26:43;;-1:-1:-1;3474:26:43;:::o;3968:161:42:-;4033:22;4074:48;4084:4;4090:7;4099:10;4111;4074:9;:48::i;:::-;4067:55;;3968:161;;;;;:::o;28469:144:43:-;929:26:49;:24;:26::i;:::-;28568:17:43::1;:38:::0;;-1:-1:-1;;;;;;28568:38:43::1;-1:-1:-1::0;;;;;28568:38:43;;;::::1;::::0;;;::::1;::::0;;28469:144::o;26997:132::-;929:26:49;:24;:26::i;:::-;27090:14:43::1;:32:::0;26997:132::o;10363:262:42:-;10500:14;10516:17;10552:66;10567:2;10571:4;10577:7;10586;10595:10;10607;10552:14;:66::i;:::-;10545:73;;;;10363:262;;;;;;;:::o;33653:267:44:-;33789:19;33810;33848:65;33865:2;33869:4;33875;33881:7;33890:10;33902;33848:16;:65::i;32070:178::-;32149:19;32187:54;32199:2;32203:4;32209:7;32218:10;32230;32187:11;:54::i;:::-;32180:61;;32070:178;;;;;;:::o;5151:177:42:-;5228:22;5269:52;5279:2;5283:4;5289:7;5298:10;5310;5269:9;:52::i;7867:274::-;8017:22;8041:17;8077:57;8092:2;8096:4;8102:7;8111:10;8123;8077:14;:57::i;9563:328::-;9756:14;9772:17;9808:76;9823:6;9831:4;9837;9843:7;9852;9861:10;9873;9808:14;:76::i;:::-;9801:83;;;;9563:328;;;;;;;;;:::o;50841:172:44:-;50884:13;50910;50925:15;50944:20;:18;:20::i;:::-;50909:55;;;;50981:25;50991:5;50998:7;50981:9;:25::i;:::-;50974:32;;;;50841:172;:::o;29651:113:43:-;929:26:49;:24;:26::i;:::-;29733:10:43::1;:24:::0;;-1:-1:-1;;29733:24:43::1;::::0;::::1;;::::0;;;::::1;::::0;;29651:113::o;28201:132::-;929:26:49;:24;:26::i;:::-;28294:14:43::1;:32:::0;28201:132::o;28779:222::-;929:26:49;:24;:26::i;:::-;28924:33:43::1;:70:::0;;-1:-1:-1;;;;;;28924:70:43::1;-1:-1:-1::0;;;;;28924:70:43;;;::::1;::::0;;;::::1;::::0;;28779:222::o;29412:108::-;929:26:49;:24;:26::i;:::-;29493:8:43::1;:20:::0;29412:108::o;3469:106:51:-;929:26:49;:24;:26::i;:::-;3549:6:51::1;:19:::0;;-1:-1:-1;;;;;3549:19:51;;::::1;::::0;::::1;-1:-1:-1::0;;;;;;3549:19:51;;::::1;::::0;;;::::1;::::0;;3469:106::o;24455:331:43:-;872:17:51;:15;:17::i;:::-;24515:10:43::1;::::0;::::1;;:25:::0;::::1;;;-1:-1:-1::0;24530:10:43::1;::::0;::::1;::::0;::::1;;;24529:11;24515:25;:51;;;;;24544:22;:20;:22::i;:::-;24511:269;;;24582:10;:17:::0;;-1:-1:-1;;24582:17:43::1;;;::::0;;24618:20:::1;::::0;::::1;::::0;24582:17;;24618:20:::1;24652:7;;;;;;;;;-1:-1:-1::0;;;;;24652:7:43::1;-1:-1:-1::0;;;;;24652:13:43::1;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;24744:25;:23;:25::i;:::-;24455:331::o:0;3317:197:8:-;-1:-1:-1;;;;;1898:6:8;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:8;;;;;;;:::i;:::-;;;;;;;;;1995:6;-1:-1:-1;;;;;1971:30:8;:20;-1:-1:-1;;;;;;;;;;;1642:65:5;-1:-1:-1;;;;;1642:65:5;;1563:151;1971:20:8;-1:-1:-1;;;;;1971:30:8;;1963:87;;;;-1:-1:-1;;;1963:87:8;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;5782:140:45:-;929:26:49;:24;:26::i;:::-;5879:23:45::1;:36:::0;5782:140::o;2496:161:51:-;1051:7;;;;;;;1046:38;;1067:17;;-1:-1:-1;;;1067:17:51;;;;;;;;;;;1046:38;2563:6:::1;::::0;;;::::1;-1:-1:-1::0;;;;;2563:6:51::1;2549:10;:20;2545:45;;2578:12;;-1:-1:-1::0;;;2578:12:51::1;;;;;;;;;;;2545:45;2600:7;:15:::0;;-1:-1:-1;;2600:15:51::1;::::0;;2630:20:::1;::::0;2639:10:::1;1278:51:73::0;;2630:20:51::1;::::0;1266:2:73;1251:18;2630:20:51::1;;;;;;;;2496:161::o:0;51644:232:44:-;51701:27;51741:13;51756:15;51775:20;:18;:20::i;:::-;51740:55;;;;51812:57;51836:16;:14;:16::i;:::-;51854:5;51861:7;51812:23;:57::i;4569:183:42:-;4656:22;4697:48;4707:4;4713:7;4722:10;4734;4697:9;:48::i;11176:292::-;11343:14;11359:17;11395:66;11410:2;11414:4;11420:7;11429;11438:10;11450;11395:14;:66::i;3621:38:43:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3621:38:43;;:::o;5800:237:42:-;5937:22;5978:52;5988:2;5992:4;5998:7;6007:10;6019;5978:9;:52::i;:::-;5971:59;;5800:237;;;;;;;:::o;3763:222:8:-;-1:-1:-1;;;;;1898:6:8;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:8;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:8;:20;-1:-1:-1;;;;;;;;;;;1642:65:5;-1:-1:-1;;;;;1642:65:5;;1563:151;1971:20:8;-1:-1:-1;;;;;1971:30:8;;1963:87;;;;-1:-1:-1;;;1963:87:8;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;2847:92:51:-;929:26:49;:24;:26::i;:::-;2915:9:51::1;:17:::0;;-1:-1:-1;;2915:17:51::1;::::0;;2847:92::o;5687:28:43:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5687:28:43;:::o;3006:131:8:-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:8;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:8;;9834:2:73;2308:92:8;;;9816:21:73;9873:2;9853:18;;;9846:30;9912:34;9892:18;;;9885:62;9983:26;9963:18;;;9956:54;10027:19;;2308:92:8;9632:420:73;2308:92:8;-1:-1:-1;;;;;;;;;;;;3006:131:8;:::o;32671:238:44:-;32810:19;32848:54;32860:2;32864:4;32870:7;32879:10;32891;32848:11;:54::i;1000:284:46:-;872:17:51;:15;:17::i;:::-;1154:3:46::1;;1138:12;:19;1134:144;;1194:3;::::0;1179:18:::1;::::0;:12:::1;:18;:::i;:::-;1173:3;:24:::0;1216:20:::1;::::0;::::1;::::0;;;::::1;1250:17;:15;:17::i;35769:160:44:-:0;35842:19;35880:42;35895:2;35899:10;35911;35880:14;:42::i;4763:182:45:-;4805:18;4893:12;:10;:12::i;:::-;4922:16;:14;:16::i;:::-;4915:23;;4763:182;:::o;3185:89:51:-;929:26:49;:24;:26::i;:::-;3251:9:51::1;:16:::0;;-1:-1:-1;;3251:16:51::1;3263:4;3251:16;::::0;;3185:89::o;26609:132:43:-;929:26:49;:24;:26::i;:::-;26702:14:43::1;:32:::0;26609:132::o;25567:120::-;929:26:49;:24;:26::i;:::-;25654:11:43::1;:26:::0;25567:120::o;53544:207:44:-;53642:24;53668:14;53701:43;53721:2;53725:4;53731:12;53740:2;53731:8;:12::i;:::-;53701:19;:43::i;:::-;53694:50;;;;53544:207;;;;;:::o;27792:140:43:-;929:26:49;:24;:26::i;:::-;27889:16:43::1;:36:::0;27792:140::o;27385:132::-;929:26:49;:24;:26::i;:::-;27478:14:43::1;:32:::0;27385:132::o;29164:112::-;929:26:49;:24;:26::i;:::-;29247:9:43::1;:22:::0;29164:112::o;6040:24::-;;;;;;;;;;;;51105:170:44;51147:13;51173;51188:15;51207:20;:18;:20::i;:::-;51172:55;;;;51244:24;51253:5;51260:7;51244:8;:24::i;2202:201:51:-;872:17;:15;:17::i;:::-;2266:6:::1;::::0;;;::::1;-1:-1:-1::0;;;;;2266:6:51::1;2252:10;:20;2248:45;;2281:12;;-1:-1:-1::0;;;2281:12:51::1;;;;;;;;;;;2248:45;2308:9;::::0;::::1;;2303:36;;2326:13;;-1:-1:-1::0;;;2326:13:51::1;;;;;;;;;;;2303:36;2349:7;:14:::0;;-1:-1:-1;;2349:14:51::1;;;::::0;;2378:18:::1;::::0;2385:10:::1;1278:51:73::0;;2378:18:51::1;::::0;1266:2:73;1251:18;2378::51::1;1114:221:73::0;24938:306:43;24997:7;25016:28;25047:12;25060:2;25047:16;;;;;;;;:::i;:::-;;;;;;;;:30;:16;;;;;:30;;25115:20;;;-1:-1:-1;;;25115:20:43;;;;-1:-1:-1;;;;;25047:30:43;;;;-1:-1:-1;25047:16:43;;:30;;25115:18;;:20;;;;;;;;;;;25047:30;25115:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25087:48;;;;25150:3;25145:61;;25162:44;;-1:-1:-1;;;25162:44:43;;-1:-1:-1;;;;;1296:32:73;;25162:44:43;;;1278:51:73;1251:18;;25162:44:43;1114:221:73;25145:61:43;-1:-1:-1;25231:5:43;24938:306;-1:-1:-1;;;24938:306:43:o;35303:138:44:-;35354:19;35392:42;35407:2;35411:10;35423;35392:14;:42::i;31005:162::-;31072:19;31110:50;31122:4;31128:7;31137:10;31149;31110:11;:50::i;23998:213:43:-;24051:4;24068:13;24083:15;24102:20;:18;:20::i;:::-;24067:55;;;;24132:12;24147:24;24156:5;24163:7;24147:8;:24::i;:::-;24196:8;;-1:-1:-1;24188:16:43;;23998:213;-1:-1:-1;;;;23998:213:43:o;34737:297:44:-;34903:19;34924;34962:65;34979:2;34983:4;34989;34995:7;35004:10;35016;34962:16;:65::i;11928:262:42:-;12065:14;12081:17;12117:66;12132:2;12136:4;12142:7;12151;12160:10;12172;12117:14;:66::i;2083:217::-;3268:19:7;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:7;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:7;1476:19:17;:23;;;3376:66:7;;-1:-1:-1;3425:12:7;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:7;;10964:2:73;3314:201:7;;;10946:21:73;11003:2;10983:18;;;10976:30;11042:34;11022:18;;;11015:62;-1:-1:-1;;;11093:18:73;;;11086:44;11147:19;;3314:201:7;10762:410:73;3314:201:7;3525:12;:16;;-1:-1:-1;;3525:16:7;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:7;;;;;3551:65;2196:32:42::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;2179:7;:50:::0;;-1:-1:-1;;;;;;2179:50:42::1;-1:-1:-1::0;;;;;2179:50:42;;;::::1;::::0;;;::::1;::::0;;2239:54:::1;2254:17:::0;2239:14:::1;:54::i;:::-;3640:14:7::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:7;;;3710:14;;-1:-1:-1;11329:36:73;;3710:14:7;;11317:2:73;11302:18;3710:14:7;;;;;;;3258:483;2083:217:42;:::o;29990:116:43:-;929:26:49;:24;:26::i;:::-;30075:10:43::1;:24:::0;29990:116::o;26225:120::-;929:26:49;:24;:26::i;:::-;26312:11:43::1;:26:::0;26225:120::o;52974:187:44:-;53022:18;53053:13;53068:15;53087:20;:18;:20::i;:::-;53052:55;;;;53124:30;53139:5;53146:7;53124:14;:30::i;1585:88:46:-;929:26:49;:24;:26::i;:::-;1656:3:46::1;:10:::0;1585:88::o;8662:298:42:-;8825:14;8841:17;8877:76;8892:6;8900:4;8906;8912:7;8921;8930:10;8942;8877:14;:76::i;5357:316:45:-;5154:18;;5138:12;:34;5396:271;;5456:12;:19;5436:17;5489:104;5513:9;5509:1;:13;5489:104;;;5564:14;5576:1;5564:11;:14::i;:::-;664:1:70;660:5;5489:104:45;;;;5606:50;5632:23;;1844:12;:39;1823:18;:60;1711:189;47273:1451:44;929:26:49;:24;:26::i;:::-;47385:16:44::1;47413:33;;::::0;::::1;:18:::0;:33:::1;:::i;:::-;47518:35;::::0;-1:-1:-1;;;47518:35:44;;47547:4:::1;47518:35;::::0;::::1;1278:51:73::0;47385:62:44;;-1:-1:-1;;;;;;47518:20:44;::::1;::::0;::::1;::::0;1251:18:73;;47518:35:44::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;47513:65;;47562:16;;-1:-1:-1::0;;;47562:16:44::1;;;;;;;;;;;47513:65;47589:28;47635:39;::::0;;;::::1;::::0;::::1;;:::i;:::-;-1:-1:-1::0;;;;;47689:34:44;::::1;;::::0;;;:16:::1;:34;::::0;;;;:41:::1;;::::0;47589:86;;-1:-1:-1;47689:41:44::1;;47685:79;;;47739:25;;-1:-1:-1::0;;;47739:25:44::1;;;;;;;;;;;47685:79;47803:8;:15:::0;;47866:53:::1;::::0;;;;::::1;::::0;;;;;47912:4:::1;47866:53;::::0;;::::1;::::0;;;-1:-1:-1;;;;;47829:34:44;;::::1;47774:18;47829:34:::0;;;:16:::1;:34:::0;;;;;:90;;;;;;;;::::1;::::0;;;::::1;;-1:-1:-1::0;;47829:90:44;;::::1;::::0;;;::::1;::::0;;;47966:22;;;;::::1;::::0;;;;;;::::1;::::0;;-1:-1:-1;;;;;;47966:22:44;;::::1;::::0;;::::1;::::0;;48050:58;;;;::::1;::::0;;;;;;;::::1;::::0;;::::1;::::0;;;48032:12:::1;:77:::0;;;;::::1;::::0;;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;48150:7:::1;:40:::0;;;;::::1;::::0;;;48163:26;;::::1;;48150:40:::0;;;::::1;::::0;48228:9:::1;:44:::0;;;;::::1;::::0;;;48243:28:::1;::::0;::::1;;48228:44:::0;;;::::1;::::0;48312:11:::1;:48:::0;;;;::::1;::::0;;;48329:30:::1;::::0;::::1;;48312:48:::0;;;::::1;::::0;48435:74;;;;::::1;::::0;;;48450:24:::1;::::0;::::1;;48435:74:::0;;48480:26:::1;::::0;::::1;;48435:74:::0;;::::1;::::0;;;48424:5:::1;:86:::0;;;;::::1;::::0;;;;;;;;;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;48520:5:::1;:12:::0;;;;::::1;::::0;;;;;48590:10:::1;48606:20;47803:15:::0;48606:8:::1;:20::i;:::-;48590:37:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;48590:37:44;;;::::1;::::0;;;;;::::1;::::0;48668:49:::1;::::0;48686:10;;48668:49:::1;::::0;::::1;::::0;48698:18;;48668:49:::1;:::i;:::-;;;;;;;;47375:1349;;;47273:1451:::0;:::o;5550:26:43:-;;;;;;;;;;;;52689:185:44;52743:24;52782:15;52801:20;:18;:20::i;:::-;52779:42;;;52838:29;52859:7;52838:20;:29::i;:::-;52831:36;;;52689:185;:::o;13185:228:42:-;13357:1;13349:5;;13320:26;13340:4;13320:11;:26::i;:::-;:34;;;;:::i;:::-;:38;13316:90;;;13360:46;13400:5;;13371:26;13391:4;13371:11;:26::i;:::-;:34;;;;:::i;:::-;13360:10;:46::i;31552:184:44:-;31641:19;31679:50;31691:4;31697:7;31706:10;31718;31679:11;:50::i;1696:119:49:-;929:26;:24;:26::i;:::-;1785:8:::1;:23:::0;;-1:-1:-1;;;;;;1785:23:49::1;-1:-1:-1::0;;;;;1785:23:49;;;::::1;::::0;;;::::1;::::0;;1696:119::o;822:22:45:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;822:22:45;:::o;1371:135:46:-;1412:7;1451:3;;1435:12;:19;1431:33;;-1:-1:-1;1463:1:46;;1371:135::o;1431:33::-;1487:12;1481:3;;:18;;;;:::i;6783:244:42:-;6903:22;6927:17;6963:57;6978:2;6982:4;6988:7;6997:10;7009;6963:14;:57::i;:::-;6956:64;;;;6783:244;;;;;;:::o;49553:1154:44:-;929:26:49;:24;:26::i;:::-;49666:31:44::1;49700:16;49666:31:::0;49717:33:::1;;::::0;::::1;:18:::0;:33:::1;:::i;:::-;-1:-1:-1::0;;;;;49700:51:44::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;;-1:-1:-1;49700:51:44;49666:85;;;;::::1;::::0;;;;;;;::::1;;::::0;::::1;;;;::::0;;::::1;::::0;;;;-1:-1:-1;49761:44:44::1;;49789:16;;-1:-1:-1::0;;;49789:16:44::1;;;;;;;;;;;49761:44;49827:13:::0;;49970:12:::1;:15:::0;;49827:13;;49970:15;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;:29:::1;:15;::::0;;::::1;;:29;::::0;-1:-1:-1;;;;;49970:29:44::1;::::0;49919:39:::1;::::0;;;;;;::::1;;:::i;:::-;-1:-1:-1::0;;;;;49919:81:44::1;;49915:353;;50016:28;50062:39;::::0;;;::::1;::::0;::::1;;:::i;:::-;50016:86;;50119:8;50131:13;-1:-1:-1::0;;;;;50131:18:44::1;;:20;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;50116:35;;;50170:3;50165:33;;50182:16;;-1:-1:-1::0;;;50182:16:44::1;;;;;;;;;;;50165:33;50244:13;50212:12;50225:1;50212:15;;;;;;;;:::i;:::-;;;;;;;;;;;:29;;;:45;;;;;-1:-1:-1::0;;;;;50212:45:44::1;;;;;-1:-1:-1::0;;;;;50212:45:44::1;;;;;;50002:266;;49915:353;50321:18;:26;;;50308:7;50316:1;50308:10;;;;;;;;:::i;:::-;;;;;;;;:39;;;;50400:18;:28;;;50385:9;50395:1;50385:12;;;;;;;;:::i;:::-;;;;;;;;:43;;;;50485:18;:30;;;50468:11;50480:1;50468:14;;;;;;;;:::i;:::-;;;;;;;;:47;;;;50593:18;:26;;;50579:5;50585:1;50579:8;;;;;;;;:::i;:::-;;;;;;;;;;;:11;;:40;;;;50678:1;50660:40;50681:18;50660:40;;;;;;:::i;:::-;;;;;;;;49656:1051;;49553:1154:::0;:::o;25897:112:43:-;929:26:49;:24;:26::i;:::-;25980:9:43::1;:22:::0;25897:112::o;52271:308:44:-;52336:25;52373:13;52389:12;52398:2;52389:8;:12::i;:::-;52373:28;;52412:13;52427:15;52446:20;:18;:20::i;:::-;52411:55;;;;52483:89;52505:16;:14;:16::i;:::-;52523:25;52538:2;52542:5;52523:14;:25::i;:::-;52550:5;52557;52564:7;52483:21;:89::i;:::-;52476:96;52271:308;-1:-1:-1;;;;;52271:308:44:o;26063:2449::-;26280:14;26296:17;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;26325:13:44::2;26341:12;26350:2;26341:8;:12::i;:::-;26325:28;;26363;26381:2;26385:5;26363:17;:28::i;:::-;26401:18;26422:16;:14;:16::i;:::-;26401:37;;26625:13;26640:15:::0;26659:25:::2;26673:10;26659:13;:25::i;:::-;26624:60;;;;26799:58;26824:4;26830:10;26842:5;26849:7;26799:24;:58::i;:::-;26953:24;26983:41;27003:4;27009:5;27016:7;26983:19;:41::i;:::-;26952:72;;;27120:16;27140:1;27120:21:::0;27116:66:::2;;27150:32;;-1:-1:-1::0;;;27150:32:44::2;;;;;;;;;;;27116:66;308:8:70;27430:5:44;;27421;27412;27380:29;27401:7;27380:20;:29::i;:::-;:37;;;;:::i;:::-;27372:4;:46;;;;:::i;:::-;:54;;;;:::i;:::-;27371:64;;;;:::i;:::-;27370:78;;;;:::i;:::-;27358:90;;27541:72;27564:2;27568:9;27579:5;27586:10;27598:5;27605:7;27541:22;:72::i;:::-;27639:7;27627:9;:19;27623:75;;;27655:43;::::0;-1:-1:-1;;;27655:43:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;27655:43:44::2;676:248:73::0;27623:75:44::2;27804:42;27813:16;27831:14;;27804:8;:42::i;:::-;27795:51;;27869:7;27860:6;:16;27856:65;;;27885:36;::::0;-1:-1:-1;;;27885:36:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;27885:36:44::2;676:248:73::0;27856:65:44::2;28067:62;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;28014:2:44;;28044:4;;-1:-1:-1;;;;;28067:62:44;;::::2;::::0;;;::::2;::::0;28014:2;;28067:62:::2;::::0;13231:2:73;13216:18;28067:62:44::2;;;;;;;27988:152;;28150:36;28169:4;28175:1;28178:7;28150:18;:36::i;:::-;28196:47;28214:2;28218:9;28229:1;28232:10;28196:17;:47::i;:::-;28293:16;28312:37;28333:7;28342:6;28312:20;:37::i;:::-;28293:56;;28428:41;28443:7;28452:8;28462:6;28428:14;:41::i;:::-;28479:26;;;;;;26063:2449:::0;;;;;;;;;:::o;1916:143:49:-;1981:8;;:40;;-1:-1:-1;;;1981:40:49;;2010:10;1981:40;;;1278:51:73;-1:-1:-1;;;;;1981:8:49;;;;:28;;1251:18:73;;1981:40:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1976:76;;2030:22;;-1:-1:-1;;;2030:22:49;;;;;;;;;;;7741:1201:44;7908:22;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;8049:13:44::2;8064:15:::0;8083:24:::2;8097:9;;8083:13;:24::i;:::-;8048:59;;;;8191:23;8216:14:::0;8234:39:::2;8252:4;8258:5;8265:7;8234:17;:39::i;:::-;8190:83:::0;;-1:-1:-1;8190:83:44;-1:-1:-1;8300:24:44::2;8190:83:::0;;8300:24:::2;:::i;:::-;8283:41;;8355:7;8338:14;:24;8334:81;;;8371:44;::::0;-1:-1:-1;;;8371:44:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;8371:44:44::2;676:248:73::0;8334:81:44::2;8513:14;8531:1;8513:19:::0;8509:64:::2;;8541:32;;-1:-1:-1::0;;;8541:32:44::2;;;;;;;;;;;8509:64;8588:59;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;-1:-1:-1;;;;;8588:59:44;;::::2;::::0;;;::::2;::::0;::::2;::::0;13231:2:73;13216:18;8588:59:44::2;;;;;;;8657:52;8675:4;8681:15;8698:10;8657:17;:52::i;:::-;8719:16;8738:45;8759:7;8768:14;8738:20;:45::i;:::-;8719:64;;8863:41;8878:7;8887:8;8897:6;8863:14;:41::i;:::-;8914:21;;;;;7741:1201:::0;;;;;;:::o;23652:1837::-;23869:14;23885:17;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;23914:13:44::2;23930:12;23939:2;23930:8;:12::i;:::-;23914:28;;23952;23970:2;23974:5;23952:17;:28::i;:::-;24097:13;24112:15:::0;24131:24:::2;24145:9;;24131:13;:24::i;:::-;24096:59;;;;24251:24;24281:36;24301:2;24305:4;24311:5;24281:19;:36::i;:::-;24250:67;;;24503:71;24519:5;;24512:4;:12;;;;:::i;:::-;24568:5;24559;24527:29;24548:7;24527:20;:29::i;:::-;:37;;;;:::i;:::-;24526:47;;;;:::i;:::-;24503:8;:71::i;:::-;24491:83;;24600:7;24588:9;:19;:37;;;-1:-1:-1::0;24611:14:44;;24588:37:::2;24584:93;;;24634:43;::::0;-1:-1:-1;;;24634:43:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;24634:43:44::2;676:248:73::0;24584:93:44::2;24782:42;24791:16;24809:14;;24782:8;:42::i;:::-;24773:51;;24847:7;24838:6;:16;24834:65;;;24863:36;::::0;-1:-1:-1;;;24863:36:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;24863:36:44::2;676:248:73::0;24834:65:44::2;25045:62;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;24992:2:44;;25022:4;;-1:-1:-1;;;;;25045:62:44;;::::2;::::0;;;::::2;::::0;24992:2;;25045:62:::2;::::0;13231:2:73;13216:18;25045:62:44::2;;;;;;;24966:152;;25128:40;25147:2;25151:4;25157:1;25160:7;25128:18;:40::i;:::-;25178:43;25196:9;25207:1;25210:10;25178:17;:43::i;:::-;25270:16;25289:37;25310:7;25319:6;25289:20;:37::i;:::-;25270:56;;25405:41;25420:7;25429:8;25439:6;25405:14;:41::i;:::-;25456:26;;;;;23652:1837:::0;;;;;;;;;:::o;17627:2226::-;17843:19;17864;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;17895:13:44::2;17911:12;17920:2;17911:8;:12::i;:::-;17895:28;;17933;17951:2;17955:5;17933:17;:28::i;:::-;18162:13;18177:15:::0;18196:23:::2;18210:8;;18196:13;:23::i;:::-;18161:58;;;;308:8:70;18838:5:44;;18829;18821;18814:4;:12;;;;:::i;:::-;:20;;;;:::i;:::-;18813:30;;;;:::i;:::-;18812:44;;;;:::i;:::-;18798:58;;18885:4;18871:11;:18;18867:69;;;18898:38;::::0;-1:-1:-1;;;18898:38:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;18898:38:44::2;676:248:73::0;18867:69:44::2;18947:24;18973:14:::0;18991:151:::2;19029:2;19045:4;19063:11;19088:5;19107:25;19117:5;19124:7;19107:9;:25::i;:::-;18991:24;:151::i;:::-;18946:196:::0;;-1:-1:-1;18946:196:44;-1:-1:-1;19166:25:44::2;18946:196:::0;;19166:25:::2;:::i;:::-;19152:39;;19219:7;19205:11;:21;19201:79;;;19235:45;::::0;-1:-1:-1;;;19235:45:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;19235:45:44::2;676:248:73::0;19201:79:44::2;19474;::::0;;13596:25:73;;;13652:2;13637:18;;13630:34;;;13680:18;;;13673:34;;;13738:2;13723:18;;13716:34;;;19373:2:44;;19403:4;;19444:11;;-1:-1:-1;;;;;19474:79:44;;::::2;::::0;;;::::2;::::0;19373:2;;19474:79:::2;::::0;13583:3:73;13568:19;19474:79:44::2;;;;;;;19347:217;;;19574:51;19593:4;19599:16;19617:7;19574:18;:51::i;:::-;19635:47;19654:2;19658:11;19671:1;19674:7;19635:18;:47::i;:::-;19756;19771:10;19783:11;19796:6;19756:14;:47::i;13334:1199::-:0;13523:19;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;13554:13:44::2;13570:12;13579:2;13570:8;:12::i;:::-;13554:28;;13592;13610:2;13614:5;13592:17;:28::i;:::-;13738:24;13752:9;;13738:13;:24::i;:::-;;;13858;13884:14:::0;13902:36:::2;13922:2;13926:4;13932:5;13902:19;:36::i;:::-;13857:81;;;;14036:16;14056:1;14036:21:::0;14032:66:::2;;14066:32;;-1:-1:-1::0;;;14066:32:44::2;;;;;;;;;;;14032:66;14122:25;14141:6:::0;14122:16;:25:::2;:::i;:::-;14108:39;;14175:7;14161:11;:21;14157:79;;;14191:45;::::0;-1:-1:-1;;;14191:45:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;14191:45:44::2;676:248:73::0;14157:79:44::2;14251:62;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;-1:-1:-1;;;;;14251:62:44;;::::2;::::0;;;::::2;::::0;14262:2;;14251:62:::2;::::0;13231:2:73;13216:18;14251:62:44::2;;;;;;;14323:55;14342:2;14346:4;14352:16;14370:7;14323:18;:55::i;:::-;14451:47;14466:10;14478:11;14491:6;14451:14;:47::i;:::-;14508:18;;;13334:1199:::0;;;;;;;:::o;11270:1607::-;11457:22;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;11491:13:44::2;11507:12;11516:2;11507:8;:12::i;:::-;11491:28;;11529;11547:2;11551:5;11529:17;:28::i;:::-;11567:18;11588:16;:14;:16::i;:::-;11567:37;;11789:13;11804:15:::0;11823:25:::2;11837:10;11823:13;:25::i;:::-;11788:60;;;;11941:67;11964:2;11968:4;11974:5;11981:10;11993:5;12000:7;11941:22;:67::i;:::-;12091:23;12116:14:::0;12134:34:::2;12152:2;12156:4;12162:5;12134:17;:34::i;:::-;12090:78:::0;;-1:-1:-1;12090:78:44;-1:-1:-1;12195:24:44::2;12090:78:::0;;12195:24:::2;:::i;:::-;12178:41;;12250:7;12233:14;:24;12229:81;;;12266:44;::::0;-1:-1:-1;;;12266:44:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;12266:44:44::2;676:248:73::0;12229:81:44::2;12406:14;12424:1;12406:19:::0;12402:64:::2;;12434:32;;-1:-1:-1::0;;;12434:32:44::2;;;;;;;;;;;12402:64;12481:63;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;-1:-1:-1;;;;;12481:63:44;;::::2;::::0;;;::::2;::::0;12490:2;;12481:63:::2;::::0;13231:2:73;13216:18;12481:63:44::2;;;;;;;12588:56;12606:2;12610:4;12616:15;12633:10;12588:17;:56::i;:::-;12654:16;12673:45;12694:7;12703:14;12673:20;:45::i;:::-;12654:64;;12798:41;12813:7;12822:8;12832:6;12798:14;:41::i;:::-;12849:21;;;;;;;11270:1607:::0;;;;;;;:::o;15339:1422::-;15531:22;15555:17;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;15584:23:44::2;15617:14:::0;15641:13:::2;15657:12;15666:2;15657:8;:12::i;:::-;15641:28;;15679;15697:2;15701:5;15679:17;:28::i;:::-;15907:23;15921:8;;15907:13;:23::i;:::-;;;15979:35;16002:4;16008:5;15979:22;:35::i;:::-;15940:74:::0;;-1:-1:-1;15940:74:44;-1:-1:-1;15940:74:44;-1:-1:-1;16041:24:44::2;15940:74:::0;;16041:24:::2;:::i;:::-;16024:41;;16096:7;16079:14;:24;16075:81;;;16112:44;::::0;-1:-1:-1;;;16112:44:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;16112:44:44::2;676:248:73::0;16075:81:44::2;16252:14;16270:1;16252:19:::0;16248:64:::2;;16280:32;;-1:-1:-1::0;;;16280:32:44::2;;;;;;;;;;;16248:64;16327:79;::::0;;13596:25:73;;;13652:2;13637:18;;13630:34;;;13680:18;;;13673:34;;;13738:2;13723:18;;13716:34;;;-1:-1:-1;;;;;16327:79:44;;::::2;::::0;;;::::2;::::0;16341:2;;16327:79:::2;::::0;13583:3:73;13568:19;16327:79:44::2;;;;;;;16416:57;16434:9;16445:15;16462:10;16416:17;:57::i;:::-;16483:42;16501:2;16505:4;16511:1;16514:10;16483:17;:42::i;:::-;16535:16;16554:45;16575:7;16584:14;16554:20;:45::i;:::-;16535:64;;16669:41;16684:7;16693:8;16703:6;16669:14;:41::i;:::-;16720:34;;;;15339:1422:::0;;;;;;;;:::o;20639:2448::-;20882:14;20898:17;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;20941:4:44::2;20931:6;:14:::0;20927:41:::2;;20954:14;;-1:-1:-1::0;;;20954:14:44::2;;;;;;;;;;;20927:41;20978:17;20998:16;21007:6;20998:8;:16::i;:::-;20978:36;;21024:15;21042:14;21051:4;21042:8;:14::i;:::-;21024:32;;21066:36;21084:6;21092:9;21066:17;:36::i;:::-;21112:32;21130:4;21136:7;21112:17;:32::i;:::-;21240:24;21270:44;21290:6;21298:4;21304:9;21270:19;:44::i;:::-;-1:-1:-1::0;21239:75:44;-1:-1:-1;21456:9:44;21438:14:::2;21445:7:::0;21438:4;:14:::2;:::i;:::-;21437:28;;;;:::i;:::-;21425:40;;21491:7;21479:9;:19;:37;;;-1:-1:-1::0;21502:14:44;;21479:37:::2;21475:93;;;21525:43;::::0;-1:-1:-1;;;21525:43:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;21525:43:44::2;676:248:73::0;21475:93:44::2;21685:33;21700:6;21708:9;21685:14;:33::i;:::-;21653:29;21668:4;21674:7;21653:14;:29::i;:::-;:65;21649:566;;;21734:18;21755:16;:14;:16::i;:::-;21734:37;;21968:13;21983:15:::0;22002:25:::2;22016:10;22002:13;:25::i;:::-;21967:60;;;;22128:76;22151:4;22157:9;22168:7;22177:10;22189:5;22196:7;22128:22;:76::i;:::-;21720:495;;;21649:566;22320:42;22329:16;22347:14;;22320:8;:42::i;:::-;22311:51;;22385:7;22376:6;:16;22372:65;;;22401:36;::::0;-1:-1:-1;;;22401:36:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;22401:36:44::2;676:248:73::0;22372:65:44::2;22623:71;::::0;;13596:25:73;;;13652:2;13637:18;;13630:34;;;13680:18;;;13673:34;;;13738:2;13723:18;;13716:34;;;22534:6:44;;22568:4;;22600;;-1:-1:-1;;;;;22623:71:44;;::::2;::::0;;;::::2;::::0;22534:6;;22623:71:::2;::::0;13583:3:73;13568:19;22623:71:44::2;;;;;;;22504:201;;;22715:49;22733:4;22739:9;22750:1;22753:10;22715:17;:49::i;:::-;22774:44;22793:6;22801:4;22807:1;22810:7;22774:18;:44::i;:::-;22868:16;22887:37;22908:7;22917:6;22887:20;:37::i;:::-;22868:56;;23003:41;23018:7;23027:8;23037:6;23003:14;:41::i;:::-;23054:26;;;;20639:2448:::0;;;;;;;;;;:::o;21167:604:43:-;21282:12;:19;21220:13;;;;;21311:333;21335:9;21331:1;:13;21311:333;;;21382:13;21398:11;21407:1;21398:8;:11::i;:::-;21382:27;;21424:14;21440:17;21461:19;21471:1;21474:5;21461:9;:19::i;:::-;21423:57;;;;21554:45;21585:6;21563:12;21576:1;21563:15;;;;;;;;:::i;:::-;;;;;;;;;;;:19;;;:28;;;;:::i;:::-;21593:5;21554:8;:45::i;:::-;21545:54;;;;:::i;:::-;;-1:-1:-1;21613:20:43;21624:9;21613:20;;:::i;:::-;;;21368:276;;;21350:16;21364:1;664::70;660:5;;553:129;21350:16:43;21346:20;;21311:333;;;;21702:29;21711:7;21720:10;;21702:8;:29::i;:::-;21692:39;;21741:23;21167:604;;:::o;22409:257::-;22485:13;22514:5;;22523:1;22514:10;22510:26;;-1:-1:-1;354:8:70;22526:10:43;;22510:26;22601:58;22644:6;22611:30;22632:8;22611:20;:30::i;:::-;:39;;;;:::i;:::-;22653:5;;22601:8;:58::i;1808:93:51:-;1863:7;;;;;;;1859:35;;;1879:15;;-1:-1:-1;;;1879:15:51;;;;;;;;;;;18362:991:43;18471:24;18506:8;;18498:5;;:16;;;;:::i;:::-;18471:43;;18528:16;18548:1;18528:21;18524:34;;18551:7;18362:991::o;18524:34::-;18587:12;:19;18567:17;;18587:19;18832:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18832:24:43;;18806:50;;18950:9;18945:211;18969:9;18965:1;:13;18945:211;;;19028:11;19037:1;19028:8;:11::i;:::-;19016:6;19023:1;19016:9;;;;;;;;:::i;:::-;;;;;;:23;;;;;19105:40;19114:12;19127:1;19114:15;;;;;;;;:::i;:::-;;;;;;;;;;;:19;;;19135:6;19142:1;19135:9;;;;;;;;:::i;:::-;;;;;;;19105:8;:40::i;:::-;19096:49;;;;:::i;:::-;;-1:-1:-1;664:1:70;660:5;18945:211:43;;;;19170:9;19165:182;19189:9;19185:1;:13;19165:182;;;19280:11;19319:16;19310:5;19298:6;19305:1;19298:9;;;;;;;;:::i;:::-;;;;;;;:17;;;;:::i;:::-;19297:38;;;;:::i;:::-;19280:56;;;;;;;;-1:-1:-1;19280:56:43;;;;;;;;;660:5:70;19165:182:43;;;;18406:947;;;;18362:991::o;907:96:50:-;929:26:49;:24;:26::i;2938:974:5:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:5;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:5;;;;;;;;-1:-1:-1;;3531:63:5;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:5;;14152:2:73;3758:56:5;;;14134:21:73;14191:2;14171:18;;;14164:30;14230:34;14210:18;;;14203:62;-1:-1:-1;;;14281:18:73;;;14274:44;14335:19;;3758:56:5;13950:410:73;3527:302:5;-1:-1:-1;;;;;;;;;;;3644:28:5;;3636:82;;;;-1:-1:-1;;;3636:82:5;;14567:2:73;3636:82:5;;;14549:21:73;14606:2;14586:18;;;14579:30;14645:34;14625:18;;;14618:62;-1:-1:-1;;;14696:18:73;;;14689:39;14745:19;;3636:82:5;14365:405:73;3636:82:5;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;3593:873:45:-;3734:12;:19;3642:18;;;;;;;3763:454;3787:9;3783:1;:13;3763:454;;;3834:13;3850:11;3859:1;3850:8;:11::i;:::-;3834:27;;3876:14;3896:19;3906:1;3909:5;3896:9;:19::i;:::-;3875:40;;;3985:11;3999:59;308:8:70;4031:6:45;4009:12;4022:1;4009:15;;;;;;;;:::i;:::-;;;;;;;;;;;:19;;;:28;;;;:::i;:::-;4008:42;;;;:::i;3999:59::-;3985:73;;4148:3;4121:24;4136:1;4139:5;4121:14;:24::i;:::-;:30;;;;:::i;:::-;4114:37;;;;:::i;:::-;;-1:-1:-1;4196:10:45;4203:3;4196:10;;:::i;:::-;;;3820:397;;;3802:16;3816:1;664::70;660:5;;553:129;3802:16:45;3798:20;;3763:454;;;;4291:3;4298:1;4291:8;4287:101;;4350:9;;4362:1;4350:13;4343:20;;;;;3593:873;:::o;4287:101::-;4450:9;4456:3;4450;:9;:::i;:::-;4437:22;;3662:804;;;3593:873;:::o;16171:379:43:-;16312:27;16369:24;16396:51;16417:11;16430:6;16438:8;16396:20;:51::i;:::-;16369:78;;16516:27;16526:6;16534:8;16516:9;:27::i;:::-;16497:46;;:16;:46;:::i;46262:85:44:-;46317:23;:21;:23::i;28901:909::-;29032:19;872:17:51;:15;:17::i;:::-;29068:10:44::1;::::0;::::1;::::0;::::1;;;29063:44;;29087:20;;-1:-1:-1::0;;;29087:20:44::1;;;;;;;;;;;29063:44;29117:11;29131:8;29140:2;29131:12;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;:31:::1;::::0;-1:-1:-1;;;29131:31:44;;-1:-1:-1;;;;;1296:32:73;;;29131:31:44::1;::::0;::::1;1278:51:73::0;29131:12:44;;::::1;::::0;:22:::1;::::0;1251:18:73;;29131:31:44::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;29117:45;;29176:3;29183:1;29176:8:::0;29172:53:::1;;29193:32;::::0;-1:-1:-1;;;29193:32:44;;::::1;::::0;::::1;850:25:73::0;;;891:18;;;884:34;;;823:18;;29193:32:44::1;676:248:73::0;29172:53:44::1;29253:16;29272:11;29284:2;29272:15;;;;;;;;:::i;:::-;;;;;;;;;29253:34;;29353:23;29362:3;29367:8;29353;:23::i;:::-;29339:37;;29422:8;29431:2;29422:12;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;:31:::1;::::0;-1:-1:-1;;;29422:31:44;;-1:-1:-1;;;;;15156:32:73;;;29422:31:44::1;::::0;::::1;15138:51:73::0;15205:18;;;15198:34;;;29422:12:44;;::::1;::::0;:17:::1;::::0;15111:18:73;;29422:31:44::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;29576:11;29547:26;29567:4;29547:11;:26::i;:::-;:40;29543:86;;;29603:26;29623:4;29603:11;:26::i;:::-;29589:40;;29543:86;29668:10;-1:-1:-1::0;;;;;29644:56:44::1;29659:7;-1:-1:-1::0;;;;;29644:56:44::1;29655:2;29644:56;29680:3;29685:11;29698:1;29644:56;;;;;;;13243:25:73::0;;;13299:2;13284:18;;13277:34;;;;13342:2;13327:18;;13320:34;13231:2;13216:18;;13041:319;29644:56:44::1;;;;;;;;29768:35;29779:10;29791:11;29768:10;:35::i;:::-;29053:757;;28901:909:::0;;;;;:::o;39463:547::-;39587:24;39613:14;39643:4;39651:1;39643:9;39639:36;;39661:14;;-1:-1:-1;;;39661:14:44;;;;;;;;;;;39639:36;39790:22;39799:4;39805:6;39790:8;:22::i;:::-;39771:41;;39917:43;39926:16;39944:11;39956:2;39944:15;;;;;;;;:::i;:::-;;;;;;;;;39917:8;:43::i;:::-;39908:52;;39463:547;;;;;;:::o;23480:246:43:-;23555:13;23584:6;23594:1;23584:11;23580:35;;-1:-1:-1;;;23597:18:43;;23580:35;23671:48;23680:30;23701:8;23680:20;:30::i;9375:1424:44:-;9544:19;6921:18:43;:16;:18::i;:::-;872:17:51::1;:15;:17::i;:::-;9575:18:44::2;9596:16;:14;:16::i;:::-;9575:37;;9799:13;9814:15:::0;9833:25:::2;9847:10;9833:13;:25::i;:::-;9798:60;;;;9973:58;9998:4;10004:10;10016:5;10023:7;9973:24;:58::i;:::-;10127:24;10153:14:::0;10171:41:::2;10191:4;10197:5;10204:7;10171:19;:41::i;:::-;10126:86;;;;10310:16;10330:1;10310:21:::0;10306:66:::2;;10340:32;;-1:-1:-1::0;;;10340:32:44::2;;;;;;;;;;;10306:66;10396:25;10415:6:::0;10396:16;:25:::2;:::i;:::-;10382:39;;10449:7;10435:11;:21;10431:79;;;10465:45;::::0;-1:-1:-1;;;10465:45:44;;::::2;::::0;::::2;850:25:73::0;;;891:18;;;884:34;;;823:18;;10465:45:44::2;676:248:73::0;10431:79:44::2;10525:58;::::0;;13243:25:73;;;13299:2;13284:18;;13277:34;;;13327:18;;;13320:34;;;-1:-1:-1;;;;;10525:58:44;;::::2;::::0;;;::::2;::::0;::::2;::::0;13231:2:73;13216:18;10525:58:44::2;;;;;;;10593:51;10612:4;10618:16;10636:7;10593:18;:51::i;:::-;10717:47;10732:10;10744:11;10757:6;10717:14;:47::i;5619:453::-:0;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;5732:96:44::1;5753:37;::::0;;;::::1;::::0;::::1;;:::i;:::-;5792:35;::::0;;;::::1;::::0;::::1;;:::i;:::-;5732:20;:96::i;:::-;5838:80;5869:21:::0;5838:30:::1;:80::i;:::-;5928:70;5952:21;:45;;;5928:23;:70::i;:::-;6008:57;6039:21;:25;;;6008:30;:57::i;22931:292:43:-:0;23012:18;23042:24;23069:30;23090:8;23069:20;:30::i;:::-;23042:57;-1:-1:-1;23163:53:43;23042:57;23190:25;23209:6;23042:57;23190:25;:::i;2704:575:45:-;2756:27;2786:5;2792:2;2786:9;;;;;;;;:::i;:::-;;;;;;;;;2756:39;;;;;;;;;2786:9;;;;;2756:39;;;;;;;;;;;;-1:-1:-1;2821:12:45;2830:2;2821:8;:12::i;:::-;2805:28;;2892:13;2934:12;:15;;;354:8:70;2928:21:45;;;;:::i;:::-;2908:16;;:42;;;;:::i;:::-;2892:58;;2998:13;3032:5;3014:12;:15;;;:23;;;;:::i;:::-;2998:39;-1:-1:-1;3098:14:45;308:8:70;3116:13:45;2998:39;3116:5;:13;:::i;:::-;3115:27;;;;:::i;:::-;3098:44;;3209:6;3193:5;3199:2;3193:9;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:22;3247:16;;3230:42;;3243:2;;3230:42;;;;3247:16;3265:6;;850:25:73;;;906:2;891:18;;884:34;838:2;823:18;;676:248;3230:42:45;;;;;;;;2746:533;;;;;2704:575;:::o;21971:181:43:-;22042:24;22137:8;22126;;22118:5;;:16;;;;:::i;:::-;:27;;;;:::i;2749:137:42:-;2853:7;;:26;;-1:-1:-1;;;2853:26:42;;-1:-1:-1;;;;;1296:32:73;;;2853:26:42;;;1278:51:73;2819:15:42;;2853:7;;:17;;1251:18:73;;2853:26:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;11117:73:43:-;11179:4;11170:5;;:13;;;;;;;:::i;:::-;;;;-1:-1:-1;;;11117:73:43:o;2135:331:45:-;2210:18;2240;2261:7;2269:2;2261:11;;;;;;;;:::i;:::-;;;;;;;;;2240:32;;2282:16;2301:5;2307:2;2301:9;;;;;;;;:::i;:::-;;;;;;;;;;;:13;;;2282:32;;2340:6;2328:8;:18;2324:41;;-1:-1:-1;2355:10:45;-1:-1:-1;2348:17:45;;2324:41;2451:8;2428:19;2441:6;2428:10;:19;:::i;:::-;2427:32;;;;:::i;17125:394:43:-;17317:25;308:8:70;17481:17:43;308:8:70;17481:11:43;:17;:::i;:::-;17470:6;17416:51;17437:11;17450:6;17458:8;17416:20;:51::i;:::-;:60;;;;:::i;:::-;17415:84;;;;:::i;:::-;17414:98;;;;:::i;:::-;17407:105;17125:394;-1:-1:-1;;;;;;17125:394:43:o;10897:94::-;10953:10;;;;;;;10949:35;;;10972:12;;-1:-1:-1;;;10972:12:43;;;;;;;;;;;19523:152;19610:25;19624:2;19628:6;19610:13;:25::i;:::-;19597:5;19603:2;19597:9;;;;;;;;:::i;:::-;;;;;;;;;:38;;;;;;;:::i;:::-;;;;;;;;19662:6;19645:10;19656:2;19645:14;;;;;;;;:::i;:::-;;;;;;;;;;:23;-1:-1:-1;;19523:152:43:o;17862:322::-;17925:13;17940:15;17986:20;:18;:20::i;:::-;17967:39;;-1:-1:-1;17967:39:43;-1:-1:-1;18016:12:43;18031:24;17967:39;;18031:8;:24::i;:::-;18016:39;;18135:7;18127:4;:15;18123:54;;18151:26;;-1:-1:-1;;;18151:26:43;;;;;850:25:73;;;891:18;;;884:34;;;823:18;;18151:26:43;676:248:73;18123:54:43;17957:227;17862:322;;;:::o;43270:414:44:-;43435:27;43465:54;43489:11;43502:6;43510:8;43465:23;:54::i;:::-;43435:84;;43615:4;43593:19;:26;43589:88;;;43628:49;;-1:-1:-1;;;43628:49:44;;;;;850:25:73;;;891:18;;;884:34;;;823:18;;43628:49:44;676:248:73;37518:570:44;37648:24;37674:14;37704:4;37712:1;37704:9;37700:36;;37722:14;;-1:-1:-1;;;37722:14:44;;;;;;;;;;;37700:36;37851:43;37860:4;37866:27;37876:6;37884:8;37866:9;:27::i;:::-;37851:8;:43::i;:::-;37832:62;;37999:39;38008:16;38026:11;;37999:8;:39::i;44225:521::-;44432:18;44453:26;44468:2;44472:6;44453:14;:26::i;:::-;44432:47;;44489:25;44517:72;44539:11;44552:10;44564:6;44572;44580:8;44517:21;:72::i;:::-;44489:100;;44681:4;44661:17;:24;44657:82;;;44694:45;;-1:-1:-1;;;44694:45:44;;;;;850:25:73;;;891:18;;;884:34;;;823:18;;44694:45:44;676:248:73;44657:82:44;44422:324;;44225:521;;;;;;:::o;1131:119:70:-;1196:7;308:8;1223:7;1228:2;1223;:7;:::i;:::-;1222:21;;;;:::i;14577:248:43:-;14716:23;14728:4;14734;14716:11;:23::i;:::-;14787:7;;:31;;-1:-1:-1;;;14787:31:43;;-1:-1:-1;;;;;15156:32:73;;;14787:31:43;;;15138:51:73;15205:18;;;15198:34;;;14787:7:43;;;;:12;;15111:18:73;;14787:31:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14577:248;;;:::o;12904:262::-;13051:26;13062:2;13066:4;13072;13051:10;:26::i;:::-;13124:8;13133:2;13124:12;;;;;;;;:::i;:::-;;;;;;;;;;;:35;;-1:-1:-1;;;13124:35:43;;-1:-1:-1;;;;;15156:32:73;;;13124:35:43;;;15138:51:73;15205:18;;;15198:34;;;13124:12:43;;;;:17;;15111:18:73;;13124:35:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3263:299:42;3414:7;;3361:14;;3387:74;;-1:-1:-1;;;;;3414:7:42;3423:10;3443:4;3450:10;3387:26;:74::i;:::-;-1:-1:-1;3554:1:42;;3263:299;-1:-1:-1;;3263:299:42:o;30114:554:44:-;30263:22;30288:30;30297:11;;30310:7;30288:8;:30::i;:::-;30263:55;;30442:14;30433:5;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;;30527:17:44;;30516:55;;-1:-1:-1;;;;;30527:17:44;30546:24;30556:14;30546:7;:24;:::i;:::-;30516:10;:55::i;:::-;30617:44;30628:17;30647:13;30617:10;:44::i;:::-;30214:454;30114:554;;;:::o;36426:572::-;36554:23;36579:14;36609:4;36617:1;36609:9;36605:36;;36627:14;;-1:-1:-1;;;36627:14:44;;;;;;;;;;;36605:36;36764:43;36773:4;36779:27;36789:6;36797:8;36779:9;:27::i;36764:43::-;36746:61;;36912:36;36921:15;36938:9;;36912:8;:36::i;14052:233:43:-;14179:22;14190:4;14196;14179:10;:22::i;:::-;14248:7;;:30;;-1:-1:-1;;;14248:30:43;;-1:-1:-1;;;;;15156:32:73;;;14248:30:43;;;15138:51:73;15205:18;;;15198:34;;;14248:7:43;;;;:12;;15111:18:73;;14248:30:43;14964:274:73;847:119:70;912:7;957:2;939:14;308:8;939:2;:14;:::i;13508:269:43:-;13659:27;13671:2;13675:4;13681;13659:11;:27::i;:::-;13734:8;13743:2;13734:12;;;;;;;;:::i;:::-;;;;;;;;;;;:36;;-1:-1:-1;;;13734:36:43;;-1:-1:-1;;;;;15156:32:73;;;13734:36:43;;;15138:51:73;15205:18;;;15198:34;;;13734:12:43;;;;:17;;15111:18:73;;13734:36:43;14964:274:73;41928:819:44;42103:24;42129:14;42263:37;42283:2;42287:4;42293:6;42263:19;:37::i;:::-;-1:-1:-1;42240:60:44;-1:-1:-1;42526:22:44;42535:4;42541:6;42526:8;:22::i;:::-;42506:42;;;;:::i;:::-;;;42653:44;42662:16;42680;;42653:8;:44::i;:::-;42644:53;;41928:819;;;;;;;;:::o;38492:548::-;38614:23;38639:14;38669:4;38677:1;38669:9;38665:36;;38687:14;;-1:-1:-1;;;38687:14:44;;;;;;;;;;;38665:36;38824:22;38833:4;38839:6;38824:8;:22::i;:::-;38806:40;;38951;38960:15;38977:9;38987:2;38977:13;;;;;;;;:::i;40495:858::-;40602:17;40621:23;40646:14;40673:13;40688:15;40707:20;:18;:20::i;:::-;40672:55;;;;40737:13;40753:25;40763:5;40770:7;40753:9;:25::i;:::-;40737:41;;40980:6;354:8:70;40953:16:44;:14;:16::i;:::-;:22;;;;:::i;:::-;40945:31;;:4;:31;:::i;:::-;40944:42;;;;:::i;:::-;40926:60;;41048:32;41057:15;41074:5;41048:8;:32::i;:::-;41036:44;;41172:22;41181:4;41187:6;41172:8;:22::i;:::-;41154:40;;:15;:40;:::i;:::-;41136:58;;41252:41;41261:15;41278:14;;41252:8;:41::i;:::-;41243:50;;41303:43;;;40495:858;;;;;:::o;20471:478:43:-;20541:14;20557:17;20613:19;20647:25;20661:2;20665:6;20647:13;:25::i;:::-;20635:5;20641:2;20635:9;;;;;;;;:::i;:::-;;;;;;;;;:37;;;;:::i;:::-;20613:59;;20701:1;20686:12;:16;20682:225;;;20738:12;20718:33;;20839:57;20848:36;20857:18;;20877:6;20848:8;:36::i;:::-;20886:9;20839:8;:57::i;:::-;20830:66;;20682:225;20916:26;20471:478;;;;;:::o;1805:281:5:-;-1:-1:-1;;;;;1476:19:17;;;1878:106:5;;;;-1:-1:-1;;;1878:106:5;;16410:2:73;1878:106:5;;;16392:21:73;16449:2;16429:18;;;16422:30;16488:34;16468:18;;;16461:62;-1:-1:-1;;;16539:18:73;;;16532:43;16592:19;;1878:106:5;16208:409:73;1878:106:5;-1:-1:-1;;;;;;;;;;;1994:85:5;;-1:-1:-1;;;;;;1994:85:5;-1:-1:-1;;;;;1994:85:5;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;15288:474:43:-;15426:24;15604:11;15574:26;15583:6;15591:8;15574;:26::i;:::-;:41;15570:55;;-1:-1:-1;15624:1:43;15617:8;;15570:55;15735:20;15749:6;15735:11;:20;:::i;:::-;308:8:70;15690:30:43;15711:8;15690:20;:30::i;:::-;:42;;;;:::i;:::-;:65;;;;:::i;44861:1175:44:-;44958:12;:19;44913:15;;;44958:19;45015:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;45015:24:44;;44987:52;;45054:9;45049:616;45073:9;45069:1;:13;45049:616;;;45120:13;45136:11;45145:1;45136:8;:11::i;:::-;45120:27;;45161;45179:1;45182:5;45161:17;:27::i;:::-;45202:10;45215:5;45221:1;45215:8;;;;;;;;:::i;:::-;;;;;;;;;45202:21;;45247:1;45241:3;:7;45237:418;;;45351:59;45360:35;45369:18;;45389:5;45360:8;:35::i;:::-;45405:3;45351:8;:59::i;:::-;45337:8;45346:1;45337:11;;;;;;;;:::i;:::-;;;;;;;;;;:73;45463:23;45482:3;45463:23;;:::i;:::-;;;45550:1;45539:5;45545:1;45539:8;;;;;;;;:::i;:::-;;;;;;;;:12;;;;45569:71;45587:1;45590:8;45599:1;45590:11;;;;;;;;:::i;:::-;;;;;;;;;;;45606:33;;45603:1;;-1:-1:-1;;;;;45606:33:44;45569:17;:71::i;:::-;-1:-1:-1;;664:1:70;660:5;45049:616:44;;;-1:-1:-1;45678:12:44;;45674:301;;45759:29;45768:7;45777:10;;45759:8;:29::i;:::-;45749:39;;45850:7;45841:5;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;;45937:17:44;;45926:38;;-1:-1:-1;;;;;45937:17:44;45956:7;45926:10;:38::i;:::-;45989:40;46011:7;46020:8;45989:40;;;;;;;:::i;:::-;;;;;;;;44903:1133;;;44861:1175::o;2529:171:42:-;2611:11;;2607:87;;2661:7;;2638:45;;-1:-1:-1;;;;;2661:7:42;2670:3;2675:7;2638:22;:45::i;601:248:50:-;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;717:24:50::1;:22;:24::i;:::-;751:33;767:16;751:15;:33::i;:::-;794:48;821:14;837:4;794:26;:48::i;8661:2133:43:-:0;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;354:8:70::1;8820:27:43;:37;;;:43;8816:70;;;8872:14;;-1:-1:-1::0;;;8872:14:43::1;;;;;;;;;;;8816:70;8896:58;8914:27;:39;;;8896:17;:58::i;:::-;8964:56;8982:27;:37;;;8964:17;:56::i;:::-;9030:58;9048:27;:39;;;9030:17;:58::i;:::-;9098:61;9116:27;:42;;;9098:17;:61::i;:::-;9169;9187:27;:42;;;9169:17;:61::i;:::-;9240;9258:27;:42;;;9240:17;:61::i;:::-;9311:63;9329:27;:44;;;9311:17;:63::i;:::-;9384:61;9402:27;:42;;;9384:17;:61::i;:::-;9455:106;9473:87;9514:46;::::0;::::1;;9473:38;::::0;::::1;;:87;:::i;:::-;9455:17;:106::i;:::-;9587:42;;::::0;::::1;:27:::0;:42:::1;:::i;:::-;9571:7;:59:::0;;-1:-1:-1;;;;;;9571:59:43::1;-1:-1:-1::0;;;;;9571:59:43;;;::::1;::::0;;::::1;::::0;;9701:35:::1;::::0;-1:-1:-1;;;9701:35:43;;9730:4:::1;9701:35;::::0;::::1;1278:51:73::0;9701:20:43::1;::::0;1251:18:73;;9701:35:43::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9696:65;;9745:16;;-1:-1:-1::0;;;9745:16:43::1;;;;;;;;;;;9696:65;9791:45;::::0;;;::::1;::::0;::::1;;:::i;:::-;9771:17;:65:::0;;-1:-1:-1;;;;;;9771:65:43::1;-1:-1:-1::0;;;;;9771:65:43;;;::::1;::::0;;;::::1;::::0;;9882:61:::1;::::0;;;::::1;::::0;::::1;;:::i;:::-;9846:33;:97:::0;;-1:-1:-1;;;;;;9846:97:43::1;-1:-1:-1::0;;;;;9846:97:43;;;::::1;::::0;;;::::1;::::0;;9965:37:::1;::::0;::::1;;9953:9;:49:::0;10023:36:::1;::::0;::::1;;10012:8;:47:::0;10083:39:::1;::::0;::::1;;10069:11;:53:::0;10144:37:::1;::::0;::::1;;10132:9;:49:::0;10205:39:::1;::::0;::::1;;10191:11;:53:::0;9846:97:::1;10271:42:::0;::::1;;10254:14;:59:::0;10340:42:::1;::::0;::::1;;10323:14;:59:::0;10409:42:::1;::::0;;::::1;;10392:14;:59:::0;10480:44:::1;::::0;::::1;;10461:16;:63:::0;10551:42:::1;::::0;::::1;;10534:59:::0;;10616:38:::1;::::0;::::1;;10603:10;:51:::0;10685:46:::1;;;10664:18;:67:::0;10741:10:::1;:18:::0;;-1:-1:-1;;10769:18:43;;;8661:2133::o;1214:287:45:-;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;1321:24:45::1;1349:1;1321:29:::0;1317:56:::1;;1359:14;;-1:-1:-1::0;;;1359:14:45::1;;;;;;;;;;;1317:56;1383:23;:50:::0;;;1443:51:::1;1409:24:::0;1844:12;:39;1823:18;:60;1711:189;707:142:46;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;797:3:46::1;:10:::0;;;823:19:::1;803:4:::0;823:12:::1;:19;:::i;:::-;817:3;:25:::0;-1:-1:-1;707:142:46:o;19862:306:43:-;19936:15;19996:11;308:8:70;20010:12:43;20023:2;20010:16;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:32;;;;:::i;:::-;19996:46;-1:-1:-1;20148:12:43;20154:6;19996:46;20148:12;:::i;:::-;20123:10;20134:2;20123:14;;;;;;;;:::i;:::-;;;;;;;;;20117:3;:20;;;;:::i;:::-;20110:51;;;;:::i;11720:111::-;11797:4;11788:5;;:13;;;;;;;:::i;:::-;;;;;;;;11820:4;11811:5;;:13;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;11720:111:43:o;12059:140::-;12162:4;12138:12;12151:2;12138:16;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:28;;;;;;;:::i;:::-;;;;-1:-1:-1;12176:16:43;;-1:-1:-1;12187:4:43;12176:10;:16::i;974:241:36:-;1139:68;;-1:-1:-1;;;;;17793:15:73;;;1139:68:36;;;17775:34:73;17845:15;;17825:18;;;17818:43;17877:18;;;17870:34;;;1112:96:36;;1132:5;;-1:-1:-1;;;1162:27:36;17710:18:73;;1139:68:36;;;;-1:-1:-1;;1139:68:36;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:36;-1:-1:-1;;;;;;1139:68:36;;;;;;;;;;1112:19;:96::i;11390:113:43:-;11466:4;11457:5;;:13;;;;;;;:::i;:::-;;;;-1:-1:-1;11480:16:43;;-1:-1:-1;11491:4:43;11480:10;:16::i;12444:138::-;12548:4;12524:12;12537:2;12524:16;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:28;;;;;;;:::i;:::-;;;;;;;;12571:4;12562:5;;:13;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;12444:138:43:o;2192:152:5:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:5;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:17;;;7195:88:5;;;;-1:-1:-1;;;7195:88:5;;18117:2:73;7195:88:5;;;18099:21:73;18156:2;18136:18;;;18129:30;18195:34;18175:18;;;18168:62;-1:-1:-1;;;18246:18:73;;;18239:36;18292:19;;7195:88:5;17915:402:73;7195:88:5;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:5;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;763:205:36:-;902:58;;-1:-1:-1;;;;;15156:32:73;;902:58:36;;;15138:51:73;15205:18;;;15198:34;;;875:86:36;;895:5;;-1:-1:-1;;;925:23:36;15111:18:73;;902:58:36;14964:274:73;1042:67:8;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;1251:137:49:-;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;1338:43:49::1;1364:16;1338:25;:43::i;1559:175:51:-:0;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;:::-;1672:9:51::1;:22:::0;;-1:-1:-1;;;;;1704:23:51;;::::1;::::0;::::1;-1:-1:-1::0;;;;;;1672:22:51;::::1;;1704:23:::0;;;;-1:-1:-1;;;;;;1704:23:51;;;;;;;::::1;::::0;;1559:175::o;1374:113:70:-;354:8;1445:6;:12;1441:39;;;1466:14;;-1:-1:-1;;;1466:14:70;;;;;;;;;;;3747:706:36;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:36;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:36;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:36;;19071:2:73;4351:85:36;;;19053:21:73;19110:2;19090:18;;;19083:30;19149:34;19129:18;;;19122:62;-1:-1:-1;;;19200:18:73;;;19193:40;19250:19;;4351:85:36;18869:406:73;7438:295:17;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:17;7635:17;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;1394:142:49:-;5363:13:7;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:7;;;;;;;:::i;3873:223:37:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;7739:540:17:-;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:17;;;;;;;;:::i;4960:446:37:-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:37;;19883:2:73;5149:81:37;;;19865:21:73;19922:2;19902:18;;;19895:30;19961:34;19941:18;;;19934:62;-1:-1:-1;;;20012:18:73;;;20005:36;20058:19;;5149:81:37;19681:402:73;5149:81:37;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:37;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:37:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1476:19:17;;;7908:60:37;;;;-1:-1:-1;;;7908:60:37;;20290:2:73;7908:60:37;;;20272:21:73;20329:2;20309:18;;;20302:30;20368:31;20348:18;;;20341:59;20417:18;;7908:60:37;20088:353:73;7908:60:37;-1:-1:-1;8003:10:37;7996:17;;7670:418;8044:33;8052:10;8064:12;8044:7;:33::i;14:131:73:-;-1:-1:-1;;;;;89:31:73;;79:42;;69:70;;135:1;132;125:12;150:521;245:6;253;261;269;277;330:3;318:9;309:7;305:23;301:33;298:53;;;347:1;344;337:12;298:53;383:9;370:23;360:33;;440:2;429:9;425:18;412:32;402:42;;491:2;480:9;476:18;463:32;453:42;;542:2;531:9;527:18;514:32;504:42;;596:3;585:9;581:19;568:33;610:31;635:5;610:31;:::i;:::-;660:5;650:15;;;150:521;;;;;;;;:::o;929:180::-;988:6;1041:2;1029:9;1020:7;1016:23;1012:32;1009:52;;;1057:1;1054;1047:12;1009:52;-1:-1:-1;1080:23:73;;929:180;-1:-1:-1;929:180:73:o;1340:248::-;1408:6;1416;1469:2;1457:9;1448:7;1444:23;1440:32;1437:52;;;1485:1;1482;1475:12;1437:52;-1:-1:-1;;1508:23:73;;;1578:2;1563:18;;;1550:32;;-1:-1:-1;1340:248:73:o;2002:247::-;2061:6;2114:2;2102:9;2093:7;2089:23;2085:32;2082:52;;;2130:1;2127;2120:12;2082:52;2169:9;2156:23;2188:31;2213:5;2188:31;:::i;2254:385::-;2340:6;2348;2356;2364;2417:3;2405:9;2396:7;2392:23;2388:33;2385:53;;;2434:1;2431;2424:12;2385:53;-1:-1:-1;;2457:23:73;;;2527:2;2512:18;;2499:32;;-1:-1:-1;2578:2:73;2563:18;;2550:32;;2629:2;2614:18;2601:32;;-1:-1:-1;2254:385:73;-1:-1:-1;2254:385:73:o;2644:316::-;2721:6;2729;2737;2790:2;2778:9;2769:7;2765:23;2761:32;2758:52;;;2806:1;2803;2796:12;2758:52;-1:-1:-1;;2829:23:73;;;2899:2;2884:18;;2871:32;;-1:-1:-1;2950:2:73;2935:18;;;2922:32;;2644:316;-1:-1:-1;2644:316:73:o;2965:452::-;3051:6;3059;3067;3075;3128:3;3116:9;3107:7;3103:23;3099:33;3096:53;;;3145:1;3142;3135:12;3096:53;3181:9;3168:23;3158:33;;3238:2;3227:9;3223:18;3210:32;3200:42;;3289:2;3278:9;3274:18;3261:32;3251:42;;3343:2;3332:9;3328:18;3315:32;3356:31;3381:5;3356:31;:::i;:::-;2965:452;;;;-1:-1:-1;2965:452:73;;-1:-1:-1;;2965:452:73:o;3422:590::-;3526:6;3534;3542;3550;3558;3566;3619:3;3607:9;3598:7;3594:23;3590:33;3587:53;;;3636:1;3633;3626:12;3587:53;3672:9;3659:23;3649:33;;3729:2;3718:9;3714:18;3701:32;3691:42;;3780:2;3769:9;3765:18;3752:32;3742:42;;3831:2;3820:9;3816:18;3803:32;3793:42;;3882:3;3871:9;3867:19;3854:33;3844:43;;3937:3;3926:9;3922:19;3909:33;3951:31;3976:5;3951:31;:::i;:::-;4001:5;3991:15;;;3422:590;;;;;;;;:::o;4017:118::-;4103:5;4096:13;4089:21;4082:5;4079:32;4069:60;;4125:1;4122;4115:12;4140:241;4196:6;4249:2;4237:9;4228:7;4224:23;4220:32;4217:52;;;4265:1;4262;4255:12;4217:52;4304:9;4291:23;4323:28;4345:5;4323:28;:::i;4578:383::-;4655:6;4663;4671;4724:2;4712:9;4703:7;4699:23;4695:32;4692:52;;;4740:1;4737;4730:12;4692:52;4776:9;4763:23;4753:33;;4833:2;4822:9;4818:18;4805:32;4795:42;;4887:2;4876:9;4872:18;4859:32;4900:31;4925:5;4900:31;:::i;:::-;4950:5;4940:15;;;4578:383;;;;;:::o;5477:127::-;5538:10;5533:3;5529:20;5526:1;5519:31;5569:4;5566:1;5559:15;5593:4;5590:1;5583:15;5609:1056;5686:6;5694;5747:2;5735:9;5726:7;5722:23;5718:32;5715:52;;;5763:1;5760;5753:12;5715:52;5802:9;5789:23;5821:31;5846:5;5821:31;:::i;:::-;5871:5;-1:-1:-1;5927:2:73;5912:18;;5899:32;5950:18;5980:14;;;5977:34;;;6007:1;6004;5997:12;5977:34;6045:6;6034:9;6030:22;6020:32;;6090:7;6083:4;6079:2;6075:13;6071:27;6061:55;;6112:1;6109;6102:12;6061:55;6148:2;6135:16;6170:2;6166;6163:10;6160:36;;;6176:18;;:::i;:::-;6251:2;6245:9;6219:2;6305:13;;-1:-1:-1;;6301:22:73;;;6325:2;6297:31;6293:40;6281:53;;;6349:18;;;6369:22;;;6346:46;6343:72;;;6395:18;;:::i;:::-;6435:10;6431:2;6424:22;6470:2;6462:6;6455:18;6510:7;6505:2;6500;6496;6492:11;6488:20;6485:33;6482:53;;;6531:1;6528;6521:12;6482:53;6587:2;6582;6578;6574:11;6569:2;6561:6;6557:15;6544:46;6632:1;6627:2;6622;6614:6;6610:15;6606:24;6599:35;6653:6;6643:16;;;;;;;5609:1056;;;;;:::o;6852:315::-;6920:6;6928;6981:2;6969:9;6960:7;6956:23;6952:32;6949:52;;;6997:1;6994;6987:12;6949:52;7033:9;7020:23;7010:33;;7093:2;7082:9;7078:18;7065:32;7106:31;7131:5;7106:31;:::i;:::-;7156:5;7146:15;;;6852:315;;;;;:::o;7658:203::-;7753:6;7806:3;7794:9;7785:7;7781:23;7777:33;7774:53;;;7823:1;7820;7813:12;7774:53;-1:-1:-1;7846:9:73;7658:203;-1:-1:-1;7658:203:73:o;7866:454::-;7961:6;7969;7977;7985;7993;8046:3;8034:9;8025:7;8021:23;8017:33;8014:53;;;8063:1;8060;8053:12;8014:53;-1:-1:-1;;8086:23:73;;;8156:2;8141:18;;8128:32;;-1:-1:-1;8207:2:73;8192:18;;8179:32;;8258:2;8243:18;;8230:32;;-1:-1:-1;8309:3:73;8294:19;8281:33;;-1:-1:-1;7866:454:73;-1:-1:-1;7866:454:73:o;8325:205::-;8422:6;8475:3;8463:9;8454:7;8450:23;8446:33;8443:53;;;8492:1;8489;8482:12;8806:408;9008:2;8990:21;;;9047:2;9027:18;;;9020:30;9086:34;9081:2;9066:18;;9059:62;-1:-1:-1;;;9152:2:73;9137:18;;9130:42;9204:3;9189:19;;8806:408::o;9219:::-;9421:2;9403:21;;;9460:2;9440:18;;;9433:30;9499:34;9494:2;9479:18;;9472:62;-1:-1:-1;;;9565:2:73;9550:18;;9543:42;9617:3;9602:19;;9219:408::o;10057:127::-;10118:10;10113:3;10109:20;10106:1;10099:31;10149:4;10146:1;10139:15;10173:4;10170:1;10163:15;10189:125;10254:9;;;10275:10;;;10272:36;;;10288:18;;:::i;10319:127::-;10380:10;10375:3;10371:20;10368:1;10361:31;10411:4;10408:1;10401:15;10435:4;10432:1;10425:15;10451:306;10527:6;10535;10588:2;10576:9;10567:7;10563:23;10559:32;10556:52;;;10604:1;10601;10594:12;10556:52;10633:9;10627:16;10617:26;;10686:2;10675:9;10671:18;10665:25;10699:28;10721:5;10699:28;:::i;11376:245::-;11443:6;11496:2;11484:9;11475:7;11471:23;11467:32;11464:52;;;11512:1;11509;11502:12;11464:52;11544:9;11538:16;11563:28;11585:5;11563:28;:::i;11626:882::-;11834:3;11819:19;;11860:20;;11889:31;11860:20;11889:31;:::i;:::-;-1:-1:-1;;;;;11985:14:73;;;11967:33;;12049:4;12037:17;;12024:31;;12064:33;12024:31;12064:33;:::i;:::-;12148:2;12139:7;12135:16;12128:4;12117:9;12113:20;12106:46;;;12215:4;12207:6;12203:17;12190:31;12183:4;12172:9;12168:20;12161:61;12285:4;12277:6;12273:17;12260:31;12253:4;12242:9;12238:20;12231:61;12355:4;12347:6;12343:17;12330:31;12323:4;12312:9;12308:20;12301:61;12425:4;12417:6;12413:17;12400:31;12393:4;12382:9;12378:20;12371:61;12495:4;12487:6;12483:17;12470:31;12463:4;12452:9;12448:20;12441:61;11626:882;;;;:::o;12513:128::-;12580:9;;;12601:11;;;12598:37;;;12615:18;;:::i;12646:168::-;12719:9;;;12750;;12767:15;;;12761:22;;12747:37;12737:71;;12788:18;;:::i;12819:217::-;12859:1;12885;12875:132;;12929:10;12924:3;12920:20;12917:1;12910:31;12964:4;12961:1;12954:15;12992:4;12989:1;12982:15;12875:132;-1:-1:-1;13021:9:73;;12819:217::o;13761:184::-;13831:6;13884:2;13872:9;13863:7;13859:23;13855:32;13852:52;;;13900:1;13897;13890:12;13852:52;-1:-1:-1;13923:16:73;;13761:184;-1:-1:-1;13761:184:73:o;15575:407::-;15777:2;15759:21;;;15816:2;15796:18;;;15789:30;15855:34;15850:2;15835:18;;15828:62;-1:-1:-1;;;15921:2:73;15906:18;;15899:41;15972:3;15957:19;;15575:407::o;15987:216::-;16051:9;;;16079:11;;;16026:3;16109:9;;16137:10;;16133:19;;16162:10;;16154:19;;16130:44;16127:70;;;16177:18;;:::i;:::-;16127:70;;15987:216;;;;:::o;16622:703::-;16792:4;16840:2;16829:9;16825:18;16870:6;16859:9;16852:25;16896:2;16934;16929;16918:9;16914:18;16907:30;16957:6;16992;16986:13;17023:6;17015;17008:22;17061:2;17050:9;17046:18;17039:25;;17099:2;17091:6;17087:15;17073:29;;17120:1;17130:169;17144:6;17141:1;17138:13;17130:169;;;17205:13;;17193:26;;17274:15;;;;17239:12;;;;17166:1;17159:9;17130:169;;;-1:-1:-1;17316:3:73;;16622:703;-1:-1:-1;;;;;;;16622:703:73:o;17330:200::-;17396:9;;;17369:4;17424:9;;17452:10;;17464:12;;;17448:29;17487:12;;;17479:21;;17445:56;17442:82;;;17504:18;;:::i;:::-;17442:82;17330:200;;;;:::o;18322:250::-;18407:1;18417:113;18431:6;18428:1;18425:13;18417:113;;;18507:11;;;18501:18;18488:11;;;18481:39;18453:2;18446:10;18417:113;;;-1:-1:-1;;18564:1:73;18546:16;;18539:27;18322:250::o;18577:287::-;18706:3;18744:6;18738:13;18760:66;18819:6;18814:3;18807:4;18799:6;18795:17;18760:66;:::i;:::-;18842:16;;;;;18577:287;-1:-1:-1;;18577:287:73:o;19280:396::-;19429:2;19418:9;19411:21;19392:4;19461:6;19455:13;19504:6;19499:2;19488:9;19484:18;19477:34;19520:79;19592:6;19587:2;19576:9;19572:18;19567:2;19559:6;19555:15;19520:79;:::i;:::-;19660:2;19639:15;-1:-1:-1;;19635:29:73;19620:45;;;;19667:2;19616:54;;19280:396;-1:-1:-1;;19280:396:73:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "4381400",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "appreciationFactor()": "2405",
        "bes()": "2451",
        "bns()": "2364",
        "calcCtargemaCA()": "infinite",
        "changeGovernor(address)": "infinite",
        "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "infinite",
        "emaCalculationBlockSpan()": "2385",
        "evalLiquidation()": "infinite",
        "execSettlement()": "infinite",
        "feeRetainer()": "2363",
        "getBts()": "4669",
        "getCglb()": "infinite",
        "getLeverageTC()": "infinite",
        "getPACtp(uint256)": "infinite",
        "getPTCac()": "infinite",
        "getQACforRedeemTP(uint256,uint256)": "infinite",
        "getTCAvailableToRedeem()": "infinite",
        "getTPAvailableToMint(uint256)": "infinite",
        "getTotalACavailable()": "infinite",
        "governor()": "2495",
        "initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))": "infinite",
        "isLiquidationReached()": "infinite",
        "liqEnabled()": "2443",
        "liqRedeemTP(uint256)": "infinite",
        "liqRedeemTPto(uint256,address)": "infinite",
        "liqThrld()": "2385",
        "liquidated()": "2389",
        "makeStoppable()": "infinite",
        "makeUnstoppable()": "infinite",
        "mintTC(uint256,uint256)": "infinite",
        "mintTCandTP(uint256,uint256,uint256)": "infinite",
        "mintTCandTPFee()": "2452",
        "mintTCandTPto(uint256,uint256,uint256,address)": "infinite",
        "mintTCto(uint256,uint256,address)": "infinite",
        "mintTP(uint256,uint256,uint256)": "infinite",
        "mintTPto(uint256,uint256,uint256,address)": "infinite",
        "mocAppreciationBeneficiaryAddress()": "2515",
        "mocFeeFlowAddress()": "2493",
        "nACcb()": "2428",
        "nTCcb()": "2474",
        "nextEmaCalculation()": "2475",
        "pause()": "31939",
        "paused()": "2427",
        "pauser()": "2437",
        "pegContainer(uint256)": "6876",
        "peggedTokenIndex(address)": "4792",
        "protThrld()": "2450",
        "proxiableUUID()": "infinite",
        "redeemTC(uint256,uint256)": "infinite",
        "redeemTCandTP(uint256,uint256,uint256,uint256)": "infinite",
        "redeemTCandTPFee()": "2383",
        "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": "infinite",
        "redeemTCto(uint256,uint256,address)": "infinite",
        "redeemTP(uint256,uint256,uint256)": "infinite",
        "redeemTPto(uint256,uint256,uint256,address)": "infinite",
        "refreshACBalance()": "infinite",
        "setAppreciationFactor(uint256)": "infinite",
        "setBes(uint256)": "infinite",
        "setEmaCalculationBlockSpan(uint256)": "infinite",
        "setFeeRetainer(uint256)": "infinite",
        "setLiqEnabled(bool)": "infinite",
        "setLiqThrld(uint256)": "infinite",
        "setMintTCandTPFee(uint256)": "infinite",
        "setMocAppreciationBeneficiaryAddress(address)": "infinite",
        "setMocFeeFlowAddress(address)": "infinite",
        "setPauser(address)": "infinite",
        "setProtThrld(uint256)": "infinite",
        "setRedeemTCandTPFee(uint256)": "infinite",
        "setSuccessFee(uint256)": "infinite",
        "setSwapTCforTPFee(uint256)": "infinite",
        "setSwapTPforTCFee(uint256)": "infinite",
        "setSwapTPforTPFee(uint256)": "infinite",
        "setTcMintFee(uint256)": "infinite",
        "setTcRedeemFee(uint256)": "infinite",
        "shouldCalculateEma()": "2417",
        "stoppable()": "2378",
        "successFee()": "2386",
        "swapTCforTP(uint256,uint256,uint256,uint256)": "infinite",
        "swapTCforTPFee()": "2407",
        "swapTCforTPto(uint256,uint256,uint256,uint256,address)": "infinite",
        "swapTPforTC(uint256,uint256,uint256,uint256)": "infinite",
        "swapTPforTCFee()": "2473",
        "swapTPforTCto(uint256,uint256,uint256,uint256,address)": "infinite",
        "swapTPforTP(uint256,uint256,uint256,uint256,uint256)": "infinite",
        "swapTPforTPFee()": "2474",
        "swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)": "infinite",
        "tcMintFee()": "2449",
        "tcRedeemFee()": "2428",
        "tcToken()": "2426",
        "tpCtarg(uint256)": "4731",
        "tpEma(uint256)": "6831",
        "tpMintFee(uint256)": "4708",
        "tpRedeemFee(uint256)": "4709",
        "tpTokens(uint256)": "4728",
        "unpause()": "29839",
        "updateEmas()": "infinite",
        "upgradeTo(address)": "infinite",
        "upgradeToAndCall(address,bytes)": "infinite"
      },
      "internal": {
        "_onACNeededOperation(uint256,uint256)": "infinite",
        "acBalanceOf(address)": "infinite",
        "acTransfer(address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "db796072",
      "appreciationFactor()": "fa6e83bd",
      "bes()": "4d977e78",
      "bns()": "1867e2f5",
      "calcCtargemaCA()": "662013f4",
      "changeGovernor(address)": "e4c0aaf4",
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": "f26114aa",
      "emaCalculationBlockSpan()": "7a727fe8",
      "evalLiquidation()": "33421c38",
      "execSettlement()": "5c616a73",
      "feeRetainer()": "4f0f27ee",
      "getBts()": "e8859a15",
      "getCglb()": "826fcd58",
      "getLeverageTC()": "c039cc69",
      "getPACtp(uint256)": "904aa85b",
      "getPTCac()": "1fb0dda0",
      "getQACforRedeemTP(uint256,uint256)": "7820a328",
      "getTCAvailableToRedeem()": "4017936a",
      "getTPAvailableToMint(uint256)": "fa79589e",
      "getTotalACavailable()": "de8d520a",
      "governor()": "0c340a24",
      "initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))": "bbba7ed9",
      "isLiquidationReached()": "9ad6659d",
      "liqEnabled()": "e7c25978",
      "liqRedeemTP(uint256)": "9195c85b",
      "liqRedeemTPto(uint256,address)": "5d65d045",
      "liqThrld()": "8cfa4241",
      "liquidated()": "23b98cde",
      "makeStoppable()": "68274357",
      "makeUnstoppable()": "5210570c",
      "mintTC(uint256,uint256)": "0bb7f608",
      "mintTCandTP(uint256,uint256,uint256)": "f21fcc00",
      "mintTCandTPFee()": "79f9a91c",
      "mintTCandTPto(uint256,uint256,uint256,address)": "1a89b8f2",
      "mintTCto(uint256,uint256,address)": "4310adc6",
      "mintTP(uint256,uint256,uint256)": "181770da",
      "mintTPto(uint256,uint256,uint256,address)": "4cffbaab",
      "mocAppreciationBeneficiaryAddress()": "4e1f907a",
      "mocFeeFlowAddress()": "9853c35a",
      "nACcb()": "f30b5614",
      "nTCcb()": "7a193c31",
      "nextEmaCalculation()": "0c36d897",
      "pause()": "8456cb59",
      "paused()": "5c975abb",
      "pauser()": "9fd0506d",
      "pegContainer(uint256)": "4b746001",
      "peggedTokenIndex(address)": "9cabfc00",
      "protThrld()": "6b5488df",
      "proxiableUUID()": "52d1902d",
      "redeemTC(uint256,uint256)": "9abb14c9",
      "redeemTCandTP(uint256,uint256,uint256,uint256)": "17574bc5",
      "redeemTCandTPFee()": "f375cfba",
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": "9bdd7cce",
      "redeemTCto(uint256,uint256,address)": "e4012945",
      "redeemTP(uint256,uint256,uint256)": "17df0ab8",
      "redeemTPto(uint256,uint256,uint256,address)": "54a73c62",
      "refreshACBalance()": "e23c135c",
      "setAppreciationFactor(uint256)": "01dde6ef",
      "setBes(uint256)": "c84353c9",
      "setEmaCalculationBlockSpan(uint256)": "3bc4ac0a",
      "setFeeRetainer(uint256)": "7750ba0c",
      "setLiqEnabled(bool)": "1fe6a7ad",
      "setLiqThrld(uint256)": "2c43bd3b",
      "setMintTCandTPFee(uint256)": "2069f753",
      "setMocAppreciationBeneficiaryAddress(address)": "27eab2a1",
      "setMocFeeFlowAddress(address)": "0d6ac463",
      "setPauser(address)": "2d88af4a",
      "setProtThrld(uint256)": "7cba2383",
      "setRedeemTCandTPFee(uint256)": "7a4ff1d9",
      "setSuccessFee(uint256)": "becaca6b",
      "setSwapTCforTPFee(uint256)": "7af5758c",
      "setSwapTPforTCFee(uint256)": "0e0a8fd2",
      "setSwapTPforTPFee(uint256)": "70713468",
      "setTcMintFee(uint256)": "f2808778",
      "setTcRedeemFee(uint256)": "c00f538d",
      "shouldCalculateEma()": "a8e9ac30",
      "stoppable()": "bb4872de",
      "successFee()": "7554fffd",
      "swapTCforTP(uint256,uint256,uint256,uint256)": "bb2ac788",
      "swapTCforTPFee()": "2a20d57d",
      "swapTCforTPto(uint256,uint256,uint256,uint256,address)": "01cded9c",
      "swapTPforTC(uint256,uint256,uint256,uint256)": "1301a8f0",
      "swapTPforTCFee()": "333431fd",
      "swapTPforTCto(uint256,uint256,uint256,uint256,address)": "4454ae8b",
      "swapTPforTP(uint256,uint256,uint256,uint256,uint256)": "ceecc55a",
      "swapTPforTPFee()": "407f0e34",
      "swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)": "1f1138a6",
      "tcMintFee()": "fda70f8b",
      "tcRedeemFee()": "aea038dc",
      "tcToken()": "60009e0b",
      "tpCtarg(uint256)": "7d8e0314",
      "tpEma(uint256)": "e6b1627c",
      "tpMintFee(uint256)": "de08160f",
      "tpRedeemFee(uint256)": "5241271c",
      "tpTokens(uint256)": "01f1b684",
      "unpause()": "3f4ba83a",
      "updateEmas()": "d1a0faa0",
      "upgradeTo(address)": "3659cfe6",
      "upgradeToAndCall(address,bytes)": "4f1ef286"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQacSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPsent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPNeeded_\",\"type\":\"uint256\"}],\"name\":\"InsufficientQtpSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTCtoRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToMint_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpAvailableToRedeem_\",\"type\":\"uint256\"}],\"name\":\"InsufficientTPtoRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceProviderAddress_\",\"type\":\"address\"}],\"name\":\"InvalidPriceProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Liquidated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cglb_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"covThrld_\",\"type\":\"uint256\"}],\"name\":\"LowCoverage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedChanger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhenPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySettlement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhenLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyWhilePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeggedTokenAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACtoRedeem_\",\"type\":\"uint256\"}],\"name\":\"QacBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QacNeededMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"}],\"name\":\"QtcBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"QtpBelowMinimumRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unstoppable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MocCore.PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"PeggedTokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SettlementExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mocGain_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tpGain_\",\"type\":\"uint256[]\"}],\"name\":\"SuccessFeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TCMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TCRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TCSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TCandTPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TCandTPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TPMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qAC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TPRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPfrom_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qTPto_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qACfee_\",\"type\":\"uint256\"}],\"name\":\"TPSwappedForTP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTPema_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTPema_\",\"type\":\"uint256\"}],\"name\":\"TPemaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCore.PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"addPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appreciationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcCtargemaCA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ctargemaCA\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tpCtarg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpEmaSf\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCore.PeggedTokenParams\",\"name\":\"peggedTokenParams_\",\"type\":\"tuple\"}],\"name\":\"editPeggedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emaCalculationBlockSpan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evalLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRetainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCglb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cglob\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeverageTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageTC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"getPACtp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPTCac\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pTCac\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"}],\"name\":\"getQACforRedeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACfee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTCAvailableToRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tcAvailableToRedeem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"getTPAvailableToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tpAvailableToMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalACavailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalACavailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocFeeFlowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocAppreciationBeneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protThrld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqThrld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRetainer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tcRedeemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTPforTCFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTCforTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTCandTPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appreciationFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct MocBaseBucket.InitializeBaseBucketParams\",\"name\":\"initializeBaseBucketParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"governorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emaCalculationBlockSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bes\",\"type\":\"uint256\"}],\"internalType\":\"struct MocCore.InitializeCoreParams\",\"name\":\"initializeCoreParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"acTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct MocCARC20.InitializeParams\",\"name\":\"initializeParams_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidationReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"}],\"name\":\"liqRedeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"liqRedeemTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeStoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnstoppable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"mintTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"mintTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCtoMint\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"mintTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"mintTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACtotalNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocAppreciationBeneficiaryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocFeeFlowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nACcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTCcb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEmaCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pegContainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nTP\",\"type\":\"uint256\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"priceProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peggedTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protThrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTCandTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTCandTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTCandTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"}],\"name\":\"redeemTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmin_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"redeemTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACRedeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshACBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appreciationFactor_\",\"type\":\"uint256\"}],\"name\":\"setAppreciationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bes_\",\"type\":\"uint256\"}],\"name\":\"setBes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockSpan_\",\"type\":\"uint256\"}],\"name\":\"setEmaCalculationBlockSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRetainer_\",\"type\":\"uint256\"}],\"name\":\"setFeeRetainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"liqEnabled_\",\"type\":\"bool\"}],\"name\":\"setLiqEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqThrld_\",\"type\":\"uint256\"}],\"name\":\"setLiqThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setMintTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocAppreciationBeneficiaryAddress_\",\"type\":\"address\"}],\"name\":\"setMocAppreciationBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mocFeeFlowAddress_\",\"type\":\"address\"}],\"name\":\"setMocFeeFlowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser_\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protThrld_\",\"type\":\"uint256\"}],\"name\":\"setProtThrld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTCandTPFee_\",\"type\":\"uint256\"}],\"name\":\"setRedeemTCandTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"successFee_\",\"type\":\"uint256\"}],\"name\":\"setSuccessFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTCforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTCforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTCFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTCFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTPforTPFee_\",\"type\":\"uint256\"}],\"name\":\"setSwapTPforTPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcMintFee_\",\"type\":\"uint256\"}],\"name\":\"setTcMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tcRedeemFee_\",\"type\":\"uint256\"}],\"name\":\"setTcRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldCalculateEma\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stoppable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"swapTCforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTCforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTC_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTCforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"swapTPforTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTCFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTCmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTPforTCto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"}],\"name\":\"swapTPforTP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTPforTPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iTo_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTP_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPmin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qACmax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"swapTPforTPto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"qACFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qTPMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcToken\",\"outputs\":[{\"internalType\":\"contract MocTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpCtarg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpEma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tpTokens\",\"outputs\":[{\"internalType\":\"contract IMocRC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEmas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`tpTokenAddress Pegged Token contract address to add      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - tpTokenAddress must be a MocRC20, with mint, burn roles already settled  for this contract\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"calcCtargemaCA()\":{\"details\":\"qAC = nTP / pACtp      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\",\"returns\":{\"ctargemaCA\":\"[PREC]\"}},\"changeGovernor(address)\":{\"params\":{\"newGovernor_\":\"New governor address\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Note that the ema value, should consider `nextEmaCalculation`tpTokenAddress Pegged Token contract address to identify the token to edit      priceProviderAddress Pegged Token price provider contract address      tpCtarg Pegged Token target coverage [PREC]      tpMintFee additional fee pct applied on mint [PREC]      tpRedeemFee additional fee pct applied on redeem [PREC]      tpEma initial Pegged Token exponential moving average [PREC]      tpEmaSf Pegged Token smoothing factor [PREC]  Requirements: - the caller must have governance authorization. - the tpTokenAddress must exists\",\"params\":{\"peggedTokenParams_\":\"params of Pegged Token to add\"}},\"getCglb()\":{\"returns\":{\"cglob\":\"[PREC]\"}},\"getLeverageTC()\":{\"returns\":{\"leverageTC\":\"[PREC]\"}},\"getPACtp(uint256)\":{\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"_0\":\"price [PREC]\"}},\"getPTCac()\":{\"returns\":{\"pTCac\":\"[PREC]\"}},\"getQACforRedeemTP(uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qTP_\":\"amount of Pegged Token to redeem\"},\"returns\":{\"qACfee\":\"amount of Collateral Asset in concept of fees [N]\",\"qACtotalToRedeem\":\"amount of Collateral Asset needed to redeem, including fees [N]\"}},\"getTCAvailableToRedeem()\":{\"details\":\"because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TC available to redeem. Consider it an approximation.\",\"returns\":{\"tcAvailableToRedeem\":\"[N]\"}},\"getTPAvailableToMint(uint256)\":{\"details\":\"because it is a view function we are not calculating the new ema,  since we are using the last ema calculation, this may differ a little from the real amount  of TP available to mint. Consider it an approximation.\",\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"tpAvailableToMint\":\"[N]\"}},\"getTotalACavailable()\":{\"returns\":{\"totalACavailable\":\"[N]\"}},\"initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))\":{\"details\":\"governorAddress The address that will define when a change contract is authorized      pauserAddress The address that is authorized to pause this contract      acTokenAddress Collateral Asset Token contract address      tcTokenAddress Collateral Token contract address      mocFeeFlowAddress Moc Fee Flow contract address      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address      protThrld protected state threshold [PREC]      liqThrld liquidation coverage threshold [PREC]      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]      successFee pct of the gain because Pegged Tokens devaluation that is transferred        in Collateral Asset to Moc Fee Flow during the settlement [PREC]      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\",\"params\":{\"initializeParams_\":\"contract initializer params\"}},\"isLiquidationReached()\":{\"returns\":{\"_0\":\"true if liquidation state is reached, false otherwise\"}},\"liqRedeemTP(uint256)\":{\"params\":{\"i_\":\"Pegged Token index\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\"}},\"liqRedeemTPto(uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"recipient_\":\"address who receives the AC\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to `recipient_`\"}},\"makeStoppable()\":{\"details\":\"Should be called through governance\"},\"makeUnstoppable()\":{\"details\":\"Should be called through governance\"},\"mintTC(uint256,uint256)\":{\"params\":{\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTC_\":\"amount of Collateral Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\"}},\"mintTCandTP(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTP_\":\"amount of Pegged Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCandTPto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Collateral Token and Pegged Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint Collateral Token and Pegged Token\",\"qTCtoMint\":\"amount of Collateral Token minted\"}},\"mintTCto(uint256,uint256,address)\":{\"params\":{\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTC_\":\"amount of Collateral Token to mint\",\"recipient_\":\"address who receives the Collateral Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTC\"}},\"mintTP(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index to mint\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTP_\":\"amount of Pegged Token to mint\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\"}},\"mintTPto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index to mint\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent\",\"qTP_\":\"amount of Pegged Token to mint\",\"recipient_\":\"address who receives the Pegged Token\"},\"returns\":{\"qACtotalNeeded\":\"amount of AC used to mint qTP\"}},\"pause()\":{\"details\":\"Should only be called by the pauser and when it is stoppable\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemTC(uint256,uint256)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\"}},\"redeemTCandTP(uint256,uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that the sender expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the sender\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCandTPto(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"maximum amount of Collateral Token to redeem\",\"qTP_\":\"maximum amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to the `recipient_`\",\"qTPRedeemed\":\"amount of Pegged Token redeemed\"}},\"redeemTCto(uint256,uint256,address)\":{\"params\":{\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTC_\":\"amount of Collateral Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\"}},\"redeemTP(uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that sender expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to sender\"}},\"redeemTPto(uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index to redeem\",\"qACmin_\":\"minimum amount of Collateral Asset that `recipient_` expects to receive\",\"qTP_\":\"amount of Pegged Token to redeem\",\"recipient_\":\"address who receives the Collateral Asset\"},\"returns\":{\"qACRedeemed\":\"amount of AC sent to 'recipient_'\"}},\"refreshACBalance()\":{\"details\":\"Intended to be use as notification after an RC20 AC transfer to this contract\"},\"setAppreciationFactor(uint256)\":{\"details\":\"sets appreciation Factor value.\",\"params\":{\"appreciationFactor_\":\"pct of the gain because Pegged Tokens devaluation that is returned in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\"}},\"setBes(uint256)\":{\"params\":{\"bes_\":\"number of blocks between settlements*\"}},\"setEmaCalculationBlockSpan(uint256)\":{\"params\":{\"blockSpan_\":\"Defines how many blocks should pass between BMA calculations*\"}},\"setFeeRetainer(uint256)\":{\"details\":\"sets the fee pct to be retainer on AC fees payments as AC re-injection.\",\"params\":{\"feeRetainer_\":\"pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setLiqEnabled(bool)\":{\"details\":\"enables and disables the liquidation mechanism.\",\"params\":{\"liqEnabled_\":\"is liquidation enabled\"}},\"setLiqThrld(uint256)\":{\"details\":\"sets the value of the liq threshold configuration param\",\"params\":{\"liqThrld_\":\"liquidation threshold\"}},\"setMintTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when mint Collateral Token and Pegged Token in one operation.\",\"params\":{\"mintTCandTPFee_\":\"additional fee pct applied on mint Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setMocAppreciationBeneficiaryAddress(address)\":{\"details\":\"sets Moc Appreciation Beneficiary Address\",\"params\":{\"mocAppreciationBeneficiaryAddress_\":\"moc Appreciation Beneficiary new address\"}},\"setMocFeeFlowAddress(address)\":{\"details\":\"sets Moc Fee Flow contract address\",\"params\":{\"mocFeeFlowAddress_\":\"moc Fee Flow new contract address\"}},\"setPauser(address)\":{\"details\":\"Should be called through governance\",\"params\":{\"newPauser_\":\"Address of the new pauser\"}},\"setProtThrld(uint256)\":{\"details\":\"sets the value of the protected threshold configuration param\",\"params\":{\"protThrld_\":\"coverage protected state threshold [PREC]\"}},\"setRedeemTCandTPFee(uint256)\":{\"details\":\"sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\",\"params\":{\"redeemTCandTPFee_\":\"additional fee pct applied on redeem Collateral Token and Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSuccessFee(uint256)\":{\"details\":\"sets success Fee value.\",\"params\":{\"successFee_\":\"pct of the gain because Pegged Tokens devaluation that is transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\"}},\"setSwapTCforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap Collateral Token for a Pegged Token.\",\"params\":{\"swapTCforTPFee_\":\"additional fee pct applied on swap Collateral Token for a Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTCFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for Collateral Token.\",\"params\":{\"swapTPforTCFee_\":\"additional fee pct applied on swap a Pegged Token for Collateral Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setSwapTPforTPFee(uint256)\":{\"details\":\"sets the fee charged when swap a Pegged Token for another Pegged Token.\",\"params\":{\"swapTPforTPFee_\":\"additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTcMintFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral mint.\",\"params\":{\"tcMintFee_\":\"addition fee pct applied on Collateral Tokens mint [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"setTcRedeemFee(uint256)\":{\"details\":\"sets the fee charged on Token Collateral redeem.\",\"params\":{\"tcRedeemFee_\":\"addition fee pct applied on Collateral Tokens redeem [PREC] 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\"}},\"swapTCforTP(uint256,uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTC_\":\"amount of Collateral Token to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that the sender expects to receive\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTCforTPto(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTC_\":\"amount of Collateral Token to swap\",\"qTPmin_\":\"minimum amount of Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the Pegged Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTC(uint256,uint256,uint256,uint256)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTCmin_\":\"minimum amount of Collateral Token that the sender expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTCto(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i_\":\"Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTCmin_\":\"minimum amount of Collateral Token that `recipient_` expects to receive\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"recipient_\":\"address who receives the Collateral Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Collateral Token minted\"}},\"swapTPforTP(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that the sender expects to receive\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"iFrom_\":\"owned Pegged Token index\",\"iTo_\":\"target Pegged Token index\",\"qACmax_\":\"maximum amount of Collateral Asset that can be spent in fees\",\"qTP_\":\"amount of owned Pegged Token to swap\",\"qTPmin_\":\"minimum amount of target Pegged Token that `recipient_` expects to receive\",\"recipient_\":\"address who receives the target Pegged Token\"},\"returns\":{\"qACFee\":\"amount of AC used to pay fee\",\"qTPMinted\":\"amount of Pegged Token minted\"}},\"updateEmas()\":{\"details\":\"All price provider prices must be available, fails if not\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"MocCARC20: Moc Collateral Asset RC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"add a Pegged Token to the protocol\"},\"calcCtargemaCA()\":{\"notice\":\"calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\"},\"changeGovernor(address)\":{\"notice\":\"Change the contract's governor. Should be called through the old governance system\"},\"editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"modifies a Pegged Token of the protocol\"},\"evalLiquidation()\":{\"notice\":\"evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event.\"},\"getBts()\":{\"notice\":\"get the number of blocks remaining for settlement\"},\"getCglb()\":{\"notice\":\"get bucket global coverage\"},\"getLeverageTC()\":{\"notice\":\"get Collateral Token leverage\"},\"getPACtp(uint256)\":{\"notice\":\"get how many Pegged Token equal 1 Collateral Asset\"},\"getPTCac()\":{\"notice\":\"get Collateral Token price\"},\"getQACforRedeemTP(uint256,uint256)\":{\"notice\":\"returns how many Collateral Asset are needed to redeem `qTP_` amount of Pegged Token `i_`\"},\"getTCAvailableToRedeem()\":{\"notice\":\"get amount of Collateral Token available to redeem\"},\"getTPAvailableToMint(uint256)\":{\"notice\":\"get amount of Pegged Token available to mint\"},\"getTotalACavailable()\":{\"notice\":\"get total Collateral Asset available\"},\"governor()\":{\"notice\":\"The address of the contract which governs this one\"},\"initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))\":{\"notice\":\"contract initializer\"},\"isLiquidationReached()\":{\"notice\":\"If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation\"},\"liqRedeemTP(uint256)\":{\"notice\":\"Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price.\"},\"liqRedeemTPto(uint256,address)\":{\"notice\":\"Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price.\"},\"makeStoppable()\":{\"notice\":\"Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function\"},\"makeUnstoppable()\":{\"notice\":\"Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so\"},\"mintTC(uint256,uint256)\":{\"notice\":\"caller sends Collateral Asset and receives Collateral Token Requires prior sender approval of Collateral Asset to this contract \"},\"mintTCandTP(uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Asset and receives Collateral Token and Pegged Token  Requires prior sender approval of Collateral Asset to this contract  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCandTPto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Asset and recipient receives Collateral Token and Pegged Token  Requires prior sender approval of Collateral Asset to this contract  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient.\"},\"mintTCto(uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Asset and recipient receives Collateral Token Requires prior sender approval of Collateral Asset to this contract \"},\"mintTP(uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Asset and receives Pegged Token Requires prior sender approval of Collateral Asset to this contract \"},\"mintTPto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Asset and recipient receives Pegged Token Requires prior sender approval of Collateral Asset to this contract \"},\"pause()\":{\"notice\":\"Called by the owner to pause, triggers stopped state\"},\"paused()\":{\"notice\":\"Returns true if paused\"},\"redeemTC(uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and receives Collateral Asset\"},\"redeemTCandTP(uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCandTPto(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient.\"},\"redeemTCto(uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Collateral Asset\"},\"redeemTP(uint256,uint256,uint256)\":{\"notice\":\"caller sends Pegged Token and receives Collateral Asset\"},\"redeemTPto(uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Pegged Token and recipient receives Collateral Asset\"},\"refreshACBalance()\":{\"notice\":\"Refreshes the AC holdings for the Bucket\"},\"setPauser(address)\":{\"notice\":\"Changes the address which is enable to pause this contract\"},\"shouldCalculateEma()\":{\"notice\":\"true if the necessary span has pass since last ema update\"},\"swapTCforTP(uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends Collateral Token and receives Pegged Token\"},\"swapTCforTPto(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends Collateral Token and recipient receives Pegged Token\"},\"swapTPforTC(uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends a Pegged Token and receives Collateral Token\"},\"swapTPforTCto(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives Collateral Token\"},\"swapTPforTP(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"caller sends a Pegged Token and receives another one\"},\"swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"caller sends a Pegged Token and recipient receives another one\"},\"unpause()\":{\"notice\":\"Called by the owner to unpause, returns to normal state\"},\"updateEmas()\":{\"notice\":\"If time, calculates the EMA for all the Pegged Token prices.\"}},\"notice\":\"Moc protocol implementation using a RC20 as Collateral Asset.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collateral/rc20/MocCARC20.sol\":\"MocCARC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5bba367c6c5b9bc3ffb2a87f6aa7437955f0697ab8fcd8e38d2a4985be6469fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/collateral/rc20/MocCARC20.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../../core/MocCore.sol\\\";\\n\\n/**\\n * @title MocCARC20: Moc Collateral Asset RC20\\n * @notice Moc protocol implementation using a RC20 as Collateral Asset.\\n */\\ncontract MocCARC20 is MocCore {\\n    // ------- Structs -------\\n    struct InitializeParams {\\n        InitializeCoreParams initializeCoreParams;\\n        // Collateral Asset Token contract address\\n        address acTokenAddress;\\n    }\\n\\n    // ------- Storage -------\\n    // Collateral Asset token\\n    IERC20 private acToken;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeParams_ contract initializer params\\n     * @dev governorAddress The address that will define when a change contract is authorized\\n     *      pauserAddress The address that is authorized to pause this contract\\n     *      acTokenAddress Collateral Asset Token contract address\\n     *      tcTokenAddress Collateral Token contract address\\n     *      mocFeeFlowAddress Moc Fee Flow contract address\\n     *      mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *      protThrld protected state threshold [PREC]\\n     *      liqThrld liquidation coverage threshold [PREC]\\n     *      feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *      tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *      tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *      successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *        in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *      appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *        in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     *      emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     */\\n    function initialize(InitializeParams calldata initializeParams_) external initializer {\\n        acToken = IERC20(initializeParams_.acTokenAddress);\\n        __MocCore_init(initializeParams_.initializeCoreParams);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @inheritdoc MocCore\\n     * @dev this function could revert during safeTransfer call.\\n     *  safeTransfer will revert if token transfer reverts or returns 0\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal override {\\n        if (amount_ > 0) {\\n            SafeERC20.safeTransfer(acToken, to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc MocCore\\n     */\\n    function acBalanceOf(address account) internal view override returns (uint256 balance) {\\n        return acToken.balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice hook before any AC reception involving operation, as dealing with an RC20 Token\\n     * we need to transfer the AC amount from the user, to the contract\\n     * param qACMax_ max amount of AC available\\n     * @param qACNeeded_ amount of AC needed\\n     * @return change amount needed to be return to the sender after the operation is complete\\n     */\\n    function _onACNeededOperation(uint256 /*qACMax_*/, uint256 qACNeeded_) internal override returns (uint256 change) {\\n        SafeERC20.safeTransferFrom(acToken, msg.sender, address(this), qACNeeded_);\\n        // As we are transferring the exact needed amount, change is zero\\n        change = 0;\\n    }\\n\\n    // ------- External Functions -------\\n\\n    /**\\n     * @notice caller sends Collateral Asset and receives Collateral Token\\n        Requires prior sender approval of Collateral Asset to this contract \\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     */\\n    function mintTC(uint256 qTC_, uint256 qACmax_) external returns (uint256 qACtotalNeeded) {\\n        return _mintTCto(qTC_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token\\n        Requires prior sender approval of Collateral Asset to this contract \\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     */\\n    function mintTCto(uint256 qTC_, uint256 qACmax_, address recipient_) external returns (uint256 qACtotalNeeded) {\\n        return _mintTCto(qTC_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and receives Pegged Token\\n        Requires prior sender approval of Collateral Asset to this contract \\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     */\\n    function mintTP(uint256 i_, uint256 qTP_, uint256 qACmax_) external returns (uint256 qACtotalNeeded) {\\n        return _mintTPto(i_, qTP_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Pegged Token\\n        Requires prior sender approval of Collateral Asset to this contract \\n     * @param i_ Pegged Token index to mint\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     */\\n    function mintTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_\\n    ) external returns (uint256 qACtotalNeeded) {\\n        return _mintTPto(i_, qTP_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and receives Collateral Token and Pegged Token\\n     *  Requires prior sender approval of Collateral Asset to this contract\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     */\\n    function mintTCandTP(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmax_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint) {\\n        return _mintTCandTPto(i_, qTP_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Asset and recipient receives Collateral Token and Pegged Token\\n     *  Requires prior sender approval of Collateral Asset to this contract\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     */\\n    function mintTCandTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address recipient_\\n    ) external payable returns (uint256 qACtotalNeeded, uint256 qTCtoMint) {\\n        return _mintTCandTPto(i_, qTP_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives another one\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that the sender expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     */\\n    function swapTPforTP(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTPforTPto(iFrom_, iTo_, qTP_, qTPmin_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives another one\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     */\\n    function swapTPforTPto(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTPforTPto(iFrom_, iTo_, qTP_, qTPmin_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and receives Collateral Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that the sender expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Collateral Token minted\\n     */\\n    function swapTPforTC(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        uint256 qACmax_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTPforTCto(i_, qTP_, qTCmin_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends a Pegged Token and recipient receives Collateral Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the Collateral Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Collateral Token minted\\n     */\\n    function swapTPforTCto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        uint256 qACmax_,\\n        address recipient_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTPforTCto(i_, qTP_, qTCmin_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that the sender expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     */\\n    function swapTCforTP(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTCforTPto(i_, qTC_, qTPmin_, qACmax_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to swap\\n     * @param qTPmin_ minimum amount of Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACFee amount of AC used to pay fee\\n     * @return qTPMinted amount of Pegged Token minted\\n     */\\n    function swapTCforTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address recipient_\\n    ) external returns (uint256 qACFee, uint256 qTPMinted) {\\n        return _swapTCforTPto(i_, qTC_, qTPmin_, qACmax_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice Refreshes the AC holdings for the Bucket\\n     * @dev Intended to be use as notification after an RC20 AC transfer to this contract\\n     */\\n    function refreshACBalance() external {\\n        // On this implementation, AC token balance has full correlation with nACcb\\n        if (acBalanceOf(address(this)) - nACcb > 0) _depositAC(acBalanceOf(address(this)) - nACcb);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x97aec5c7009cef852a3db45ae8b1369b8f66c44f4da0a2b48c48d8adef670860\"},\"contracts/core/MocBaseBucket.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IMocRC20.sol\\\";\\nimport \\\"../tokens/MocTC.sol\\\";\\nimport \\\"../interfaces/IPriceProvider.sol\\\";\\nimport \\\"../governance/MocUpgradable.sol\\\";\\n\\n/**\\n * @title MocBaseBucket: Moc Collateral Bag\\n * @notice MocBaseBucket holds Bucket Zero state, both for the Collateral Bag and PeggedTokens Items.\\n * @dev Abstracts all rw operations on the main bucket and expose all calculations relative to its state.\\n */\\nabstract contract MocBaseBucket is MocUpgradable {\\n    // ------- Events -------\\n    event ContractLiquidated();\\n\\n    // ------- Custom Errors -------\\n    error InvalidPriceProvider(address priceProviderAddress_);\\n    error TransferFailed();\\n    error Liquidated();\\n    error OnlyWhenLiquidated();\\n    error LowCoverage(uint256 cglb_, uint256 covThrld_);\\n    error OnlySettlement();\\n\\n    // ------- Structs -------\\n    struct PegContainerItem {\\n        // total supply of Pegged Token\\n        uint256 nTP;\\n        // PegToken PriceFeed address\\n        IPriceProvider priceProvider;\\n    }\\n\\n    struct PeggedTokenIndex {\\n        // Pegged Token index\\n        uint256 index;\\n        // true if Pegged Token exists\\n        bool exists;\\n    }\\n\\n    struct InitializeBaseBucketParams {\\n        // Collateral Token contract address\\n        address tcTokenAddress;\\n        // Moc Fee Flow contract address\\n        address mocFeeFlowAddress;\\n        // moc appreciation beneficiary Address\\n        address mocAppreciationBeneficiaryAddress;\\n        // protected state threshold [PREC]\\n        uint256 protThrld;\\n        // liquidation coverage threshold [PREC]\\n        uint256 liqThrld;\\n        // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n        uint256 feeRetainer;\\n        // additional fee pct applied on mint Collateral Tokens operations [PREC]\\n        uint256 tcMintFee;\\n        // additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n        uint256 tcRedeemFee;\\n        // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n        uint256 swapTPforTPFee;\\n        // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n        uint256 swapTPforTCFee;\\n        // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n        uint256 swapTCforTPFee;\\n        // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n        uint256 redeemTCandTPFee;\\n        // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n        uint256 mintTCandTPFee;\\n        // pct of the gain because Pegged Tokens devaluation that is transferred\\n        // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n        uint256 successFee;\\n        // pct of the gain because Pegged Tokens devaluation that is returned\\n        // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n        uint256 appreciationFactor;\\n    }\\n\\n    // ------- Storage -------\\n\\n    // total amount of Collateral Asset held in the Collateral Bag\\n    // WARN: On RC20 implementation, this correlates with contract acBalance\\n    uint256 public nACcb;\\n    // amount of Collateral Asset that the Vaults owe to the Collateral Bag\\n    uint256 internal nACioucb;\\n\\n    // Collateral Token\\n    MocTC public tcToken;\\n    // Collateral Token in the Collateral Bag\\n    uint256 public nTCcb;\\n\\n    // Pegged Tokens MocRC20 addresses\\n    IMocRC20[] public tpTokens;\\n    // Pegged Token indexes\\n    mapping(address => PeggedTokenIndex) public peggedTokenIndex;\\n    // peg container\\n    PegContainerItem[] public pegContainer;\\n    // Pegged Token prices, at which they can be redeemed after liquidation event\\n    uint256[] internal tpLiqPrices;\\n    // pct of the gain because Pegged Tokens devaluation that is transferred\\n    // in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n    uint256 public successFee;\\n    // pct of the gain because Pegged Tokens devaluation that is returned\\n    // in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n    uint256 public appreciationFactor;\\n\\n    // ------- Storage Fees -------\\n\\n    // pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n    uint256 public feeRetainer; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Collateral Tokens mint [PREC]\\n    uint256 public tcMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Collateral Tokens redeem [PREC]\\n    uint256 public tcRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n    uint256 public swapTPforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n    uint256 public swapTPforTCFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n    uint256 public swapTCforTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on redeem Collateral Token and Pegged Token in one operations [PREC]\\n    uint256 public redeemTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // additional fee pct applied on mint Collateral Token and Pegged Token in one operation [PREC]\\n    uint256 public mintTCandTPFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // addition fee pct applied on Pegged Tokens mint [PREC]\\n    uint256[] public tpMintFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n    // addition fee pct applied on Pegged Tokens redeem [PREC]\\n    uint256[] public tpRedeemFee; // 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n\\n    // Moc Fee Flow contract address\\n    address public mocFeeFlowAddress;\\n    // Moc appreciation beneficiary address\\n    address public mocAppreciationBeneficiaryAddress;\\n\\n    // ------- Storage Coverage Tracking -------\\n\\n    // Target coverage for each Pegged Token [PREC]\\n    uint256[] public tpCtarg;\\n    // Coverage protected state threshold [PREC]\\n    uint256 public protThrld;\\n    // Coverage liquidation threshold [PREC]\\n    uint256 public liqThrld;\\n    // Liquidation enabled\\n    bool public liqEnabled;\\n    // Irreversible state, peg lost, contract is terminated and all funds can be withdrawn\\n    bool public liquidated;\\n\\n    // ------- Storage Success Fee Tracking -------\\n\\n    // profit and loss in collateral asset for each Pegged Token because its devaluation [N]\\n    // if it is positive it is a profit that will be distributed and reset during settlement\\n    int256[] internal tpiou;\\n    // Pegged Token price used at last operation(redeem or mint) [PREC]\\n    uint256[] internal pACtpLstop;\\n\\n    // ------- Modifiers -------\\n    /// @notice functions with this modifier reverts being in liquidated state\\n    modifier notLiquidated() {\\n        _checkLiquidated();\\n        _;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param initializeBaseBucketParams_ contract initializer params\\n     * @dev   tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected coverage threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        swapTPforTPFee additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     *        swapTPforTCFee additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     *        swapTCforTPFee additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     *        redeemTCandTPFee additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     *        mintTCandTPFee additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     */\\n    function __MocBaseBucket_init_unchained(\\n        InitializeBaseBucketParams calldata initializeBaseBucketParams_\\n    ) internal onlyInitializing {\\n        if (initializeBaseBucketParams_.protThrld < ONE) revert InvalidValue();\\n        _checkLessThanOne(initializeBaseBucketParams_.feeRetainer);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcMintFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.tcRedeemFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTPforTCFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.swapTCforTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.redeemTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.mintTCandTPFee);\\n        _checkLessThanOne(initializeBaseBucketParams_.successFee + initializeBaseBucketParams_.appreciationFactor);\\n        tcToken = MocTC(initializeBaseBucketParams_.tcTokenAddress);\\n        // Verifies it has the right roles over this TC\\n        if (!tcToken.hasFullRoles(address(this))) revert InvalidAddress();\\n        mocFeeFlowAddress = initializeBaseBucketParams_.mocFeeFlowAddress;\\n        mocAppreciationBeneficiaryAddress = initializeBaseBucketParams_.mocAppreciationBeneficiaryAddress;\\n        protThrld = initializeBaseBucketParams_.protThrld;\\n        liqThrld = initializeBaseBucketParams_.liqThrld;\\n        feeRetainer = initializeBaseBucketParams_.feeRetainer;\\n        tcMintFee = initializeBaseBucketParams_.tcMintFee;\\n        tcRedeemFee = initializeBaseBucketParams_.tcRedeemFee;\\n        swapTPforTPFee = initializeBaseBucketParams_.swapTPforTPFee;\\n        swapTPforTCFee = initializeBaseBucketParams_.swapTPforTCFee;\\n        swapTCforTPFee = initializeBaseBucketParams_.swapTCforTPFee;\\n        redeemTCandTPFee = initializeBaseBucketParams_.redeemTCandTPFee;\\n        mintTCandTPFee = initializeBaseBucketParams_.mintTCandTPFee;\\n        successFee = initializeBaseBucketParams_.successFee;\\n        appreciationFactor = initializeBaseBucketParams_.appreciationFactor;\\n        liquidated = false;\\n        liqEnabled = false;\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * reverts if in liquidated state\\n     */\\n    function _checkLiquidated() internal view {\\n        if (liquidated) revert Liquidated();\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Asset to the Bucket\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositAC(uint256 qAC_) internal {\\n        nACcb += qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb += qTC_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTC(uint256 qTC_, uint256 qAC_) internal {\\n        nTCcb -= qTC_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     */\\n    function _depositTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP += qTP_;\\n        _depositAC(qAC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Pegged Token and Collateral Asset from the Bucket\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     */\\n    function _withdrawTP(uint256 i_, uint256 qTP_, uint256 qAC_) internal {\\n        pegContainer[i_].nTP -= qTP_;\\n        nACcb -= qAC_;\\n    }\\n\\n    /**\\n     * @notice Adds Pegged Token and Collateral Asset to the Bucket and mints `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTP(uint256 i_, uint256 qTP_, uint256 qAC_, address recipient_) internal {\\n        // add qTP and qAC to the Bucket\\n        _depositTP(i_, qTP_, qAC_);\\n        // mint qTP to the recipient\\n        tpTokens[i_].mint(recipient_, qTP_);\\n    }\\n\\n    /**\\n     * @notice subtracts Pegged Token and Collateral Asset from the Bucket and burns `qTP_` for Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     * @param toBurnFrom_ the account to burn tokens from\\n     */\\n    function _withdrawAndBurnTP(uint256 i_, uint256 qTP_, uint256 qAC_, address toBurnFrom_) internal {\\n        // sub qTP and qAC from the Bucket\\n        _withdrawTP(i_, qTP_, qAC_);\\n        // burn qTP from this address\\n        tpTokens[i_].burn(toBurnFrom_, qTP_);\\n    }\\n\\n    /**\\n     * @notice Adds Collateral Token and Collateral Asset to the Bucket and mints qTCtoMint\\n     * @param qTC_ amount of Collateral Token to add\\n     * @param qAC_ amount of Collateral Asset to add\\n     * @param recipient_ the account to mint tokens to\\n     */\\n    function _depositAndMintTC(uint256 qTC_, uint256 qAC_, address recipient_) internal {\\n        // add qTC to the Bucket\\n        _depositTC(qTC_, qAC_);\\n        // mint qTC to the recipient\\n        tcToken.mint(recipient_, qTC_);\\n    }\\n\\n    /**\\n     * @notice Subtracts Collateral Token and Collateral Asset from the Bucket and burns `qTC_`\\n     * @param qTC_ amount of Collateral Token to subtract\\n     * @param qAC_ amount of Collateral Asset to subtract\\n     * @param toBurnFrom_ the account to burn tokens from\\n     */\\n    function _withdrawAndBurnTC(uint256 qTC_, uint256 qAC_, address toBurnFrom_) internal {\\n        // sub qTC and qAC from the Bucket\\n        _withdrawTC(qTC_, qAC_);\\n        // burn qTC from this address\\n        tcToken.burn(toBurnFrom_, qTC_);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset available considering how many are locked by Pegged Token adjusted by EMA\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return lckACemaAdjusted [PREC]\\n     */\\n    function _getLckACemaAdjusted(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 lckACemaAdjusted) {\\n        // if coverage <= ctargemaCA, we force that there be 0 AC available due to possible rounding errors\\n        if (_getCglb(lckAC_, nACgain_) <= ctargemaCA_) return 0;\\n        // [PREC] = [N] * [PREC] - [PREC] * [N]\\n        return _getTotalACavailable(nACgain_) * PRECISION - ctargemaCA_ * lckAC_;\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function _getTCAvailableToRedeem(\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 tcAvailableToRedeem) {\\n        // [PREC]\\n        uint256 lckACemaAdjusted = _getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_);\\n        // [N] = [PREC] / [PREC]\\n        return lckACemaAdjusted / _getPTCac(lckAC_, nACgain_);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset\\n     * @param ctargemaTP_ target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param pACtp_ Collateral Asset price in amount of Pegged Token [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return tpAvailableToMint [N]\\n     */\\n    function _getTPAvailableToMint(\\n        uint256 ctargemaCA_,\\n        uint256 ctargemaTP_,\\n        uint256 pACtp_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 tpAvailableToMint) {\\n        // [N] = ([PREC] * [PREC] / [PREC]) / [PREC]\\n        return ((_getLckACemaAdjusted(ctargemaCA_, lckAC_, nACgain_) * pACtp_) / (ctargemaTP_ - ONE)) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice evaluates whether or not the coverage is over the cThrld_, reverts if below\\n     * @param cThrld_ coverage threshold to check for [PREC]\\n     * @return lckAC amount of Collateral Asset locked by Pegged Tokens [PREC]\\n     * @return nACgain amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalCoverage(uint256 cThrld_) internal view returns (uint256 lckAC, uint256 nACgain) {\\n        (lckAC, nACgain) = _getLckACandACgain();\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        // check if coverage is above the given threshold\\n        if (cglb <= cThrld_) revert LowCoverage(cglb, cThrld_);\\n    }\\n\\n    /**\\n     * @dev Calculates price at liquidation event as a relation between Pegs total supply\\n     * and the amount of Asset Collateral available to distribute\\n     */\\n    function settleLiquidationPrices() internal {\\n        // Total amount of AC available to be redeemed\\n        uint256 totalACAvailable = nACcb + nACioucb;\\n        if (totalACAvailable == 0) return;\\n        uint256 pegAmount = pegContainer.length;\\n        // this could be get by getLckAC(), but given the prices are needed after,\\n        // it's better to cache them here.\\n        uint256 lckAC;\\n        // Auxiliary cache of pegs pACtp\\n        uint256[] memory pACtps = new uint256[](pegAmount);\\n        // for each peg, calculates the proportion of AC reserves it's locked\\n\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            pACtps[i] = getPACtp(i);\\n            // [N] = [N] * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP, pACtps[i]);\\n        }\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            // [PREC] = [PREC] * [N] / [N];\\n            tpLiqPrices.push((pACtps[i] * lckAC) / totalACAvailable);\\n        }\\n    }\\n\\n    /**\\n     * @notice updates Pegged Token P&L and last operation price\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     */\\n    function _updateTPtracking(uint256 i_, uint256 pACtp_) internal {\\n        tpiou[i_] += _calcOtfPnLTP(i_, pACtp_);\\n        pACtpLstop[i_] = pACtp_;\\n    }\\n\\n    /**\\n     * @notice calculates on the fly Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return otfPnLtp [N]\\n     */\\n    function _calcOtfPnLTP(uint256 i_, uint256 pACtp_) internal view returns (int256 otfPnLtp) {\\n        // [PREC] = [N] * [PREC]\\n        uint256 nTP = pegContainer[i_].nTP * PRECISION;\\n        // [N] = [PREC] / [PREC] - [PREC] / [PREC]\\n        return int256(nTP / pACtpLstop[i_]) - int256(nTP / pACtp_);\\n    }\\n\\n    /**\\n     * @notice gets accumulated Pegged Token P&L\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return tpGain amount of Pegged Token to be minted during settlement [N]\\n     * @return adjPnLtpi total amount of P&L in Collateral Asset [N]\\n     */\\n    function _getPnLTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 tpGain, uint256 adjPnLtpi) {\\n        // [N] = [N] + [N]\\n        int256 adjPnLtpiAux = tpiou[i_] + _calcOtfPnLTP(i_, pACtp_);\\n        if (adjPnLtpiAux > 0) {\\n            adjPnLtpi = uint256(adjPnLtpiAux);\\n            // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n            tpGain = _mulPrec(_mulPrec(appreciationFactor, pACtp_), adjPnLtpi);\\n        }\\n        return (tpGain, adjPnLtpi);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Asset locked by Pegged Token and\\n     *  amount of collateral asset to be distributed during settlement\\n     * @return lckAC [N]\\n     * @return nACgain [N]\\n     */\\n    function _getLckACandACgain() internal view returns (uint256 lckAC, uint256 nACgain) {\\n        uint256 pegAmount = pegContainer.length;\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = getPACtp(i);\\n            (uint256 tpGain, uint256 adjPnLtpi) = _getPnLTP(i, pACtp);\\n            // [N] = ([N] + [N]) * [PREC] / [PREC]\\n            lckAC += _divPrec(pegContainer[i].nTP + tpGain, pACtp);\\n            nACgain += adjPnLtpi;\\n        }\\n        // [N] = [N] * [PREC] / [PREC]\\n        nACgain = _mulPrec(nACgain, successFee);\\n        return (lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return totalACavailable [N]\\n     */\\n    function _getTotalACavailable(uint256 nACgain_) internal view returns (uint256 totalACavailable) {\\n        // [N] = [N] + [N] - [N]\\n        return nACcb + nACioucb - nACgain_;\\n    }\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return pTCac [PREC]\\n     */\\n    function _getPTCac(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 pTCac) {\\n        if (nTCcb == 0) return ONE;\\n        // [PREC] = ([N] - [N]) * [PREC]) / [N]\\n        return _divPrec((_getTotalACavailable(nACgain_) - lckAC_), nTCcb);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return leverageTC [PREC]\\n     */\\n    function _getLeverageTC(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 leverageTC) {\\n        uint256 totalACavailable = _getTotalACavailable(nACgain_);\\n        // [PREC] = [N] * [PREC] / ([N] - [N])\\n        return _divPrec(totalACavailable, totalACavailable - lckAC_);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [N]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return cglob [PREC]\\n     */\\n    function _getCglb(uint256 lckAC_, uint256 nACgain_) internal view returns (uint256 cglob) {\\n        if (lckAC_ == 0) return UINT256_MAX;\\n        // [PREC] = [N] * [PREC] / [N]\\n        return _divPrec(_getTotalACavailable(nACgain_), lckAC_);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice If liquidation is enabled, verifies if forced liquidation has been\\n     * reached, checking if globalCoverage <= liquidation\\n     * @return true if liquidation state is reached, false otherwise\\n     */\\n    function isLiquidationReached() public view returns (bool) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        uint256 cglb = _getCglb(lckAC, nACgain);\\n        return cglb <= liqThrld;\\n    }\\n\\n    /**\\n     * @notice evaluates if liquidation threshold has been reached and liq is Enabled.\\n     * If so forces contracts liquidation, blocking all mint & redeem operations.\\n     *\\n     * May emit a {ContractLiquidated} event.\\n     */\\n    function evalLiquidation() external notPaused {\\n        if (liqEnabled && !liquidated && isLiquidationReached()) {\\n            liquidated = true;\\n            emit ContractLiquidated();\\n            tcToken.pause();\\n            // Freeze current Peg Price given the AC available\\n            settleLiquidationPrices();\\n        }\\n    }\\n\\n    /**\\n     * @notice get how many Pegged Token equal 1 Collateral Asset\\n     * @param i_ Pegged Token index\\n     * @return price [PREC]\\n     */\\n    function getPACtp(uint256 i_) public view virtual returns (uint256) {\\n        IPriceProvider priceProvider = pegContainer[i_].priceProvider;\\n        (bytes32 price, bool has) = priceProvider.peek();\\n        if (!has) revert InvalidPriceProvider(address(priceProvider));\\n        return uint256(price);\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @dev sets the fee pct to be retainer on AC fees payments as AC re-injection.\\n     * @param feeRetainer_  pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setFeeRetainer(uint256 feeRetainer_) external onlyAuthorizedChanger {\\n        feeRetainer = feeRetainer_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral mint.\\n     * @param tcMintFee_ addition fee pct applied on Collateral Tokens mint [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcMintFee(uint256 tcMintFee_) external onlyAuthorizedChanger {\\n        tcMintFee = tcMintFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged on Token Collateral redeem.\\n     * @param tcRedeemFee_ addition fee pct applied on Collateral Tokens redeem [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setTcRedeemFee(uint256 tcRedeemFee_) external onlyAuthorizedChanger {\\n        tcRedeemFee = tcRedeemFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for another Pegged Token.\\n     * @param swapTPforTPFee_ additional fee pct applied on swap a Pegged Token for another Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTPFee(uint256 swapTPforTPFee_) external onlyAuthorizedChanger {\\n        swapTPforTPFee = swapTPforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap a Pegged Token for Collateral Token.\\n     * @param swapTPforTCFee_ additional fee pct applied on swap a Pegged Token for Collateral Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTPforTCFee(uint256 swapTPforTCFee_) external onlyAuthorizedChanger {\\n        swapTPforTCFee = swapTPforTCFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when swap Collateral Token for a Pegged Token.\\n     * @param swapTCforTPFee_ additional fee pct applied on swap Collateral Token for a Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setSwapTCforTPFee(uint256 swapTCforTPFee_) external onlyAuthorizedChanger {\\n        swapTCforTPFee = swapTCforTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when redeem Collateral Token and Pegged Token in one operation.\\n     * @param redeemTCandTPFee_ additional fee pct applied on redeem Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setRedeemTCandTPFee(uint256 redeemTCandTPFee_) external onlyAuthorizedChanger {\\n        redeemTCandTPFee = redeemTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets the fee charged when mint Collateral Token and Pegged Token in one operation.\\n     * @param mintTCandTPFee_ additional fee pct applied on mint Collateral Token and Pegged Token [PREC]\\n     * 0% = 0; 1% = 10 ** 16; 100% = 10 ** 18\\n     */\\n    function setMintTCandTPFee(uint256 mintTCandTPFee_) external onlyAuthorizedChanger {\\n        mintTCandTPFee = mintTCandTPFee_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Fee Flow contract address\\n     * @param mocFeeFlowAddress_ moc Fee Flow new contract address\\n     */\\n    function setMocFeeFlowAddress(address mocFeeFlowAddress_) external onlyAuthorizedChanger {\\n        mocFeeFlowAddress = mocFeeFlowAddress_;\\n    }\\n\\n    /**\\n     * @dev sets Moc Appreciation Beneficiary Address\\n     * @param mocAppreciationBeneficiaryAddress_ moc Appreciation Beneficiary new address\\n     */\\n    function setMocAppreciationBeneficiaryAddress(\\n        address mocAppreciationBeneficiaryAddress_\\n    ) external onlyAuthorizedChanger {\\n        mocAppreciationBeneficiaryAddress = mocAppreciationBeneficiaryAddress_;\\n    }\\n\\n    /**\\n     * @dev sets the value of the protected threshold configuration param\\n     * @param protThrld_ coverage protected state threshold [PREC]\\n     */\\n    function setProtThrld(uint256 protThrld_) external onlyAuthorizedChanger {\\n        protThrld = protThrld_;\\n    }\\n\\n    /**\\n     * @dev sets the value of the liq threshold configuration param\\n     * @param liqThrld_ liquidation threshold\\n     */\\n    function setLiqThrld(uint256 liqThrld_) external onlyAuthorizedChanger {\\n        liqThrld = liqThrld_;\\n    }\\n\\n    /**\\n     * @dev enables and disables the liquidation mechanism.\\n     * @param liqEnabled_ is liquidation enabled\\n     */\\n    function setLiqEnabled(bool liqEnabled_) external onlyAuthorizedChanger {\\n        liqEnabled = liqEnabled_;\\n    }\\n\\n    /**\\n     * @dev sets success Fee value.\\n     * @param successFee_ pct of the gain because Pegged Tokens devaluation that is\\n     * transferred in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     */\\n    function setSuccessFee(uint256 successFee_) external onlyAuthorizedChanger {\\n        successFee = successFee_;\\n    }\\n\\n    /**\\n     * @dev sets appreciation Factor value.\\n     * @param appreciationFactor_ pct of the gain because Pegged Tokens devaluation that is returned\\n     * in Pegged Tokens to appreciation beneficiary during the settlement [PREC]\\n     */\\n    function setAppreciationFactor(uint256 appreciationFactor_) external onlyAuthorizedChanger {\\n        appreciationFactor = appreciationFactor_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7dac77ba4b507e70d9bb09f72305e6adacf60ce1ddb127aeb6c83d5c96313289\"},\"contracts/core/MocCore.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IMocRC20.sol\\\";\\nimport \\\"./MocSettlement.sol\\\";\\n\\n/**\\n * @title MocCore\\n * @notice MocCore nucleates all the basic MoC functionality and tool set. It allows Collateral\\n * asset aware contracts to implement the main mint/redeem operations.\\n */\\nabstract contract MocCore is MocSettlement {\\n    // ------- Events -------\\n    event TCMinted(address indexed sender_, address indexed recipient_, uint256 qTC_, uint256 qAC_, uint256 qACfee_);\\n    event TCRedeemed(address indexed sender_, address indexed recipient_, uint256 qTC_, uint256 qAC_, uint256 qACfee_);\\n    event TPMinted(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_\\n    );\\n    event TPRedeemed(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_\\n    );\\n    event TPSwappedForTP(\\n        uint256 indexed iFrom_,\\n        uint256 iTo_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTPfrom_,\\n        uint256 qTPto_,\\n        uint256 qACfee_\\n    );\\n    event TPSwappedForTC(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTP_,\\n        uint256 qTC_,\\n        uint256 qACfee_\\n    );\\n    event TCSwappedForTP(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACfee_\\n    );\\n    event TCandTPRedeemed(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_\\n    );\\n    event TCandTPMinted(\\n        uint256 indexed i_,\\n        address indexed sender_,\\n        address indexed recipient_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qAC_,\\n        uint256 qACfee_\\n    );\\n    event PeggedTokenChange(uint256 indexed i_, PeggedTokenParams peggedTokenParams_);\\n    event SuccessFeeDistributed(uint256 mocGain_, uint256[] tpGain_);\\n    // ------- Custom Errors -------\\n    error PeggedTokenAlreadyAdded();\\n    error InsufficientQacSent(uint256 qACsent_, uint256 qACNeeded_);\\n    error QacBelowMinimumRequired(uint256 qACmin_, uint256 qACtoRedeem_);\\n    error InsufficientTPtoMint(uint256 qTP_, uint256 tpAvailableToMint_);\\n    error InsufficientTCtoRedeem(uint256 qTC_, uint256 tcAvailableToRedeem_);\\n    error InsufficientTPtoRedeem(uint256 qTP_, uint256 tpAvailableToRedeem_);\\n    error QacNeededMustBeGreaterThanZero();\\n    error QtpBelowMinimumRequired(uint256 qTPmin_, uint256 qTP_);\\n    error QtcBelowMinimumRequired(uint256 qTCmin_, uint256 qTC_);\\n    error InsufficientQtpSent(uint256 qTPsent_, uint256 qTPNeeded_);\\n    // ------- Structs -------\\n\\n    struct InitializeCoreParams {\\n        InitializeBaseBucketParams initializeBaseBucketParams;\\n        // The address that will define when a change contract is authorized\\n        address governorAddress;\\n        // The address that is authorized to pause this contract\\n        address pauserAddress;\\n        // amount of blocks to wait between Pegged ema calculation\\n        uint256 emaCalculationBlockSpan;\\n        // number of blocks between settlements\\n        uint256 bes;\\n    }\\n\\n    struct PeggedTokenParams {\\n        // Pegged Token contract address to add\\n        address tpTokenAddress;\\n        // priceProviderAddress Pegged Token price provider contract address\\n        address priceProviderAddress;\\n        // Pegged Token target coverage [PREC]\\n        uint256 tpCtarg;\\n        // additional fee pct applied on mint [PREC]\\n        uint256 tpMintFee;\\n        // additional fee pct applied on redeem [PREC]\\n        uint256 tpRedeemFee;\\n        // initial Pegged Token exponential moving average [PREC]\\n        uint256 tpEma;\\n        // Pegged Token smoothing factor [PREC]\\n        uint256 tpEmaSf;\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @dev this function must be execute by the AC implementation at initialization\\n     * @param initializeCoreParams_ contract initializer params\\n     *        governorAddress The address that will define when a change contract is authorized\\n     *        pauserAddress_ The address that is authorized to pause this contract\\n     *        tcTokenAddress Collateral Token contract address\\n     *        mocFeeFlowAddress Moc Fee Flow contract address\\n     *        mocAppreciationBeneficiaryAddress Moc appreciation beneficiary address\\n     *        protThrld protected state threshold [PREC]\\n     *        liqThrld liquidation coverage threshold [PREC]\\n     *        feeRetainer pct retain on fees to be re-injected as Collateral, while paying fees with AC [PREC]\\n     *        tcMintFee additional fee pct applied on mint Collateral Tokens operations [PREC]\\n     *        tcRedeemFee additional fee pct applied on redeem Collateral Tokens operations [PREC]\\n     *        successFee pct of the gain because Pegged Tokens devaluation that is transferred\\n     *          in Collateral Asset to Moc Fee Flow during the settlement [PREC]\\n     *        appreciationFactor pct of the gain because Pegged Tokens devaluation that is returned\\n     *          in Pegged Tokens to appreciation beneficiary during the settlement [PREC]]\\n     *        emaCalculationBlockSpan amount of blocks to wait between Pegged ema calculation\\n     *        bes number of blocks between settlements\\n     */\\n    function __MocCore_init(InitializeCoreParams calldata initializeCoreParams_) internal onlyInitializing {\\n        __MocUpgradable_init(initializeCoreParams_.governorAddress, initializeCoreParams_.pauserAddress);\\n        __MocBaseBucket_init_unchained(initializeCoreParams_.initializeBaseBucketParams);\\n        __MocEma_init_unchained(initializeCoreParams_.emaCalculationBlockSpan);\\n        __MocSettlement_init_unchained(initializeCoreParams_.bes);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice transfer Collateral Asset\\n     * @dev this function must be overridden by the AC implementation\\n     *  and revert if transfer fails.\\n     * @param to_ address who receives the Collateral Asset\\n     * @param amount_ amount of Collateral Asset to transfer\\n     */\\n    function acTransfer(address to_, uint256 amount_) internal virtual;\\n\\n    /**\\n     * @notice Collateral Asset balance\\n     * @dev this function must be overridden by the AC implementation\\n     * @param account address who's Collateral Asset balance we want to know of\\n     * @return balance `account`'s total amount of Collateral Asset\\n     */\\n    function acBalanceOf(address account) internal view virtual returns (uint256 balance);\\n\\n    /**\\n     * @notice hook before any AC reception involving operation\\n     * @dev this function must be overridden by the AC implementation\\n     * @param qACMax_ max amount of AC available\\n     * @param qACNeeded_ amount of AC needed\\n     * @return change amount needed to be return to the sender after the operation is complete\\n     */\\n    function _onACNeededOperation(uint256 qACMax_, uint256 qACNeeded_) internal virtual returns (uint256 change);\\n\\n    /**\\n     * @notice mint Collateral Token in exchange for Collateral Asset\\n     * @param qTC_ amount of Collateral Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     * @param recipient_ address who receives the Collateral Token\\n     * @return qACtotalNeeded amount of AC used to mint qTC\\n     */\\n    function _mintTCto(\\n        uint256 qTC_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtotalNeeded) {\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld);\\n        // calculates how many qAC are needed to mint TC and the qAC fee\\n        (uint256 qACNeededtoMint, uint256 qACfee) = _calcQACforMintTC(qTC_, lckAC, nACgain);\\n        qACtotalNeeded = qACNeededtoMint + qACfee;\\n        if (qACtotalNeeded > qACmax_) revert InsufficientQacSent(qACmax_, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TCMinted(sender_, recipient_, qTC_, qACtotalNeeded, qACfee);\\n        _depositAndMintTC(qTC_, qACNeededtoMint, recipient_);\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACtotalNeeded);\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return qACtotalNeeded;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param sender_ address who sends the Collateral Token\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     */\\n    function _redeemTCto(\\n        uint256 qTC_,\\n        uint256 qACmin_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtoRedeem) {\\n        uint256 ctargemaCA = calcCtargemaCA();\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(qTC_, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (uint256 qACtotalToRedeem, uint256 qACfee) = _calcQACforRedeemTC(qTC_, lckAC, nACgain);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        qACtoRedeem = qACtotalToRedeem - qACfee;\\n        if (qACtoRedeem < qACmin_) revert QacBelowMinimumRequired(qACmin_, qACtoRedeem);\\n        emit TCRedeemed(sender_, recipient_, qTC_, qACtoRedeem, qACfee);\\n        _withdrawAndBurnTC(qTC_, qACtotalToRedeem, sender_);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(recipient_, qACtoRedeem, qACfee);\\n        return qACtoRedeem;\\n    }\\n\\n    /**\\n     * @notice mint Pegged Token in exchange for Collateral Asset\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param sender_ address who sends the Collateral Asset, all unspent amount is returned to it\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint qTP\\n     */\\n    function _mintTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtotalNeeded) {\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        uint256 ctargemaCA = calcCtargemaCA();\\n        // evaluates whether or not the system coverage is healthy enough to mint TP\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA);\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(i_, qTP_, pACtp, ctargemaCA, lckAC, nACgain);\\n        // calculate how many qAC are needed to mint TP and the qAC fee\\n        (uint256 qACNeededtoMint, uint256 qACfee) = _calcQACforMintTP(i_, qTP_, pACtp);\\n        qACtotalNeeded = qACNeededtoMint + qACfee;\\n        if (qACtotalNeeded > qACmax_) revert InsufficientQacSent(qACmax_, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TPMinted(i_, sender_, recipient_, qTP_, qACtotalNeeded, qACfee);\\n        // update bucket and mint\\n        _depositAndMintTP(i_, qTP_, qACNeededtoMint, recipient_);\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACtotalNeeded);\\n        // transfers any AC change to the sender and distributes fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return qACtotalNeeded;\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param sender_ address who sends the Pegged Token\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     */\\n    function _redeemTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtoRedeem) {\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to redeem TP, reverts if it's not\\n        _evalCoverage(protThrld);\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (uint256 qACtotalToRedeem, uint256 qACfee) = _calcQACforRedeemTP(i_, qTP_, pACtp);\\n        // if is 0 reverts because it is trying to redeem an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        qACtoRedeem = qACtotalToRedeem - qACfee;\\n        if (qACtoRedeem < qACmin_) revert QacBelowMinimumRequired(qACmin_, qACtoRedeem);\\n        emit TPRedeemed(i_, sender_, recipient_, qTP_, qACtoRedeem, qACfee);\\n        _withdrawAndBurnTP(i_, qTP_, qACtotalToRedeem, sender_);\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(recipient_, qACtoRedeem, qACfee);\\n        return qACtoRedeem;\\n    }\\n\\n    /**\\n     * @notice mint Collateral Token and Pegged Token in exchange for Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are minted in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qAC sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent\\n     * @param sender_ address who sends Collateral Asset\\n     * @param recipient_ address who receives the Collateral Token and Pegged Token\\n     * @return qACtotalNeeded amount of AC used to mint Collateral Token and Pegged Token\\n     * @return qTCtoMint amount of Collateral Token minted\\n     */\\n    function _mintTCandTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtotalNeeded, uint256 qTCtoMint) {\\n        uint256 qACNeededtoMint;\\n        uint256 qACfee;\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        _evalCoverage(liqThrld);\\n        (qTCtoMint, qACNeededtoMint, qACfee) = _calcQACforMintTCandTP(qTP_, pACtp);\\n        qACtotalNeeded = qACNeededtoMint + qACfee;\\n        if (qACtotalNeeded > qACmax_) revert InsufficientQacSent(qACmax_, qACtotalNeeded);\\n        // if is 0 reverts because it is trying to mint an amount below precision\\n        if (qACtotalNeeded == 0) revert QacNeededMustBeGreaterThanZero();\\n        emit TCandTPMinted(i_, sender_, recipient_, qTCtoMint, qTP_, qACtotalNeeded, qACfee);\\n        _depositAndMintTC(qTCtoMint, qACNeededtoMint, recipient_);\\n        _depositAndMintTP(i_, qTP_, 0, recipient_);\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACtotalNeeded);\\n        // transfers qAC to the sender and distributes fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return (qACtotalNeeded, qTCtoMint);\\n    }\\n\\n    /**\\n     * @notice redeem Collateral Asset in exchange for Collateral Token and Pegged Token\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param sender_ address who sends Collateral Token and Pegged Token\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACtoRedeem amount of AC sent to `recipient_`\\n     * @return qTPtoRedeem amount of Pegged Token redeemed\\n     */\\n    function _redeemTCandTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACtoRedeem, uint256 qTPtoRedeem) {\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        // evaluates that the system is not below the liquidation threshold\\n        // one of the reasons is to prevent it from failing due to underflow because the lckAC > totalACavailable\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(liqThrld);\\n        // calculate how many TP are needed to redeem TC and not change coverage\\n        // qTPtoRedeem = (qTC * pACtp * pTCac) / (cglb - 1)\\n        // pTCac = (totalACavailable - lckAC) / nTCcb\\n        // cglb = totalACavailable / lckAC => cglb - 1 = (totalACavailable - lckAC) / lckAC\\n        // qTPtoRedeem = (qTC * pACtp * (totalACavailable - lckAC) / nTCcb) / ((totalACavailable - lckAC) / lckAC)\\n        // So, we can simplify (totalACavailable - lckAC)\\n        // qTPtoRedeem = (qTC * pACtp * lckAC) / nTCcb\\n        // [N] = ([N] * [N] * [PREC] / [N]) /  [PREC]\\n        qTPtoRedeem = ((qTC_ * lckAC * pACtp) / nTCcb) / PRECISION;\\n\\n        if (qTPtoRedeem > qTP_) revert InsufficientQtpSent(qTP_, qTPtoRedeem);\\n        (uint256 qACtotalToRedeem, uint256 qACfee) = _calcQACforRedeemTCandTP(\\n            i_,\\n            qTC_,\\n            qTPtoRedeem,\\n            pACtp,\\n            _getPTCac(lckAC, nACgain)\\n        );\\n        qACtoRedeem = qACtotalToRedeem - qACfee;\\n        if (qACtoRedeem < qACmin_) revert QacBelowMinimumRequired(qACmin_, qACtoRedeem);\\n\\n        // inside a block to avoid stack too deep error\\n        {\\n            uint256 i = i_;\\n            uint256 qTC = qTC_;\\n            uint256 qACtoRedeem_ = qACtoRedeem;\\n            emit TCandTPRedeemed(i, sender_, recipient_, qTC, qTPtoRedeem, qACtoRedeem_, qACfee);\\n        }\\n\\n        _withdrawAndBurnTC(qTC_, qACtotalToRedeem, sender_);\\n        _withdrawAndBurnTP(i_, qTPtoRedeem, 0, sender_);\\n\\n        // transfers qAC to the recipient and distributes fees\\n        _distOpResults(recipient_, qACtoRedeem, qACfee);\\n        return (qACtoRedeem, qTPtoRedeem);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to another one\\n     *  This operation is done without checking coverage unless the target coverage for\\n     *  received Pegged Token is greater than the Pegged Token sent\\n     * @param iFrom_ owned Pegged Token index\\n     * @param iTo_ target Pegged Token index\\n     * @param qTP_ amount of owned Pegged Token to swap\\n     * @param qTPmin_ minimum amount of target Pegged Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param sender_ address who sends the Pegged Token\\n     * @param recipient_ address who receives the target Pegged Token\\n     * @return qACfee amount of AC used to pay fee\\n     * @return qTPtoMint amount of Pegged Token minted\\n     */\\n    function _swapTPforTPto(\\n        uint256 iFrom_,\\n        uint256 iTo_,\\n        uint256 qTP_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACfee, uint256 qTPtoMint) {\\n        if (iFrom_ == iTo_) revert InvalidValue();\\n        uint256 pACtpFrom = getPACtp(iFrom_);\\n        uint256 pACtpTo = getPACtp(iTo_);\\n        _updateTPtracking(iFrom_, pACtpFrom);\\n        _updateTPtracking(iTo_, pACtpTo);\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (uint256 qACtotalToRedeem, ) = _calcQACforRedeemTP(iFrom_, qTP_, pACtpFrom);\\n        // calculate how many qTP can mint with the given qAC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qTPtoMint = (qTP_ * pACtpTo) / pACtpFrom;\\n        if (qTPtoMint < qTPmin_ || qTPtoMint == 0) revert QtpBelowMinimumRequired(qTPmin_, qTPtoMint);\\n\\n        // if ctargemaTPto > ctargemaTPfrom we need to check coverage\\n        if (_getCtargemaTP(iTo_, pACtpTo) > _getCtargemaTP(iFrom_, pACtpFrom)) {\\n            uint256 ctargemaCA = calcCtargemaCA();\\n            // evaluates whether or not the system coverage is healthy enough to mint TP\\n            // given the target coverage adjusted by the moving average, reverts if it's not\\n            (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA);\\n            // evaluates if there are enough TP available to mint, reverts if it's not\\n            _evalTPavailableToMint(iTo_, qTPtoMint, pACtpTo, ctargemaCA, lckAC, nACgain);\\n        }\\n\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, swapTPforTPFee);\\n        if (qACfee > qACmax_) revert InsufficientQacSent(qACmax_, qACfee);\\n\\n        // inside a block to avoid stack too deep error\\n        {\\n            uint256 iFrom = iFrom_;\\n            uint256 iTo = iTo_;\\n            uint256 qTP = qTP_;\\n            emit TPSwappedForTP(iFrom, iTo, sender_, recipient_, qTP, qTPtoMint, qACfee);\\n        }\\n\\n        _depositAndMintTP(iTo_, qTPtoMint, 0, recipient_);\\n        _withdrawAndBurnTP(iFrom_, qTP_, 0, sender_);\\n\\n        // AC is only used to pay fees\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACfee);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return (qACfee, qTPtoMint);\\n    }\\n\\n    /**\\n     * @notice swap Pegged Token to Collateral Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount Pegged Token to swap\\n     * @param qTCmin_ minimum amount of Collateral Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param sender_ address who sends the Pegged Token\\n     * @param recipient_ address who receives Collateral Token\\n     * @return qACfee amount of AC used to pay fee\\n     * @return qTCtoMint amount of Collateral Token minted\\n     */\\n    function _swapTPforTCto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qTCmin_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACfee, uint256 qTCtoMint) {\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        // evaluates whether or not the system coverage is healthy enough to mint TC, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(protThrld);\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (uint256 qACtotalToRedeem, ) = _calcQACforRedeemTP(i_, qTP_, pACtp);\\n        // calculate how many qTC can mint with the given qAC\\n        // qTCtoMint = qTP / pTCac / pACtp\\n        // [N] = [N] * [N] * [PREC] / ([N] - [N]) * [PREC]\\n        qTCtoMint = _divPrec(qTP_ * nTCcb, (_getTotalACavailable(nACgain) - lckAC) * pACtp);\\n        if (qTCtoMint < qTCmin_ || qTCtoMint == 0) revert QtcBelowMinimumRequired(qTCmin_, qTCtoMint);\\n\\n        // calculate qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, swapTPforTCFee);\\n        if (qACfee > qACmax_) revert InsufficientQacSent(qACmax_, qACfee);\\n\\n        // inside a block to avoid stack too deep error\\n        {\\n            uint256 i = i_;\\n            uint256 qTP = qTP_;\\n            emit TPSwappedForTC(i, sender_, recipient_, qTP, qTCtoMint, qACfee);\\n        }\\n\\n        _withdrawAndBurnTP(i_, qTP_, 0, sender_);\\n        _depositAndMintTC(qTCtoMint, 0, recipient_);\\n        // AC is only used to pay fees\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACfee);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return (qACfee, qTCtoMint);\\n    }\\n\\n    /**\\n     * @notice swap Collateral Token to Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to swap\\n     * @param qTPmin_ minimum amount of Pegged Token Token that `recipient_` expects to receive\\n     * @param qACmax_ maximum amount of Collateral Asset that can be spent in fees\\n     * @param sender_ address who sends the Collateral Token\\n     * @param recipient_ address who receives the Pegged Token\\n     * @return qACfee amount of AC used to pay fee\\n     * @return qTPtoMint amount of Pegged Token minted\\n     */\\n    function _swapTCforTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTPmin_,\\n        uint256 qACmax_,\\n        address sender_,\\n        address recipient_\\n    ) internal notLiquidated notPaused returns (uint256 qACfee, uint256 qTPtoMint) {\\n        uint256 pACtp = getPACtp(i_);\\n        _updateTPtracking(i_, pACtp);\\n        uint256 ctargemaCA = calcCtargemaCA();\\n        // evaluates whether or not the system coverage is healthy enough to redeem TC\\n        // given the target coverage adjusted by the moving average, reverts if it's not\\n        (uint256 lckAC, uint256 nACgain) = _evalCoverage(ctargemaCA);\\n        // evaluates if there are enough Collateral Tokens available to redeem, reverts if there are not\\n        _evalTCAvailableToRedeem(qTC_, ctargemaCA, lckAC, nACgain);\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (uint256 qACtotalToRedeem, ) = _calcQACforRedeemTC(qTC_, lckAC, nACgain);\\n        // if is 0 reverts because it is trying to swap an amount below precision\\n        if (qACtotalToRedeem == 0) revert QacNeededMustBeGreaterThanZero();\\n        // calculate how many qTP can mint with the given qAC\\n        // qTPtoMint = qTC * pTCac * pACtp\\n        // [N] = ([N] * ([N] - [N]) * [PREC] / [N]) / [PREC]\\n        qTPtoMint = ((qTC_ * (_getTotalACavailable(nACgain) - lckAC) * pACtp) / nTCcb) / PRECISION;\\n        // evaluates if there are enough TP available to mint, reverts if it's not\\n        _evalTPavailableToMint(i_, qTPtoMint, pACtp, ctargemaCA, lckAC, nACgain);\\n        if (qTPtoMint < qTPmin_) revert QtpBelowMinimumRequired(qTPmin_, qTPtoMint);\\n\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, swapTCforTPFee);\\n        if (qACfee > qACmax_) revert InsufficientQacSent(qACmax_, qACfee);\\n\\n        // inside a block to avoid stack too deep error\\n        {\\n            uint256 i = i_;\\n            uint256 qTC = qTC_;\\n            emit TCSwappedForTP(i, sender_, recipient_, qTC, qTPtoMint, qACfee);\\n        }\\n\\n        _withdrawAndBurnTC(qTC_, 0, sender_);\\n        _depositAndMintTP(i_, qTPtoMint, 0, recipient_);\\n\\n        // AC is only used to pay fees\\n        uint256 acChange = _onACNeededOperation(qACmax_, qACfee);\\n        // transfer any qAC change to the sender and distribute fees\\n        _distOpResults(sender_, acChange, qACfee);\\n        return (qACfee, qTPtoMint);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param i_ Pegged Token index\\n     * @param sender_ address owner of the TP to be redeemed\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function _liqRedeemTPTo(\\n        uint256 i_,\\n        address sender_,\\n        address recipient_\\n    ) internal notPaused returns (uint256 qACRedeemed) {\\n        if (!liquidated) revert OnlyWhenLiquidated();\\n        uint256 qTP = tpTokens[i_].balanceOf(sender_);\\n        if (qTP == 0) revert InsufficientTPtoRedeem(qTP, qTP);\\n        // [PREC]\\n        uint256 liqPACtp = tpLiqPrices[i_];\\n        // [PREC] = [N] * [PREC] / [PREC]\\n        qACRedeemed = _divPrec(qTP, liqPACtp);\\n        // burn qTP from the sender\\n        tpTokens[i_].burn(sender_, qTP);\\n        // Given rounding errors, the last redeemer might receive a little less\\n        if (acBalanceOf(address(this)) < qACRedeemed) qACRedeemed = acBalanceOf(address(this));\\n        emit TPRedeemed(i_, sender_, recipient_, qTP, qACRedeemed, 0);\\n        // transfer qAC to the recipient, reverts if fail\\n        acTransfer(recipient_, qACRedeemed);\\n    }\\n\\n    /**\\n     * @notice Distributes Operation results to the different recipients\\n     * @param operatorsAddress_ operator's address to receive `operatorsQAC_`\\n     * @param operatorsQAC_ amount of AC to transfer operator [N]\\n     * @param qACfee_ amount of AC to be distributed as fees [N]\\n     */\\n    function _distOpResults(address operatorsAddress_, uint256 operatorsQAC_, uint256 qACfee_) internal {\\n        // [N] = [PREC] * [N] / [PREC]\\n        uint256 qACfeeRetained = _mulPrec(feeRetainer, qACfee_);\\n        // Increase collateral in the retain amount\\n        // TODO: review after issue #99 is completed\\n        nACcb += qACfeeRetained;\\n        // transfer qAC leftover fees to Fee Flow\\n        acTransfer(mocFeeFlowAddress, qACfee_ - qACfeeRetained);\\n        // transfer qAC to operator\\n        acTransfer(operatorsAddress_, operatorsQAC_);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice caller sends Collateral Token and receives Collateral Asset\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @return qACRedeemed amount of AC sent to sender\\n     */\\n    function redeemTC(uint256 qTC_, uint256 qACmin_) external returns (uint256 qACRedeemed) {\\n        return _redeemTCto(qTC_, qACmin_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and recipient receives Collateral Asset\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     */\\n    function redeemTCto(uint256 qTC_, uint256 qACmin_, address recipient_) external returns (uint256 qACRedeemed) {\\n        return _redeemTCto(qTC_, qACmin_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and receives Collateral Asset\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that sender expects to receive\\n     * @return qACRedeemed amount of AC sent to sender\\n     */\\n    function redeemTP(uint256 i_, uint256 qTP_, uint256 qACmin_) external returns (uint256 qACRedeemed) {\\n        return _redeemTPto(i_, qTP_, qACmin_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Pegged Token and recipient receives Collateral Asset\\n     * @param i_ Pegged Token index to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to 'recipient_'\\n     */\\n    function redeemTPto(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_\\n    ) external returns (uint256 qACRedeemed) {\\n        return _redeemTPto(i_, qTP_, qACmin_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that the sender expects to receive\\n     * @return qACRedeemed amount of AC sent to the sender\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     */\\n    function redeemTCandTP(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed) {\\n        return _redeemTCandTPto(i_, qTC_, qTP_, qACmin_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset\\n     *  This operation is done without checking coverage\\n     *  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price\\n     *  and global coverage are not modified.\\n     *  Reverts if qTP sent are insufficient.\\n     * @param i_ Pegged Token index\\n     * @param qTC_ maximum amount of Collateral Token to redeem\\n     * @param qTP_ maximum amount of Pegged Token to redeem\\n     * @param qACmin_ minimum amount of Collateral Asset that `recipient_` expects to receive\\n     * @param recipient_ address who receives the Collateral Asset\\n     * @return qACRedeemed amount of AC sent to the `recipient_`\\n     * @return qTPRedeemed amount of Pegged Token redeemed\\n     */\\n    function redeemTCandTPto(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 qACmin_,\\n        address recipient_\\n    ) external returns (uint256 qACRedeemed, uint256 qTPRedeemed) {\\n        return _redeemTCandTPto(i_, qTC_, qTP_, qACmin_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param i_ Pegged Token index\\n     * @return qACRedeemed amount of AC sent to sender\\n     */\\n    function liqRedeemTP(uint256 i_) external returns (uint256 qACRedeemed) {\\n        return _liqRedeemTPTo(i_, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allow redeem on liquidation state, user Peg balance gets burned and he receives\\n     * the equivalent AC given the liquidation frozen price.\\n     * @param i_ Pegged Token index\\n     * @param recipient_ address who receives the AC\\n     * @return qACRedeemed amount of AC sent to `recipient_`\\n     */\\n    function liqRedeemTPto(uint256 i_, address recipient_) external returns (uint256 qACRedeemed) {\\n        return _liqRedeemTPTo(i_, msg.sender, recipient_);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Collateral Token\\n     * @param qTC_ amount of Collateral Token to mint [N]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return qACNeededtoMint amount of Collateral Asset needed to mint [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function _calcQACforMintTC(\\n        uint256 qTC_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 qACNeededtoMint, uint256 qACfee) {\\n        if (qTC_ == 0) revert InvalidValue();\\n        // calculate how many qAC are needed to mint TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACNeededtoMint = _mulPrec(qTC_, _getPTCac(lckAC_, nACgain_));\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACNeededtoMint, tcMintFee);\\n\\n        return (qACNeededtoMint, qACfee);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Collateral Token\\n     * @param qTC_ amount of Collateral Token to redeem [N]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     * @return qACtotalToRedeem amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function _calcQACforRedeemTC(\\n        uint256 qTC_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view returns (uint256 qACtotalToRedeem, uint256 qACfee) {\\n        if (qTC_ == 0) revert InvalidValue();\\n        // calculate how many qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtotalToRedeem = _mulPrec(qTC_, _getPTCac(lckAC_, nACgain_));\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, tcRedeemFee);\\n        return (qACtotalToRedeem, qACfee);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint [N]\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return qACNeededtoMint amount of Collateral Asset needed to mint [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function _calcQACforMintTP(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_\\n    ) internal view returns (uint256 qACNeededtoMint, uint256 qACfee) {\\n        if (qTP_ == 0) revert InvalidValue();\\n        // calculate how many qAC are needed to mint TP\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACNeededtoMint = _divPrec(qTP_, pACtp_);\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACNeededtoMint, tpMintFee[i_]);\\n        return (qACNeededtoMint, qACfee);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return qACtotalToRedeem amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function _calcQACforRedeemTP(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_\\n    ) internal view returns (uint256 qACtotalToRedeem, uint256 qACfee) {\\n        if (qTP_ == 0) revert InvalidValue();\\n        // calculate how many qAC are redeemed\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACtotalToRedeem = _divPrec(qTP_, pACtp_);\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, tpRedeemFee[i_]);\\n        return (qACtotalToRedeem, qACfee);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to mint an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param qTP_ amount of Pegged Token to mint\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return qTCtoMint amount of Collateral Token to mint [N]\\n     * @return qACNeededtoMint amount of Collateral Asset needed to mint [N]\\n     * @return qACfee amount of Collateral Asset should be transfer to Fee Flow [N]\\n     */\\n    function _calcQACforMintTCandTP(\\n        uint256 qTP_,\\n        uint256 pACtp_\\n    ) internal view returns (uint256 qTCtoMint, uint256 qACNeededtoMint, uint256 qACfee) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        uint256 pTCac = _getPTCac(lckAC, nACgain);\\n        // calculate how many TC are needed to mint TP and total qAC used for mint both\\n        // [N] = [N] * ([PREC] - [PREC]) / [PREC]\\n        qACNeededtoMint = (qTP_ * (_getCtargemaCA() - ONE)) / pACtp_;\\n        // [N] = [N] *  [PREC] / [PREC]\\n        qTCtoMint = _divPrec(qACNeededtoMint, pTCac);\\n        // [N] = [N] + [N] *  [PREC] / [PREC]\\n        qACNeededtoMint = qACNeededtoMint + _divPrec(qTP_, pACtp_);\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACNeededtoMint, mintTCandTPFee);\\n        return (qTCtoMint, qACNeededtoMint, qACfee);\\n    }\\n\\n    /**\\n     * @notice calculate how many Collateral Asset are needed to redeem an amount of Collateral Token\\n     * and Pegged Token in one operation\\n     * @param i_ Pegged Token index\\n     * @param qTC_ amount of Collateral Token to redeem\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param pTCac_ Collateral Token price [PREC]\\n     * @return qACtotalToRedeem amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function _calcQACforRedeemTCandTP(\\n        uint256 i_,\\n        uint256 qTC_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 pTCac_\\n    ) internal view returns (uint256 qACtotalToRedeem, uint256 qACfee) {\\n        // calculate how many total qAC are redeemed and how many correspond for fee\\n        (qACtotalToRedeem, ) = _calcQACforRedeemTP(i_, qTP_, pACtp_);\\n        // calculate how many qAC are redeemed because TC\\n        // [N] = [N] * [PREC] / [PREC]\\n        // TODO: rounding error could be avoid replacing here with qTC_ * totalACavailable / nTCcb\\n        qACtotalToRedeem += _mulPrec(qTC_, pTCac_);\\n        // calculates qAC to be charged as fee\\n        // [N] = [N] * [PREC] / [PREC]\\n        qACfee = _mulPrec(qACtotalToRedeem, redeemTCandTPFee);\\n        return (qACtotalToRedeem, qACfee);\\n    }\\n\\n    /**\\n     * @notice evaluates if there is enough Collateral Token available to redeem, reverts if there's not\\n     * @param qTC_ amount of Collateral Token to redeem [N]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of Collateral Asset that will be distributed at\\n     *         settlement because Pegged Token devaluation [N]\\n     */\\n    function _evalTCAvailableToRedeem(\\n        uint256 qTC_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 tcAvailableToRedeem = _getTCAvailableToRedeem(ctargemaCA_, lckAC_, nACgain_);\\n        // check if there are enough TC available to redeem\\n        if (tcAvailableToRedeem < qTC_) revert InsufficientTCtoRedeem(qTC_, tcAvailableToRedeem);\\n    }\\n\\n    /**\\n     * @notice evaluates if there are enough Pegged Token available to mint, reverts if it`s not\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to mint [N]\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @param ctargemaCA_ target coverage adjusted by the moving average of the value of the Collateral Asset [PREC]\\n     * @param lckAC_ amount of Collateral Asset locked by Pegged Token [PREC]\\n     * @param nACgain_ amount of collateral asset to be distributed during settlement [N]\\n     */\\n    function _evalTPavailableToMint(\\n        uint256 i_,\\n        uint256 qTP_,\\n        uint256 pACtp_,\\n        uint256 ctargemaCA_,\\n        uint256 lckAC_,\\n        uint256 nACgain_\\n    ) internal view {\\n        uint256 ctargemaTP = _getCtargemaTP(i_, pACtp_);\\n        uint256 tpAvailableToMint = _getTPAvailableToMint(ctargemaCA_, ctargemaTP, pACtp_, lckAC_, nACgain_);\\n        // check if there are enough TP available to mint\\n        if (tpAvailableToMint < qTP_) revert InsufficientTPtoMint(qTP_, tpAvailableToMint);\\n    }\\n\\n    /**\\n     * @notice distribute appreciation factor to beneficiary and success fee to Moc Fee Flow\\n     */\\n    function _distributeSuccessFee() internal {\\n        uint256 mocGain;\\n        uint256 pegAmount = pegContainer.length;\\n        uint256[] memory tpToMint = new uint256[](pegAmount);\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = getPACtp(i);\\n            _updateTPtracking(i, pACtp);\\n            int256 iou = tpiou[i];\\n            if (iou > 0) {\\n                // [N] = (([PREC] * [PREC] / [PREC]) * [N]) / [PREC]\\n                tpToMint[i] = _mulPrec(_mulPrec(appreciationFactor, pACtp), uint256(iou));\\n                // [N] = [N] + [N]\\n                mocGain += uint256(iou);\\n                // reset TP profit\\n                tpiou[i] = 0;\\n                _depositAndMintTP(i, tpToMint[i], 0, mocAppreciationBeneficiaryAddress);\\n            }\\n        }\\n        if (mocGain != 0) {\\n            // [N] = [N] * [PREC] / [PREC]\\n            mocGain = _mulPrec(mocGain, successFee);\\n            // sub qAC from the Bucket\\n            nACcb -= mocGain;\\n            // transfer the mocGain AC to Moc Fee Flow\\n            acTransfer(mocFeeFlowAddress, mocGain);\\n        }\\n        emit SuccessFeeDistributed(mocGain, tpToMint);\\n    }\\n\\n    // ------- Only Settlement Functions -------\\n\\n    /**\\n     * @notice this function is executed during settlement.\\n     *  stores amount of locked AC by Pegged Tokens at this moment and distribute success fee\\n     */\\n    function _execSettlement() internal override {\\n        _distributeSuccessFee();\\n    }\\n\\n    // ------- Only Authorized Changer Functions -------\\n\\n    /**\\n     * @notice add a Pegged Token to the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to add\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - tpTokenAddress must be a MocRC20, with mint, burn roles already settled\\n     *  for this contract\\n     */\\n    function addPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        IMocRC20 tpToken = IMocRC20(peggedTokenParams_.tpTokenAddress);\\n        // Verifies it has the right roles over this TP\\n        if (!tpToken.hasFullRoles(address(this))) revert InvalidAddress();\\n\\n        IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n        if (peggedTokenIndex[address(tpToken)].exists) revert PeggedTokenAlreadyAdded();\\n        uint256 newTPindex = uint256(tpTokens.length);\\n        peggedTokenIndex[address(tpToken)] = PeggedTokenIndex({ index: newTPindex, exists: true });\\n\\n        // set Pegged Token address\\n        tpTokens.push(tpToken);\\n        // set peg container item\\n        pegContainer.push(PegContainerItem({ nTP: 0, priceProvider: priceProvider }));\\n        // set target coverage\\n        tpCtarg.push(peggedTokenParams_.tpCtarg);\\n        // set mint fee pct\\n        tpMintFee.push(peggedTokenParams_.tpMintFee);\\n        // set redeem fee pct\\n        tpRedeemFee.push(peggedTokenParams_.tpRedeemFee);\\n        // set EMA initial value and smoothing factor\\n        tpEma.push(EmaItem({ ema: peggedTokenParams_.tpEma, sf: peggedTokenParams_.tpEmaSf }));\\n        tpiou.push();\\n        // reverts if price provider is invalid\\n        pACtpLstop.push(getPACtp(newTPindex));\\n        // emit the event\\n        emit PeggedTokenChange(newTPindex, peggedTokenParams_);\\n    }\\n\\n    /**\\n     * @notice modifies a Pegged Token of the protocol\\n     * @dev Note that the ema value, should consider `nextEmaCalculation`\\n     * @param peggedTokenParams_ params of Pegged Token to add\\n     * @dev tpTokenAddress Pegged Token contract address to identify the token to edit\\n     *      priceProviderAddress Pegged Token price provider contract address\\n     *      tpCtarg Pegged Token target coverage [PREC]\\n     *      tpMintFee additional fee pct applied on mint [PREC]\\n     *      tpRedeemFee additional fee pct applied on redeem [PREC]\\n     *      tpEma initial Pegged Token exponential moving average [PREC]\\n     *      tpEmaSf Pegged Token smoothing factor [PREC]\\n     *\\n     *  Requirements:\\n     *\\n     * - the caller must have governance authorization.\\n     * - the tpTokenAddress must exists\\n     */\\n    function editPeggedToken(PeggedTokenParams calldata peggedTokenParams_) external onlyAuthorizedChanger {\\n        PeggedTokenIndex memory ptIndex = peggedTokenIndex[peggedTokenParams_.tpTokenAddress];\\n        if (!ptIndex.exists) revert InvalidAddress();\\n        uint256 i = ptIndex.index;\\n        // if being edited, verifies it is a valid priceProvider\\n        if (peggedTokenParams_.priceProviderAddress != address(pegContainer[i].priceProvider)) {\\n            IPriceProvider priceProvider = IPriceProvider(peggedTokenParams_.priceProviderAddress);\\n            (, bool has) = priceProvider.peek();\\n            if (!has) revert InvalidAddress();\\n            pegContainer[i].priceProvider = priceProvider;\\n        }\\n        // set target coverage\\n        tpCtarg[i] = peggedTokenParams_.tpCtarg;\\n        // set mint fee pct\\n        tpMintFee[i] = peggedTokenParams_.tpMintFee;\\n        // set redeem fee pct\\n        tpRedeemFee[i] = peggedTokenParams_.tpRedeemFee;\\n        // set EMA initial value and smoothing factor\\n        tpEma[i].sf = peggedTokenParams_.tpEmaSf;\\n        // emit the event\\n        emit PeggedTokenChange(i, peggedTokenParams_);\\n    }\\n\\n    // ------- Getters Functions -------\\n\\n    /**\\n     * @notice get Collateral Token price\\n     * @return pTCac [PREC]\\n     */\\n    function getPTCac() external view returns (uint256 pTCac) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getPTCac(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get bucket global coverage\\n     * @return cglob [PREC]\\n     */\\n    function getCglb() external view returns (uint256 cglob) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getCglb(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Collateral Token available to redeem\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TC available to redeem. Consider it an approximation.\\n     * @return tcAvailableToRedeem [N]\\n     */\\n    function getTCAvailableToRedeem() external view returns (uint256 tcAvailableToRedeem) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getTCAvailableToRedeem(_getCtargemaCA(), lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get amount of Pegged Token available to mint\\n     * @dev because it is a view function we are not calculating the new ema,\\n     *  since we are using the last ema calculation, this may differ a little from the real amount\\n     *  of TP available to mint. Consider it an approximation.\\n     * @param i_ Pegged Token index\\n     * @return tpAvailableToMint [N]\\n     */\\n    function getTPAvailableToMint(uint256 i_) external view returns (uint256 tpAvailableToMint) {\\n        uint256 pACtp = getPACtp(i_);\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getTPAvailableToMint(_getCtargemaCA(), _getCtargemaTP(i_, pACtp), pACtp, lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice get total Collateral Asset available\\n     * @return totalACavailable [N]\\n     */\\n    function getTotalACavailable() external view returns (uint256 totalACavailable) {\\n        (, uint256 nACgain) = _getLckACandACgain();\\n        return _getTotalACavailable(nACgain);\\n    }\\n\\n    /**\\n     * @notice get Collateral Token leverage\\n     * @return leverageTC [PREC]\\n     */\\n    function getLeverageTC() external view returns (uint256 leverageTC) {\\n        (uint256 lckAC, uint256 nACgain) = _getLckACandACgain();\\n        return _getLeverageTC(lckAC, nACgain);\\n    }\\n\\n    /**\\n     * @notice returns how many Collateral Asset are needed to redeem `qTP_` amount of Pegged Token `i_`\\n     * @param i_ Pegged Token index\\n     * @param qTP_ amount of Pegged Token to redeem\\n     * @return qACtotalToRedeem amount of Collateral Asset needed to redeem, including fees [N]\\n     * @return qACfee amount of Collateral Asset in concept of fees [N]\\n     */\\n    function getQACforRedeemTP(\\n        uint256 i_,\\n        uint256 qTP_\\n    ) external view returns (uint256 qACtotalToRedeem, uint256 qACfee) {\\n        return _calcQACforRedeemTP(i_, qTP_, getPACtp(i_));\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1af5ecc887bae05bf057ca3bdc99a782a8ae0360922790b158f8caf03b0c6b5\"},\"contracts/core/MocEma.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IMocRC20.sol\\\";\\nimport \\\"./MocBaseBucket.sol\\\";\\n\\n/**\\n * @title MocEma: Exponential Moving Average\\n * @notice Moc Ema, provides a set of methods that allows to calculate and track\\n * Exponential Moving Average for each of the pegged Tokens.\\n * @dev More information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n */\\nabstract contract MocEma is MocBaseBucket {\\n    // ------- Events -------\\n    event TPemaUpdated(uint256 indexed i_, uint256 oldTPema_, uint256 newTPema_);\\n\\n    // ------- Structs -------\\n    struct EmaItem {\\n        // exponential moving average\\n        uint256 ema;\\n        // smoothing factor\\n        uint256 sf;\\n    }\\n\\n    // ------- Storage -------\\n    // TP EMA items, indexes are in sync with PeggedTokens across Moc solution\\n    EmaItem[] public tpEma;\\n    // next Ema Calculation Block number\\n    uint256 public nextEmaCalculation;\\n    // amount of blocks to wait for next ema calculation\\n    uint256 public emaCalculationBlockSpan;\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function __MocEma_init_unchained(uint256 emaCalculationBlockSpan_) internal onlyInitializing {\\n        if (emaCalculationBlockSpan_ == 0) revert InvalidValue();\\n        emaCalculationBlockSpan = emaCalculationBlockSpan_;\\n        _updateNextEmaCalculation(emaCalculationBlockSpan_);\\n    }\\n\\n    // ------- Internal Functions -------\\n\\n    /**\\n     * @notice updates next EMA block calculation\\n     * @param emaCalculationBlockSpan_ amount of blocks to wait between Pegged ema calculation\\n     */\\n    function _updateNextEmaCalculation(uint256 emaCalculationBlockSpan_) internal {\\n        unchecked {\\n            nextEmaCalculation = block.number + emaCalculationBlockSpan_;\\n        }\\n    }\\n\\n    /**\\n     * @notice get target coverage adjusted by the moving average of the value of a Pegged Token\\n     * @param i_ Pegged Token index\\n     * @param pACtp_ Pegged Token price [PREC]\\n     * @return ctargemaTP [PREC]\\n     */\\n    function _getCtargemaTP(uint256 i_, uint256 pACtp_) internal view returns (uint256 ctargemaTP) {\\n        uint256 auxTPctarg = tpCtarg[i_];\\n        uint256 auxTpEma = tpEma[i_].ema;\\n        if (auxTpEma >= pACtp_) return auxTPctarg;\\n        // [PREC] = [PREC] * [PREC] / [PREC]\\n        return (auxTPctarg * pACtp_) / auxTpEma;\\n    }\\n\\n    /**\\n     * @notice update exponential moving average of the value of a Pegged Token\\n     * @dev more information of EMA calculation https://en.wikipedia.org/wiki/Exponential_smoothing\\n     * @param i_ Pegged Token index\\n     */\\n    function updateTPema(uint256 i_) internal {\\n        EmaItem memory currentTPema = tpEma[i_];\\n        uint256 pACtp = getPACtp(i_);\\n        // [PREC\\u00b2] = [PREC] * ([PREC] - [PREC])\\n        uint256 term1 = currentTPema.ema * (ONE - currentTPema.sf);\\n        // [PREC\\u00b2] = [PREC] * [PREC]\\n        uint256 term2 = currentTPema.sf * pACtp;\\n        // [PREC] = ([PREC\\u00b2] + [PREC\\u00b2]) / [PREC]\\n        uint256 newEma = (term1 + term2) / PRECISION;\\n        // save new ema value to storage\\n        tpEma[i_].ema = newEma;\\n        emit TPemaUpdated(i_, currentTPema.ema, newEma);\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice get last calculated target coverage adjusted by all Pegged Token's to\\n     *  Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     */\\n    function _getCtargemaCA() internal view returns (uint256 ctargemaCA) {\\n        uint256 num;\\n        uint256 den;\\n        uint256 pegAmount = pegContainer.length;\\n        for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n            uint256 pACtp = getPACtp(i);\\n            (uint256 tpGain, ) = _getPnLTP(i, pACtp);\\n            // [PREC] = [N] * [PREC] * [PREC]  / [PREC]\\n            uint256 qAC = _divPrec((pegContainer[i].nTP + tpGain) * PRECISION, pACtp);\\n            // [PREC]^2 = [PREC] * [PREC]\\n            num += _getCtargemaTP(i, pACtp) * qAC;\\n            // [PREC] = [PREC]\\n            den += qAC;\\n        }\\n        // we must return a default value when all nTP are 0\\n        if (den == 0) {\\n            unchecked {\\n                return protThrld * 2;\\n            }\\n        }\\n        // [PREC] = ([PREC]^2) / [PREC]\\n        ctargemaCA = num / den;\\n    }\\n\\n    // ------- Public Functions -------\\n\\n    /**\\n     * @notice calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average\\n     * @dev qAC = nTP / pACtp\\n     *      ctargemaCA = \\u2211(ctargemaTP * qAC) / \\u2211(qAC)\\n     * @return ctargemaCA [PREC]\\n     */\\n    function calcCtargemaCA() public returns (uint256 ctargemaCA) {\\n        // Make sure EMAs are up to date for all the pegs\\n        updateEmas();\\n        return _getCtargemaCA();\\n    }\\n\\n    /**\\n     * @notice true if the necessary span has pass since last ema update\\n     */\\n    function shouldCalculateEma() public view returns (bool) {\\n        unchecked {\\n            return block.number >= nextEmaCalculation;\\n        }\\n    }\\n\\n    /**\\n     * @notice If time, calculates the EMA for all the Pegged Token prices.\\n     * @dev All price provider prices must be available, fails if not\\n     */\\n    function updateEmas() public {\\n        if (shouldCalculateEma()) {\\n            uint256 pegAmount = pegContainer.length;\\n            for (uint256 i = 0; i < pegAmount; i = unchecked_inc(i)) {\\n                updateTPema(i);\\n            }\\n            _updateNextEmaCalculation(emaCalculationBlockSpan);\\n        }\\n    }\\n\\n    /**\\n     * @param blockSpan_ Defines how many blocks should pass between BMA calculations\\n     **/\\n    function setEmaCalculationBlockSpan(uint256 blockSpan_) external onlyAuthorizedChanger {\\n        emaCalculationBlockSpan = blockSpan_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5794a83218dff66ac912b8e82df6618070dafccaa9f8d24c9794b7af605a95b4\"},\"contracts/core/MocSettlement.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./MocEma.sol\\\";\\n\\n/**\\n * @title MocSettlement\\n * @notice Moc Settlement, groups all functions, state and tracking relative to the settlement execution.\\n */\\nabstract contract MocSettlement is MocEma {\\n    // ------- Events -------\\n    event SettlementExecuted();\\n\\n    // ------- Storage -------\\n    // number of blocks between settlements\\n    uint256 public bes;\\n    // next settlement block\\n    uint256 public bns;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param bes_ number of blocks between settlements\\n     */\\n    function __MocSettlement_init_unchained(uint256 bes_) internal onlyInitializing {\\n        bes = bes_;\\n        bns = block.number + bes_;\\n    }\\n\\n    // ------- Internal abstract Functions -------\\n\\n    function _execSettlement() internal virtual;\\n\\n    // ------- External Functions -------\\n\\n    function execSettlement() external notPaused {\\n        // check if it is in the corresponding block to execute the settlement\\n        if (block.number >= bns) {\\n            bns = block.number + bes;\\n            emit SettlementExecuted();\\n            _execSettlement();\\n        }\\n    }\\n\\n    /**\\n     * @notice get the number of blocks remaining for settlement\\n     */\\n    function getBts() external view returns (uint256) {\\n        if (block.number >= bns) return 0;\\n        return bns - block.number;\\n    }\\n\\n    /**\\n     * @param bes_ number of blocks between settlements\\n     **/\\n    function setBes(uint256 bes_) external onlyAuthorizedChanger {\\n        bes = bes_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6c62f059da5d550970f38716cca9c9bd8ca5980270b9f9679db415ba109caa61\"},\"contracts/governance/Governed.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IGovernor.sol\\\";\\nimport \\\"../utils/MocHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n  @title Governed\\n  @notice Base contract to be inherited by governed contracts\\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behavior\\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\\n  governance aspect of the child contract\\n  */\\nabstract contract Governed is Initializable, MocHelper {\\n    /**\\n    @notice The address of the contract which governs this one\\n   */\\n    IGovernor public governor;\\n\\n    error NotAuthorizedChanger();\\n\\n    /**\\n    @notice Modifier that protects the function\\n    @dev You should use this modifier in any function that should be called through\\n    the governance system\\n   */\\n    modifier onlyAuthorizedChanger() {\\n        checkIfAuthorizedChanger();\\n        _;\\n    }\\n\\n    /**\\n    @notice Initialize the contract with the basic settings\\n    @dev This initialize replaces the constructor but it is not called automatically.\\n    It is necessary because of the upgradeability of the contracts\\n    @param governorAddress_ Governor address\\n   */\\n    function __Governed_init(address governorAddress_) internal onlyInitializing {\\n        __Governed_init_unchained(governorAddress_);\\n    }\\n\\n    function __Governed_init_unchained(address governorAddress_) internal onlyInitializing {\\n        governor = IGovernor(governorAddress_);\\n    }\\n\\n    /**\\n    @notice Change the contract's governor. Should be called through the old governance system\\n    @param newGovernor_ New governor address\\n   */\\n    function changeGovernor(IGovernor newGovernor_) external onlyAuthorizedChanger {\\n        governor = newGovernor_;\\n    }\\n\\n    /**\\n    @notice Checks if the msg sender is an authorized changer, reverts otherwise\\n   */\\n    function checkIfAuthorizedChanger() internal view {\\n        if (!governor.isAuthorizedChanger(msg.sender)) revert NotAuthorizedChanger();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52cc182171742e66950ac189f0b3d9ae6b2c77855842ad6c369350be95e759cc\"},\"contracts/governance/MocUpgradable.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../governance/Stoppable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n// Import to allow compilation and deploy of ERC1967Proxy\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nabstract contract MocUpgradable is UUPSUpgradeable, Stoppable {\\n    // ------- Initializer -------\\n    /**\\n     * @notice contract initializer\\n     * @param governorAddress_ The address that will define when a change contract is authorized\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     */\\n    function __MocUpgradable_init(address governorAddress_, address pauserAddress_) internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n        __Governed_init(governorAddress_);\\n        __Stoppable_init_unchained(pauserAddress_, true);\\n    }\\n\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x421aad78378a417da181d7e153e6a347f53dc3f68732fd942cef9b189d0b46b7\"},\"contracts/governance/Stoppable.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\nimport \\\"./Governed.sol\\\";\\n\\n/**\\n * @title Stoppable\\n * @notice Allow a contract to be paused through the stopper subsystem. This contracts\\n * is able to disable the stoppability feature through governance.\\n * @dev This contract was heavily based on the _Pausable_ contract of openzeppelin-eth but\\n * it was modified in order to being able to turn on and off its stoppability\\n */\\ncontract Stoppable is Governed {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool public stoppable;\\n    bool private _paused;\\n    address public pauser;\\n\\n    // ------- Custom Errors -------\\n    error Unstoppable();\\n    error OnlyWhilePaused();\\n    error NotWhenPaused();\\n    error OnlyPauser();\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is not paused\\n     */\\n    modifier notPaused() {\\n        _checkNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only when the contract is paused\\n     */\\n    modifier onlyPaused() {\\n        if (!_paused) revert OnlyWhilePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the contract with the basic settings\\n     * @dev This initialize replaces the constructor but it is not called automatically.\\n     * It is necessary because of the upgradeability of the contracts. Either this function or the previous can be used\\n     * @param pauserAddress_ The address that is authorized to pause this contract\\n     * @param stoppable_ Define if the contract starts being unstoppable or not\\n     */\\n    function __Stoppable_init_unchained(address pauserAddress_, bool stoppable_) internal onlyInitializing {\\n        stoppable = stoppable_;\\n        pauser = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev reverts with NotWhenPaused when _paused\\n     */\\n    function _checkNotPaused() internal view {\\n        if (_paused) revert NotWhenPaused();\\n    }\\n\\n    /**\\n     * @notice Returns true if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Called by the owner to pause, triggers stopped state\\n     * @dev Should only be called by the pauser and when it is stoppable\\n     */\\n    function pause() external notPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        if (!stoppable) revert Unstoppable();\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPaused {\\n        if (msg.sender != pauser) revert OnlyPauser();\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Switches OFF the stoppability of the contract; if the contract was paused\\n     * it will no longer be so\\n     * @dev Should be called through governance\\n     */\\n    function makeUnstoppable() external onlyAuthorizedChanger {\\n        stoppable = false;\\n    }\\n\\n    /**\\n     * @notice Switches ON the stoppability of the contract; if the contract was paused\\n     * before making it unstoppable it will be paused again after calling this function\\n     * @dev Should be called through governance\\n     */\\n    function makeStoppable() external onlyAuthorizedChanger {\\n        stoppable = true;\\n    }\\n\\n    /**\\n     * @notice Changes the address which is enable to pause this contract\\n     * @param newPauser_ Address of the new pauser\\n     * @dev Should be called through governance\\n     */\\n    function setPauser(address newPauser_) external onlyAuthorizedChanger {\\n        pauser = newPauser_;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1017496c6cb3b1b95e29ebeb9bb33a00a31327890ec687e76b7c0b1565e769aa\"},\"contracts/interfaces/IChangeContract.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\n/**\\n  @title IChangeContract\\n  @notice This interface is the one used by the governance system.\\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\\n  system is fully in place.\\n */\\ninterface IChangeContract {\\n    /**\\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\\n    is executed\\n   */\\n    function execute() external;\\n}\\n\",\"keccak256\":\"0xb895afc679b258c256091b83e9cdc7f45b8097cccd7a0f757dae88d6146a92bc\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\nimport \\\"./IChangeContract.sol\\\";\\n\\n/**\\n  @title IGovernor\\n  @notice Governor interface. This functions should be overwritten to\\n  enable the communication with the rest of the system\\n  @dev This interface **MUST** be compatible with the corresponding Governance instance\\n  used on Production, from https://github.com/money-on-chain/Areopagus-Governance\\n  */\\ninterface IGovernor {\\n    /**\\n    @notice Function to be called to make the changes described in changeContract\\n    @dev This function should be protected somehow to only execute changes that\\n    benefit the system. This decision process is independent of this architecture\\n    therefore is independent of this interface too\\n    @param changeContract_ Address of the contract that will execute the changes\\n   */\\n    function executeChange(IChangeContract changeContract_) external;\\n\\n    /**\\n    @notice Returns whether this `changer_` is authorized to execute changes.\\n    @param changer_ Address of the contract that will execute the changes\\n   */\\n    function isAuthorizedChanger(address changer_) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1cf472464f36e62859cf0e296cb6ec70e36b9c4665ae78ac0cf41b661d468e38\"},\"contracts/interfaces/IMocRC20.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IMocRC20\\n * @notice Base Moc ERC20 Token Interface: burn, mint. It can be both Pegs and Collateral Tokens.\\n */\\ninterface IMocRC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     */\\n    function burn(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev returns true if the `_account` address has full control over this token\\n     * @param _account the address you want to check all roles for\\n     */\\n    function hasFullRoles(address _account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6c867800a8e88c3cb750c7a542200d8373e2551c93356712b1ee168b4819eb2\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\n/**\\n * @title IPriceFeed\\n * @notice Amphiraos-Oracle Interface for peeking the price of a given asset\\n * @dev https://github.com/money-on-chain/Amphiraos-Oracle\\n */\\ninterface IPriceProvider {\\n    /**\\n     * @notice returns the given `price` for the asset if `valid`\\n     * @param price assetPrice\\n     * @param valid true if the price is valid\\n     */\\n    function peek() external view returns (bytes32 price, bool valid);\\n}\\n\",\"keccak256\":\"0x608d34e95c4f1953560527cf57f4d405ebe66d66e6d94c8dcca2ed07465123f9\"},\"contracts/tokens/MocRC20.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IMocRC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../governance/Governed.sol\\\";\\n\\n/**\\n * @title MocRC20\\n * @notice Base Moc ERC20 Token: burn, mint. It can be both Pegs and Collateral Tokens.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocRC20 is IMocRC20, AccessControlEnumerableUpgradeable, ERC20Upgradeable, UUPSUpgradeable, Governed {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * See {__MocRC20_init}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external virtual initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n    }\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` & `BURNER_ROLE` to `admin` address.\\n     *\\n     * See {ERC20_init}.\\n     */\\n    function __MocRC20_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) internal onlyInitializing {\\n        __ERC20_init(name_, symbol_);\\n        __AccessControlEnumerable_init();\\n        __UUPSUpgradeable_init();\\n        __Governed_init(address(governor_));\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _setupRole(MINTER_ROLE, admin_);\\n        _setupRole(BURNER_ROLE, admin_);\\n    }\\n\\n    /* solhint-disable-next-line no-empty-blocks */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyAuthorizedChanger {}\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external virtual onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Burns a specific `amount` of tokens for `to`.\\n     * * See {ERC20-_burn}.\\n     * Requirements:\\n     *\\n     * - the caller must have the `BURNER_ROLE`.\\n     */\\n    function burn(address to, uint256 amount) external virtual onlyRole(BURNER_ROLE) {\\n        _burn(to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IMocRC20\\n     */\\n    function hasFullRoles(address _account) public view virtual override returns (bool) {\\n        return\\n            hasRole(MINTER_ROLE, _account) && hasRole(BURNER_ROLE, _account) && hasRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n}\\n\",\"keccak256\":\"0xb6df0b396fcdfdb9ce7298abeb47504243b578d3dd958bf4154c5eac9a60a519\"},\"contracts/tokens/MocTC.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./MocRC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title MocTC\\n * @notice Base Moc  ERC20 Collateral Tokens: Allows burn, mint and pause.\\n * @dev ERC20 like token that allows roles allowed contracts to mint and burn (destroyed) any token.\\n */\\ncontract MocTC is MocRC20, ERC20PausableUpgradeable {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Grants `PAUSER_ROLE` to `admin` address.\\n     *\\n     * See {MocRC20-constructor}.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin_,\\n        IGovernor governor_\\n    ) external override initializer {\\n        __MocRC20_init(name_, symbol_, admin_, governor_);\\n        __ERC20Pausable_init();\\n        _setupRole(PAUSER_ROLE, admin_);\\n    }\\n\\n    /**\\n     * @dev override only to satisfy compiler\\n     * @inheritdoc ERC20PausableUpgradeable\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        ERC20PausableUpgradeable._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses the contract.\\n     * See {ERC20PausableUpgradeable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() external virtual onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IMocRC20\\n     */\\n    function hasFullRoles(address _account) public view override returns (bool) {\\n        return hasRole(PAUSER_ROLE, _account) && MocRC20.hasFullRoles(_account);\\n    }\\n}\\n\",\"keccak256\":\"0xd90360df2322c3baa6fa9b30955415b12083a4c5f72f90b3ee6473434051bfc9\"},\"contracts/utils/MocHelper.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nabstract contract MocHelper {\\n    error InvalidAddress();\\n    error InvalidValue();\\n    uint256 internal constant PRECISION = 10 ** 18;\\n    uint256 internal constant ONE = 10 ** 18;\\n    uint256 internal constant UINT256_MAX = ~uint256(0);\\n\\n    // Saves gas\\n    // https://github.com/KadenZipfel/gas-optimizations/blob/main/gas-saving-patterns/unchecked-arithmetic.md\\n    function unchecked_inc(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice add precision and div two number\\n     * @param a_ numerator\\n     * @param b_ denominator\\n     * @return `a_` * PRECISION / `b_`\\n     */\\n    function _divPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * PRECISION) / b_;\\n    }\\n\\n    /**\\n     * @notice multiply two number and remove precision\\n     * @param a_ term 1\\n     * @param b_ term 2\\n     * @return `a_` * `b_` / PRECISION\\n     */\\n    function _mulPrec(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return (a_ * b_) / PRECISION;\\n    }\\n\\n    /**\\n     * @notice reverts if value if less than PRECISION ONE\\n     * @param value_ value to check [PREC]\\n     */\\n    function _checkLessThanOne(uint256 value_) internal pure {\\n        if (value_ > ONE) revert InvalidValue();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2bcb469d2faa314b22f54dc6ea7b84782ad439c0e53d713277f49e62297c1736\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 956,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1271,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18090,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16410,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "governor",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IGovernor)17140"
      },
      {
        "astId": 16481,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16545,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "stoppable",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 16547,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "_paused",
        "offset": 1,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 16549,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "pauser",
        "offset": 2,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 16708,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16528,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9635,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "nACcb",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 9637,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "nACioucb",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 9640,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tcToken",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(MocTC)17997"
      },
      {
        "astId": 9642,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "nTCcb",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 9646,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpTokens",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_contract(IMocRC20)17171)dyn_storage"
      },
      {
        "astId": 9651,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "peggedTokenIndex",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_address,t_struct(PeggedTokenIndex)9602_storage)"
      },
      {
        "astId": 9655,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "pegContainer",
        "offset": 0,
        "slot": "309",
        "type": "t_array(t_struct(PegContainerItem)9597_storage)dyn_storage"
      },
      {
        "astId": 9658,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpLiqPrices",
        "offset": 0,
        "slot": "310",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9660,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "successFee",
        "offset": 0,
        "slot": "311",
        "type": "t_uint256"
      },
      {
        "astId": 9662,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "appreciationFactor",
        "offset": 0,
        "slot": "312",
        "type": "t_uint256"
      },
      {
        "astId": 9664,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "feeRetainer",
        "offset": 0,
        "slot": "313",
        "type": "t_uint256"
      },
      {
        "astId": 9666,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tcMintFee",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 9668,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tcRedeemFee",
        "offset": 0,
        "slot": "315",
        "type": "t_uint256"
      },
      {
        "astId": 9670,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "swapTPforTPFee",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 9672,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "swapTPforTCFee",
        "offset": 0,
        "slot": "317",
        "type": "t_uint256"
      },
      {
        "astId": 9674,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "swapTCforTPFee",
        "offset": 0,
        "slot": "318",
        "type": "t_uint256"
      },
      {
        "astId": 9676,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "redeemTCandTPFee",
        "offset": 0,
        "slot": "319",
        "type": "t_uint256"
      },
      {
        "astId": 9678,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "mintTCandTPFee",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 9681,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpMintFee",
        "offset": 0,
        "slot": "321",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9684,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpRedeemFee",
        "offset": 0,
        "slot": "322",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9686,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "mocFeeFlowAddress",
        "offset": 0,
        "slot": "323",
        "type": "t_address"
      },
      {
        "astId": 9688,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "mocAppreciationBeneficiaryAddress",
        "offset": 0,
        "slot": "324",
        "type": "t_address"
      },
      {
        "astId": 9691,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpCtarg",
        "offset": 0,
        "slot": "325",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9693,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "protThrld",
        "offset": 0,
        "slot": "326",
        "type": "t_uint256"
      },
      {
        "astId": 9695,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "liqThrld",
        "offset": 0,
        "slot": "327",
        "type": "t_uint256"
      },
      {
        "astId": 9697,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "liqEnabled",
        "offset": 0,
        "slot": "328",
        "type": "t_bool"
      },
      {
        "astId": 9699,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "liquidated",
        "offset": 1,
        "slot": "328",
        "type": "t_bool"
      },
      {
        "astId": 9702,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpiou",
        "offset": 0,
        "slot": "329",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 9705,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "pACtpLstop",
        "offset": 0,
        "slot": "330",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10868,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "331",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13524,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "tpEma",
        "offset": 0,
        "slot": "381",
        "type": "t_array(t_struct(EmaItem)13520_storage)dyn_storage"
      },
      {
        "astId": 13526,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "nextEmaCalculation",
        "offset": 0,
        "slot": "382",
        "type": "t_uint256"
      },
      {
        "astId": 13528,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "emaCalculationBlockSpan",
        "offset": 0,
        "slot": "383",
        "type": "t_uint256"
      },
      {
        "astId": 13836,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "384",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13847,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "bes",
        "offset": 0,
        "slot": "434",
        "type": "t_uint256"
      },
      {
        "astId": 13849,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "bns",
        "offset": 0,
        "slot": "435",
        "type": "t_uint256"
      },
      {
        "astId": 13942,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "436",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13499,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "486",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9116,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "acToken",
        "offset": 0,
        "slot": "536",
        "type": "t_contract(IERC20)5864"
      },
      {
        "astId": 9561,
        "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
        "label": "__gap",
        "offset": 0,
        "slot": "537",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IMocRC20)17171)dyn_storage": {
        "base": "t_contract(IMocRC20)17171",
        "encoding": "dynamic_array",
        "label": "contract IMocRC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmaItem)13520_storage)dyn_storage": {
        "base": "t_struct(EmaItem)13520_storage",
        "encoding": "dynamic_array",
        "label": "struct MocEma.EmaItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PegContainerItem)9597_storage)dyn_storage": {
        "base": "t_struct(PegContainerItem)9597_storage",
        "encoding": "dynamic_array",
        "label": "struct MocBaseBucket.PegContainerItem[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)5864": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernor)17140": {
        "encoding": "inplace",
        "label": "contract IGovernor",
        "numberOfBytes": "20"
      },
      "t_contract(IMocRC20)17171": {
        "encoding": "inplace",
        "label": "contract IMocRC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)17183": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_contract(MocTC)17997": {
        "encoding": "inplace",
        "label": "contract MocTC",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(PeggedTokenIndex)9602_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MocBaseBucket.PeggedTokenIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(PeggedTokenIndex)9602_storage"
      },
      "t_struct(EmaItem)13520_storage": {
        "encoding": "inplace",
        "label": "struct MocEma.EmaItem",
        "members": [
          {
            "astId": 13517,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "ema",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13519,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "sf",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PegContainerItem)9597_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PegContainerItem",
        "members": [
          {
            "astId": 9593,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "nTP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9596,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "priceProvider",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPriceProvider)17183"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PeggedTokenIndex)9602_storage": {
        "encoding": "inplace",
        "label": "struct MocBaseBucket.PeggedTokenIndex",
        "members": [
          {
            "astId": 9599,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9601,
            "contract": "contracts/collateral/rc20/MocCARC20.sol:MocCARC20",
            "label": "exists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "add a Pegged Token to the protocol"
      },
      "calcCtargemaCA()": {
        "notice": "calculates target coverage adjusted by all Pegged Token's to Collateral Asset rate moving average"
      },
      "changeGovernor(address)": {
        "notice": "Change the contract's governor. Should be called through the old governance system"
      },
      "editPeggedToken((address,address,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "modifies a Pegged Token of the protocol"
      },
      "evalLiquidation()": {
        "notice": "evaluates if liquidation threshold has been reached and liq is Enabled. If so forces contracts liquidation, blocking all mint & redeem operations. May emit a {ContractLiquidated} event."
      },
      "getBts()": {
        "notice": "get the number of blocks remaining for settlement"
      },
      "getCglb()": {
        "notice": "get bucket global coverage"
      },
      "getLeverageTC()": {
        "notice": "get Collateral Token leverage"
      },
      "getPACtp(uint256)": {
        "notice": "get how many Pegged Token equal 1 Collateral Asset"
      },
      "getPTCac()": {
        "notice": "get Collateral Token price"
      },
      "getQACforRedeemTP(uint256,uint256)": {
        "notice": "returns how many Collateral Asset are needed to redeem `qTP_` amount of Pegged Token `i_`"
      },
      "getTCAvailableToRedeem()": {
        "notice": "get amount of Collateral Token available to redeem"
      },
      "getTPAvailableToMint(uint256)": {
        "notice": "get amount of Pegged Token available to mint"
      },
      "getTotalACavailable()": {
        "notice": "get total Collateral Asset available"
      },
      "governor()": {
        "notice": "The address of the contract which governs this one"
      },
      "initialize((((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address,address,uint256,uint256),address))": {
        "notice": "contract initializer"
      },
      "isLiquidationReached()": {
        "notice": "If liquidation is enabled, verifies if forced liquidation has been reached, checking if globalCoverage <= liquidation"
      },
      "liqRedeemTP(uint256)": {
        "notice": "Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price."
      },
      "liqRedeemTPto(uint256,address)": {
        "notice": "Allow redeem on liquidation state, user Peg balance gets burned and he receives the equivalent AC given the liquidation frozen price."
      },
      "makeStoppable()": {
        "notice": "Switches ON the stoppability of the contract; if the contract was paused before making it unstoppable it will be paused again after calling this function"
      },
      "makeUnstoppable()": {
        "notice": "Switches OFF the stoppability of the contract; if the contract was paused it will no longer be so"
      },
      "mintTC(uint256,uint256)": {
        "notice": "caller sends Collateral Asset and receives Collateral Token Requires prior sender approval of Collateral Asset to this contract "
      },
      "mintTCandTP(uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Asset and receives Collateral Token and Pegged Token  Requires prior sender approval of Collateral Asset to this contract  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCandTPto(uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Asset and recipient receives Collateral Token and Pegged Token  Requires prior sender approval of Collateral Asset to this contract  This operation is done without checking coverage  Collateral Token and Pegged Token are minted in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qAC sent are insufficient."
      },
      "mintTCto(uint256,uint256,address)": {
        "notice": "caller sends Collateral Asset and recipient receives Collateral Token Requires prior sender approval of Collateral Asset to this contract "
      },
      "mintTP(uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Asset and receives Pegged Token Requires prior sender approval of Collateral Asset to this contract "
      },
      "mintTPto(uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Asset and recipient receives Pegged Token Requires prior sender approval of Collateral Asset to this contract "
      },
      "pause()": {
        "notice": "Called by the owner to pause, triggers stopped state"
      },
      "paused()": {
        "notice": "Returns true if paused"
      },
      "redeemTC(uint256,uint256)": {
        "notice": "caller sends Collateral Token and receives Collateral Asset"
      },
      "redeemTCandTP(uint256,uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Token and Pegged Token and receives coinbase as Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCandTPto(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and Pegged Token and recipient receives Collateral Asset  This operation is done without checking coverage  Collateral Token and Pegged Token are redeemed in equivalent proportions so that its price  and global coverage are not modified.  Reverts if qTP sent are insufficient."
      },
      "redeemTCto(uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and recipient receives Collateral Asset"
      },
      "redeemTP(uint256,uint256,uint256)": {
        "notice": "caller sends Pegged Token and receives Collateral Asset"
      },
      "redeemTPto(uint256,uint256,uint256,address)": {
        "notice": "caller sends Pegged Token and recipient receives Collateral Asset"
      },
      "refreshACBalance()": {
        "notice": "Refreshes the AC holdings for the Bucket"
      },
      "setPauser(address)": {
        "notice": "Changes the address which is enable to pause this contract"
      },
      "shouldCalculateEma()": {
        "notice": "true if the necessary span has pass since last ema update"
      },
      "swapTCforTP(uint256,uint256,uint256,uint256)": {
        "notice": "caller sends Collateral Token and receives Pegged Token"
      },
      "swapTCforTPto(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends Collateral Token and recipient receives Pegged Token"
      },
      "swapTPforTC(uint256,uint256,uint256,uint256)": {
        "notice": "caller sends a Pegged Token and receives Collateral Token"
      },
      "swapTPforTCto(uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and recipient receives Collateral Token"
      },
      "swapTPforTP(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "caller sends a Pegged Token and receives another one"
      },
      "swapTPforTPto(uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "caller sends a Pegged Token and recipient receives another one"
      },
      "unpause()": {
        "notice": "Called by the owner to unpause, returns to normal state"
      },
      "updateEmas()": {
        "notice": "If time, calculates the EMA for all the Pegged Token prices."
      }
    },
    "notice": "Moc protocol implementation using a RC20 as Collateral Asset.",
    "version": 1
  }
}
